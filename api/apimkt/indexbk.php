<?php
/**
* Index de la api 'apipv'
*
*
* @package ninguno
* @author Daniel Tamayo <it@virtualsoft.tech>
* @version ninguna
* @access public
* @see no
*
*/
use Backend\dto\ApiTransaction;
use Backend\dto\Area;
use Backend\dto\Bono;
use Backend\dto\BonoDetalle;
use Backend\dto\BonoInterno;
use Backend\dto\BonoLog;
use Backend\dto\Cargo;
use Backend\dto\Categoria;
use Backend\dto\CategoriaProducto;
use Backend\dto\CentroCosto;
use Backend\dto\Clasificador;
use Backend\dto\CodigoPromocional;
use Backend\dto\Competencia;
use Backend\dto\CompetenciaPuntos;
use Backend\dto\Concepto;
use Backend\dto\Concesionario;
use Backend\dto\Consecutivo;
use Backend\dto\ContactoComercial;
use Backend\dto\ContactoComercialLog;
use Backend\dto\CuentaCobro;
use Backend\dto\CuentaContable;
use Backend\dto\CupoLog;
use Backend\dto\Descarga;
use Backend\dto\DocumentoUsuario;
use Backend\dto\Egreso;
use Backend\dto\Empleado;
use Backend\dto\FlujoCaja;
use Backend\dto\Flujocajafact;
use Backend\dto\Ingreso;
use Backend\dto\IntApuesta;
use Backend\dto\IntApuestaDetalle;
use Backend\dto\IntCompetencia;
use Backend\dto\IntDeporte;
use Backend\dto\IntEquipo;
use Backend\dto\IntEvento;
use Backend\dto\IntEventoApuesta;
use Backend\dto\IntEventoApuestaDetalle;
use Backend\dto\IntEventoDetalle;
use Backend\dto\IntRegion;
use Backend\dto\ItTicketEnc;
use Backend\dto\LenguajeMandante;
use Backend\dto\Mandante;
use Backend\dto\MandanteDetalle;
use Backend\dto\Pais;
use Backend\dto\PaisMandante;
use Backend\dto\Perfil;
use Backend\dto\PerfilSubmenu;
use Backend\dto\ProdMandanteTipo;
use Backend\dto\Producto;
use Backend\dto\ProductoComision;
use Backend\dto\ProductoInterno;
use Backend\dto\ProductoTercero;
use Backend\dto\ProductoterceroUsuario;
use Backend\dto\PromocionalLog;
use Backend\dto\Proveedor;
use Backend\dto\ProveedorMandante;
use Backend\dto\ProveedorTercero;
use Backend\dto\PuntoVenta;
use Backend\dto\ProductoMandante;
use Backend\dto\Registro;
use Backend\dto\SaldoUsuonlineAjuste;
use Backend\dto\Submenu;
use Backend\dto\TransaccionApi;
use Backend\dto\TransaccionApiMandante;
use Backend\dto\TransaccionJuego;
use Backend\dto\TransaccionProducto;
use Backend\dto\TransaccionSportsbook;
use Backend\dto\TransjuegoLog;
use Backend\dto\TransprodLog;
use Backend\dto\Usuario;
use Backend\dto\UsuarioAlerta;
use Backend\dto\UsuarioBanco;
use Backend\dto\UsuarioBloqueado;
use Backend\dto\UsuarioBono;
use Backend\dto\UsuarioCierrecaja;
use Backend\dto\UsuarioComision;
use Backend\dto\UsuarioConfig;
use Backend\dto\UsuarioConfiguracion;
use Backend\dto\UsuarioHistorial;
use Backend\dto\UsuarioLog;
use Backend\dto\UsuarioMandante;
use Backend\dto\UsuarioMensaje;
use Backend\dto\UsuarioNotas;
use Backend\dto\UsuarioPerfil;
use Backend\dto\UsuarioPremiomax;
use Backend\dto\UsuarioPublicidad;
use Backend\dto\UsuarioRecarga;
use Backend\dto\UsuarioRecargaResumen;
use Backend\dto\UsuarioRetiroResumen;
use Backend\dto\UsuarioSaldo;
use Backend\dto\UsuarioToken;
use Backend\dto\UsuarioTokenInterno;
use Backend\dto\UsucomisionResumen;
use Backend\dto\UsumarketingResumen;
use Backend\imports\Google\GoogleAuthenticator;
use Backend\integrations\mensajeria\Okroute;
use Backend\integrations\payout\LPGSERVICES;
use Backend\mysql\AreaMySqlDAO;
use Backend\mysql\BonoDetalleMySqlDAO;
use Backend\mysql\BonoInternoMySqlDAO;
use Backend\mysql\BonoLogMySqlDAO;
use Backend\mysql\CargoMySqlDAO;
use Backend\mysql\CategoriaMySqlDAO;
use Backend\mysql\CategoriaProductoMySqlDAO;
use Backend\mysql\CentroCostoMySqlDAO;
use Backend\mysql\ClasificadorMySqlDAO;
use Backend\mysql\CodigoPromocionalMySqlDAO;
use Backend\mysql\CompetenciaPuntosMySqlDAO;
use Backend\mysql\ConceptoMySqlDAO;
use Backend\mysql\ConcesionarioMySqlDAO;
use Backend\mysql\ConsecutivoMySqlDAO;
use Backend\mysql\ContactoComercialLogMySqlDAO;
use Backend\mysql\ContactoComercialMySqlDAO;
use Backend\mysql\CuentaCobroMySqlDAO;
use Backend\mysql\CuentaContableMySqlDAO;
use Backend\mysql\CupoLogMySqlDAO;
use Backend\mysql\DocumentoUsuarioMySqlDAO;
use Backend\mysql\EgresoMySqlDAO;
use Backend\mysql\EmpleadoMySqlDAO;
use Backend\mysql\FlujoCajaMySqlDAO;
use Backend\mysql\IngresoMySqlDAO;
use Backend\mysql\IntApuestaDetalleMySqlDAO;
use Backend\mysql\IntApuestaMySqlDAO;
use Backend\mysql\IntCompetenciaMySqlDAO;
use Backend\mysql\IntDeporteMySqlDAO;
use Backend\mysql\IntEventoApuestaDetalleMySqlDAO;
use Backend\mysql\IntEventoApuestaMySqlDAO;
use Backend\mysql\IntEventoDetalleMySqlDAO;
use Backend\mysql\IntEventoMySqlDAO;
use Backend\mysql\IntRegionMySqlDAO;
use Backend\mysql\LenguajeMandanteMySqlDAO;
use Backend\mysql\MandanteDetalleMySqlDAO;
use Backend\mysql\MandanteMySqlDAO;
use Backend\mysql\PerfilSubmenuMySqlDAO;
use Backend\mysql\ProdMandanteTipoMySqlDAO;
use Backend\mysql\ProductoComisionMySqlDAO;
use Backend\mysql\ProductoTerceroMySqlDAO;
use Backend\mysql\ProductoterceroUsuarioMySqlDAO;
use Backend\mysql\ProveedorMandanteMySqlDAO;
use Backend\mysql\ProveedorMySqlDAO;
use Backend\mysql\ProveedorTerceroMySqlDAO;
use Backend\mysql\PuntoVentaMySqlDAO;
use Backend\mysql\RegistroMySqlDAO;
use Backend\mysql\SaldoUsuonlineAjusteMySqlDAO;
use Backend\mysql\TransaccionJuegoMySqlDAO;
use Backend\mysql\TransaccionProductoMySqlDAO;
use Backend\mysql\TransprodLogMySqlDAO;
use Backend\mysql\UsuarioAlertaMySqlDAO;
use Backend\mysql\UsuarioBancoMySqlDAO;
use Backend\mysql\UsuarioBloqueadoMySqlDAO;
use Backend\mysql\UsuarioBonoMySqlDAO;
use Backend\mysql\UsuarioCierrecajaMySqlDAO;
use Backend\mysql\UsuarioConfigMySqlDAO;
use Backend\mysql\UsuarioConfiguracionMySqlDAO;
use Backend\mysql\UsuarioHistorialMySqlDAO;
use Backend\mysql\UsuarioLogMySqlDAO;
use Backend\mysql\UsuarioMandanteMySqlDAO;
use Backend\mysql\UsuarioMensajeMySqlDAO;
use Backend\mysql\ProductoMySqlDAO;
use Backend\mysql\ProductoMandanteMySqlDAO;
use Backend\mysql\UsuarioMySqlDAO;
use Backend\mysql\UsuarioNotasMySqlDAO;
use Backend\mysql\UsuarioPerfilMySqlDAO;
use Backend\mysql\UsuarioPremiomaxMySqlDAO;
use Backend\mysql\UsuarioPublicidadMySqlDAO;
use Backend\mysql\UsuarioRecargaMySqlDAO;
use Backend\mysql\UsuarioTokenInternoMySqlDAO;
use Backend\mysql\UsuarioTokenMySqlDAO;
use Backend\mysql\UsucomisionResumenMySqlDAO;
use Backend\websocket\WebsocketUsuario;

include "includes.php";

header('Access-Control-Allow-Credentials: true');
header('Access-Control-Allow-Headers: Access-Control-Allow-Origin, Access-Control-Allow-Headers, Access-Control-Allow-Credentials,Authentication, Origin, X-Requested-With, Content-Type,x-token');
header('Access-Control-Expose-Headers: Authentication');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS,PUT');
header('Content-Type: application/json');
ini_set('memory_limit', '-1');
header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);

$timezone = $_SESSION["timezone"];
$timezone = -5 - ($timezone);
$timezone = 0;


$URI = $_SERVER["REQUEST_URI"];
$URL_ITAINMENT = 'https://dataexport-altenar.biahosted.com';

$currencies_valor = array();


$params = file_get_contents('php://input');
$params = json_decode($params);
$response = array();

$ENCRYPTION_KEY = "D!@#$%^&*";

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit();
}

$arraySuper = explode("/", current(explode("?", $URI)));


try {

    switch ($arraySuper[oldCount($arraySuper) - 2] . "/" . $arraySuper[oldCount($arraySuper) - 1])
    {


        /**
        * Account/Login
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Account/Login':

            $SkeepRows = 0;
            $MaxRows = 100000;

            $usuario = $params->Username;
            $clave = $params->Password;

            $dirIP = str_replace(' ', '', explode(",", get_client_ip())[0]);

            $seguir = true;

            if ($clave == "" || $usuario == "") {
                $usuario = $params->username;
                $clave = $params->password;

                if ($clave == "" || $usuario == "") {

                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                    $response["ModelErrors"] = [];
                    $seguir = false;

                }
            }


            if ($seguir) {
                $Usuario = new Usuario();


                $responseU = $Usuario->login($usuario, $clave);

                /*
            $UsuarioToken = new UsuarioToken("", $responseU->user_id);

            $UsuarioToken->setRequestId($json->session->sid);
            $UsuarioToken->setCookie(encrypt($responseU->user_id . "#" . time()));

            $UsuarioTokenMySqlDAO = new \Backend\mysql\UsuarioTokenMySqlDAO();
            $UsuarioTokenMySqlDAO->update($UsuarioToken);
            $UsuarioTokenMySqlDAO->getTransaction()->commit();
             */
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["ReqTokenGoogle"] = false;

                /*
            "ViewClients","ViewMenuDashBoard","ManageClients","ViewPaymentReport","ViewDepositWithdrawalReport","ViewBalance","ViewSalesReport","ViewClientTurnoverReport","ViewMenuReport",
             */
                $UsuarioPerfil = new UsuarioPerfil($_SESSION["usuario"]);

                $_SESSION["PaisCond"] = $UsuarioPerfil->pais;
                $_SESSION["Global"] = $UsuarioPerfil->global;
                $_SESSION["GlobalConfig"] = $UsuarioPerfil->global;
                $_SESSION["monedaReporte"] = $Usuario->monedaReporte;
                $_SESSION['mandante'] = $UsuarioPerfil->mandante;

                if ($_SESSION["Global"] == "S") {
                    if ($UsuarioPerfil->globalMandante != "-1") {
                        $_SESSION["Global"] = "N";
                        $_SESSION['mandante'] = $UsuarioPerfil->globalMandante;
                    }
                }


                if ($Usuario->restriccionIp == "A" && $dirIP != $Usuario->usuarioIp) {
                    $_SESSION = array();
                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = "No puedes acceder desde esta IP.";
                } elseif ($Usuario->tokenGoogle == "A") {
                    $_SESSION = array();
                    $response["ReqTokenGoogle"] = true;
                } elseif ($UsuarioPerfil->perfilId == "USUARIO") {
                    $_SESSION = array();
                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = "No existe el usuario.";

                } else {
                    header('Authentication: ' . $responseU->auth_token);

                    $ReportCountry = $Usuario->paisId;
                    if ($_SESSION["win_perfil2"] == "ADMIN" || $_SESSION["win_perfil2"] == "ADMIN2" || $_SESSION["win_perfil2"] == "OPERADOR" || $_SESSION["win_perfil2"] == "SA") {
                        if ($_SESSION['PaisCond'] != "S") {
                            $ReportCountry = '0';
                        }
                    }


                    $SaldoRecargas = 0;
                    $SaldoJuego = 0;
                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2" || $_SESSION["win_perfil2"] == "PUNTOVENTA") {
                        $PuntoVenta = new PuntoVenta("", $_SESSION["usuario"]);

                        $SaldoRecargas = $PuntoVenta->getCupoRecarga();
                        $SaldoJuego = $PuntoVenta->getCreditosBase();
                    }

                    $response["Data"] = array(
                        "AuthenticationStatus" => 0,
                        "SaldoRecargas" => $SaldoRecargas,
                        "SaldoJuego" => $SaldoJuego,
                        "PermissionList" => array(
                            "ViewMenuSecurity", "ViewMenuTeacher", "AdminUser", "Contingencia", "Menu", "Perfil", "PerfilOpciones", "Submenu", "UsuarioPerfil", "Clasificador", "Concesionario", "ViewAddHocReport", "ViewMenuManagement", "ActivarRegistros", "AjustarSaldo", "AsignacionCupo", "Bonos", "CuentaCobroEliminar", "GestionRed", "RegistroRapido", "ChequeReimpresion", "RecargaReversion", "GestionContacto", "ViewMenuCash", "FlujoCaja", "PagoPremio", "PagoNotaRetiro", "RecargarCredito", "ViewMenuQueries", "FlujoCajaHistorico", "FlujoCajaResumido", "InformeCasino", "InformeGerencial", "ListadoRecargasRetiros", "PremiosPendientesPagar", "ConsultaOnlineDetalle", "ConsultaOnlineResumen",

                        ),
                        "Settings" => array(
                            "Language" => strtolower($Usuario->idioma),
                            "ReportCurrency" => $Usuario->monedaReporte,
                            "ReportCountry" => $ReportCountry,
                            "TimeZone" => $Usuario->timezone,

                        )
                    );

                    $response["Sess"] = session_id();
                    $menus_string = obtenerMenu();
                    $paisesparamenu = obtenerPaisesReport();


                    $Proveedor = new Proveedor();
                    $Proveedor->setTipo("CASINO");

                    $proveedores = $Proveedor->getProveedores();

                    $finalProveedores = [];
                    $array = [];
                    $array["id"] = '0';
                    $array["value"] = 'Todos';
                    array_push($finalProveedores, $array);

                    foreach ($proveedores as $key => $value) {

                        $array = [];

                        $array["id"] = $value->getProveedorId();
                        $array["value"] = $value->getDescripcion();

                        array_push($finalProveedores, $array);

                    }


                    $Proveedor = new Proveedor();
                    $Proveedor->setTipo("LIVECASINO");

                    $proveedores = $Proveedor->getProveedores();

                    foreach ($proveedores as $key => $value) {

                        $array = [];

                        $array["id"] = $value->getProveedorId();
                        $array["value"] = $value->getDescripcion();

                        array_push($finalProveedores, $array);

                    }

                    $ProductoMandante = new ProductoMandante();

                    $rules = [];
                    array_push($rules, array("field" => "proveedor.tipo", "data" => "CASINO ", "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);

                    if ($_SESSION["GlobalConfig"] == "S") {
                        $Producto = new Producto();

                        $productos = $Producto->getProductosCustom(" producto.* ", "producto.producto_id", "asc", $SkeepRows, $MaxRows, $json, true);
                        $productos = json_decode($productos);
                    } else {
                        $productos = $ProductoMandante->getProductosMandanteCustom(" producto_mandante.*,mandante.*,producto.* ", "producto_mandante.prodmandante_id", "asc", $SkeepRows, $MaxRows, $json, true);
                        $productos = json_decode($productos);

                    }


                    $finalProductos = [];

                    foreach ($productos->data as $key => $value) {

                        $array = [];
                        if ($_SESSION["GlobalConfig"] == "S") {
                            $array["id"] = $value->{"producto.producto_id"};
                            $array["value"] = $value->{"producto.descripcion"};

                        } else {
                            $array["id"] = $value->{"producto_mandante.prodmandante_id"};
                            $array["value"] = $value->{"producto.descripcion"};

                        }
                        array_push($finalProductos, $array);

                    }


                    $rules = [];

                    if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                        $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                        array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                        array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    }

                    if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                        $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                        array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                        array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    }


                    if ($_SESSION["win_perfil"] == "PUNTOVENTA") {
                        $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                        array_push($rules, array("field" => "concesionario.usuhijo_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                        array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    }

                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));


                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }
                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $jsonbetshop = json_encode($filtro);


                    $PuntoVenta = new PuntoVenta();


                    $mandantes = $PuntoVenta->getPuntoVentasCustom("usuario.estado_valida,usuario.fecha_crea,usuario.moneda,usuario.fecha_ult,punto_venta.*", "punto_venta.puntoventa_id", "asc", 0, 100000, $jsonbetshop, true);

                    $mandantes = json_decode($mandantes);

                    $finalBetShops = [];

                    foreach ($mandantes->data as $key => $value) {

                        $array = [];

                        $array["id"] = $value->{"punto_venta.usuario_id"};
                        $array["value"] = $value->{"punto_venta.descripcion"};

                        array_push($finalBetShops, $array);

                    }


                    $ReportCountry = $Usuario->paisId;
                    if ($_SESSION["win_perfil2"] == "ADMIN" || $_SESSION["win_perfil2"] == "ADMIN2" || $_SESSION["win_perfil2"] == "OPERADOR" || $_SESSION["win_perfil2"] == "SA") {
                        if ($_SESSION['PaisCond'] != "S") {
                            $ReportCountry = '0';
                        }
                    }

                    $SaldoRecargas = 0;
                    $SaldoJuego = 0;
                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2" || $_SESSION["win_perfil2"] == "PUNTOVENTA") {
                        $PuntoVenta = new PuntoVenta("", $_SESSION["usuario"]);

                        $SaldoRecargas = $PuntoVenta->getCupoRecarga();
                        $SaldoJuego = $PuntoVenta->getCreditosBase();
                    }

                    $finalMandante = [];

                    if ($_SESSION["GlobalConfig"] == "S") {

                        $array = [];
                        $array["id"] = "-1";
                        $array["value"] = "Virtualsoft";

                        $array["Countries"] = array(
                            array(
                                "id" => "2",
                                "value" => "Nicaragua"
                            ),
                            array(
                                "id" => "173",
                                "value" => "Perú"
                            )
                        );

                        array_push($finalMandante, $array);

                        $Mandante = new Mandante();

                        $rules = [];
                        // array_push($rules, array("field" => "proveedor.tipo", "data" => "CASINO ", "op" => "eq"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $json = json_encode($filtro);

                        $mandantes = $Mandante->getMandantes("mandante.mandante", "asc", 0, 100, $json, true);
                        $mandantes = json_decode($mandantes);


                        foreach ($mandantes->data as $key => $value) {

                            $array = [];
                            $array["id"] = $value->{"mandante.mandante"};
                            $array["value"] = $value->{"mandante.descripcion"};
                            $array["Countries"] = array(
                                array(
                                    "id" => "2",
                                    "value" => "Nicaragua"
                                ),
                                array(
                                    "id" => "173",
                                    "value" => "Perú"
                                )
                            );
                            array_push($finalMandante, $array);

                        }
                    } else {
                        $array = [];

                        $array["id"] = $_SESSION["mandante"];
                        $array["value"] = $_SESSION["mandante"];
                        $array["Countries"] = array(
                            array(
                                "id" => "2",
                                "value" => "Nicaragua"
                            ),
                            array(
                                "id" => "173",
                                "value" => "Perú"
                            )
                        );
                        array_push($finalMandante, $array);

                    }

                    $response["Data"] = array(
                        "Countries" => $paisesparamenu,
                        "BetShops" => $finalBetShops,

                        "PermissionList" => $menus_string,
                        "ProvidersCasino" => $finalProveedores,
                        "SaldoRecargas" => $SaldoRecargas,
                        "SaldoJuego" => $SaldoJuego,

                        "Partners" => $finalMandante,
                        "GamesCasino" => $finalProductos,
                        "PartnerSelected" => $_SESSION["mandante"],
                        "Settings" => array(
                            "Language" => strtolower($Usuario->idioma),
                            "ReportCurrency" => $Usuario->monedaReporte,
                            "ReportCountry" => $ReportCountry,
                            "TimeZone" => $Usuario->timezone,

                        )
                    );
                }


            }

            break;

        /**
        * Account/Logout
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Account/Logout':

            $_SESSION = array();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];
            $seguir = false;

            break;


        /**
        * Client/GetTokenBetting
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Client/GetTokenBetting':

            $Usuario = new Usuario($_SESSION["usuario"]);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];
            $response["data"] = $Usuario->tokenItainment;


            break;

        /**
        * Account/LoginGoogle
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Account/LoginGoogle':
            $SkeepRows = 0;
            $MaxRows = 100000;

            $usuario = $params->Username;
            $clave = $params->Password;
            $Code = $params->Code;


            $seguir = true;

            if ($clave == "" || $usuario == "") {
                $usuario = $params->username;
                $clave = $params->password;

                if ($clave == "" || $usuario == "") {

                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                    $response["ModelErrors"] = [];
                    $seguir = false;

                }
            }


            if ($seguir) {
                $Usuario = new Usuario();


                $responseU = $Usuario->login($usuario, $clave);

                /*
            $UsuarioToken = new UsuarioToken("", $responseU->user_id);

            $UsuarioToken->setRequestId($json->session->sid);
            $UsuarioToken->setCookie(encrypt($responseU->user_id . "#" . time()));

            $UsuarioTokenMySqlDAO = new \Backend\mysql\UsuarioTokenMySqlDAO();
            $UsuarioTokenMySqlDAO->update($UsuarioToken);
            $UsuarioTokenMySqlDAO->getTransaction()->commit();
             */
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["ReqTokenGoogle"] = false;

                /*
            "ViewClients","ViewMenuDashBoard","ManageClients","ViewPaymentReport","ViewDepositWithdrawalReport","ViewBalance","ViewSalesReport","ViewClientTurnoverReport","ViewMenuReport",
             */

                $seguridadGoogle = true;
                if ($Usuario->tokenGoogle == "A") {

                    $Google = new GoogleAuthenticator();

                    $returnCodeGoogle = $Google->verifyCode($Usuario->saltGoogle, $Code);

                    if ($returnCodeGoogle) {

                    } else {
                        $_SESSION = array();
                        $seguridadGoogle = false;
                        $response["HasError"] = true;
                        $response["AlertType"] = "danger";
                        $response["AlertMessage"] = "El Codigo es incorrecto.";
                        $response["ModelErrors"] = [];

                    }

                } else {

                }

                if ($seguridadGoogle) {

                    $UsuarioPerfil = new UsuarioPerfil($_SESSION["usuario"]);

                    $_SESSION["PaisCond"] = $UsuarioPerfil->pais;
                    $_SESSION["Global"] = $UsuarioPerfil->global;
                    $_SESSION["GlobalConfig"] = $UsuarioPerfil->global;
                    $_SESSION["monedaReporte"] = $Usuario->monedaReporte;
                    $_SESSION['mandante'] = $UsuarioPerfil->mandante;

                    if ($_SESSION["Global"] == "S") {
                        if ($UsuarioPerfil->globalMandante != "-1") {
                            $_SESSION["Global"] = "N";
                            $_SESSION['mandante'] = $UsuarioPerfil->globalMandante;
                        }
                    }


                    if ($Usuario->restriccionIp == "A" && $dirIP != $Usuario->usuarioIp) {
                        $_SESSION = array();
                        $response["HasError"] = true;
                        $response["AlertType"] = "danger";
                        $response["AlertMessage"] = "No puedes acceder desde esta IP.";
                    } elseif ($UsuarioPerfil->perfilId == "USUARIO") {
                        $_SESSION = array();
                        $response["HasError"] = true;
                        $response["AlertType"] = "danger";
                        $response["AlertMessage"] = "No existe el usuario.";

                    } else {

                        header('Authentication: ' . $responseU->auth_token);

                        $response["Data"] = array(
                            "AuthenticationStatus" => 0,

                            "PermissionList" => array(
                                "ViewMenuSecurity", "ViewMenuTeacher", "AdminUser", "Contingencia", "Menu", "Perfil", "PerfilOpciones", "Submenu", "UsuarioPerfil", "Clasificador", "Concesionario", "ViewAddHocReport", "ViewMenuManagement", "ActivarRegistros", "AjustarSaldo", "AsignacionCupo", "Bonos", "CuentaCobroEliminar", "GestionRed", "RegistroRapido", "ChequeReimpresion", "RecargaReversion", "GestionContacto", "ViewMenuCash", "FlujoCaja", "PagoPremio", "PagoNotaRetiro", "RecargarCredito", "ViewMenuQueries", "FlujoCajaHistorico", "FlujoCajaResumido", "InformeCasino", "InformeGerencial", "ListadoRecargasRetiros", "PremiosPendientesPagar", "ConsultaOnlineDetalle", "ConsultaOnlineResumen",

                            ),
                        );

                        $response["Sess"] = session_id();
                        $menus_string = obtenerMenu();

                        $paisesparamenu = obtenerPaisesReport();


                        $Proveedor = new Proveedor();
                        $Proveedor->setTipo("CASINO");

                        $proveedores = $Proveedor->getProveedores();

                        $finalProveedores = [];
                        $array = [];
                        $array["id"] = '0';
                        $array["value"] = 'Todos';
                        array_push($finalProveedores, $array);

                        foreach ($proveedores as $key => $value) {

                            $array = [];

                            $array["id"] = $value->getProveedorId();
                            $array["value"] = $value->getDescripcion();

                            array_push($finalProveedores, $array);

                        }

                        $Proveedor = new Proveedor();
                        $Proveedor->setTipo("LIVECASINO");

                        $proveedores = $Proveedor->getProveedores();

                        foreach ($proveedores as $key => $value) {

                            $array = [];

                            $array["id"] = $value->getProveedorId();
                            $array["value"] = $value->getDescripcion();

                            array_push($finalProveedores, $array);

                        }


                        $ProductoMandante = new ProductoMandante();

                        $rules = [];
                        array_push($rules, array("field" => "proveedor.tipo", "data" => "CASINO ", "op" => "eq"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $json = json_encode($filtro);

                        if ($_SESSION["GlobalConfig"] == "S") {
                            $Producto = new Producto();

                            $productos = $Producto->getProductosCustom(" producto.* ", "producto.producto_id", "asc", $SkeepRows, $MaxRows, $json, true);
                            $productos = json_decode($productos);
                        } else {
                            $productos = $ProductoMandante->getProductosMandanteCustom(" producto_mandante.*,mandante.*,producto.* ", "producto_mandante.prodmandante_id", "asc", $SkeepRows, $MaxRows, $json, true);
                            $productos = json_decode($productos);

                        }


                        $finalProductos = [];

                        foreach ($productos->data as $key => $value) {

                            $array = [];
                            if ($_SESSION["GlobalConfig"] == "S") {
                                $array["id"] = $value->{"producto.producto_id"};
                                $array["value"] = $value->{"producto.descripcion"};

                            } else {
                                $array["id"] = $value->{"producto_mandante.prodmandante_id"};
                                $array["value"] = $value->{"producto.descripcion"};

                            }
                            array_push($finalProductos, $array);

                        }


                        $rules = [];

                        if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil"] == "PUNTOVENTA") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usuhijo_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }

                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));


                        if ($_SESSION['PaisCond'] == "S") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                        }
                        if ($_SESSION['Global'] == "N") {
                            array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                        }
                        array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonbetshop = json_encode($filtro);


                        $PuntoVenta = new PuntoVenta();


                        $mandantes = $PuntoVenta->getPuntoVentasCustom("usuario.estado_valida,usuario.fecha_crea,usuario.moneda,usuario.fecha_ult,punto_venta.*", "punto_venta.puntoventa_id", "asc", 0, 100000, $jsonbetshop, true);

                        $mandantes = json_decode($mandantes);

                        $finalBetShops = [];

                        foreach ($mandantes->data as $key => $value) {

                            $array = [];

                            $array["id"] = $value->{"punto_venta.usuario_id"};
                            $array["value"] = $value->{"punto_venta.descripcion"};

                            array_push($finalBetShops, $array);

                        }


                        $ReportCountry = $Usuario->paisId;
                        if ($_SESSION["win_perfil2"] == "ADMIN" || $_SESSION["win_perfil2"] == "ADMIN2" || $_SESSION["win_perfil2"] == "OPERADOR" || $_SESSION["win_perfil2"] == "SA") {
                            if ($_SESSION['PaisCond'] != "S") {
                                $ReportCountry = '0';
                            }
                        }

                        $SaldoRecargas = 0;
                        $SaldoJuego = 0;
                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2" || $_SESSION["win_perfil2"] == "PUNTOVENTA") {
                            $PuntoVenta = new PuntoVenta("", $_SESSION["usuario"]);

                            $SaldoRecargas = $PuntoVenta->getCupoRecarga();
                            $SaldoJuego = $PuntoVenta->getCreditosBase();
                        }

                        $response["Data"] = array(

                            "AuthenticationStatus" => 0,
                            "SaldoRecargas" => $SaldoRecargas,
                            "SaldoJuego" => $SaldoJuego,

                            "Countries" => array(
                                array(
                                    "id" => "0",
                                    "value" => "Todos"
                                ),
                                array(
                                    "id" => "173",
                                    "value" => "Peru"
                                ),
                                array(
                                    "id" => "2",
                                    "value" => "Nicaragua"
                                )
                            ),
                            "PermissionList" => $menus_string,
                            "Countries" => $paisesparamenu,
                            "ProvidersCasino" => $finalProveedores,
                            "BetShops" => $finalBetShops,

                            "Partners" => array(
                                array(
                                    "id" => "0",
                                    "value" => "Doradobet",
                                    "Countries" => array(
                                        array(
                                            "id" => "2",
                                            "value" => "Nicaragua"
                                        ),
                                        array(
                                            "id" => "173",
                                            "value" => "Perú"
                                        )
                                    )
                                )
                            ),
                            "GamesCasino" => $finalProductos,

                            "Settings" => array(
                                "Language" => strtolower($Usuario->idioma),
                                "ReportCurrency" => $Usuario->monedaReporte,
                                "ReportCountry" => $ReportCountry,
                                "TimeZone" => $Usuario->timezone,
                                //"ReportCurrency" => $Usuario->monedaReporte,

                            )
                        );
                    }

                }

            }

            break;

        /**
        * Account/CheckUserLoginPassword
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Account/CheckUserLoginPassword':
            $response["HasError"] = false;
            $response["AlertType"] = "danger";
            $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
            $response["ModelErrors"] = [];
            break;

        /**
        * GetCommissionGroupForAgent
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetCommissionGroupForAgent":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            break;

        /**
        * GetCommissionGroupForAgent
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetCommissionGroupForAgent":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            break;

        /**
        * Agent/GetAgentPtGroups
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentPtGroups":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];
            $response["Data"] = array(
                array(
                    "Id" => 2,
                    "IsDefault" => false,
                    "Name" => "SpringVivaroPT",
                    "OwnerId" => '',
                    "Type" => 1,
                    "Value" => 80

                ),
                array(
                    "Id" => 5,
                    "IsDefault" => true,
                    "Name" => "Standard",
                    "OwnerId" => 2,
                    "Type" => 1,
                    "Value" => 70

                )
            );

            break;

        /**
        * Agent/GetAgentCommissionGroups
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentCommissionGroups":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];
            $response["Data"] = array(
                array(
                    "Id" => 3,
                    "IsDefault" => false,
                    "Name" => "SpringVivaroComission",
                    "OwnerId" => '',
                    "Type" => 2,
                    "Value" => 1

                ));

            break;

        /**
        * Agent/GetPtGroupForAgent
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetPtGroupForAgent":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            break;

        /**
        * Agent/GetAgentGroupById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentGroupById":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = [
                "Id" => 37,
                "IsDefault" => true,
                "Name" => "bsr",
                "OwnerId" => 28,
                "OwnerId" => 28,
                "Type" => 2,
                "Value" => 0,

            ];


            break;


        /**
        * Agent/GetAgentGroupItems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentGroupItems":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = array(
                array(
                    "Id" => 0,
                    "ProductName" => "SportsBook",
                    "GroupId" => 37,
                    "Value" => 0,
                    "AssignedValue" => 100

                )
            );
            break;

        /**
        * AdminUser/SaveAdminUser
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "AdminUser/SaveAdminUser":


            $PartnerOption = $params->Partner;
            $Address = $params->Address;
            $CityId = $params->CityId;
            $CountryId = $params->CountryId;
            $CurrencyId = $params->CurrencyId;
            $PreferredLanguage = $params->PreferredLanguage;
            $DocumentLegalID = $params->DocumentLegalID;
            $Email = $params->Email;
            $GroupId = $params->GroupId;
            $IP = $params->IP;
            $Latitud = $params->Latitud;
            $Longitud = $params->Longitud;
            $ManagerDocument = $params->ManagerDocument;
            $ManagerName = $params->ManagerName;
            $ManagerName = $params->ContactName;

            $ManagerPhone = $params->ManagerPhone;
            $MobilePhone = $params->MobilePhone;
            $Name = $params->FirstName;
            $Login = $params->LoginAccess;
            $Phone = $params->Phone;
            $RegionId = $params->RegionId;

            $District = $params->District;

            $CanDeposit = $params->AllowsRecharges;
            $CanReceipt = $params->PrintReceiptBox;
            $CanActivateRegister = $params->ActivateRegistration;
            $Lockedsales = $params->Lockedsales;
            $Pinagent = $params->Pinagent;

            $RepresentLegalDocument = $params->RepresentLegalDocument;
            $RepresentLegalName = $params->RepresentLegalName;
            $RepresentLegalPhone = $params->RepresentLegalPhone;
            $Partner = $params->Partner;

            $TypeUser = $params->TypeUser;
            $UserCountry = ($params->UserCountry == "S") ? "S" : "N";

            $PartnerOption = ($Partner != "" && is_numeric($Partner)) ? $Partner : 0;


            $Address = $Address;
            $CurrencyId = $CurrencyId;
            $Email = $Email;
            $FirstName = $Name;
            $Id = $params->Id;
            $IsSuspended = false;
            $LastLoginIp = "";
            $LastLoginLocalDate = "";
            $LastName = "";
            $clave = '';
            $SystemName = '';
            $UserId = '';
            $UserName = $params->UserName;
            $Phone = $params->ManagerPhone;
            $UserCountry = $params->UserCountry;

            if ($Id != "" && $UserId != "") {

            } else {
                $login = $Login;
                $Password = $params->Password;

                $CanReceipt = ($CanReceipt == "S") ? "S" : "N";
                $CanDeposit = ($CanDeposit == "S") ? "S" : "N";
                $CanActivateRegister = ($CanActivateRegister == "S") ? "S" : "N";
                $Lockedsales = ($Lockedsales == "S") ? "S" : "N";
                $Pinagent = ($Pinagent == "S") ? "S" : "N";


                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $PuntoVenta = new PuntoVenta($CashDeskId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'A';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = $PartnerOption;

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = $Lockedsales;

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';

                $Usuario->paisId = $CountryId;

                $Usuario->moneda = $CurrencyId;

                $Usuario->idioma = $PreferredLanguage;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = 0;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = $Usuario->fechaCrea;
                $Usuario->usuDocvalido = 0;

                $Usuario->estadoValida = 'N';
                $Usuario->usuvalidaId = 0;
                $Usuario->fechaValida = date('Y-m-d H:i:s');
                $Usuario->contingencia = 'I';
                $Usuario->contingenciaDeportes = 'I';
                $Usuario->contingenciaCasino = 'I';
                $Usuario->contingenciaCasvivo = 'I';
                $Usuario->contingenciaVirtuales = 'I';
                $Usuario->contingenciaPoker = 'I';
                $Usuario->restriccionIp = 'I';
                $Usuario->ubicacionLongitud = $Longitud;
                $Usuario->ubicacionLatitud = $Latitud;
                $Usuario->usuarioIp = $IP;
                $Usuario->tokenGoogle = "I";
                $Usuario->tokenLocal = "I";
                $Usuario->saltGoogle = '';
                $Usuario->monedaReporte = $Usuario->moneda;
                $Usuario->verifcedulaAnt = 'N';
                $Usuario->verifcedulaPost = 'N';


                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = $Pinagent;
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = $PartnerOption;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;


                $UsuarioPremiomax = new UsuarioPremiomax();


                $UsuarioPremiomax->usuarioId = $consecutivo_usuario;

                $UsuarioPremiomax->premioMax = 0;

                $UsuarioPremiomax->usumodifId = 0;

                $UsuarioPremiomax->fechaModif = "";

                $UsuarioPremiomax->cantLineas = 0;

                $UsuarioPremiomax->premioMax1 = 0;

                $UsuarioPremiomax->premioMax2 = 0;

                $UsuarioPremiomax->premioMax3 = 0;

                $UsuarioPremiomax->apuestaMin = 0;

                $UsuarioPremiomax->valorDirecto = 0;

                $UsuarioPremiomax->premioDirecto = 0;

                $UsuarioPremiomax->mandante = $PartnerOption;

                $UsuarioPremiomax->optimizarParrilla = "N";

                $UsuarioPremiomax->textoOp1 = "";

                $UsuarioPremiomax->textoOp2 = "";

                $UsuarioPremiomax->urlOp2 = "";

                $UsuarioPremiomax->textoOp3 = 0;

                $UsuarioPremiomax->urlOp3 = 0;

                $UsuarioPremiomax->valorEvento = 0;

                $UsuarioPremiomax->valorDiario = 0;

                $UsuarioPerfil = new UsuarioPerfil();
                $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                $UsuarioPerfil->perfilId = $TypeUser;
                $UsuarioPerfil->mandante = $PartnerOption;
                $UsuarioPerfil->pais = $UserCountry;
                $UsuarioPerfil->global = 'N';


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);


                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO->insert($UsuarioPerfil);

                $UsuarioPremiomaxMySqlDAO = new UsuarioPremiomaxMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPremiomaxMySqlDAO->insert($UsuarioPremiomax);

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $UsuarioMySqlDAO->getTransaction()->commit();


                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $response["id"] = $consecutivo_usuario;

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;


        /**
        * Agent/SaveAgent22222
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/SaveAgent22222":

            $Address = $params->Address;
            $CityId = $params->CityId;

            $ContactName = $params->ContactName;
            $CurrencyId = $params->CurrencyId;
            $Email = $params->Email;
            $FirstName = $params->FirstName;
            $FirstName = $params->Description;
            $Id = $params->Id;
            $IsSuspended = $params->IsSuspended;
            $LastLoginIp = $params->LastLoginIp;
            $LastLoginLocalDate = $params->LastLoginLocalDate;
            $LastName = $params->LastName;
            $clave = $params->Phone;
            $SystemName = $params->SystemName;
            $UserId = $params->UserId;
            $UserName = $params->UserName;
            $UserName = $params->LoginAccess;
            $Phone = $params->Phone;
            $CountryId = $params->CountryId;
            $CurrencyId = $params->CurrencyId;
            $PreferredLanguage = $params->PreferredLanguage;
            $Type = $params->Type;
            $Password = $params->Password;

            if ($Id != "" && $UserId != "") {
                $Usario = new Usuario($UserId);

                $Usario->setCelular($Phone);
                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $UsuarioMySqlDAO->update($Usuario);

                $UsuarioMySqlDAO->getTransaction()->commit();
            } else {
                $login = $UserName;

                $CanReceipt = false;
                $CanDeposit = false;
                $CanActivateRegister = false;

                if ($CanReceipt == true) {
                    $CanReceipt = 'S';
                } else {
                    $CanReceipt = 'N';
                }

                if ($CanDeposit == true) {
                    $CanDeposit = 'S';
                } else {
                    $CanDeposit = 'N';
                }

                if ($CanActivateRegister == true) {
                    $CanActivateRegister = 'S';
                } else {
                    $CanActivateRegister = 'N';
                }

                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $PuntoVenta = new PuntoVenta($CashDeskId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'I';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = '0';

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = 'N';

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';

                $Usuario->paisId = $CountryId;

                $Usuario->moneda = $CurrencyId;

                $Usuario->idioma = $PreferredLanguage;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = $consecutivo_usuario;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = $Usuario->fechaCrea;
                $Usuario->usuDocvalido = 0;
                $Usuario->estadoValida = 'A';
                $Usuario->usuvalidaId = 0;
                $Usuario->fechaValida = $Usuario->fechaCrea;
                $Usuario->contingencia = 'I';
                $Usuario->contingenciaDeportes = 'I';
                $Usuario->contingenciaCasino = 'I';
                $Usuario->contingenciaCasvivo = 'I';
                $Usuario->contingenciaVirtuales = 'I';
                $Usuario->contingenciaPoker = 'I';
                $Usuario->restriccionIp = 'I';
                $Usuario->ubicacionLongitud = 0;
                $Usuario->ubicacionLatitud = 0;
                $Usuario->usuarioIp = $IP;
                $Usuario->tokenGoogle = "I";
                $Usuario->tokenLocal = "I";
                $Usuario->saltGoogle = '';


                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = '';
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = 0;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;


                $Concesionario = new Concesionario();

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    if ($Type == 1) {
                        $UsuarioPerfil->perfilId = 'AFILIADOR';
                    } else {
                        $UsuarioPerfil->perfilId = 'CONCESIONARIO2';
                    }

                    $UsuarioPerfil->mandante = 0;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($ConcesionarioU->getUsupadreId());
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } else {

                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    if ($Type == 1) {
                        $UsuarioPerfil->perfilId = 'AFILIADOR';
                    } else {
                        $UsuarioPerfil->perfilId = 'CONCESIONARIO';
                    }

                    $UsuarioPerfil->mandante = 0;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';

                    $Concesionario->setUsupadreId(0);
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");


                }


                $PuntoVenta = new PuntoVenta();
                $PuntoVenta->descripcion = $FirstName;
                $PuntoVenta->nombreContacto = $ContactName;
                $PuntoVenta->ciudadId = $CityId->Id;
                $PuntoVenta->ciudadId = $CityId;
                $PuntoVenta->direccion = $Address;
                $PuntoVenta->barrio = $District;
                $PuntoVenta->telefono = $Phone;
                $PuntoVenta->email = $Email;
                $PuntoVenta->periodicidadId = 0;
                $PuntoVenta->clasificador1Id = 0;
                $PuntoVenta->clasificador2Id = 0;
                $PuntoVenta->clasificador3Id = 0;
                $PuntoVenta->valorRecarga = 0;
                $PuntoVenta->valorCupo = '0';
                $PuntoVenta->valorCupo2 = '0';
                $PuntoVenta->porcenComision = '0';
                $PuntoVenta->porcenComision2 = '0';
                $PuntoVenta->estado = 'A';
                $PuntoVenta->usuarioId = '0';
                $PuntoVenta->mandante = 0;
                $PuntoVenta->moneda = $CurrencyId;
                //$PuntoVenta->moneda = $CurrencyId->Id;
                $PuntoVenta->idioma = 'ES';
                $PuntoVenta->cupoRecarga = 0;
                $PuntoVenta->creditosBase = 0;
                $PuntoVenta->creditos = 0;
                $PuntoVenta->creditosAnt = 0;
                $PuntoVenta->creditosBaseAnt = 0;
                $PuntoVenta->usuarioId = $consecutivo_usuario;


                $UsuarioPremiomax = new UsuarioPremiomax();


                $UsuarioPremiomax->usuarioId = $consecutivo_usuario;

                $UsuarioPremiomax->premioMax = 0;

                $UsuarioPremiomax->usumodifId = 0;

                $UsuarioPremiomax->fechaModif = "";

                $UsuarioPremiomax->cantLineas = 0;

                $UsuarioPremiomax->premioMax1 = 0;

                $UsuarioPremiomax->premioMax2 = 0;

                $UsuarioPremiomax->premioMax3 = 0;

                $UsuarioPremiomax->apuestaMin = 0;

                $UsuarioPremiomax->valorDirecto = 0;

                $UsuarioPremiomax->premioDirecto = 0;

                $UsuarioPremiomax->mandante = 0;

                $UsuarioPremiomax->optimizarParrilla = "N";

                $UsuarioPremiomax->textoOp1 = "";

                $UsuarioPremiomax->textoOp2 = "";

                $UsuarioPremiomax->urlOp2 = "";

                $UsuarioPremiomax->textoOp3 = 0;

                $UsuarioPremiomax->urlOp3 = 0;

                $UsuarioPremiomax->valorEvento = 0;

                $UsuarioPremiomax->valorDiario = 0;

                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);

                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO = new ConcesionarioMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO->insert($Concesionario);

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO->insert($UsuarioPerfil);

                $UsuarioPremiomaxMySqlDAO = new UsuarioPremiomaxMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPremiomaxMySqlDAO->insert($UsuarioPremiomax);

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $PuntoVentaMySqlDAO->insert($PuntoVenta);

                $UsuarioMySqlDAO->getTransaction()->commit();
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = array();


            break;


        /**
        * Agent/SaveAgent2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/SaveAgent2":

            $Address = $params->Address;
            $CurrencyId = $params->CurrencyId;
            $Email = $params->Email;
            $FirstName = $params->FirstName;
            $Id = $params->Id;
            $IsSuspended = $params->IsSuspended;
            $LastLoginIp = $params->LastLoginIp;
            $LastLoginLocalDate = $params->LastLoginLocalDate;
            $LastName = $params->LastName;
            $clave = $params->Phone;
            $SystemName = $params->SystemName;
            $UserId = $params->UserId;
            $UserName = $params->UserName;
            $Phone = $params->Phone;

            if ($Id != "" && $UserId != "") {
                $Usario = new Usuario($UserId);

                $Usario->setCelular($Phone);
                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $UsuarioMySqlDAO->update($Usuario);

                $UsuarioMySqlDAO->getTransaction()->commit();
            } else {
                $login = $UserName;

                $CanReceipt = false;
                $CanDeposit = false;
                $CanActivateRegister = false;

                if ($CanReceipt == true) {
                    $CanReceipt = 'S';
                } else {
                    $CanReceipt = 'N';
                }

                if ($CanDeposit == true) {
                    $CanDeposit = 'S';
                } else {
                    $CanDeposit = 'N';
                }

                if ($CanActivateRegister == true) {
                    $CanActivateRegister = 'S';
                } else {
                    $CanActivateRegister = 'N';
                }

                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $PuntoVenta = new PuntoVenta($CashDeskId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'I';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = '0';

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = 'N';

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';

                $Usuario->paisId = '1';

                $Usuario->moneda = $PuntoVenta->moneda;

                $Usuario->idioma = $PuntoVenta->idioma;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = $consecutivo_usuario;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = $Usuario->fechaCrea;
                $Usuario->usuDocvalido = 0;

                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = '';
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = 0;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;


                $Concesionario = new Concesionario();

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'CONCESIONARIO2';
                    $UsuarioPerfil->mandante = 0;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($ConcesionarioU->getUsupadreId());
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } else {

                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'CONCESIONARIO';
                    $UsuarioPerfil->mandante = 0;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';

                    $Concesionario->setUsupadreId(0);
                    $Concesionario->setUsuhijoId($_SESSION["usuario"]);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");


                }


                $UsuarioPremiomax = new UsuarioPremiomax();


                $UsuarioPremiomax->usuarioId = $consecutivo_usuario;

                $UsuarioPremiomax->premioMax = 0;

                $UsuarioPremiomax->usumodifId = 0;

                $UsuarioPremiomax->fechaModif = "";

                $UsuarioPremiomax->cantLineas = 0;

                $UsuarioPremiomax->premioMax1 = 0;

                $UsuarioPremiomax->premioMax2 = 0;

                $UsuarioPremiomax->premioMax3 = 0;

                $UsuarioPremiomax->apuestaMin = 0;

                $UsuarioPremiomax->valorDirecto = 0;

                $UsuarioPremiomax->premioDirecto = 0;

                $UsuarioPremiomax->mandante = 0;

                $UsuarioPremiomax->optimizarParrilla = "N";

                $UsuarioPremiomax->textoOp1 = "";

                $UsuarioPremiomax->textoOp2 = "";

                $UsuarioPremiomax->urlOp2 = "";

                $UsuarioPremiomax->textoOp3 = 0;

                $UsuarioPremiomax->urlOp3 = 0;

                $UsuarioPremiomax->valorEvento = 0;

                $UsuarioPremiomax->valorDiario = 0;

                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);

                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO = new ConcesionarioMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO->insert($Concesionario);

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO->insert($UsuarioPerfil);

                $UsuarioPremiomaxMySqlDAO = new UsuarioPremiomaxMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPremiomaxMySqlDAO->insert($UsuarioPremiomax);

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $UsuarioMySqlDAO->getTransaction()->commit();
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = array();


            break;

        /**
        * Agent/SaveAgentGroupItem
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/SaveAgentGroupItem":

            foreach ($params as $param) {

                $Id = $param->Id;
                $ProductName = $param->ProductName;
                $Value = $param->Value;
                $agentId = $param->agentId;

                try {
                    $ProductoComision = new ProductoComision("", $agentId, $Id);

                } catch (Exception $e) {
                    if ($e->getCode() == "31") {
                        $ProductoComision = new ProductoComision();
                        $ProductoComision->setProductointernoId($Id);
                        $ProductoComision->setUsuarioId($agentId);
                        $ProductoComision->setValor($Value);
                        $ProductoComision->setDescripcion('');
                        $ProductoComision->setEstado('A');
                        $ProductoComision->setUsucreaId(0);
                        $ProductoComision->setUsumodifId(0);

                        $ProductoComisionMySqlDAO = new ProductoComisionMySqlDAO();

                        $ProductoComisionMySqlDAO->getTransaction();
                        $ProductoComisionMySqlDAO->insert($ProductoComision);

                        $ProductoComisionMySqlDAO->getTransaction()->commit();
                    } else {
                        throw $e;

                    }
                }

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = array();

            break;


        /**
        * Agent/GetAgentComissionItems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentComissionItems":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $result_array = array();

            $campos = "";
            $cont = 0;

            $rules = [];

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);


            $ProductoInterno = new ProductoInterno();
            $productos = $ProductoInterno->getProductoInternosAgenteCustom("producto_interno.productointerno_id AS id,producto_interno.descripcion, CASE WHEN producto_comision.valor IS NULL THEN 0 ELSE producto_comision.valor END valor  ", "producto_interno.productointerno_id", "asc", 0, 10000, $jsonfiltro, true);
            $productos = json_decode($productos);


            $final = array();

            foreach ($productos->data as $producto) {

                $array = array(
                    "Id" => $producto->{"producto_interno.id"},
                    "ProductName" => $producto->{"producto_interno.descripcion"},
                    "Value" => $producto->{".valor"}

                );
                array_push($final, $array);

            }


            $response["Data"] = $final;


            break;

        /**
        * BetShop/GetAgentComissionItems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetAgentComissionItems":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];

            $FromId = $_REQUEST["FromId"];

            $result_array = array();

            $campos = "";
            $cont = 0;

            $rules = [];

            array_push($rules, array("field" => "clasificador.tipo", "data" => "PCOM", "op" => "eq"));
            array_push($rules, array("field" => "clasificador.estado", "data" => "A", "op" => "eq"));
            array_push($rules, array("field" => "clasificador.estado", "data" => "A", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);


            $Concesionario = new Concesionario();
            $productos = $Concesionario->getConcesionariosProductoInternoCustom("clasificador.clasificador_id,clasificador.descripcion, concesionario.porcenpadre1,concesionario.porcenpadre2,concesionario.porcenpadre3,concesionario.porcenpadre4,concesionario.porcenhijo  ", "clasificador.clasificador_id", "asc", 0, 10000, $jsonfiltro, true, $FromId);
            $productos = json_decode($productos);


            $final = array();

            foreach ($productos->data as $producto) {

                $array = array(
                    "Id" => $producto->{"clasificador.clasificador_id"},
                    "ProductName" => $producto->{"clasificador.descripcion"},
                    "ComissionLevel1" => ($producto->{"concesionario.porcenpadre1"} == "") ? 0 : $producto->{"concesionario.porcenpadre1"},
                    "ComissionLevel2" => ($producto->{"concesionario.porcenpadre2"} == "") ? 0 : $producto->{"concesionario.porcenpadre2"},
                    "ComissionLevel3" => ($producto->{"concesionario.porcenpadre3"} == "") ? 0 : $producto->{"concesionario.porcenpadre3"},
                    "ComissionLevel4" => ($producto->{"concesionario.porcenpadre4"} == "") ? 0 : $producto->{"concesionario.porcenpadre4"},
                    "ComissionLevelBetShop" => ($producto->{"concesionario.porcenhijo"} == "") ? 0 : $producto->{"concesionario.porcenhijo"}

                );
                array_push($final, $array);

            }


            $response["Data"] = $final;
            $response["data"] = $final;


            break;

        /**
        * BetShop/SaveComissions
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/SaveComissions":


            $param = $params;
            //foreach ($params as $param) {
            if (true) {
                $Id = $param->Id;
                $ProductId = $param->ProductId;
                $ProductId = $param->Id;

                $ProductName = $param->ProductName;
                $ComissionLevel1 = $param->ComissionLevel1;
                $ComissionLevel2 = $param->ComissionLevel2;
                $ComissionLevel3 = $param->ComissionLevel3;
                $ComissionLevel4 = $param->ComissionLevel4;
                $ComissionLevelBetShop = $param->ComissionLevelBetShop;


                $FromId = $param->FromId;
                try {
                    $ConcesionarioU = new Concesionario($FromId);
                    $ConcesionarioAntes = new Concesionario($FromId, $ProductId);
                    $Concesionario = new Concesionario();

                    $ConcesionarioAntes->setEstado('I');

                    $Concesionario->setUsupadreId($ConcesionarioU->getUsupadreId());
                    $Concesionario->setUsuhijoId($ConcesionarioU->getUsuhijoId());
                    $Concesionario->setusupadre2Id($ConcesionarioU->getUsupadre2Id());
                    $Concesionario->setusupadre3Id($ConcesionarioU->getUsupadre3Id());
                    $Concesionario->setusupadre4Id($ConcesionarioU->getUsupadre4Id());
                    $Concesionario->setPorcenhijo($ComissionLevelBetShop);
                    $Concesionario->setPorcenpadre1($ComissionLevel1);
                    $Concesionario->setPorcenpadre2($ComissionLevel2);
                    $Concesionario->setPorcenpadre3($ComissionLevel3);
                    $Concesionario->setPorcenpadre4($ComissionLevel4);
                    $Concesionario->setProdinternoId($ProductId);
                    $Concesionario->setEstado('A');
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);

                    $ConcesionarioMySqlDAO = new ConcesionarioMySqlDAO();

                    $ConcesionarioMySqlDAO->getTransaction();
                    $ConcesionarioMySqlDAO->update($ConcesionarioAntes);
                    $ConcesionarioMySqlDAO->insert($Concesionario);

                    $ConcesionarioMySqlDAO->getTransaction()->commit();

                } catch (Exception $e) {
                    if ($e->getCode() == "48") {
                        $ConcesionarioU = new Concesionario($FromId);
                        $Concesionario = new Concesionario($FromId);

                        $Concesionario->setUsupadreId($ConcesionarioU->getUsupadreId());
                        $Concesionario->setUsuhijoId($ConcesionarioU->getUsuhijoId());
                        $Concesionario->setusupadre2Id($ConcesionarioU->getUsupadre2Id());
                        $Concesionario->setusupadre3Id($ConcesionarioU->getUsupadre3Id());
                        $Concesionario->setusupadre4Id($ConcesionarioU->getUsupadre4Id());
                        $Concesionario->setPorcenhijo($ComissionLevelBetShop);
                        $Concesionario->setPorcenpadre1($ComissionLevel1);
                        $Concesionario->setPorcenpadre2($ComissionLevel2);
                        $Concesionario->setPorcenpadre3($ComissionLevel3);
                        $Concesionario->setPorcenpadre4($ComissionLevel4);
                        $Concesionario->setProdinternoId($ProductId);
                        $Concesionario->setMandante(0);
                        $Concesionario->setUsucreaId(0);
                        $Concesionario->setUsumodifId(0);

                        $ConcesionarioMySqlDAO = new ConcesionarioMySqlDAO();

                        $ConcesionarioMySqlDAO->getTransaction();
                        $ConcesionarioMySqlDAO->insert($Concesionario);

                        $ConcesionarioMySqlDAO->getTransaction()->commit();
                    } else {
                        throw $e;

                    }
                }

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = array();


            break;

        /**
        * Agent/SaveAgentCommissionGroups
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/SaveAgentCommissionGroups":


            break;

        /**
        * Agent/MakePlayerTransfers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/MakePlayerTransfers":


            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $Amount = $params[0]->Amount;
            $Amount = -$Amount;
            $Id = $params[0]->Id;
            $Note = $params[0]->Note;
            $tipo = 'E';

            $UsuarioPerfil = new UsuarioPerfil($Id);

            if ($UsuarioPerfil->getPerfilId() == "USUONLINE") {

                if ($Amount > 0) {

                    $Consecutivo = new Consecutivo("", "REC", "");

                    $consecutivo_recarga = $Consecutivo->numero;

                    /**
                     * Actualizamos consecutivo Recarga
                     */

                    $consecutivo_recarga++;

                    $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                    $Consecutivo->setNumero($consecutivo_recarga);


                    $ConsecutivoMySqlDAO->update($Consecutivo);

                    $ConsecutivoMySqlDAO->getTransaction()->commit();

                    $UsuarioRecarga = new UsuarioRecarga();

                    $UsuarioRecarga = new UsuarioRecarga();
                    $UsuarioRecarga->setRecargaId($consecutivo_recarga);
                    $UsuarioRecarga->setUsuarioId($Id);
                    $UsuarioRecarga->setFechaCrea(date('Y-m-d H:i:s'));
                    $UsuarioRecarga->setPuntoventaId($UsuarioMandante->getUsuarioMandante());
                    $UsuarioRecarga->setValor($Amount);
                    $UsuarioRecarga->setPorcenRegaloRecarga(0);
                    $UsuarioRecarga->setDirIp(0);
                    $UsuarioRecarga->setPromocionalId(0);
                    $UsuarioRecarga->setValorPromocional(0);
                    $UsuarioRecarga->setHost(0);
                    $UsuarioRecarga->setMandante(0);
                    $UsuarioRecarga->setPedido(0);
                    $UsuarioRecarga->setPorcenIva(0);
                    $UsuarioRecarga->setMediopagoId(0);
                    $UsuarioRecarga->setValorIva(0);
                    $UsuarioRecarga->setEstado('A');

                    $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                    $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();
                    $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                    $UsuarioRecargaMySqlDAO->insert($UsuarioRecarga);


                    $Usuario = new Usuario($Id);
                    $Usuario->credit($Amount, $Transaction);


                    if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2" or $_SESSION["win_perfil"] == "PUNTOVENTA") {

                        $PuntoVenta = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                        if ($tipo == "S") {
                            $PuntoVenta->setBalanceCreditosBase($Amount);

                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);
                        }

                        $PuntoVenta->update($PuntoVenta);

                    }

                    $Transaction->commit();


                }


            } else {

                $userfrom = $UsuarioMandante->getUsuarioMandante();
                $userto = $Id;

                if ($Amount < 0) {
                    $tipo = 'S';
                    $Amount = -$Amount;
                }

                $CupoLog = new CupoLog();
                $CupoLog->setUsuarioId($userto);
                $CupoLog->setFechaCrea(date('Y-m-d H:i:s'));
                $CupoLog->setTipoId($tipo);
                $CupoLog->setValor($Amount);
                $CupoLog->setUsucreaId($userfrom);
                $CupoLog->setMandante(0);
                $CupoLog->setTipocupoId('T');
                $CupoLog->setObservacion($Note);

                $CupoLogMySqlDAO = new CupoLogMySqlDAO();
                $Transaction = $CupoLogMySqlDAO->getTransaction();
                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                $CupoLogMySqlDAO->insert($CupoLog);

                if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2") {

                    $PuntoVenta = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                    if ($tipo == "S") {
                        $PuntoVenta->setBalanceCreditosBase($Amount);

                    } else {
                        $PuntoVenta->setBalanceCreditosBase(-$Amount);
                    }

                    $PuntoVenta->update($PuntoVenta);

                }

                $PuntoVenta = new PuntoVenta("", $Id);

                if ($tipo == "S") {
                    $PuntoVenta->setBalanceCreditosBase(-$Amount);

                } else {
                    $PuntoVenta->setBalanceCreditosBase($Amount);

                }

                $PuntoVentaMySqlDAO->update($PuntoVenta);

                $Transaction->commit();

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];

            break;


        /**
        * Agent/MakeAgentTransfers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/MakeAgentTransfers":


            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $Id = $params->Id;
            $Amount = $params->Amount;
            $Type = ($params->Type != 0) ? 1 : 0;

            $Note = "";
            $tipo = 'E';

            $UsuarioPerfil = new UsuarioPerfil($Id);

            if ($UsuarioPerfil->getPerfilId() == "USUONLINE") {

                if ($Amount > 0) {

                    $Consecutivo = new Consecutivo("", "REC", "");

                    $consecutivo_recarga = $Consecutivo->numero;

                    /**
                     * Actualizamos consecutivo Recarga
                     */

                    $consecutivo_recarga++;

                    $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                    $Consecutivo->setNumero($consecutivo_recarga);


                    $ConsecutivoMySqlDAO->update($Consecutivo);

                    $ConsecutivoMySqlDAO->getTransaction()->commit();

                    $UsuarioRecarga = new UsuarioRecarga();

                    $UsuarioRecarga = new UsuarioRecarga();
                    $UsuarioRecarga->setRecargaId($consecutivo_recarga);
                    $UsuarioRecarga->setUsuarioId($Id);
                    $UsuarioRecarga->setFechaCrea(date('Y-m-d H:i:s'));
                    $UsuarioRecarga->setPuntoventaId($UsuarioMandante->getUsuarioMandante());
                    $UsuarioRecarga->setValor($Amount);
                    $UsuarioRecarga->setPorcenRegaloRecarga(0);
                    $UsuarioRecarga->setDirIp(0);
                    $UsuarioRecarga->setPromocionalId(0);
                    $UsuarioRecarga->setValorPromocional(0);
                    $UsuarioRecarga->setHost(0);
                    $UsuarioRecarga->setMandante(0);
                    $UsuarioRecarga->setPedido(0);
                    $UsuarioRecarga->setPorcenIva(0);
                    $UsuarioRecarga->setMediopagoId(0);
                    $UsuarioRecarga->setValorIva(0);
                    $UsuarioRecarga->setEstado('A');

                    $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                    $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();
                    $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                    $UsuarioRecargaMySqlDAO->insert($UsuarioRecarga);


                    $Usuario = new Usuario($Id);
                    $Usuario->credit($Amount, $Transaction);


                    if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2" or $_SESSION["win_perfil"] == "PUNTOVENTA") {

                        $PuntoVenta = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                        if ($tipo == "S") {
                            $PuntoVenta->setBalanceCreditosBase($Amount);


                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);
                        }

                        $PuntoVenta->update($PuntoVenta);

                    }

                    $Transaction->commit();


                }


            } elseif ($UsuarioPerfil->getPerfilId() == "MAQUINAANONIMA") {
                $userfrom = $UsuarioMandante->getUsuarioMandante();
                $userto = $Id;

                if ($Amount < 0) {
                    $tipo = 'S';
                    $Amount = -$Amount;
                }
                $Consecutivo = new Consecutivo("", "REC", "");

                $consecutivo_recarga = $Consecutivo->numero;

                $consecutivo_recarga++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_recarga);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();


                $UsuarioRecarga = new UsuarioRecarga();
                $UsuarioRecarga->setRecargaId($consecutivo_recarga);
                $UsuarioRecarga->setUsuarioId($UsuarioPerfil->getUsuarioId());
                $UsuarioRecarga->setFechaCrea(date('Y-m-d H:i:s'));
                $UsuarioRecarga->setPuntoventaId(0);
                $UsuarioRecarga->setValor($Amount);
                $UsuarioRecarga->setPorcenRegaloRecarga(0);
                $UsuarioRecarga->setDirIp(0);
                $UsuarioRecarga->setPromocionalId(0);
                $UsuarioRecarga->setValorPromocional(0);
                $UsuarioRecarga->setHost(0);
                $UsuarioRecarga->setMandante(0);
                $UsuarioRecarga->setPedido(0);
                $UsuarioRecarga->setPorcenIva(0);
                $UsuarioRecarga->setMediopagoId(0);
                $UsuarioRecarga->setValorIva(0);
                $UsuarioRecarga->setEstado('A');

                $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();
                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);


                $UsuarioRecargaMySqlDAO->insert($UsuarioRecarga);

                $SaldoRecargas = 0;
                $SaldoJuego = 0;

                if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2") {

                    $PuntoVentaSuper = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                    if (($PuntoVentaSuper->getCreditosBase() < $Amount && $Type == 1 && $tipo != "S") || ($PuntoVentaSuper->getCupoRecarga() < $Amount && $Type == 0 && $tipo != "S")) {
                        throw new Exception("No tiene saldo para transferir", "111");
                    } else {

                    }


                    $PuntoVenta = new PuntoVenta("", $Id);

                    if ($tipo == "S") {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                            $PuntoVentaSuper->setBalanceCupoRecarga($Amount);
                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);
                            $PuntoVentaSuper->setBalanceCreditosBase($Amount);

                        }

                    } else {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga($Amount);
                            $PuntoVentaSuper->setBalanceCupoRecarga(-$Amount);

                        } else {
                            $PuntoVenta->setBalanceCreditosBase($Amount);
                            $PuntoVentaSuper->setBalanceCreditosBase(-$Amount);

                        }

                    }

                    $PuntoVentaMySqlDAO->update($PuntoVenta);
                    $PuntoVentaMySqlDAO->update($PuntoVentaSuper);

                    $Transaction->commit();

                    $UsuarioMandante = new UsuarioMandante("", $Id, "0");

                    /*  Consultamos de nuevo el usuario Token para obtener el RequestId actual para el WebSocket  */
                    $UsuarioToken = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                    /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                    $data = $UsuarioMandante->getWSProfileSite($UsuarioToken->getRequestId());
                    $WebsocketUsuario = new WebsocketUsuario($UsuarioToken->getRequestId(), $data);
                    $WebsocketUsuario->sendWSMessage();

                    $pdf = '<table style="width:430px;height: 355px;/* border:1px solid black; */"><tbody>
<tr><td align="center" valign="top"><font style="text-align:center;font-size:20px;font-weight:bold;">RECARGA</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Recarga No.:&nbsp;&nbsp;' . $consecutivo_recarga . '</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Maquina:&nbsp;&nbsp;' . $Id . '</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:&nbsp;&nbsp;' . date("Y-m-d H:i:s") . '</font></td></tr>
<tr><td align="center" valign="top"><div style="height:1px;">&nbsp;</div></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:&nbsp;&nbsp;' . $Amount . '</font></td></tr>
</tbody></table>';

                } else {
                    $PuntoVenta = new PuntoVenta("", $Id);

                    if ($tipo == "S") {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);

                        }

                    } else {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga($Amount);
                        } else {
                            $PuntoVenta->setBalanceCreditosBase($Amount);

                        }

                    }

                    $PuntoVentaMySqlDAO->update($PuntoVenta);

                    $Transaction->commit();

                    $UsuarioMandante = new UsuarioMandante("", $Id, "0");

                    /*  Consultamos de nuevo el usuario Token para obtener el RequestId actual para el WebSocket  */
                    $UsuarioToken = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                    /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                    $data = $UsuarioMandante->getWSProfileSite($UsuarioToken->getRequestId());
                    $WebsocketUsuario = new WebsocketUsuario($UsuarioToken->getRequestId(), $data);
                    $WebsocketUsuario->sendWSMessage();

                    $pdf = '<table style="width:430px;height: 355px;/* border:1px solid black; */"><tbody>
<tr><td align="center" valign="top"><font style="text-align:center;font-size:20px;font-weight:bold;">RECARGA</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Recarga No.:&nbsp;&nbsp;' . $consecutivo_recarga . '</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Maquina:&nbsp;&nbsp;' . $Id . '</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:&nbsp;&nbsp;' . date("Y-m-d H:i:s") . '</font></td></tr>
<tr><td align="center" valign="top"><div style="height:1px;">&nbsp;</div></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:&nbsp;&nbsp;' . $Amount . '</font></td></tr>
</tbody></table>';

                }

                include "mdpdf/mpdf.php";
                $mpdf = new mPDF('c', array(80, 150));

                $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

                $mpdf->SetDisplayMode('fullpage', 'two');

// LOAD a stylesheet
//$stylesheet = file_get_contents('mdpdf/stylemdpdf.css');
//$mpdf->WriteHTML($stylesheet, 1); // The parameter 1 tells that this is css/style only and no body/html/text

                $mpdf->WriteHTML($pdf);

                $mpdf->Output("mpdf.pdf", "F");

                $path = 'mpdf.pdf';
                $type = pathinfo($path, PATHINFO_EXTENSION);
                $data = file_get_contents($path);
                $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

                $encoded_html = base64_encode($pdf);

                $response["Pdf"] = base64_encode($data);

            } else {

                $userfrom = $UsuarioMandante->getUsuarioMandante();
                $userto = $Id;

                if ($Amount < 0) {
                    $tipo = 'S';
                    $Amount = -$Amount;
                }

                if ($Type == 0) {
                    $tipoCupo = 'R';
                } else {
                    $tipoCupo = 'A';

                }

                $CupoLog = new CupoLog();
                $CupoLog->setUsuarioId($userto);
                $CupoLog->setFechaCrea(date('Y-m-d H:i:s'));
                $CupoLog->setTipoId($tipo);
                $CupoLog->setValor($Amount);
                $CupoLog->setUsucreaId($userfrom);
                $CupoLog->setMandante(0);
                $CupoLog->setTipocupoId($tipoCupo);
                $CupoLog->setObservacion($Note);

                $CupoLogMySqlDAO = new CupoLogMySqlDAO();
                $Transaction = $CupoLogMySqlDAO->getTransaction();
                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                $CupoLogMySqlDAO->insert($CupoLog);

                $SaldoRecargas = 0;
                $SaldoJuego = 0;

                if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2") {

                    $PuntoVentaSuper = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                    if (($PuntoVentaSuper->getCreditosBase() < $Amount && $Type == 1 && $tipo != "S") || ($PuntoVentaSuper->getCupoRecarga() < $Amount && $Type == 0 && $tipo != "S")) {
                        throw new Exception("No tiene saldo para transferir", "111");
                    } else {

                    }


                    $PuntoVenta = new PuntoVenta("", $Id);

                    if ($tipo == "S") {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                            $PuntoVentaSuper->setBalanceCupoRecarga($Amount);
                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);
                            $PuntoVentaSuper->setBalanceCreditosBase($Amount);

                        }

                    } else {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga($Amount);
                            $PuntoVentaSuper->setBalanceCupoRecarga(-$Amount);

                        } else {
                            $PuntoVenta->setBalanceCreditosBase($Amount);
                            $PuntoVentaSuper->setBalanceCreditosBase(-$Amount);

                        }

                    }

                    $PuntoVentaMySqlDAO->update($PuntoVenta);
                    $PuntoVentaMySqlDAO->update($PuntoVentaSuper);

                    $Transaction->commit();
                } else {
                    $PuntoVenta = new PuntoVenta("", $Id);

                    if ($tipo == "S") {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);

                        }

                    } else {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga($Amount);
                        } else {
                            $PuntoVenta->setBalanceCreditosBase($Amount);

                        }

                    }

                    $PuntoVentaMySqlDAO->update($PuntoVenta);

                    $Transaction->commit();

                }


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            break;


        /**
        * Agent/MakeAgentTransfersDeposit
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/MakeAgentTransfersDeposit":


            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $Id = $params->Id;
            $Amount = $params->Amount;
            $Type = ($params->Type != 0) ? 1 : 0;

            $Note = "";
            $tipo = 'E';

            $UsuarioPerfil = new UsuarioPerfil($Id);


            $userfrom = $UsuarioMandante->getUsuarioMandante();
            $userto = $Id;

            if ($Amount < 0) {
                $tipo = 'S';
                $Amount = -$Amount;
            }

            $CupoLog = new CupoLog();
            $CupoLog->setUsuarioId($userto);
            $CupoLog->setFechaCrea(date('Y-m-d H:i:s'));
            $CupoLog->setTipoId($tipo);
            $CupoLog->setValor($Amount);
            $CupoLog->setUsucreaId($userfrom);
            $CupoLog->setMandante(0);
            $CupoLog->setTipocupoId('T');
            $CupoLog->setObservacion($Note);

            $CupoLogMySqlDAO = new CupoLogMySqlDAO();
            $Transaction = $CupoLogMySqlDAO->getTransaction();
            $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

            $CupoLogMySqlDAO->insert($CupoLog);

            if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2") {

                $PuntoVenta = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                if ($tipo == "S") {
                    if ($Type == 0) {
                        $PuntoVenta->setBalanceCupoRecarga($Amount);
                    }
                    {
                        $PuntoVenta->setBalanceCreditosBase($Amount);

                    }

                } else {
                    if ($Type == 0) {
                        $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                    }
                    {
                        $PuntoVenta->setBalanceCreditosBase(-$Amount);

                    }
                }

                $PuntoVenta->update($PuntoVenta);

            }

            $PuntoVenta = new PuntoVenta("", $Id);

            if ($tipo == "S") {
                if ($Type == 0) {
                    $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                }
                {
                    $PuntoVenta->setBalanceCreditosBase(-$Amount);

                }

            } else {
                if ($Type == 0) {
                    $PuntoVenta->setBalanceCupoRecarga($Amount);
                }
                {
                    $PuntoVenta->setBalanceCreditosBase($Amount);

                }

            }

            $PuntoVentaMySqlDAO->update($PuntoVenta);

            $Transaction->commit();


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];

            break;

        /**
        * Agent/MakeAgentTransfersGame
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/MakeAgentTransfersGame":


            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $Id = $params->Id;
            $Amount = $params->Amount;
            $Type = ($params->Type != 0) ? 1 : 0;

            $Note = "";
            $tipo = 'E';

            $UsuarioPerfil = new UsuarioPerfil($Id);

            if ($UsuarioPerfil->getPerfilId() == "USUONLINE") {

                if ($Amount > 0) {

                    $Consecutivo = new Consecutivo("", "REC", "");

                    $consecutivo_recarga = $Consecutivo->numero;

                    /**
                     * Actualizamos consecutivo Recarga
                     */

                    $consecutivo_recarga++;

                    $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                    $Consecutivo->setNumero($consecutivo_recarga);


                    $ConsecutivoMySqlDAO->update($Consecutivo);

                    $ConsecutivoMySqlDAO->getTransaction()->commit();

                    $UsuarioRecarga = new UsuarioRecarga();

                    $UsuarioRecarga = new UsuarioRecarga();
                    $UsuarioRecarga->setRecargaId($consecutivo_recarga);
                    $UsuarioRecarga->setUsuarioId($Id);
                    $UsuarioRecarga->setFechaCrea(date('Y-m-d H:i:s'));
                    $UsuarioRecarga->setPuntoventaId($UsuarioMandante->getUsuarioMandante());
                    $UsuarioRecarga->setValor($Amount);
                    $UsuarioRecarga->setPorcenRegaloRecarga(0);
                    $UsuarioRecarga->setDirIp(0);
                    $UsuarioRecarga->setPromocionalId(0);
                    $UsuarioRecarga->setValorPromocional(0);
                    $UsuarioRecarga->setHost(0);
                    $UsuarioRecarga->setMandante(0);
                    $UsuarioRecarga->setPedido(0);
                    $UsuarioRecarga->setPorcenIva(0);
                    $UsuarioRecarga->setMediopagoId(0);
                    $UsuarioRecarga->setValorIva(0);
                    $UsuarioRecarga->setEstado('A');

                    $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                    $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();
                    $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                    $UsuarioRecargaMySqlDAO->insert($UsuarioRecarga);


                    $Usuario = new Usuario($Id);
                    $Usuario->credit($Amount, $Transaction);


                    if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2" or $_SESSION["win_perfil"] == "PUNTOVENTA") {

                        $PuntoVenta = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                        if ($tipo == "S") {
                            $PuntoVenta->setBalanceCreditosBase($Amount);


                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);
                        }

                        $PuntoVenta->update($PuntoVenta);

                    }

                    $Transaction->commit();


                }


            } else {

                $userfrom = $UsuarioMandante->getUsuarioMandante();
                $userto = $Id;

                if ($Amount < 0) {
                    $tipo = 'S';
                    $Amount = -$Amount;
                }

                $CupoLog = new CupoLog();
                $CupoLog->setUsuarioId($userto);
                $CupoLog->setFechaCrea(date('Y-m-d H:i:s'));
                $CupoLog->setTipoId($tipo);
                $CupoLog->setValor($Amount);
                $CupoLog->setUsucreaId($userfrom);
                $CupoLog->setMandante(0);
                $CupoLog->setTipocupoId('T');
                $CupoLog->setObservacion($Note);

                $CupoLogMySqlDAO = new CupoLogMySqlDAO();
                $Transaction = $CupoLogMySqlDAO->getTransaction();
                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                $CupoLogMySqlDAO->insert($CupoLog);

                if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2") {

                    $PuntoVenta = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                    if ($tipo == "S") {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga($Amount);
                        }
                        {
                            $PuntoVenta->setBalanceCreditosBase($Amount);

                        }

                    } else {
                        if ($Type == 0) {
                            $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                        }
                        {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);

                        }
                    }

                    $PuntoVenta->update($PuntoVenta);

                }

                $PuntoVenta = new PuntoVenta("", $Id);

                if ($tipo == "S") {
                    if ($Type == 0) {
                        $PuntoVenta->setBalanceCupoRecarga(-$Amount);
                    }
                    {
                        $PuntoVenta->setBalanceCreditosBase(-$Amount);

                    }

                } else {
                    if ($Type == 0) {
                        $PuntoVenta->setBalanceCupoRecarga($Amount);
                    }
                    {
                        $PuntoVenta->setBalanceCreditosBase($Amount);

                    }

                }

                $PuntoVentaMySqlDAO->update($PuntoVenta);

                $Transaction->commit();

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];

            break;

        /**
        * Client/MakeDeposit
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/MakeDeposit":


            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $Amount = $params->Amount;
            //$Amount = -$Amount;
            $Id = $params->Id;
            $Note = $params->Note;
            $tipo = 'E';

            $UsuarioPerfil = new UsuarioPerfil($Id);

            if ($UsuarioPerfil->getPerfilId() == "USUONLINE") {

                if ($Amount > 0) {

                    $Consecutivo = new Consecutivo("", "REC", "");

                    $consecutivo_recarga = $Consecutivo->numero;

                    /**
                     * Actualizamos consecutivo Recarga
                     */

                    $consecutivo_recarga++;

                    $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                    $Consecutivo->setNumero($consecutivo_recarga);


                    $ConsecutivoMySqlDAO->update($Consecutivo);

                    $ConsecutivoMySqlDAO->getTransaction()->commit();

                    $UsuarioRecarga = new UsuarioRecarga();

                    $UsuarioRecarga = new UsuarioRecarga();
                    $UsuarioRecarga->setRecargaId($consecutivo_recarga);
                    $UsuarioRecarga->setUsuarioId($Id);
                    $UsuarioRecarga->setFechaCrea(date('Y-m-d H:i:s'));
                    $UsuarioRecarga->setPuntoventaId($UsuarioMandante->getUsuarioMandante());
                    $UsuarioRecarga->setValor($Amount);
                    $UsuarioRecarga->setPorcenRegaloRecarga(0);
                    $UsuarioRecarga->setDirIp(0);
                    $UsuarioRecarga->setPromocionalId(0);
                    $UsuarioRecarga->setValorPromocional(0);
                    $UsuarioRecarga->setHost(0);
                    $UsuarioRecarga->setMandante(0);
                    $UsuarioRecarga->setPedido(0);
                    $UsuarioRecarga->setPorcenIva(0);
                    $UsuarioRecarga->setMediopagoId(0);
                    $UsuarioRecarga->setValorIva(0);
                    $UsuarioRecarga->setEstado('A');

                    $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                    $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();
                    $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                    $UsuarioRecargaMySqlDAO->insert($UsuarioRecarga);


                    $Usuario = new Usuario($Id);
                    $Usuario->credit($Amount, $Transaction);


                    if ($_SESSION["win_perfil"] == "CONCESIONARIO" or $_SESSION["win_perfil"] == "CONCESIONARIO2" or $_SESSION["win_perfil"] == "PUNTOVENTA") {

                        $PuntoVenta = new PuntoVenta("", $UsuarioMandante->getUsuarioMandante());

                        if ($tipo == "S") {
                            $PuntoVenta->setBalanceCreditosBase($Amount);

                        } else {
                            $PuntoVenta->setBalanceCreditosBase(-$Amount);
                        }

                        $PuntoVenta->update($PuntoVenta);

                    }

                    $Transaction->commit();


                }


            } else {


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];

            break;


        /**
        * UserManagement/GetUserSecurityL
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetUserSecurityL22":

            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $UserId = $params->UserId;


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $rules = [];

            array_push($rules, array("field" => "usuario_log.usuario_id", "data" => "$UserId", "op" => "eq"));
            //array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            // array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
            array_push($rules, array("field" => "usuario_log.tipo", "data" => "CODIGOAGENT", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_log.* ";


            $UsuarioLog = new UsuarioLog();
            $data = $UsuarioLog->getUsuarioLogsCustom($select, "usuario_log.usuariolog_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);

            $final = array();
            foreach ($data->data as $value) {
                $array = array();

                $array["Id"] = $value->{"usuario_log.fecha_crea"};
                $array["CreatedDate"] = $value->{"usuario_log.fecha_crea"};
                $array["UserName"] = $value->{"usuario_log.usuario_id"};
                $array["UserNameRequest"] = $value->{"usuario_log.usuariosolicita_id"};
                if ($value->{"usuario_log.estado"} == "P") {
                    $array["State"] = "Pendiente";
                } else {
                    if ($value->{"usuario_log.estado"} == "A") {
                        $array["State"] = "Activo";
                    } else {
                        $array["State"] = "Expirado";
                    }
                }

                $array["Code"] = ($value->{"usuario_log.estado"} == "P") ? $value->{"usuario_log.valor_despues"} : 'NO PERMITIDO';

                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = $final;

            break;


        case "UserManagement/GetUserSecurityL":

            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $UserId = $_REQUEST["UserId"];

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $rules = [];

            array_push($rules, array("field" => "usuario_token_interno.usuario_id", "data" => "$UserId", "op" => "eq"));
            //array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            // array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
            array_push($rules, array("field" => "usuario_token_interno.tipo", "data" => "0", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_token_interno.* ";


            $UsuarioTokenInterno = new UsuarioTokenInterno();
            $data = $UsuarioTokenInterno->getUsuarioTokenInternosCustom($select, "usuario_token_interno.usutokeninterno_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);

            $final = array();
            foreach ($data->data as $value) {
                $array = array();

                $array["Id"] = $value->{"usuario_token_interno.usutokeninterno_id"};
                $array["CreatedDate"] = $value->{"usuario_token_interno.fecha_crea"};
                $array["UserName"] = $value->{"usuario_token_interno.usuario_id"};
                $array["UserNameRequest"] = $value->{"usuario_token_interno.usuariosolicita_id"};
                if ($value->{"usuario_token_interno.estado"} == "P") {
                    $array["State"] = "Pendiente";
                } else {
                    if ($value->{"usuario_token_interno.estado"} == "A") {
                        $array["State"] = "Activo";
                    } else {
                        $array["State"] = "Expirado";
                    }
                }
                if ($value->{"usuario_token_interno.estado"} == "P") {
                    $array["State"] = "P";
                } else {
                    if ($value->{"usuario_token_interno.estado"} == "A") {
                        $array["State"] = "A";
                    } else {
                        $array["State"] = "E";
                    }
                }

                $array["Code"] = ($value->{"usuario_token_interno.estado"} == "P") ? $value->{"usuario_token_interno.valor"} : 'NO PERMITIDO';
                $array["Code"] = $value->{"usuario_token_interno.valor"};

                $array["Date"] = $value->{"usuario_token_interno.fecha_crea"};
                $array["Token"] = $value->{"usuario_token_interno.valor"};
                $array["User"] = $value->{"usuario_token_interno.usuario_id"};

                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = $final;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;

        /**
        * UserManagement/GetUserNotes
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetUserNotes":

            $UserId = $params->UserId;

            $UsuarioNotasMySqlDAO = new UsuarioNotasMySqlDAO();


            $rules = [];
            array_push($rules, array("field" => "usuario_notas.usuario_id", "data" => $UserId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $UsuarioNotas = $UsuarioNotasMySqlDAO->queryUsuarioNotasCustom(" usuario_notas.usunota_id,usuario_notas.fecha_crea,usuario_notas.nota,usuario.login ", "usuario_notas.usunota_id", "asc", 0, 10000, $jsonfiltro, true);

            $UsuarioNotas = json_decode($UsuarioNotas);


            $final = array();
            foreach ($UsuarioNotas->data as $usuarioNota) {
                $array = array();

                $array["Id"] = $usuarioNota->{"usuario_notas.usunota_id"};
                $array["Note"] = $usuarioNota->{"usuario_notas.nota"};
                $array["CreatedDate"] = $usuarioNota->{"usuario_notas.fecha_crea"};
                $array["UserName"] = $usuarioNota->{"usuario.login"};

                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = $final;

            break;

        /**
        * UserManagement/SaveUserSecurity
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/SaveUserSecurity22":

            $UserId = $params->UserId;
            $Note = $params->Note;


            $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
            $Transaction = $UsuarioLogMySqlDAO->getTransaction();

            $UsuarioLog = new UsuarioLog();
            $UsuarioLog->setUsuarioId($UserId);
            $UsuarioLog->setUsuarioIp('');

            $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
            $UsuarioLog->setUsuariosolicitaIp($ip);

            $UsuarioLog->setTipo("CODIGOAGENT");
            $UsuarioLog->setEstado("P");
            $UsuarioLog->setValorAntes(encrypt_decrypt('encrypt', $UserId . "_" . time()));
            $UsuarioLog->setValorDespues(GenerarClaveTicket(5));
            $UsuarioLog->setUsucreaId(0);
            $UsuarioLog->setUsumodifId(0);


            $UsuarioLogMySqlDAO->insert($UsuarioLog);

            $UsuarioLogMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = $final;

            break;

        case "UserManagement/SaveUserSecurity":

            $UserId = $params->UserId;
            $Note = $params->Note;


            $UsuarioTokenInternoMySqlDAO = new UsuarioTokenInternoMySqlDAO();
            $Transaction = $UsuarioTokenInternoMySqlDAO->getTransaction();

            $UsuarioTokenInterno = new UsuarioTokenInterno();
            $UsuarioTokenInterno->setUsuarioId($UserId);
            $UsuarioTokenInterno->setUsuarioIp('');

            $UsuarioTokenInterno->setUsuariosolicitaId($_SESSION['usuario2']);
            $UsuarioTokenInterno->setUsuariosolicitaIp($ip);

            $UsuarioTokenInterno->setTipo(0);
            $UsuarioTokenInterno->setEstado("A");
            $UsuarioTokenInterno->setValor(encrypt_decrypt('encrypt', $UserId . "_" . time()));
            $UsuarioTokenInterno->setUsucreaId(0);
            $UsuarioTokenInterno->setUsumodifId(0);


            $UsuarioTokenInternoMySqlDAO->insert($UsuarioTokenInterno);

            $UsuarioTokenInternoMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = $final;

            break;

        /**
        * UserManagement/SaveUserNote
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/SaveUserNote":

            $UserId = $params->UserId;
            $Note = $params->Note;


            $UsuarioNotas = new UsuarioNotas();

            $UsuarioNotas->setUsuarioId($UserId);
            $UsuarioNotas->setNota($Note);
            $UsuarioNotas->setUsucreaId($_SESSION['usuario2']);
            $UsuarioNotas->setUsumodifId($_SESSION['usuario2']);

            $UsuarioNotasMySqlDAO = new UsuarioNotasMySqlDAO();

            $UsuarioNotas = $UsuarioNotasMySqlDAO->insert($UsuarioNotas);

            $UsuarioNotasMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["Data"] = $final;

            break;

        /**
        * OddsFeed/SaveSport
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveSport":
            $Abbreviated = $params->Abbreviated;
            $Name = $params->Name;
            $NameInternational = $params->NameInternational;
            $NameTranslate = $params->NameTranslate;
            $Status = $params->Status;

            $IntDeporte = new IntDeporte();

            $IntDeporte->nombre = $Name;
            $IntDeporte->nombreTraduccion = $NameTranslate;
            $IntDeporte->nombreInternacional = $NameInternational;
            $IntDeporte->abreviado = $Abbreviated;
            $IntDeporte->estado = $Status;
            $IntDeporte->usucreaId = 0;
            $IntDeporte->usumodifId = 0;


            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $IntDeporteMysqlDAO = new IntDeporteMysqlDAO();
                $IntDeporteMysqlDAO->insert($IntDeporte);
                $IntDeporteMysqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode();

            }


            $response = $response;

            break;

        /**
        * OddsFeed/SaveRegion
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveRegion":
            $Abbreviated = $params->Abbreviated;
            $Name = $params->Name;
            $NameInternational = $params->NameInternational;
            $NameTranslate = $params->NameTranslate;
            $SportId = $params->SportId;
            $Status = $params->Status;

            $IntRegion = new IntRegion();

            $IntRegion->nombre = $Name;
            $IntRegion->deporteId = $SportId;
            $IntRegion->nombreTraduccion = $NameTranslate;
            $IntRegion->nombreInternacional = $NameInternational;
            $IntRegion->abreviado = $Abbreviated;
            $IntRegion->estado = $Status;
            $IntRegion->usucreaId = 0;
            $IntRegion->usumodifId = 0;

            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $IntRegionMysqlDAO = new IntRegionMysqlDAO();
                $IntRegionMysqlDAO->insert($IntRegion);
                $IntRegionMysqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode();

            }


            $response = $response;

            break;

        /**
        * OddsFeed/SaveCompetition
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveCompetition":
            $Abbreviated = $params->Abbreviated;
            $Name = $params->Name;
            $NameInternational = $params->NameInternational;
            $NameTranslate = $params->NameTranslate;
            $RegionId = $params->RegionId;
            $Status = $params->Status;

            $IntCompetencia = new IntCompetencia();

            $IntCompetencia->nombre = $Name;
            $IntCompetencia->regionId = $RegionId;
            $IntCompetencia->nombreTraduccion = $NameTranslate;
            $IntCompetencia->nombreInternacional = $NameInternational;
            $IntCompetencia->abreviado = $Abbreviated;
            $IntCompetencia->estado = $Status;
            $IntCompetencia->usucreaId = 0;
            $IntCompetencia->usumodifId = 0;

            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $IntCompetenciaMySqlDAO = new IntCompetenciaMySqlDAO();
                $IntCompetenciaMySqlDAO->insert($IntCompetencia);
                $IntCompetenciaMySqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

            }


            $response = $response;

            break;

        /**
        * OddsFeed/SaveMatch
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveMatch":
            $Abbreviated = $params->Abbreviated;
            $Name = $params->Name;
            $NameInternational = $params->NameInternational;
            $NameTranslate = $params->NameTranslate;
            $CompetitionId = $params->CompetitionId;
            $DateTime = $params->DateTime;
            $Status = $params->Status;

            $IntEvento = new IntEvento();

            $IntEvento->nombre = $Name;
            $IntEvento->competenciaId = $CompetitionId;
            $IntEvento->nombreTraduccion = $NameTranslate;
            $IntEvento->nombreInternacional = $NameInternational;
            $IntEvento->abreviado = $Abbreviated;
            $IntEvento->estado = $Status;
            $IntEvento->fecha = $DateTime;
            $IntEvento->usucreaId = 0;
            $IntEvento->usumodifId = 0;

            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $IntEventoMySqlDAO = new IntEventoMySqlDAO();
                $IntEventoMySqlDAO->insert($IntEvento);
                $IntEventoMySqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

            }


            $response = $response;

            break;


        /**
        * OddsFeed/SaveMatchMarket
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveMatchMarket":

            try {

                $IntEventoApuesta = new IntEventoApuesta();

                $IntEventoApuesta->eventoId = $params[0]->MatchId;
                $IntEventoApuesta->nombre = $params[0]->MatchId;
                $IntEventoApuesta->apuestaId = $params[0]->MarketId;
                $IntEventoApuesta->estado = 'A';
                $IntEventoApuesta->estadoApuesta = 'A';
                $IntEventoApuesta->usucreaId = 0;
                $IntEventoApuesta->usumodifId = 0;

                /* Obtenemos la Transaccion de la BD para crear y registrar el Debito con esta transaccion */
                $TransaccionJuegoMySqlDAO = new TransaccionJuegoMySqlDAO();
                $Transaction = $TransaccionJuegoMySqlDAO->getTransaction();

                /*  Verificamos que la Transaccion si este conectada y lista para usarse  */
                if ($Transaction->isIsconnected()) {

                    $IntEventoApuestaMySqlDAO = new IntEventoApuestaMySqlDAO($Transaction);
                    $eventoapuesta_id = $IntEventoApuestaMySqlDAO->insert($IntEventoApuesta);
                    // $IntEventoApuestaMySqlDAO->getTransaction()->commit();
                    $IntEventoApuestaDetalleMySqlDAO = new IntEventoApuestaDetalleMySqlDAO($Transaction);


                    foreach ($params as $param) {

                        $IntEventoApuestaDetalle = new IntEventoApuestaDetalle();
                        $IntEventoApuestaDetalle->eventoapuestaId = $eventoapuesta_id;
                        $IntEventoApuestaDetalle->apuestadetalleId = $param->Id;
                        $IntEventoApuestaDetalle->nombre = $param->Id;
                        $IntEventoApuestaDetalle->valor = $param->Price;
                        $IntEventoApuestaDetalle->estado = $param->State;
                        $IntEventoApuestaDetalle->estadoApuesta = $param->State;
                        $IntEventoApuestaDetalle->usucreaId = 0;
                        $IntEventoApuestaDetalle->usumodifId = 0;
                        $IntEventoApuestaDetalleMySqlDAO->insert($IntEventoApuestaDetalle);

                    }

                    $Transaction->commit();

                    $response["ErrorCode"] = 0;
                    $response["ErrorDescription"] = "success";

                    $response = $response;
                }

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

            }

            break;


        /**
        * OddsFeed/SaveMatchDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveMatchDetail":

            try {

                $IntEventoDetalle = new IntEventoDetalle();

                $IntEventoDetalle->eventoId = $params->MatchId;
                $IntEventoDetalle->tipo = $params->Type;
                $IntEventoDetalle->id = $params->Id;
                $IntEventoDetalle->valor = $params->Value;
                $IntEventoDetalle->usucreaId = 0;
                $IntEventoDetalle->usumodifId = 0;

                $IntEventoDetalleMySqlDAO = new IntEventoDetalleMySqlDAO();
                $IntEventoDetalleMySqlDAO->insert($IntEventoDetalle);
                $IntEventoDetalleMySqlDAO->getTransaction()->commit();

                $response["ErrorCode"] = 0;
                $response["ErrorDescription"] = "success";

                $response = $response;

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

            }

            break;

        /**
        * OddsFeed/SavePartnerPrices
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SavePartnerPrices":
            if (oldCount($params) > 0) {
                try {

                    $IntEventoApuestaDetalleMySqlDAO = new IntEventoApuestaDetalleMySqlDAO();


                    $gamearray = array();
                    $eventarray = array();
                    foreach ($params as $param) {

                        $IntEventoApuestaDetalle = new IntEventoApuestaDetalle($param->Id);
                        $IntEventoApuestaDetalle->valor = $param->PartnerPrice;
                        $IntEventoApuestaDetalleMySqlDAO->update($IntEventoApuestaDetalle);

                        $IntEventoApuesta = new IntEventoApuesta($IntEventoApuestaDetalle->eventoapuestaId);

                        array_push($eventarray, $param->Id);
                        array_push($gamearray, $IntEventoApuesta->eventoId);


                    }


                    $transaccion = $IntEventoApuestaDetalleMySqlDAO->getTransaction();

                    $transaccion->commit();

                    $result_array_final = array();
                    $subid = "-";

                    $objfin = "";
                    $objfirst = "";
                    $objinicio = array();


                    $what = array(
                        "event" => ["id", "price"],
                        "market" => ["id"],
                        "game" => ["id"],
                        "competition" => ["id", "name"],
                        "region" => ["id"],
                        "sport" => ["id", "alias"]
                    );

                    $where = array(
                        "game" => array(
                            "id" => array(
                                "@in" => $gamearray
                            )
                        ),
                        "event" => array(
                            "id" => array(
                                "@in" => $eventarray
                            )
                        )
                    );

                    $what = json_decode(json_encode($what));
                    $where = json_decode(json_encode($where));

                    $array_final = array();


                    if ($what->event != "" && $what->event != undefined) {
                        $result_array = array();

                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->event != "" && $where->event != undefined) {

                            foreach ($where->event as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_evento_apuesta_detalle.eventapudetalle_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        if ($where->game != "" && $where->game != undefined) {

                            foreach ($where->game as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_evento.evento_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntEventoApuestaDetalle = new IntEventoApuestaDetalle();
                        $apuestas = $IntEventoApuestaDetalle->getEventoApuestaDetallesCustom("int_evento_apuesta_detalle.*,int_apuesta_detalle.*", "int_evento_apuesta_detalle.eventapudetalle_id", "asc", 0, 10000, $jsonfiltro, true);
                        $apuestas = json_decode($apuestas);


                        $final = array();

                        foreach ($apuestas->data as $apuesta) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->event as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta_detalle.opcion"};

                                        break;

                                    case "type":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta_detalle.opcion_id"};

                                        break;

                                    case "type_1":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta_detalle.opcion_id"};

                                        break;
                                    case "price":
                                        $arrayd[$campo] = $apuesta->{"int_evento_apuesta_detalle.valor"};

                                        break;

                                }

                            }

                            if (oldCount($what->event) == 0) {
                                $arrayd["id"] = intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"});
                                $arrayd["name"] = $apuesta->{"int_apuesta_detalle.opcion"};
                                $arrayd["name_template"] = $apuesta->{"int_apuesta_detalle.opcion"};
                                $arrayd["price"] = $apuesta->{"int_evento_apuesta_detalle.valor"};
                                $arrayd["type"] = $apuesta->{"int_apuesta_detalle.opcion_id"};
                                $arrayd["type_1"] = $apuesta->{"int_apuesta_detalle.opcion_id"};
                                $arrayd["type_id"] = $apuesta->{"int_apuesta_detalle.opcion_id"};
                            }
                            array_push($objinicio, intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"}));
                            $subidsum = $subidsum + intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"});
                            $objfirst = "event";

                            if ($apuesta->{"int_evento_apuesta_detalle.estado"} != "A") {
                                $arrayd["price"] = "1";
                            }

                            //                            $final[$competencia->{"int_competencia.competencia_id"}] = $arrayd;


                            if (is_array($what->market)) {

                                $result_array["market"][intval($apuesta->{"int_evento_apuesta_detalle.eventoapuesta_id"})]["event"][intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"})] = $arrayd;
                                $result_array["market"][intval($apuesta->{"int_evento_apuesta_detalle.eventoapuesta_id"})]["col_count"] = $result_array["market"][intval($apuesta->{"int_evento_apuesta_detalle.eventoapuesta_id"})]["col_count"] + 1;
                            } else {
                                $result_array["event"][intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"})] = $arrayd;
                            }


                            $objfin = "event";

                        }


                        $result_array_final = $result_array;

                    }


                    if ($what->market != "" && $what->market != undefined) {
                        $result_array = array();

                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntEventoApuesta = new IntEventoApuesta();
                        $apuestas = $IntEventoApuesta->getEventoApuestasCustom("int_evento_apuesta.*,int_apuesta.*", "int_evento_apuesta.eventoapuesta_id", "asc", 0, 10000, $jsonfiltro, true);
                        $apuestas = json_decode($apuestas);


                        $final = array();

                        foreach ($apuestas->data as $apuesta) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->market as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"});

                                        break;

                                }

                            }

                            if (oldCount($what->market) == 0) {
                                $arrayd["id"] = intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"});
                                $arrayd["market_type"] = $apuesta->{"int_apuesta.abreviado"};
                                $arrayd["name"] = $apuesta->{"int_apuesta.nombre"};
                                $arrayd["name_template"] = $apuesta->{"int_apuesta.nombre"};
                                $arrayd["optimal"] = false;
                                $arrayd["order"] = 1000;
                                $arrayd["point_sequence"] = 0;
                                $arrayd["sequence"] = 0;
                                $arrayd["cashout"] = 0;
                            }

                            //                            $final[$competencia->{"int_competencia.competencia_id"}] = $arrayd;
                            $seguir = true;
                            if (is_array($what->event)) {

                                $arrayd["event"] = $result_array_final["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})]["event"];
                                //$arrayd["col_count"]=$result_array_final["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})]["col_count"];
                                if ($result_array_final["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})]["event"] == "") {
                                    $seguir = true;

                                }
                                if (oldCount($arrayd["event"]) <= 0) {
                                    $seguir = false;
                                }
                            }
                            if ($seguir) {
                                if (oldCount($objinicio) == 0) {
                                    array_push($objinicio, intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"}));

                                    $objfirst = "market";
                                }
                                if (is_array($what->game)) {

                                    $result_array["game"][intval($apuesta->{"int_evento_apuesta.evento_id"})]["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})] = $arrayd;
                                } else {
                                    $result_array["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})] = $arrayd;
                                }
                            }


                        }


                        $result_array_final = $result_array;
                        $objfin = "market";

                    }

                    if (is_array($what->game)) {


                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->competition != "" && $where->competition != undefined) {

                            foreach ($where->competition as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_competencia.competencia_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }
                        if ($where->sport != "" && $where->sport != undefined) {

                            foreach ($where->sport as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_deporte.deporte_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }


                            }
                        }
                        if ($where->game != "" && $where->game != undefined) {

                            foreach ($where->game as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_evento.evento_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntEventoDetalle = new IntEventoDetalle();
                        $eventos = $IntEventoDetalle->getEventoDetallesCustom("int_evento_detalle.*,int_evento.*", "int_evento_detalle.evento_id", "asc", 0, 10000, $jsonfiltro, true);
                        $eventos = json_decode($eventos);


                        $final = array();
                        $arrayd = array();
                        $eventoid = "";

                        foreach ($eventos->data as $evento) {

                            $array = array();

                            foreach ($what->game as $campo) {


                                switch ($campo) {

                                    case "team1_name":

                                        if ($evento->{"int_evento_detalle.tipo"} === "TEAM1") {
                                            $arrayd[$campo] = $evento->{"int_evento_detalle.valor"};

                                        }


                                        break;

                                    case "team2_name":
                                        if ($evento->{"int_evento_detalle.tipo"} == "TEAM2") {
                                            $arrayd[$campo] = $evento->{"int_evento_detalle.valor"};
                                        }
                                        break;

                                    case "text_info":
                                        if ($evento->{"int_evento_detalle.tipo"} == "TEAM1") {
                                            // $arrayd[$campo] = $evento->{"int_evento_detalle.valor"};
                                        }
                                        break;

                                }


                            }
                            if (oldCount($what->game) == 0) {

                                switch ($evento->{"int_evento_detalle.tipo"}) {

                                    case "TEAM1":

                                        $arrayd["team1_name"] = $evento->{"int_evento_detalle.valor"};
                                        $arrayd["info"]["virtual"][0] = array(
                                            "AnimalName" => "",
                                            "Number" => 1,
                                            "PlayerName" => $evento->{"int_evento_detalle.valor"}
                                        );

                                        break;

                                    case "TEAM2":
                                        $arrayd["team2_name"] = $evento->{"int_evento_detalle.valor"};
                                        $arrayd["info"]["virtual"][1] = array(
                                            "AnimalName" => "",
                                            "Number" => 2,
                                            "PlayerName" => $evento->{"int_evento_detalle.valor"}
                                        );
                                        break;

                                }
                            }

                            if ($eventoid != intval($evento->{"int_evento.evento_id"}) && $eventoid != "") {
                                $arrayd["game_number"] = $eventoid;
                                $arrayd["id"] = $eventoid;
                                $arrayd["start_ts"] = $eventoA->{"int_evento.fecha"};
                                $arrayd["type"] = 0;

                                $is_blocked = 0;

                                if ($eventoA->{"int_evento.estado"} != "A") {
                                    $is_blocked = 1;
                                }

                                $arrayd["is_blocked"] = $is_blocked;

                                if (is_array($what->market)) {

                                    $arrayd["market"] = $result_array_final["game"][$eventoid]["market"];

                                }


                                if (is_array($what->competition)) {

                                    $result_array["competition"][intval($eventoA->{"int_evento.competencia_id"})]["game"][$eventoid] = $arrayd;
                                } else {
                                    $result_array["game"][$eventoid] = $arrayd;


                                }
                                $arrayd = array();
                            }
                            $eventoid = intval($evento->{"int_evento.evento_id"});
                            $eventoA = $evento;

                            //array_push($final, $array);

                        }

                        $arrayd["game_number"] = $eventoid;
                        $arrayd["id"] = $eventoid;
                        $arrayd["start_ts"] = $evento->{"int_evento.fecha"};
                        $arrayd["type"] = 0;
                        $is_blocked = 0;

                        if ($evento->{"int_evento.estado"} != "A") {
                            $is_blocked = 1;
                        }

                        $arrayd["is_blocked"] = $is_blocked;


                        if (is_array($what->market)) {

                            $arrayd["market"] = $result_array_final["game"][$eventoid]["market"];

                        }

                        if (is_array($what->competition)) {

                            $result_array["competition"][intval($evento->{"int_evento.competencia_id"})]["game"][$eventoid] = $arrayd;
                            if (oldCount($result_array["competition"][intval($evento->{"int_evento.competencia_id"})]["game"]) == 1) {
                                //$subid=$subid."501".$evento->{"int_evento.evento_id"};

                            }
                        } else {
                            $result_array["game"][$eventoid] = $arrayd;

                            if (oldCount($result_array["game"]) == 1) {
                                //$subid=$subid."501".$evento->{"int_evento.evento_id"};

                            }
                        }
                        if (oldCount($objinicio) == 0) {
                            array_push($objinicio, intval($evento->{"int_evento.evento_id"}));
                            $objfirst = "game";

                        }

                        $objfin = "game";

                        $result_array_final = $result_array;

                    }

                    if ($what->competition != "" && $what->competition != undefined) {
                        $result_array = array();

                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->competition != "" && $where->competition != undefined) {

                            foreach ($where->competition as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_competencia.competencia_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntCompetencia = new IntCompetencia();
                        $competencias = $IntCompetencia->getCompetenciasCustom("int_competencia.*", "int_competencia.competencia_id", "asc", 0, 10000, $jsonfiltro, true);
                        $competencias = json_decode($competencias);


                        $final = array();

                        foreach ($competencias->data as $competencia) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->competition as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($competencia->{"int_competencia.competencia_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $competencia->{"int_competencia.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $competencia->{"int_competencia.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($competencia->{"int_competencia.competencia_id"});

                                        break;

                                }

                            }

                            //                            $final[$competencia->{"int_competencia.competencia_id"}] = $arrayd;

                            if (is_array($what->game)) {

                                $arrayd["game"] = $result_array_final["competition"][intval($competencia->{"int_competencia.competencia_id"})]["game"];

                            }
                            if (is_array($what->region)) {

                                $result_array["region"][intval($competencia->{"int_competencia.region_id"})]["competition"][intval($competencia->{"int_competencia.competencia_id"})] = $arrayd;
                            } else {
                                $result_array["competition"][intval($competencia->{"int_competencia.competencia_id"})] = $arrayd;
                            }
                            if (oldCount($objinicio) == 0) {
                                array_push($objinicio, intval($competencia->{"int_competencia.competencia_id"}));

                                $objfirst = "competition";
                            }

                        }

                        if (oldCount($competencias->data) == 1) {
                            //$subid=$subid."401".$competencia->{"int_competencia.competencia_id"};

                        }

                        $objfin = "competition";

                        $result_array_final = $result_array;

                    }

                    if ($what->region != "" && $what->region != undefined) {
                        $result_array = array();
                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->region != "" && $where->region != undefined) {

                            foreach ($where->competition as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_region.region_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntRegion = new IntRegion();
                        $regiones = $IntRegion->getRegionesCustom("int_region.*", "int_region.region_id", "asc", 0, 10000, $jsonfiltro, true);
                        $regiones = json_decode($regiones);


                        $final = array();

                        foreach ($regiones->data as $region) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->competition as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($region->{"int_region.region_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $region->{"int_region.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $region->{"int_region.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($region->{"int_region.region_id"});

                                        break;

                                }

                            }


                            if (is_array($what->competition)) {

                                $arrayd["competition"] = $result_array_final["region"][intval($region->{"int_region.region_id"})]["competition"];

                            }

                            if (is_array($what->sport)) {

                                $result_array["sport"][intval($region->{"int_region.deporte_id"})]["region"][intval($region->{"int_region.region_id"})] = $arrayd;
                            } else {
                                $result_array["region"][intval($region->{"int_region.region_id"})] = $arrayd;

                            }
                            if (oldCount($objinicio) == 0) {
                                array_push($objinicio, intval($region->{"int_region.region_id"}));

                                $objfirst = "region";
                            }
                        }

                        if (oldCount($regiones->data) == 1) {
                            //$subid=$subid."301".$region->{"int_region.region_id"};

                        }

                        $objfin = "region";

                        $result_array_final = $result_array;


                    }

                    if ($what->sport != "" && $what->sport != undefined) {
                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->sport != "" && $where->sport != undefined) {

                            foreach ($where->sport as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_deporte.deporte_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntDeporte = new IntDeporte();
                        $sports = $IntDeporte->getDeportesCustom("int_deporte.*", "int_deporte.deporte_id", "asc", 0, 10000, $jsonfiltro, true);
                        $sports = json_decode($sports);


                        $final = array();

                        foreach ($sports->data as $sport) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->sport as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($sport->{"int_deporte.deporte_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $sport->{"int_deporte.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $sport->{"int_deporte.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($sport->{"int_deporte.deporte_id"});

                                        break;

                                }

                            }

                            $final[$sport->{"int_deporte.deporte_id"}] = $arrayd;

                            if (is_array($what->region)) {

                                $arrayd["region"] = $result_array_final["sport"][intval($sport->{"int_deporte.deporte_id"})]["region"];

                                $result_array["sport"][intval($sport->{"int_deporte.deporte_id"})] = $arrayd;
                            } else {
                                $result_array["sport"][intval($sport->{"int_deporte.deporte_id"})] = $arrayd;

                            }

                            if (oldCount($objinicio) == 0) {
                                array_push($objinicio, intval($sport->{"int_deporte.deporte_id"}));

                                $objfirst = "sport";
                            }

                            //array_push($final, $array);

                        }

                        if (oldCount($sports->data) == 1) {
                            //$subid=$subid."201".$sport->{"int_deporte.deporte_id"};

                        }

                        $result_array_final = $result_array;

                        $objfin = "sport";

                    }

                    $responseW = array();

                    $responseW = array("end" => $objfirst, "first" => $objfin, "ids" => $objinicio, "data" => $result_array_final);


                    /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                    $WebsocketUsuario = new WebsocketUsuario(0, ($responseW));
                    $WebsocketUsuario->sendWSMessage();


                    $response["ErrorCode"] = 0;
                    $response["ErrorDescription"] = "success";

                    $response = $response;

                } catch (Exception $e) {
                    $response["ErrorCode"] = $e->getCode();
                    $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

                }

            }


            break;


        /**
        * OddsFeed/SaveMarketType
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveMarketType":
            $Abbreviated = $params->Abbreviated;
            $Name = $params->Name;
            $NameInternational = $params->NameInternational;
            $NameTranslate = $params->NameTranslate;
            $CompetitionId = $params->CompetitionId;
            $DateTime = $params->DateTime;
            $Status = $params->Status;

            $IntApuesta = new IntApuesta();

            $IntApuesta->nombre = $Name;
            $IntApuesta->nombreTraduccion = $NameTranslate;
            $IntApuesta->nombreInternacional = $NameInternational;
            $IntApuesta->abreviado = $Abbreviated;
            $IntApuesta->estado = $Status;
            $IntApuesta->fecha = $DateTime;
            $IntApuesta->usucreaId = 0;
            $IntApuesta->usumodifId = 0;

            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $IntApuestaMySqlDAO = new IntApuestaMySqlDAO();
                $IntApuestaMySqlDAO->insert($IntApuesta);
                $IntApuestaMySqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

            }


            $response = $response;

            break;

        /**
        * OddsFeed/SaveMarketTypeDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SaveMarketTypeDetail":

            $MarketTypeId = $params->MarketTypeId;

            $Option = $params->Option;
            $OptionId = $params->OptionId;
            $Status = $params->Status;

            $IntApuestaDetalle = new IntApuestaDetalle();

            $IntApuestaDetalle->apuestaId = $MarketTypeId;
            $IntApuestaDetalle->opcion = $Option;
            $IntApuestaDetalle->opcionId = $OptionId;
            $IntApuestaDetalle->estado = $Status;
            $IntApuestaDetalle->usucreaId = 0;
            $IntApuestaDetalle->usumodifId = 0;

            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $IntApuestaDetalleMySqlDAO = new IntApuestaDetalleMySqlDAO();
                $IntApuestaDetalleMySqlDAO->insert($IntApuestaDetalle);
                $IntApuestaDetalleMySqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

            }


            $response = $response;

            break;

        /**
        * OddsFeed/SavePartnerMatchBookings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/SavePartnerMatchBookings":

            if (oldCount($params) > 0) {
                try {

                    $IntEventoMysqlDAO = new IntEventoMysqlDAO();

                    $gamearray = array();
                    foreach ($params as $param) {
                        $state = "A";
                        if ($param->IsBlocked) {
                            $state = "I";

                        }

                        $IntEvento = new IntEvento($param->MatchId);
                        $IntEvento->estado = $state;
                        $IntEventoMysqlDAO->update($IntEvento);

                        array_push($gamearray, $param->MatchId);


                    }


                    $transaccion = $IntEventoMysqlDAO->getTransaction();

                    $transaccion->commit();

                    $result_array_final = array();
                    $subid = "-";

                    $objfin = "";
                    $objfirst = "";
                    $objinicio = array();


                    $what = array(
                        "event" => [],
                        "market" => [],
                        "game" => [],
                        "competition" => ["id", "name"],
                        "region" => ["id"],
                        "sport" => ["id", "alias"]
                    );

                    $where = array(
                        "game" => array(
                            "id" => array(
                                "@in" => $gamearray
                            )
                        )
                    );

                    $what = json_decode(json_encode($what));
                    $where = json_decode(json_encode($where));

                    $array_final = array();


                    if ($what->event != "" && $what->event != undefined) {
                        $result_array = array();

                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->event != "" && $where->event != undefined) {

                            foreach ($where->event as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_evento_apuesta_detalle.eventapudetalle_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        if ($where->game != "" && $where->game != undefined) {

                            foreach ($where->game as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_evento.evento_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntEventoApuestaDetalle = new IntEventoApuestaDetalle();
                        $apuestas = $IntEventoApuestaDetalle->getEventoApuestaDetallesCustom("int_evento_apuesta_detalle.*,int_apuesta_detalle.*", "int_evento_apuesta_detalle.eventapudetalle_id", "asc", 0, 10000, $jsonfiltro, true);
                        $apuestas = json_decode($apuestas);


                        $final = array();

                        foreach ($apuestas->data as $apuesta) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->event as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta_detalle.opcion"};

                                        break;

                                    case "type":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta_detalle.opcion_id"};

                                        break;

                                    case "type_1":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta_detalle.opcion_id"};

                                        break;
                                    case "price":
                                        $arrayd[$campo] = $apuesta->{"int_evento_apuesta_detalle.valor"};

                                        break;

                                }

                            }

                            if (oldCount($what->event) == 0) {
                                $arrayd["id"] = intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"});
                                $arrayd["name"] = $apuesta->{"int_apuesta_detalle.opcion"};
                                $arrayd["name_template"] = $apuesta->{"int_apuesta_detalle.opcion"};
                                $arrayd["price"] = $apuesta->{"int_evento_apuesta_detalle.valor"};
                                $arrayd["type"] = $apuesta->{"int_apuesta_detalle.opcion_id"};
                                $arrayd["type_1"] = $apuesta->{"int_apuesta_detalle.opcion_id"};
                                $arrayd["type_id"] = $apuesta->{"int_apuesta_detalle.opcion_id"};
                            }
                            array_push($objinicio, intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"}));
                            $subidsum = $subidsum + intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"});
                            $objfirst = "event";

                            if ($apuesta->{"int_evento_apuesta_detalle.estado"} != "A") {
                                $arrayd["price"] = "1";
                            }

                            //                            $final[$competencia->{"int_competencia.competencia_id"}] = $arrayd;


                            if (is_array($what->market)) {

                                $result_array["market"][intval($apuesta->{"int_evento_apuesta_detalle.eventoapuesta_id"})]["event"][intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"})] = $arrayd;
                                $result_array["market"][intval($apuesta->{"int_evento_apuesta_detalle.eventoapuesta_id"})]["col_count"] = $result_array["market"][intval($apuesta->{"int_evento_apuesta_detalle.eventoapuesta_id"})]["col_count"] + 1;
                            } else {
                                $result_array["event"][intval($apuesta->{"int_evento_apuesta_detalle.eventapudetalle_id"})] = $arrayd;
                            }


                            $objfin = "event";

                        }


                        $result_array_final = $result_array;

                    }


                    if ($what->market != "" && $what->market != undefined) {
                        $result_array = array();

                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntEventoApuesta = new IntEventoApuesta();
                        $apuestas = $IntEventoApuesta->getEventoApuestasCustom("int_evento_apuesta.*,int_apuesta.*", "int_evento_apuesta.eventoapuesta_id", "asc", 0, 10000, $jsonfiltro, true);
                        $apuestas = json_decode($apuestas);


                        $final = array();

                        foreach ($apuestas->data as $apuesta) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->market as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $apuesta->{"int_apuesta.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"});

                                        break;

                                }

                            }

                            if (oldCount($what->market) == 0) {
                                $arrayd["id"] = intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"});
                                $arrayd["market_type"] = $apuesta->{"int_apuesta.abreviado"};
                                $arrayd["name"] = $apuesta->{"int_apuesta.nombre"};
                                $arrayd["name_template"] = $apuesta->{"int_apuesta.nombre"};
                                $arrayd["optimal"] = false;
                                $arrayd["order"] = 1000;
                                $arrayd["point_sequence"] = 0;
                                $arrayd["sequence"] = 0;
                                $arrayd["cashout"] = 0;
                            }

                            //                            $final[$competencia->{"int_competencia.competencia_id"}] = $arrayd;
                            $seguir = true;
                            if (is_array($what->event)) {

                                $arrayd["event"] = $result_array_final["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})]["event"];
                                //$arrayd["col_count"]=$result_array_final["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})]["col_count"];
                                if ($result_array_final["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})]["event"] == "") {
                                    $seguir = true;

                                }
                                if (oldCount($arrayd["event"]) <= 0) {
                                    $seguir = false;
                                }
                            }
                            if ($seguir) {
                                if (oldCount($objinicio) == 0) {
                                    array_push($objinicio, intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"}));

                                    $objfirst = "market";
                                }
                                if (is_array($what->game)) {

                                    $result_array["game"][intval($apuesta->{"int_evento_apuesta.evento_id"})]["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})] = $arrayd;
                                } else {
                                    $result_array["market"][intval($apuesta->{"int_evento_apuesta.eventoapuesta_id"})] = $arrayd;
                                }
                            }


                        }


                        $result_array_final = $result_array;
                        $objfin = "market";

                    }

                    if (is_array($what->game)) {


                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->competition != "" && $where->competition != undefined) {

                            foreach ($where->competition as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_competencia.competencia_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }
                        if ($where->sport != "" && $where->sport != undefined) {

                            foreach ($where->sport as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_deporte.deporte_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }


                            }
                        }
                        if ($where->game != "" && $where->game != undefined) {

                            foreach ($where->game as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_evento.evento_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }

                                if (is_numeric($value)) {
                                    $op = "eq";
                                    $data = $value;
                                }

                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntEventoDetalle = new IntEventoDetalle();
                        $eventos = $IntEventoDetalle->getEventoDetallesCustom("int_evento_detalle.*,int_evento.*", "int_evento_detalle.evento_id", "asc", 0, 10000, $jsonfiltro, true);
                        $eventos = json_decode($eventos);


                        $final = array();
                        $arrayd = array();
                        $eventoid = "";

                        foreach ($eventos->data as $evento) {

                            $array = array();

                            foreach ($what->game as $campo) {


                                switch ($campo) {

                                    case "team1_name":

                                        if ($evento->{"int_evento_detalle.tipo"} === "TEAM1") {
                                            $arrayd[$campo] = $evento->{"int_evento_detalle.valor"};

                                        }


                                        break;

                                    case "team2_name":
                                        if ($evento->{"int_evento_detalle.tipo"} == "TEAM2") {
                                            $arrayd[$campo] = $evento->{"int_evento_detalle.valor"};
                                        }
                                        break;

                                    case "text_info":
                                        if ($evento->{"int_evento_detalle.tipo"} == "TEAM1") {
                                            // $arrayd[$campo] = $evento->{"int_evento_detalle.valor"};
                                        }
                                        break;

                                }


                            }
                            if (oldCount($what->game) == 0) {

                                switch ($evento->{"int_evento_detalle.tipo"}) {

                                    case "TEAM1":

                                        $arrayd["team1_name"] = $evento->{"int_evento_detalle.valor"};
                                        $arrayd["info"]["virtual"][0] = array(
                                            "AnimalName" => "",
                                            "Number" => 1,
                                            "PlayerName" => $evento->{"int_evento_detalle.valor"}
                                        );

                                        break;

                                    case "TEAM2":
                                        $arrayd["team2_name"] = $evento->{"int_evento_detalle.valor"};
                                        $arrayd["info"]["virtual"][1] = array(
                                            "AnimalName" => "",
                                            "Number" => 2,
                                            "PlayerName" => $evento->{"int_evento_detalle.valor"}
                                        );
                                        break;

                                }
                            }

                            if ($eventoid != intval($evento->{"int_evento.evento_id"}) && $eventoid != "") {
                                $arrayd["game_number"] = $eventoid;
                                $arrayd["id"] = $eventoid;
                                $arrayd["start_ts"] = $eventoA->{"int_evento.fecha"};
                                $arrayd["type"] = 0;

                                $is_blocked = 0;

                                if ($eventoA->{"int_evento.estado"} != "A") {
                                    $is_blocked = 1;
                                }

                                $arrayd["is_blocked"] = $is_blocked;

                                if (is_array($what->market)) {

                                    $arrayd["market"] = $result_array_final["game"][$eventoid]["market"];

                                }


                                if (is_array($what->competition)) {

                                    $result_array["competition"][intval($eventoA->{"int_evento.competencia_id"})]["game"][$eventoid] = $arrayd;
                                } else {
                                    $result_array["game"][$eventoid] = $arrayd;


                                }
                                $arrayd = array();
                            }
                            $eventoid = intval($evento->{"int_evento.evento_id"});
                            $eventoA = $evento;

                            //array_push($final, $array);

                        }

                        $arrayd["game_number"] = $eventoid;
                        $arrayd["id"] = $eventoid;
                        $arrayd["start_ts"] = $evento->{"int_evento.fecha"};
                        $arrayd["type"] = 0;
                        $is_blocked = 0;

                        if ($evento->{"int_evento.estado"} != "A") {
                            $is_blocked = 1;
                        }

                        $arrayd["is_blocked"] = $is_blocked;


                        if (is_array($what->market)) {

                            $arrayd["market"] = $result_array_final["game"][$eventoid]["market"];

                        }

                        if (is_array($what->competition)) {

                            $result_array["competition"][intval($evento->{"int_evento.competencia_id"})]["game"][$eventoid] = $arrayd;
                            if (oldCount($result_array["competition"][intval($evento->{"int_evento.competencia_id"})]["game"]) == 1) {
                                //$subid=$subid."501".$evento->{"int_evento.evento_id"};

                            }
                        } else {
                            $result_array["game"][$eventoid] = $arrayd;

                            if (oldCount($result_array["game"]) == 1) {
                                //$subid=$subid."501".$evento->{"int_evento.evento_id"};

                            }
                        }
                        if (oldCount($objinicio) == 0) {
                            array_push($objinicio, intval($evento->{"int_evento.evento_id"}));
                            $objfirst = "game";

                        }

                        $objfin = "game";

                        $result_array_final = $result_array;

                    }

                    if ($what->competition != "" && $what->competition != undefined) {
                        $result_array = array();

                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->competition != "" && $where->competition != undefined) {

                            foreach ($where->competition as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_competencia.competencia_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntCompetencia = new IntCompetencia();
                        $competencias = $IntCompetencia->getCompetenciasCustom("int_competencia.*", "int_competencia.competencia_id", "asc", 0, 10000, $jsonfiltro, true);
                        $competencias = json_decode($competencias);


                        $final = array();

                        foreach ($competencias->data as $competencia) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->competition as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($competencia->{"int_competencia.competencia_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $competencia->{"int_competencia.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $competencia->{"int_competencia.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($competencia->{"int_competencia.competencia_id"});

                                        break;

                                }

                            }

                            //                            $final[$competencia->{"int_competencia.competencia_id"}] = $arrayd;

                            if (is_array($what->game)) {

                                $arrayd["game"] = $result_array_final["competition"][intval($competencia->{"int_competencia.competencia_id"})]["game"];

                            }
                            if (is_array($what->region)) {

                                $result_array["region"][intval($competencia->{"int_competencia.region_id"})]["competition"][intval($competencia->{"int_competencia.competencia_id"})] = $arrayd;
                            } else {
                                $result_array["competition"][intval($competencia->{"int_competencia.competencia_id"})] = $arrayd;
                            }
                            if (oldCount($objinicio) == 0) {
                                array_push($objinicio, intval($competencia->{"int_competencia.competencia_id"}));

                                $objfirst = "competition";
                            }

                        }

                        if (oldCount($competencias->data) == 1) {
                            //$subid=$subid."401".$competencia->{"int_competencia.competencia_id"};

                        }

                        $objfin = "competition";

                        $result_array_final = $result_array;

                    }

                    if ($what->region != "" && $what->region != undefined) {
                        $result_array = array();
                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->region != "" && $where->region != undefined) {

                            foreach ($where->competition as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_region.region_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntRegion = new IntRegion();
                        $regiones = $IntRegion->getRegionesCustom("int_region.*", "int_region.region_id", "asc", 0, 10000, $jsonfiltro, true);
                        $regiones = json_decode($regiones);


                        $final = array();

                        foreach ($regiones->data as $region) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->competition as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($region->{"int_region.region_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $region->{"int_region.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $region->{"int_region.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($region->{"int_region.region_id"});

                                        break;

                                }

                            }


                            if (is_array($what->competition)) {

                                $arrayd["competition"] = $result_array_final["region"][intval($region->{"int_region.region_id"})]["competition"];

                            }

                            if (is_array($what->sport)) {

                                $result_array["sport"][intval($region->{"int_region.deporte_id"})]["region"][intval($region->{"int_region.region_id"})] = $arrayd;
                            } else {
                                $result_array["region"][intval($region->{"int_region.region_id"})] = $arrayd;

                            }
                            if (oldCount($objinicio) == 0) {
                                array_push($objinicio, intval($region->{"int_region.region_id"}));

                                $objfirst = "region";
                            }
                        }

                        if (oldCount($regiones->data) == 1) {
                            //$subid=$subid."301".$region->{"int_region.region_id"};

                        }

                        $objfin = "region";

                        $result_array_final = $result_array;


                    }

                    if ($what->sport != "" && $what->sport != undefined) {
                        $campos = "";
                        $cont = 0;

                        $rules = [];

                        if ($where->sport != "" && $where->sport != undefined) {

                            foreach ($where->sport as $key => $value) {

                                $field = "";
                                $op = "";
                                $data = "";

                                switch ($key) {
                                    case "id":
                                        $field = "int_deporte.deporte_id";
                                        break;

                                    case "name":

                                        break;

                                    case "alias":

                                        break;

                                    case "order":

                                        break;

                                }
                                if ($value->{'@in'} != undefined && $value->{'@in'} != "") {
                                    $op = "in";
                                    $data_array = $value->{'@in'};
                                    $data = "";

                                    foreach ($data_array as $item) {
                                        $data = $data . $item . ",";
                                    }
                                    $data = trim($data, ",");
                                }


                                if ($field != "") {
                                    array_push($rules, array("field" => $field, "data" => $data, "op" => $op));

                                }

                            }
                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonfiltro = json_encode($filtro);


                        $IntDeporte = new IntDeporte();
                        $sports = $IntDeporte->getDeportesCustom("int_deporte.*", "int_deporte.deporte_id", "asc", 0, 10000, $jsonfiltro, true);
                        $sports = json_decode($sports);


                        $final = array();

                        foreach ($sports->data as $sport) {

                            $array = array();
                            $arrayd = array();

                            foreach ($what->sport as $campo) {
                                switch ($campo) {
                                    case "id":
                                        $arrayd[$campo] = intval($sport->{"int_deporte.deporte_id"});

                                        break;

                                    case "name":
                                        $arrayd[$campo] = $sport->{"int_deporte.nombre"};

                                        break;

                                    case "alias":
                                        $arrayd[$campo] = $sport->{"int_deporte.abreviado"};

                                        break;

                                    case "order":
                                        $arrayd[$campo] = intval($sport->{"int_deporte.deporte_id"});

                                        break;

                                }

                            }

                            $final[$sport->{"int_deporte.deporte_id"}] = $arrayd;

                            if (is_array($what->region)) {

                                $arrayd["region"] = $result_array_final["sport"][intval($sport->{"int_deporte.deporte_id"})]["region"];

                                $result_array["sport"][intval($sport->{"int_deporte.deporte_id"})] = $arrayd;
                            } else {
                                $result_array["sport"][intval($sport->{"int_deporte.deporte_id"})] = $arrayd;

                            }

                            if (oldCount($objinicio) == 0) {
                                array_push($objinicio, intval($sport->{"int_deporte.deporte_id"}));

                                $objfirst = "sport";
                            }

                            //array_push($final, $array);

                        }

                        if (oldCount($sports->data) == 1) {
                            //$subid=$subid."201".$sport->{"int_deporte.deporte_id"};

                        }

                        $result_array_final = $result_array;

                        $objfin = "sport";

                    }

                    $responseW = array();

                    $responseW = array("end" => $objfirst, "first" => $objfin, "ids" => $objinicio, "data" => $result_array_final);


                    /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                    $WebsocketUsuario = new WebsocketUsuario(0, ($responseW));
                    $WebsocketUsuario->sendWSMessage();


                    $response["ErrorCode"] = 0;
                    $response["ErrorDescription"] = "success";

                    $response = $response;

                } catch (Exception $e) {
                    $response["ErrorCode"] = $e->getCode();
                    $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode() . $e->getMessage();

                }

            }


            break;

        /**
        * OddsFeed/GetCurrentPartnerInfo
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetCurrentPartnerInfo" :

            print_r('{"HasError":false,"AlertType":"success","AlertMessage":"Operation has completed successfuly","ModelErrors":[],"Data":{"Id":161640,"Name":"betbetbet","CompanyName":null,"Notes":"whitelabel","TimeZone":1.00,"CurrencyId":"EUR","LanguageId":"en","SiteUrl":null,"BalanceChangeTime":"00:00:00","LimitType":3,"FirstName":null,"LastName":null,"EMail":null,"Address":null,"Phone":null,"UserName":null,"Password":null,"IntegrationType":0,"IsSelected":false}}');

            break;

        /**
        * OddsFeed/GetMarketGroups
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetMarketGroups":

            $sport = $_REQUEST["sportId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = array(
                array("Id" => 1,
                    "Profitness" => 10,
                    "IsEditable" => false,
                    "IsLiveDefault" => true,
                    "IsPrematchDefault" => true,
                    "IsSuspended" => true,
                    "IsInvisible" => true,
                    "MarketPartnerId" => true,
                    "SportId" => 1,
                    "Name" => "Live"
                )
            );

            break;

        /**
        * OddsFeed/GetPartnerMarketTypeBookingss
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetPartnerMarketTypeBookings":


            $sportId = $_REQUEST["sportId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($sportId != "") {

                $json = '{"rules" : [{"field" : "int_region.deporte_id", "data" : "' . $sportId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntApuesta = new IntApuesta();
                $apuestas = $IntApuesta->getApuestasCustom(" int_apuesta.* ", "int_apuesta.apuesta_id", "asc", 0, 10000, $json, false);
                $apuestas = json_decode($apuestas);


                $final = array();

                foreach ($apuestas->data as $apuesta) {

                    $array = array();
                    $array["Id"] = $apuesta->{"int_apuesta.apuesta_id"};
                    $array["MarketTypeKind"] = $apuesta->{"int_apuesta.apuesta_id"};
                    $array["MarketTypeName"] = $apuesta->{"int_apuesta.nombre"};


                    array_push($final, $array);

                }

                $response["Data"] = $final;

            }

            break;

        /**
        * OddsFeed/GetMarketTypeItems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetMarketTypeItems":

            $sport = $_REQUEST["sportId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = array(
                array("Id" => 1,
                    "OptionId" => "1",
                    "Option" => "1",
                    "State" => "A"
                )
            );


            $sportId = $_REQUEST["sportId"];
            $marketType = $_REQUEST["marketType"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];


            $json = '{"rules" : [{"field" : "int_apuesta.apuesta_id", "data" : "' . $marketType . '","op":"eq"}] ,"groupOp" : "AND"}';


            $IntApuestaDetalle = new IntApuestaDetalle();
            $apuestas = $IntApuestaDetalle->getApuestaDetallesCustom(" int_apuesta_detalle.* ", "int_apuesta_detalle.apuestadetalle_id", "asc", 0, 10000, $json, true);
            $apuestas = json_decode($apuestas);


            $final = array();

            foreach ($apuestas->data as $apuesta) {

                $array = array();
                $array["Id"] = $apuesta->{"int_apuesta_detalle.apuestadetalle_id"};
                $array["Option"] = $apuesta->{"int_apuesta_detalle.opcion"};
                $array["OptionId"] = $apuesta->{"int_apuesta_detalle.opcion_id"};
                $array["State"] = $apuesta->{"int_apuesta_detalle.estado"};


                array_push($final, $array);

            }

            $response["Data"] = $final;


            break;


        /**
        * OddsFeed/GetMarketTypeGroupItems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetMarketTypeGroupItems":

            $sport = $_REQUEST["sportId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = array(
                array("Kind" => 1,
                    "Name" => "TEst")
            );

            break;

        /**
        * Competitors/CreateCompetitors
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Competitors/CreateCompetitors":

            $Address = $params->Address;
            $Competition = $params->CompetitionId;
            $Description = $params->Description;
            $Latitud = $params->Latitud;
            $Longitud = $params->Longitud;
            $Name = $params->Name;
            $Id = $params->Id;

            if ($Id != "" && is_numeric($Id)) {
                $CompetenciaPuntos = new CompetenciaPuntos($Id);
                $CompetenciaPuntos->setDireccion($Address);
                $CompetenciaPuntos->setCompetenciaId($Competition);
                $CompetenciaPuntos->setDescripcion($Description);
                $CompetenciaPuntos->setLatitud($Latitud);
                $CompetenciaPuntos->setLongitud($Longitud);
                $CompetenciaPuntos->setNombre($Name);
                $CompetenciaPuntos->setEstado('A');
                $CompetenciaPuntos->setUsucreaId(0);
                $CompetenciaPuntos->setUsumodifId(0);
                $CompetenciaPuntos->setCiudadId(0);

                $CompetenciaPuntosMySqlDAO = new CompetenciaPuntosMySqlDAO();

                $CompetenciaPuntosMySqlDAO->update($CompetenciaPuntos);
                $CompetenciaPuntosMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            } else {
                $CompetenciaPuntos = new CompetenciaPuntos();
                $CompetenciaPuntos->setDireccion($Address);
                $CompetenciaPuntos->setCompetenciaId($Competition);
                $CompetenciaPuntos->setDescripcion($Description);
                $CompetenciaPuntos->setLatitud($Latitud);
                $CompetenciaPuntos->setLongitud($Longitud);
                $CompetenciaPuntos->setNombre($Name);
                $CompetenciaPuntos->setEstado('A');
                $CompetenciaPuntos->setUsucreaId(0);
                $CompetenciaPuntos->setUsumodifId(0);
                $CompetenciaPuntos->setCiudadId(0);

                $CompetenciaPuntosMySqlDAO = new CompetenciaPuntosMySqlDAO();

                $CompetenciaPuntosMySqlDAO->insert($CompetenciaPuntos);
                $CompetenciaPuntosMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }


            break;


        /**
        * Competitors/GetCompetitors
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Competitors/GetCompetitors":


            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            $Mandante = new Mandante();

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }


            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $Competencia = new Competencia();


            $mandantes = $Competencia->getCompetenciasCustom("competencia.*", "competencia.competencia_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $mandantes = json_decode($mandantes);

            $final = [];

            foreach ($mandantes->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"competencia.competencia_id"};
                $array["Name"] = $value->{"competencia.descripcion"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array();
            //$response["Data"]["Objects"] = $final;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $mandantes->count[0]->{".count"};
            $response["data"] = $final;

            //Objects

            break;

        /**
        * OddsFeed/GetPartnerSportBookings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetPartnerSportBookings":
            $isLive = $_REQUEST["isLive"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            $json = '{"rules" : [{"field" : "", "data" : "2","op":"eq"}] ,"groupOp" : "AND"}';


            $IntDeporte = new IntDeporte();
            $sports = $IntDeporte->getDeportesCustom(" int_deporte.* ", "int_deporte.deporte_id", "asc", 0, 10000, $json, false);
            $sports = json_decode($sports);


            $final = array();

            foreach ($sports->data as $sport) {

                $array = array();
                $array["ObjectId"] = $sport->{"int_deporte.deporte_id"};
                $array["Name"] = $sport->{"int_deporte.nombre"};
                $array["NameId"] = $sport->{"int_deporte.nombre"};


                array_push($final, $array);

            }

            $response["Data"] = $final;

            break;

        /**
        * OddsFeed/GetSportBookingById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetSportBookingById":
            $isLive = $_REQUEST["isLive"];
            $sportId = $_REQUEST["sportId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($isLive != "" && $sportId != "") {

                $json = '{"rules" : [{"field" : "int_region.deporte_id", "data" : "' . $sportId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntRegion = new IntRegion();
                $regiones = $IntRegion->getRegionesCustom(" int_deporte.*,int_region.* ", "int_region.region_id", "asc", 0, 10000, $json, true);
                $regiones = json_decode($regiones);


                $final = array();

                foreach ($regiones->data as $region) {

                    $array = array();
                    $array["ObjectId"] = $region->{"int_region.region_id"};
                    $array["Name"] = $region->{"int_region.nombre"};

                    array_push($final, $array);

                }

                $response["Data"] = $final;

            }

            break;

        /**
        * GetRegionBookingById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetRegionBookingById":

            $isLive = $_REQUEST["isLive"];
            $sportId = $_REQUEST["sportId"];
            $regionId = $_REQUEST["regionId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($isLive != "" && $sportId != "") {

                $json = '{"rules" : [{"field" : "int_region.deporte_id", "data" : "' . $sportId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntRegion = new IntRegion();
                $regiones = $IntRegion->getRegionesCustom(" int_deporte.*,int_region.* ", "int_region.region_id", "asc", 0, 10000, $json, true);
                $regiones = json_decode($regiones);


                $final = array();

                foreach ($regiones->data as $region) {

                    $array = array();
                    $array["ObjectId"] = $region->{"int_region.region_id"};
                    $array["Name"] = $region->{"int_region.nombre"};

                    array_push($final, $array);

                }

                $response["Data"] = $final;

            }


            break;

        /**
        * OddsFeed/GetPartnerRegionBookings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetPartnerRegionBookings":
            $isLive = $_REQUEST["isLive"];
            $sportId = $_REQUEST["sportId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($isLive != "" && $sportId != "") {

                $json = '{"rules" : [{"field" : "int_region.deporte_id", "data" : "' . $sportId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntRegion = new IntRegion();
                $regiones = $IntRegion->getRegionesCustom(" int_deporte.*,int_region.* ", "int_region.region_id", "asc", 0, 10000, $json, true);
                $regiones = json_decode($regiones);


                $final = array();

                foreach ($regiones->data as $region) {

                    $array = array();
                    $array["ObjectId"] = $region->{"int_region.region_id"};
                    $array["Name"] = $region->{"int_region.nombre"};

                    array_push($final, $array);

                }

                $response["Data"] = $final;

            }

            break;

        /**
        * OddsFeed/GetPartnerCompetitionBookings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetPartnerCompetitionBookings":

            $sportId = $_REQUEST["sportId"];
            $regionId = $params->regionId;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($regionId != "") {


                $json = '{"rules" : [{"field" : "int_competencia.region_id", "data" : "' . $regionId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntCompetencia = new IntCompetencia();
                $competencias = $IntCompetencia->getCompetenciasCustom(" int_competencia.* ", "int_competencia.competencia_id", "asc", 0, 10000, $json, true);
                $competencias = json_decode($competencias);


                $final = array();

                foreach ($competencias->data as $competencia) {

                    $array = array();
                    $array["ObjectId"] = $competencia->{"int_competencia.competencia_id"};
                    $array["Name"] = $competencia->{"int_competencia.nombre"};

                    array_push($final, $array);

                }

                $response["Data"] = $final;


            }
            break;

        /**
        * OddsFeed/GetLiveMatchBookingsForCalendar
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetLiveMatchBookingsForCalendar":

            $sportId = $_REQUEST["sportId"];
            $competitionId = $params->competitionId;
            $competitionId = 1;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($competitionId != "") {


                $json = '{"rules" : [{"field" : "int_evento.competencia_id", "data" : "' . $competitionId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntEvento = new IntEvento();
                $competencias = $IntEvento->getEventosCustom(" int_evento.* ", "int_evento.evento_id", "asc", 0, 10000, $json, true);
                $competencias = json_decode($competencias);


                $final = array();

                foreach ($competencias->data as $competencia) {

                    $array = array();

                    if ($competencia->{"int_evento.estado"} == "A") {
                        $array["IsBlocked"] = 0;
                    } else {
                        $array["IsBlocked"] = 1;
                    }

                    $array["SportId"] = 1;
                    $array["SportId2"] = $competencia->{"int_evento.evento_id"};
                    $array["MatchId"] = $competencia->{"int_evento.evento_id"};
                    $array["RegionName"] = "Colombia";
                    $array["CompetitionName"] = "Primera B";
                    $array["Name"] = $competencia->{"int_evento.nombre"};
                    $array["LocalStartTime"] = $competencia->{"int_evento.fecha"};
                    $array["IsVisible"] = 1;
                    $array["LiveStatus"] = 1;

                    $array["Source"] = 1;

                    array_push($final, $array);

                }

                $response["Data"] = array(
                    "Count" => 2,
                    "Objects" => $final
                );


            }

            break;

        /**
        * OddsFeed/GetMatchMarketSelections
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetMatchMarketSelections":

            $matchId = $_REQUEST["matchId"];
            $competitionId = $params->competitionId;
            $competitionId = 1;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($matchId != "") {


                $json = '{"rules" : [{"field" : "int_evento_apuesta.evento_id", "data" : "' . $matchId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntEventoApuestaDetalle = new IntEventoApuestaDetalle();
                $apuestas = $IntEventoApuestaDetalle->getEventoApuestaDetallesCustom(" int_evento_apuesta_detalle.*,int_apuesta_detalle.*,int_apuesta.* ", "int_evento_apuesta_detalle.eventapudetalle_id", "asc", 0, 10000, $json, true);
                $apuestas = json_decode($apuestas);

                $final = array();

                foreach ($apuestas->data as $apuesta) {

                    $array = array();
                    $array["Id"] = $apuesta->{'int_evento_apuesta_detalle.eventapudetalle_id'};
                    $array["Price"] = $apuesta->{'int_evento_apuesta_detalle.valor'};
                    $array["PartnerPrice"] = floatval($apuesta->{'int_evento_apuesta_detalle.valor'});
                    $array["SelectionName"] = $apuesta->{'int_apuesta_detalle.opcion'};
                    $array["MarketName"] = $apuesta->{'int_apuesta.nombre'};
                    $array["MarketTypeId"] = intval($apuesta->{'int_apuesta.apuesta_id'});


                    array_push($final, $array);

                }

                $response["Data"] = $final;


            }


            break;

        /**
        * OddsFeed/GetMatchDetails
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetMatchDetails":

            $matchId = $_REQUEST["matchId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($matchId != "") {


                $json = '{"rules" : [{"field" : "int_evento_detalle.evento_id", "data" : "' . $matchId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntEventoDetalle = new IntEventoDetalle();
                $detalles = $IntEventoDetalle->getEventoDetallesCustom(" int_evento_detalle.*,int_evento.* ", "int_evento_detalle.eventodetalle_id", "asc", 0, 10000, $json, true);
                $detalles = json_decode($detalles);

                $final = array();

                foreach ($detalles->data as $apuesta) {

                    $array = array();
                    $array["DetalleId"] = $apuesta->{'int_evento_detalle.eventodetalle_id'};
                    $array["Type"] = $apuesta->{'int_evento_detalle.tipo'};
                    $array["Id"] = $apuesta->{'int_evento_detalle.id'};
                    $array["Value"] = $apuesta->{'int_evento_detalle.valor'};

                    array_push($final, $array);

                }

                $response["Data"] = $final;


            }


            break;

        /**
        * OddsFeed/GetCompetitionOverview
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetCompetitionOverview":

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = array(array(
                "SportName" => "TEST"
            )

            );


            break;

        /**
        * OddsFeed/GetMatch
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetMatch":


            $matchId = $_REQUEST["matchId"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($matchId != "") {


                $json = '{"rules" : [{"field" : "int_evento.evento_id", "data" : "' . $matchId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntEvento = new IntEvento();
                $eventos = $IntEvento->getEventosCustom(" int_evento.*,int_region.*,int_deporte.*,int_competencia.* ", "int_evento.evento_id", "asc", 0, 10000, $json, true);
                $eventos = json_decode($eventos);


                $final = array();

                foreach ($eventos->data as $evento) {

                    $array = array();
                    $array["SportName"] = $evento->{"int_deporte.nombre"};
                    $array["RegionName"] = $evento->{"int_region.nombre"};
                    $array["CompetitionName"] = $evento->{"int_competencia.nombre"};
                    $array["Name"] = $evento->{"int_evento.nombre"};

                    $array["LocalStartTime"] = $evento->{"int_evento.fecha"};

                    array_push($final, $array);

                }

                $response["Data"] = array(
                    "Objects" => $final
                );


            }
            break;

        /**
        * OddsFeed/GetMatchBookings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetMatchBookings":

            $sportId = $_REQUEST["sportId"];
            $competitionId = $params->competitionId;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($competitionId != "") {


                $json = '{"rules" : [{"field" : "int_evento.competencia_id", "data" : "' . $competitionId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntEvento = new IntEvento();
                $competencias = $IntEvento->getEventosCustom(" int_evento.* ", "int_evento.evento_id", "asc", 0, 10000, $json, true);
                $competencias = json_decode($competencias);


                $final = array();

                foreach ($competencias->data as $competencia) {

                    $array = array();
                    $array["ObjectId"] = $competencia->{"int_evento.evento_id"};
                    $array["Name"] = $competencia->{"int_evento.nombre"};
                    $array["LocalStartTime"] = $competencia->{"int_evento.fecha"};

                    array_push($final, $array);

                }

                $response["Data"] = $final;


            }
            break;

        /**
        * OddsFeed/GetTeamsBookings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "OddsFeed/GetTeamsBookings":


            $matchId = $params->matchId;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            if ($matchId != "") {


                $json = '{"rules" : [{"field" : "int_evento.competencia_id", "data" : "' . $competitionId . '","op":"eq"}] ,"groupOp" : "AND"}';


                /* $IntEquipo = new IntEquipo();
                 $equipos = $IntEvento->getEquiposCustom(" int_equipo.* ", "int_equipo.equipo_id", "asc", 0, 10000, $json, true);
                 $equipos = json_decode($equipos);


                 $final = array();

                 foreach ($equipos->data as $equipo) {

                     $array = array();
                     $array["ObjectId"] = $equipo->{"int_evento.evento_id"};
                     $array["Name"] = $equipo->{"int_evento.nombre"};
                     $array["Code"] = $equipo->{"int_evento.nombre"};
                     $array["LocalStartTime"] = $equipo->{"int_evento.fecha"};

                     array_push($final, $array);

                 }
 */
                $IntEventoDetalle = new IntEventoDetalle();

                $jsonfiltro = '{"rules" : [{"field" : "int_evento.evento_id", "data" : "' . $matchId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $eventodetalles = $IntEventoDetalle->getEventoDetallesCustom("int_evento_detalle.*,int_evento.*", "int_evento_detalle.evento_id", "asc", 0, 10000, $jsonfiltro, true);

                $eventodetalles = json_decode($eventodetalles);

                $final = array();

                foreach ($eventodetalles->data as $equipo) {

                    $array = array();
                    $array["ObjectId"] = $equipo->{"int_evento_detalle.eventodetalle_id"};
                    $array["Name"] = $equipo->{"int_evento_detalle.valor"};
                    $array["Code"] = $equipo->{"int_evento_detalle.id"};
                    $array["Image"] = "";
                    $array["LocalStartTime"] = $equipo->{"int_evento_detalle.fecha_modif"};

                    array_push($final, $array);

                }


                $response["Data"] = $final;


            }
            break;

        /**
        * Sport/GetSports
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Sport/GetSports":

            $obj = (explode("/", current(explode("?", $URI))));
            $count = oldCount($obj);
            switch ($obj[$count - 2] . "/" . $obj[$count - 1]) {
                case "Sport/GetSports":
                    $BeginDate = $_REQUEST["BeginDate"];
                    $EndDate = $_REQUEST["EndDate"];
                    $sports = getSports($BeginDate, $EndDate);

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "Operation has completed successfuly";
                    $response["ModelErrors"] = [];
                    $response["Data"] = $sports;

                    break;

                case "OddsFeed/GetSports":

                    $json = '{"rules" : [{"field" : "", "data" : "2","op":"eq"}] ,"groupOp" : "AND"}';


                    $IntDeporte = new IntDeporte();
                    $sports = $IntDeporte->getDeportesCustom(" int_deporte.* ", "int_deporte.deporte_id", "asc", 0, 10000, $json, false);
                    $sports = json_decode($sports);


                    $final = array();

                    foreach ($sports->data as $sport) {

                        $array = array();
                        $array["Id"] = $sport->{"int_deporte.deporte_id"};
                        $array["Name"] = $sport->{"int_deporte.nombre"};
                        $array["NameId"] = $sport->{"int_deporte.nombre"};

                        array_push($final, $array);

                    }

                    $response["Data"] = $final;


                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "Operation has completed successfuly";
                    $response["ModelErrors"] = [];

                    break;
            }


            break;

        /**
        * Sport/GetMarketTypes
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Sport/GetMarketTypes":

            $BeginDate = $_REQUEST["BeginDate"];
            $EndDate = $_REQUEST["EndDate"];
            $sports = getMarketTypes($_REQUEST['sportId'], $BeginDate, $EndDate);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = $sports;


            break;


        /**
        * Sport/GetCompetitions
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Sport/GetCompetitions":

            $obj = (explode("/", current(explode("?", $URI))));
            $count = oldCount($obj);
            switch ($obj[$count - 2] . "/" . $obj[$count - 1]) {
                case "Sport/GetCompetitions":
                    $BeginDate = $_REQUEST["BeginDate"];
                    $EndDate = $_REQUEST["EndDate"];
                    $sports = getCompetitions($_REQUEST['sportId'], $_REQUEST['regionId'], $BeginDate, $EndDate);

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "Operation has completed successfuly";
                    $response["ModelErrors"] = [];
                    $response["Data"] = $sports;


                    break;

                case "OddsFeed/GetCompetitions":

                    $sportId = $_REQUEST["sportId"];
                    $regionId = $_REQUEST["regionId"];

                    $json = '{"rules" : [{"field" : "int_competencia.region_id", "data" : "' . $regionId . '","op":"eq"}] ,"groupOp" : "AND"}';


                    $IntCompetencia = new IntCompetencia();
                    $competencias = $IntCompetencia->getCompetenciasCustom(" int_competencia.* ", "int_competencia.competencia_id", "asc", 0, 10000, $json, true);
                    $competencias = json_decode($competencias);


                    $final = array();

                    foreach ($competencias->data as $competencia) {

                        $array = array();
                        $array["Id"] = $competencia->{"int_competencia.competencia_id"};
                        $array["Name"] = $competencia->{"int_competencia.nombre"};

                        array_push($final, $array);

                    }

                    $response["Data"] = $final;


                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "Operation has completed successfuly";
                    $response["ModelErrors"] = [];

                    break;
            }


            break;

        /**
        * Sport/GetMatches
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Sport/GetMatches":
            $BeginDate = $params->BeginDate;
            $EndDate = $params->EndDate;

            $sports = getMatches($params->SportId, $params->RegionId, $params->CompetitionId, $BeginDate, $EndDate);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = $sports;
            break;


        /**
        * ft/Sports
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "ft/Sports":
            $isLive = $_REQUEST["isLive"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfuly";
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            $json = '{"rules" : [{"field" : "", "data" : "2","op":"eq"}] ,"groupOp" : "AND"}';


            $IntDeporte = new IntDeporte();
            $sports = $IntDeporte->getDeportesCustom(" int_deporte.* ", "int_deporte.deporte_id", "asc", 0, 10000, $json, false);
            $sports = json_decode($sports);


            $final = array();

            foreach ($sports->data as $sport) {

                $array = array();
                $array["ObjectId"] = $sport->{"int_deporte.deporte_id"};
                $array["Name"] = $sport->{"int_deporte.nombre"};
                $array["NameId"] = $sport->{"int_deporte.nombre"};


                array_push($final, $array);

            }

            $response["Result"] = $final;

            break;

        /**
        * Account/GetMenus
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Account/GetMenus':

            //Verifica si ya hubo un logueo
            if (!$_SESSION['logueado']) {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                $response["ModelErrors"] = [];

                $response["Data"] = array(
                    "AuthenticationStatus" => 0,

                    "PermissionList" => array(),
                );

            } else {

                try {

                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                    $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

                    /*
                $UsuarioToken = new UsuarioToken("", $responseU->user_id);

                $UsuarioToken->setRequestId($json->session->sid);
                $UsuarioToken->setCookie(encrypt($responseU->user_id . "#" . time()));

                $UsuarioTokenMySqlDAO = new \Backend\mysql\UsuarioTokenMySqlDAO();
                $UsuarioTokenMySqlDAO->update($UsuarioToken);
                $UsuarioTokenMySqlDAO->getTransaction()->commit();
                 */

                    /*
                "ViewClients","ViewMenuDashBoard","ManageClients","ViewPaymentReport","ViewDepositWithdrawalReport","ViewBalance","ViewSalesReport","ViewClientTurnoverReport","ViewMenuReport",
                 */

                    /*
                "ViewAgentMenu", "ViewAgentSystem", "ViewAgent", "ViewAgentSubAccounts", "ViewAgentMembers", "ViewMessages", "ViewEmailTemplates", "ManageMessages", "ViewTranslation", "ViewSettings", "ViewStream", "PMViewPartner", "PMViewProduct", "PMViewSale", "hjkhjkhjk", "ViewOddsFeed", "ViewMatch", "ViewSportLimits", "ViewPartnersBooking", "ViewMenuReport", "ViewCasinoReport", "ViewCashDeskReport", "ViewCRM", "ViewSegment", "CreateSegment", "ViewBetShops", "ViewClients", "ManageClients",
                 */

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];


                    if ($_SESSION['usuario2'] == "5") {
                        //if ($_SESSION['usuario2'] == "163") {

                        $menus = $Usuario->getMenus();
                        $menus_string = array();
                        array_push($menus_string, "ViewMenuSecurity");
                        array_push($menus_string, "ViewMenuTeacher");
                        array_push($menus_string, "ViewMenuManagement");
                        array_push($menus_string, "ViewMenuCash");
                        array_push($menus_string, "ViewMenuQueries");
                        foreach ($menus as $key => $value) {
                            array_push($menus_string, "view" . str_replace("_", "", str_replace(".php", "", $value["b.pagina"])));
                        }


                        $menus_string = obtenerMenu();


                        $response = $menus_string;
                    } else {

                        $PerfilSubmenu = new PerfilSubmenu();

                        $Perfil_id = $_SESSION["win_perfil2"];
                        $MaxRows = $params->MaxRows;
                        $OrderedItem = $params->OrderedItem;
                        $SkeepRows = $params->SkeepRows;

                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 100000;
                        }

                        $mismenus = "0";

                        $json = '{"rules" : [{"field" : "menu.version", "data" : "2","op":"eq"},{"field" : "perfil_submenu.perfil_id", "data" : "' . $Perfil_id . '","op":"eq"}] ,"groupOp" : "AND"}';

                        $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

                        $menus = json_decode($menus);

                        $menus3 = [];
                        $arrayf = [];
                        $submenus = [];

                        $menus_string = array();

                        foreach ($menus->data as $key => $value) {

                            $m = [];
                            $m["Id"] = $value->{"menu.menu_id"};
                            $m["Name"] = $value->{"menu.descripcion"};

                            $array = [];

                            $array["Id"] = $value->{"submenu.submenu_id"};
                            $array["Name"] = $value->{"submenu.descripcion"};
                            $array["Pagina"] = $value->{"submenu.pagina"};
                            $array["IsGiven"] = true;
                            $array["Action"] = "view";

                            $mismenus = $mismenus . "," . $array["Id"];

                            if ($arrayf["Id"] != "" && $m["Id"] != $arrayf["Id"]) {
                                array_push($menus_string, $arrayf["Pagina"]);

                                $arrayf["Permissions"] = $submenus;
                                array_push($menus3, $arrayf);
                                // $submenus = [];
                            }
                            array_push($menus_string, $array["Pagina"]);

                            $arrayf["Id"] = $value->{"menu.menu_id"};
                            $arrayf["Name"] = $value->{"menu.descripcion"};
                            $arrayf["Pagina"] = $value->{"menu.pagina"};

                            array_push($submenus, $array);
                        }
                        array_push($menus_string, $arrayf["Pagina"]);

                        $arrayf["Permissions"] = $submenus;
                        array_push($menus3, $arrayf);

                        $IncludedPermission = $submenus;

                        /* $menus = $Usuario->getMenus();
                    array_push($menus_string, "ViewMenuSecurity");
                    array_push($menus_string, "ViewMenuTeacher");
                    array_push($menus_string, "ViewMenuManagement");
                    array_push($menus_string, "ViewMenuCash");
                    array_push($menus_string, "ViewMenuQueries");
                    foreach ($menus as $key => $value) {
                    array_push($menus_string, "view" . str_replace("_", "", str_replace(".php", "", $value["b.pagina"])));
                    } */

                        $menus_string = obtenerMenu();


                        $response = $menus_string;

                    }

                } catch (Exception $e) {

                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                    $response["ModelErrors"] = [];

                    $response["Data"] = array(
                        "AuthenticationStatus" => 0,

                        "PermissionList" => array(),
                    );

                }

            }

            break;


        /**
        * Menus/GetMenuUser
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Menus/GetMenuUser':
            $id = $params->id;

            //Verifica si ya hubo un logueo
            if (!$_SESSION['logueado']) {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                $response["ModelErrors"] = [];

                $response["data"] = array();

            } else {


                try {
                    $Menu = $params->Menu;

                    $UsuarioPerfil = new UsuarioPerfil($id);
                    $Perfil_id = $UsuarioPerfil->perfilId;
                    $menus = "";


                    switch ($Menu) {
                        case "betShop":
                            $menus = json_decode('[
								{ "id":"betShopManagement.informationBetShop", "value": "Información" },
								{ "id":"betShopManagement.cashier.betShopCashier", "value": "Cajeros" },
								{ "id":"betShopManagement.comissions/betShopManagement.comissions.comissionsReportBetShop", "value": "Comisiones" },
								{ "id":"betShopManagement.reportscustomerBetShop/betShopManagement.depositReportBetShop", "value": "Reportes" },
								{ "id":"betShopManagement.configurationBetShop/betShopManagement.configuration.changePassword", "value": "Configuración" }
							]');
                            switch ($Perfil_id) {

                                case "CAJERO":

                                    $menus = json_decode('[
								{ "id":"betShopManagement.informationBetShop", "value": "Información" },
								{ "id":"betShopManagement.reportscustomerBetShop/betShopManagement.depositReportBetShop", "value": "Reportes" },
								{ "id":"betShopManagement.configurationBetShop/betShopManagement.configuration.changePassword", "value": "Configuración" }
							]');
                                    break;
                            }

                            $menus = json_decode('[
								{ "id":"betShopManagement.informationBetShop", "value": "Información" },
								{ "id":"betShopManagement.cashier.betShopCashier", "value": "Cajeros" },
								{ "id":"betShopManagement.comissions/betShopManagement.comissions.comissionsReportBetShop", "value": "Comisiones" },
								{ "id":"betShopManagement.reportscustomerBetShop/betShopManagement.depositReportBetShop", "value": "Reportes" },
								{ "id":"betShopManagement.configurationBetShop/betShopManagement.configuration.changePassword", "value": "Configuración" }
							]');
                            break;

                        case "AgentList":

                            //								{ "id":"agent.financescustomerAgentList/agent.financial.comisiones", "value":_("Finanzas"), },
                            $menus = json_decode('[
								{ "id":"agent.informationAgentList", "value":"Información" },
								{ "id":"agent.reportscustomerAgentList/agent.depositReportAgentList", "value":"Reportes" },
								{ "id":"agent.configurationAgentList/agent.configuration.changePassword", "value":"Configuración" },
								{ "id":"agent.statisticsAgentList", "value":"Estadisticas" },

							]');


                            $menus = json_decode('[
								{ "id":"agent.informationAgentList", "value":"Información" },
								{ "id":"agent.comissions/agent.comissions.comissions", "value":"Comisiones" },
								{ "id":"agent.reportscustomerAgentList/agent.depositReportAgentList", "value":"Reportes" },
								{ "id":"agent.configurationAgentList/agent.configuration.changePassword", "value":"Configuración" },
								{ "id":"agent.statisticsAgentList", "value":"Estadisticas" }
						

							]');
                            break;

                        default:
                            $menus = json_decode('[
								{ "id":"agent.informationAgentList", "value":"Información" },
								{ "id":"agent.reportscustomerAgentList/agent.depositReportAgentList", "value":"Reportes" },
								{ "id":"agent.configurationAgentList/agent.configuration.changePassword", "value":"Configuración" },
								{ "id":"agent.statisticsAgentList", "value":"Estadisticas" },

							]');
                            break;
                    }


                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];
                    $response["data"] = $menus;


                } catch (Exception $e) {

                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                    $response["ModelErrors"] = [];

                    $response["Data"] = array();

                }

            }

            break;

        /**
        * Account/CheckAuthentication
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Account/CheckAuthentication':

            //Verifica si ya hubo un logueo
            if (!$_SESSION['logueado']) {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                $response["ModelErrors"] = [];

                $response["Data"] = array(
                    "AuthenticationStatus" => 0,

                    "PermissionList" => array(),
                );

            } else {

                try {

                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                    $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());
                    $Pais = new Pais($Usuario->paisId);

                    /*
                $UsuarioToken = new UsuarioToken("", $responseU->user_id);

                $UsuarioToken->setRequestId($json->session->sid);
                $UsuarioToken->setCookie(encrypt($responseU->user_id . "#" . time()));

                $UsuarioTokenMySqlDAO = new \Backend\mysql\UsuarioTokenMySqlDAO();
                $UsuarioTokenMySqlDAO->update($UsuarioToken);
                $UsuarioTokenMySqlDAO->getTransaction()->commit();
                 */

                    /*
                "ViewClients","ViewMenuDashBoard","ManageClients","ViewPaymentReport","ViewDepositWithdrawalReport","ViewBalance","ViewSalesReport","ViewClientTurnoverReport","ViewMenuReport",
                 */

                    /*
                "ViewAgentMenu", "ViewAgentSystem", "ViewAgent", "ViewAgentSubAccounts", "ViewAgentMembers", "ViewMessages", "ViewEmailTemplates", "ManageMessages", "ViewTranslation", "ViewSettings", "ViewStream", "PMViewPartner", "PMViewProduct", "PMViewSale", "hjkhjkhjk", "ViewOddsFeed", "ViewMatch", "ViewSportLimits", "ViewPartnersBooking", "ViewMenuReport", "ViewCasinoReport", "ViewCashDeskReport", "ViewCRM", "ViewSegment", "CreateSegment", "ViewBetShops", "ViewClients", "ManageClients",
                 */

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                    if ($_SESSION["Global"] == "") {
                        $_SESSION["Global"] == "N";
                    }


                    if ($_SESSION['usuario2'] == "5" && false) {
                        //if ($_SESSION['usuario2'] == "163") {

                        $menus = $Usuario->getMenus();
                        $menus_string = array();
                        array_push($menus_string, "ViewMenuSecurity");
                        array_push($menus_string, "ViewMenuTeacher");
                        array_push($menus_string, "ViewMenuManagement");
                        array_push($menus_string, "ViewMenuCash");
                        array_push($menus_string, "ViewMenuQueries");
                        foreach ($menus as $key => $value) {
                            array_push($menus_string, "view" . str_replace("_", "", str_replace(".php", "", $value["b.pagina"])));
                        }

                        $menus_string = obtenerMenu();
                        $paisesparamenu = obtenerPaisesReport();


                        $Proveedor = new Proveedor();
                        $Proveedor->setTipo("CASINO");

                        $proveedores = $Proveedor->getProveedores();

                        $finalProveedores = [];
                        $array = [];
                        $array["id"] = '0';
                        $array["value"] = 'Todos';
                        array_push($finalProveedores, $array);

                        foreach ($proveedores as $key => $value) {

                            $array = [];

                            $array["id"] = $value->getProveedorId();
                            $array["value"] = $value->getDescripcion();

                            array_push($finalProveedores, $array);

                        }


                        $Proveedor = new Proveedor();
                        $Proveedor->setTipo("LIVECASINO");

                        $proveedores = $Proveedor->getProveedores();

                        foreach ($proveedores as $key => $value) {

                            $array = [];

                            $array["id"] = $value->getProveedorId();
                            $array["value"] = $value->getDescripcion();

                            array_push($finalProveedores, $array);

                        }


                        $ProductoMandante = new ProductoMandante();

                        $rules = [];
                        array_push($rules, array("field" => "proveedor.tipo", "data" => "CASINO ", "op" => "eq"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $json = json_encode($filtro);

                        if ($_SESSION["Global"] == "S") {
                            $Producto = new Producto();

                            $productos = $Producto->getProductosCustom(" producto.* ", "producto.producto_id", "asc", $SkeepRows, $MaxRows, $json, true);
                            $productos = json_decode($productos);
                        } else {
                            $productos = $ProductoMandante->getProductosMandanteCustom(" producto_mandante.*,mandante.*,producto.* ", "producto_mandante.prodmandante_id", "asc", $SkeepRows, $MaxRows, $json, true);
                            $productos = json_decode($productos);

                        }


                        $finalProductos = [];

                        foreach ($productos->data as $key => $value) {

                            $array = [];
                            if ($_SESSION["GlobalConfig"] == "S") {
                                $array["id"] = $value->{"producto.producto_id"};
                                $array["value"] = $value->{"producto.descripcion"};

                            } else {
                                $array["id"] = $value->{"producto_mandante.prodmandante_id"};
                                $array["value"] = $value->{"producto.descripcion"};

                            }
                            array_push($finalProductos, $array);

                        }


                        $rules = [];

                        if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }


                        if ($_SESSION["win_perfil"] == "PUNTOVENTA") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usuhijo_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));


                        if ($_SESSION['PaisCond'] == "S") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                        }
                        if ($_SESSION['Global'] == "N") {
                            array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                        }
                        array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonbetshop = json_encode($filtro);


                        $PuntoVenta = new PuntoVenta();


                        $mandantes = $PuntoVenta->getPuntoVentasCustom("usuario.estado_valida,usuario.fecha_crea,usuario.moneda,usuario.fecha_ult,punto_venta.*", "punto_venta.puntoventa_id", "asc", 0, 100000, $jsonbetshop, true);

                        $mandantes = json_decode($mandantes);


                        $finalBetShops = [];

                        foreach ($mandantes->data as $key => $value) {

                            $array = [];

                            $array["id"] = $value->{"punto_venta.usuario_id"};
                            $array["value"] = $value->{"punto_venta.descripcion"};

                            array_push($finalBetShops, $array);

                        }


                        $finalBetShops = [];

                        foreach ($mandantes->data as $key => $value) {

                            $array = [];

                            $array["id"] = $value->{"punto_venta.usuario_id"};
                            $array["value"] = $value->{"punto_venta.descripcion"};

                            array_push($finalBetShops, $array);

                        }


                        $ReportCountry = $Usuario->paisId;

                        if ($_SESSION["win_perfil2"] == "ADMIN" || $_SESSION["win_perfil2"] == "ADMIN2" || $_SESSION["win_perfil2"] == "OPERADOR" || $_SESSION["win_perfil2"] == "SA") {
                            if ($_SESSION['PaisCond'] != "S") {
                                $ReportCountry = '0';
                            }

                        }

                        $SaldoRecargas = 0;
                        $SaldoJuego = 0;
                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2" || $_SESSION["win_perfil2"] == "PUNTOVENTA") {
                            $PuntoVenta = new PuntoVenta("", $_SESSION["usuario"]);

                            $SaldoRecargas = $PuntoVenta->getCupoRecarga();
                            $SaldoJuego = $PuntoVenta->getCreditosBase();
                        }

                        $finalMandante = [];

                        if ($_SESSION["GlobalConfig"] == "S") {

                            $array = [];
                            $array["id"] = "-1";
                            $array["value"] = "Virtualsoft";

                            $array["Countries"] = array(
                                array(
                                    "id" => "2",
                                    "value" => "Nicaragua"
                                ),
                                array(
                                    "id" => "173",
                                    "value" => "Perú"
                                )
                            );
                            array_push($finalMandante, $array);


                            $Mandante = new Mandante();

                            $rules = [];
                            // array_push($rules, array("field" => "proveedor.tipo", "data" => "CASINO ", "op" => "eq"));

                            $filtro = array("rules" => $rules, "groupOp" => "AND");
                            $json = json_encode($filtro);

                            $mandantes = $Mandante->getMandantes("mandante.mandante", "asc", 0, 100, $json, true);
                            $mandantes = json_decode($mandantes);


                            foreach ($mandantes->data as $key => $value) {
                                $array = [];
                                $array["id"] = $value->{"mandante.mandante"};
                                $array["value"] = $value->{"mandante.descripcion"};

                                $array["Countries"] = array(
                                    array(
                                        "id" => "2",
                                        "value" => "Nicaragua"
                                    ),
                                    array(
                                        "id" => "173",
                                        "value" => "Perú"
                                    )
                                );

                                array_push($finalMandante, $array);

                            }
                        } else {
                            $array = [];

                            $array["id"] = $_SESSION["mandante"];
                            $array["value"] = $_SESSION["mandante"];

                            $array["Countries"] = array(
                                array(
                                    "id" => "2",
                                    "value" => "Nicaragua"
                                ),
                                array(
                                    "id" => "173",
                                    "value" => "Perú"
                                )
                            );
                            array_push($finalMandante, $array);

                        }

                        $response["Data"] = array(
                            "AuthenticationStatus" => 0,
                            "SaldoRecargas" => $SaldoRecargas,
                            "SaldoJuego" => $SaldoJuego,

                            "PartnerLimitType" => 1,
                            "FirstName" => $Usuario->nombre,
                            "Settings" => array(
                                "Language" => strtolower($Usuario->idioma),
                                "ReportCurrency" => $Usuario->monedaReporte,
                                "ReportCountry" => $ReportCountry,
                                "TimeZone" => $Usuario->timezone,

                            ),
                            "LangId" => strtolower($Usuario->idioma),
                            "UserName" => $Usuario->nombre,
                            "CurrencyId" => $Usuario->moneda,
                            "UserId" => $Usuario->usuarioId,
                            "AgentId" => $Usuario->usuarioId,
                            "PermissionList" => $menus_string,
                            "Countries" => $paisesparamenu,
                            "BetShops" => $finalBetShops,

                            "ProvidersCasino" => array(
                                array(
                                    "id" => "",
                                    "value" => "Todos"
                                ),
                                array(
                                    "id" => "27",
                                    "value" => "Microgaming"
                                )
                            ),
                            "Partners" => $finalMandante,
                            "PartnerSelected" => $_SESSION["mandante"],
                            "BetShops" => $finalBetShops,
                            "GamesCasino" => $finalProductos,
                            "ProvidersCasino" => $finalProveedores,
                            "PermissionList2" => array_merge(array("ManageDepositRequests",
                                "ManageWithdrawalRequests", "ManageUsers", "ViewClientBonuses", "ViewPlayers", "ViewAddHocReport", "ViewScout", "ViewCMS", "ViewAffiliate", "SGPlayersView", "SGStatisticsRake", "ViewFinancialReports", "ViewPaymentReport", "AssignAgentCredit", "ManageAgentCredit", "ViewAgentGroups", "ViewAgentCommissionGroups", "ViewAgentPtGroups", "ViewAgentBetLimitGroups", "ViewAgentGroups", "ViewAgentGroups", "ManageAgentCommissionGroups", "ManageAgentBetLimitGroups", "ManageAgentGroups", "ManageClientCredit", "ViewGames", "ViewClientSportBets", "ViewClientTransactions", "ViewClientLogins", "ViewClientCasinoBets", "ViewSportReport", "ViewMenuDashBoard", "ViewDashBoardActivePlayers", "ViewDashBoardNewRegistrations", "ViewDashBoardSportBets", "ViewDashBoardCasinoBets", "ViewDashBoardTopFiveGames", "ViewDashBoardTopSportsByStake", "ViewDashBoardTopFiveSportsbookPlayers", "ViewDashBoardTopFivePlayers", "ViewUsers", "ViewUsersMenu", "ViewUsersLogs", "ViewAgentTransfers", "ViewBalance", "ViewDepositWithdrawalReport", "PMManageSale", "PMManageProduct", "ViewSalesReport", "ViewTurnoverTaxReport", "ViewDepositRequests", "ViewWithdrawalRequests", "ViewDocuments", "ViewFinancialOperations", "ManageAgent", "ViewBetShopUsers", "ViewCashDesks", "ManageBetShopUsers", "ViewClientMessage", "ViewVerificationStep", "ResetClientPassword", "ViewAgentMenu", "ViewAgentSystem", "ViewAgent", "ViewAgentSubAccounts", "ViewAgentMembers", "ViewMessages", "ViewEmailTemplates", "ManageMessages", "ViewTranslation", "ViewSettings", "ViewStream", "PMViewPartner", "PMViewProduct", "PMViewSale", "hjkhjkhjk", "jhkhjkhjk", "ViewOddsFeed", "ViewMatch", "ViewSportLimits", "ViewPartnersBooking", "ViewMenuReport", "ViewCasinoReport", "ViewCashDeskReport", "ViewCRM", "ViewSegment", "CreateSegment", "ViewBetShops", "ViewClients", "ManageClients", "ViewMenuSecurity", "ViewMenuTeacher", "AdminUser", "Contingencia", "Menu", "Perfil", "PerfilOpciones", "Submenu", "UsuarioPerfil", "Clasificador", "Concesionario", "ViewAddHocReport", "ViewMenuManagement", "ActivarRegistros", "AjustarSaldo", "AsignacionCupo", "Bonos", "CuentaCobroEliminar", "GestionRed", "RegistroRapido", "ChequeReimpresion", "RecargaReversion", "GestionContacto", "ViewMenuCash", "FlujoCaja", "PagoPremio", "PagoNotaRetiro", "RecargarCredito", "ViewMenuQueries", "FlujoCajaHistorico", "FlujoCajaResumido", "InformeCasino", "InformeGerencial", "ListadoRecargasRetiros", "PremiosPendientesPagar", "ConsultaOnlineDetalle", "ConsultaOnlineResumen", "MakeCorrection", "Trabajaconnosotros", "ViewSportsBookReports", "ViewBetReport", "ViewSportReport", "ViewCompetitionReport", "ViewMarketReport", "ViewSports", "ViewCompetitions", "ViewClientLogHistory", "ManageTranslation", "ManageProviders", "ManagePartnerProducts"

                            ), $menus_string),

                        );
                    } else {

                        $PerfilSubmenu = new PerfilSubmenu();

                        $Perfil_id = $_SESSION["win_perfil2"];
                        $MaxRows = $params->MaxRows;
                        $OrderedItem = $params->OrderedItem;
                        $SkeepRows = $params->SkeepRows;

                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 100000;
                        }

                        $mismenus = "0";

                        $json = '{"rules" : [{"field" : "menu.version", "data" : "2","op":"eq"},{"field" : "perfil_submenu.perfil_id", "data" : "' . $Perfil_id . '","op":"eq"}] ,"groupOp" : "AND"}';

                        $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

                        $menus = json_decode($menus);

                        $menus3 = [];
                        $arrayf = [];
                        $submenus = [];

                        $menus_string = array();

                        foreach ($menus->data as $key => $value) {

                            $m = [];
                            $m["Id"] = $value->{"menu.menu_id"};
                            $m["Name"] = $value->{"menu.descripcion"};

                            $array = [];

                            $array["Id"] = $value->{"submenu.submenu_id"};
                            $array["Name"] = $value->{"submenu.descripcion"};
                            $array["Pagina"] = $value->{"submenu.pagina"};
                            $array["IsGiven"] = true;
                            $array["Action"] = "view";

                            $mismenus = $mismenus . "," . $array["Id"];

                            if ($arrayf["Id"] != "" && $m["Id"] != $arrayf["Id"]) {
                                array_push($menus_string, $arrayf["Pagina"]);

                                $arrayf["Permissions"] = $submenus;
                                array_push($menus3, $arrayf);
                                // $submenus = [];
                            }
                            array_push($menus_string, $array["Pagina"]);

                            $arrayf["Id"] = $value->{"menu.menu_id"};
                            $arrayf["Name"] = $value->{"menu.descripcion"};
                            $arrayf["Pagina"] = $value->{"menu.pagina"};

                            array_push($submenus, $array);
                        }
                        array_push($menus_string, $arrayf["Pagina"]);

                        $arrayf["Permissions"] = $submenus;
                        array_push($menus3, $arrayf);

                        $IncludedPermission = $submenus;

                        /* $menus = $Usuario->getMenus();
                    array_push($menus_string, "ViewMenuSecurity");
                    array_push($menus_string, "ViewMenuTeacher");
                    array_push($menus_string, "ViewMenuManagement");
                    array_push($menus_string, "ViewMenuCash");
                    array_push($menus_string, "ViewMenuQueries");
                    foreach ($menus as $key => $value) {
                    array_push($menus_string, "view" . str_replace("_", "", str_replace(".php", "", $value["b.pagina"])));
                    } */


                        $menus_string = obtenerMenu();
                        $paisesparamenu = obtenerPaisesReport();


                        $Proveedor = new Proveedor();
                        $Proveedor->setTipo("CASINO");

                        $proveedores = $Proveedor->getProveedores();

                        $finalProveedores = [];
                        $array = [];
                        $array["id"] = '0';
                        $array["value"] = 'Todos';
                        array_push($finalProveedores, $array);

                        foreach ($proveedores as $key => $value) {

                            $array = [];

                            $array["id"] = $value->getProveedorId();
                            $array["value"] = $value->getDescripcion();

                            array_push($finalProveedores, $array);

                        }


                        $Proveedor = new Proveedor();
                        $Proveedor->setTipo("LIVECASINO");

                        $proveedores = $Proveedor->getProveedores();

                        foreach ($proveedores as $key => $value) {

                            $array = [];

                            $array["id"] = $value->getProveedorId();
                            $array["value"] = $value->getDescripcion();

                            array_push($finalProveedores, $array);

                        }


                        $ProductoMandante = new ProductoMandante();

                        $rules = [];
                        array_push($rules, array("field" => "proveedor.tipo", "data" => "CASINO ", "op" => "eq"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $json = json_encode($filtro);

                        if ($_SESSION["GlobalConfig"] == "S") {
                            $Producto = new Producto();

                            $productos = $Producto->getProductosCustom(" producto.* ", "producto.producto_id", "asc", $SkeepRows, $MaxRows, $json, true);
                            $productos = json_decode($productos);
                        } else {
                            $productos = $ProductoMandante->getProductosMandanteCustom(" producto_mandante.*,mandante.*,producto.* ", "producto_mandante.prodmandante_id", "asc", $SkeepRows, $MaxRows, $json, true);
                            $productos = json_decode($productos);

                        }


                        $finalProductos = [];

                        foreach ($productos->data as $key => $value) {

                            $array = [];
                            if ($_SESSION["GlobalConfig"] == "S") {
                                $array["id"] = $value->{"producto.producto_id"};
                                $array["value"] = $value->{"producto.descripcion"};

                            } else {
                                $array["id"] = $value->{"producto_mandante.prodmandante_id"};
                                $array["value"] = $value->{"producto.descripcion"};

                            }
                            array_push($finalProductos, $array);

                        }


                        $rules = [];

                        if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil"] == "PUNTOVENTA") {
                            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                            array_push($rules, array("field" => "concesionario.usuhijo_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        }

                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));


                        if ($_SESSION['PaisCond'] == "S") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                        }
                        if ($_SESSION['Global'] == "N") {
                            array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                        }
                        array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $jsonbetshop = json_encode($filtro);


                        $PuntoVenta = new PuntoVenta();


                        $mandantes = $PuntoVenta->getPuntoVentasCustom("usuario.estado_valida,usuario.fecha_crea,usuario.moneda,usuario.fecha_ult,punto_venta.*", "punto_venta.puntoventa_id", "asc", 0, 100000, $jsonbetshop, true);

                        $mandantes = json_decode($mandantes);


                        $finalBetShops = [];

                        foreach ($mandantes->data as $key => $value) {

                            $array = [];

                            $array["id"] = $value->{"punto_venta.usuario_id"};
                            $array["value"] = $value->{"punto_venta.descripcion"};

                            array_push($finalBetShops, $array);

                        }


                        $ReportCountry = $Usuario->paisId;
                        if ($_SESSION["win_perfil2"] == "ADMIN" || $_SESSION["win_perfil2"] == "ADMIN2" || $_SESSION["win_perfil2"] == "OPERADOR" || $_SESSION["win_perfil2"] == "SA") {
                            if ($_SESSION['PaisCond'] != "S") {
                                $ReportCountry = '0';
                            }
                        }

                        $SaldoRecargas = 0;
                        $SaldoJuego = 0;
                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2" || $_SESSION["win_perfil2"] == "PUNTOVENTA") {
                            $PuntoVenta = new PuntoVenta("", $_SESSION["usuario"]);

                            $SaldoRecargas = $PuntoVenta->getCupoRecarga();
                            $SaldoJuego = $PuntoVenta->getCreditosBase();
                        }

                        $fechaCierre = date("Y-m-d", strtotime($Usuario->fechaCierrecaja));
                        $hizoCierreCaja = false;

                        if ($fechaCierre == date("Y-m-d")) {
                            $hizoCierreCaja = true;
                        }

                        $beginDay = false;

                        /*if ($_SESSION["win_perfil2"] == "CAJERO") {
                            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");


                            $rules = [];
                            array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                            array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
                            array_push($rules, array("field" => "ingreso.tipo_id", "data" => $TipoDineroInicial->getClasificadorId(), "op" => "eq"));


                            $filtro = array("rules" => $rules, "groupOp" => "AND");
                            $json = json_encode($filtro);

                            $Ingreso = new Ingreso();

                            $data = $Ingreso->getIngresosCustom("  ingreso.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

                            $data = json_decode($data);

                            foreach ($data->data as $key => $value) {
                                $beginDay = true;
                            }


                        } elseif ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                            if ($Usuario->fechaCierrecaja == "") {

                                $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");


                                $rules = [];
                                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                                array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
                                array_push($rules, array("field" => "ingreso.tipo_id", "data" => $TipoDineroInicial->getClasificadorId(), "op" => "eq"));


                                $filtro = array("rules" => $rules, "groupOp" => "AND");
                                $json = json_encode($filtro);

                                $Ingreso = new Ingreso();

                                $data = $Ingreso->getIngresosCustom("  ingreso.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

                                $data = json_decode($data);

                                foreach ($data->data as $key => $value) {
                                    $beginDay = true;
                                }

                            } else {
                                $beginDay = true;
                            }


                        } else {
                            $beginDay = true;
                        }*/

                        $finalMandante = [];

                        if ($_SESSION["GlobalConfig"] == "S") {

                            $array = [];
                            $array["id"] = "-1";
                            $array["value"] = "Virtualsoft";

                            $array["Countries"] = array(
                                array(
                                    "id" => "2",
                                    "value" => "Nicaragua"
                                ),
                                array(
                                    "id" => "173",
                                    "value" => "Perú"
                                )
                            );
                            array_push($finalMandante, $array);

                            $Mandante = new Mandante();

                            $rules = [];
                            // array_push($rules, array("field" => "proveedor.tipo", "data" => "CASINO ", "op" => "eq"));

                            $filtro = array("rules" => $rules, "groupOp" => "AND");
                            $json = json_encode($filtro);

                            $mandantes = $Mandante->getMandantes("mandante.mandante", "asc", 0, 100, $json, true);
                            $mandantes = json_decode($mandantes);


                            foreach ($mandantes->data as $key => $value) {


                                $array = [];
                                $array["id"] = $value->{"mandante.mandante"};
                                $array["value"] = $value->{"mandante.descripcion"};

                                $array["Countries"] = array(
                                    array(
                                        "id" => "2",
                                        "value" => "Nicaragua"
                                    ),
                                    array(
                                        "id" => "173",
                                        "value" => "Perú"
                                    )
                                );

                                array_push($finalMandante, $array);

                            }
                        } else {

                            $array = [];

                            $array["id"] = $_SESSION["mandante"];
                            $array["value"] = $_SESSION["mandante"];

                            $array["Countries"] = array(
                                array(
                                    "id" => "2",
                                    "value" => "Nicaragua"
                                ),
                                array(
                                    "id" => "173",
                                    "value" => "Perú"
                                )
                            );

                            array_push($finalMandante, $array);

                        }

                        $response["Data"] = array(
                            "AuthenticationStatus" => 0,
                            "SaldoRecargas" => $SaldoRecargas,
                            "SaldoJuego" => $SaldoJuego,
                            "PartnerLimitType" => 1,
                            "FirstName" => $Usuario->nombre,
                            "Settings" => array(
                                "Language" => strtolower($Usuario->idioma),
                                "ReportCurrency" => $Usuario->monedaReporte,
                                "ReportCountry" => $ReportCountry,
                                "TimeZone" => $Usuario->timezone,

                            ),
                            "LangId" => strtolower($Usuario->idioma),
                            "UserName" => $Usuario->nombre,
                            "CurrencyId" => $Usuario->moneda,
                            "UserId" => $Usuario->usuarioId,
                            "UserId2" => $_SESSION['usuario2'],
                            "AgentId" => $Usuario->usuarioId,
                            "Countries" => $paisesparamenu,
                            "BetShops" => $finalBetShops,
                            "ProvidersCasino" => $finalProveedores,
                            "CloseCashBox" => $hizoCierreCaja,
                            "BeginDay" => $beginDay,

                            "Partners" => $finalMandante,
                            "PartnerSelected" => $_SESSION["mandante"],
                            "GamesCasino" => $finalProductos,
                            "PermissionList" => $menus_string,
                        );
                    }

                } catch (Exception $e) {

                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
                    $response["ModelErrors"] = [];

                    $response["Data"] = array(
                        "AuthenticationStatus" => 0,

                        "PermissionList" => array(),
                    );

                }

            }

            break;

        /**
        * Account/CheckForLogin
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Account/CheckForLogin':
            $response["HasError"] = false;
            $response["AlertType"] = "danger";
            $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getCode().')";
            $response["ModelErrors"] = [];
            break;

        /**
        * Account/CheckSecurityCode
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Account/CheckSecurityCode22":


            $Code = $params->Code;
            $Username = $params->Username;

            $MaxRows = 1;
            $OrderedItem = 1;
            $SkeepRows = 0;


            $rules = [];

            array_push($rules, array("field" => "usuario.login", "data" => "$Username", "op" => "eq"));
            array_push($rules, array("field" => "usuario_log.tipo", "data" => "CODIGOAGENT", "op" => "eq"));
            array_push($rules, array("field" => "usuario_log.estado", "data" => "P", "op" => "eq"));
            array_push($rules, array("field" => "usuario_log.valor_despues", "data" => $Code, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_log.* ";


            $UsuarioLog = new UsuarioLog();
            $data = $UsuarioLog->getUsuarioLogsCustom($select, "usuario_log.usuariolog_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);

            $response["HasError"] = false;
            $response["AlertType"] = "danger";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            if (oldCount($data->data) > 0) {

                $UsuarioLog = new UsuarioLog($data->data[0]->{"usuario_log.usuariolog_id"});

                $UsuarioLog->setEstado('A');

                $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                $UsuarioLogMySqlDAO->update($UsuarioLog);
                $UsuarioLogMySqlDAO->getTransaction()->commit();
                $response["Cookie"] = $UsuarioLog->getValorAntes();

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "Error en el dato ingresado";
                $response["ModelErrors"] = [];

            }


            break;


        case "Account/CheckSecurityCode":


            $Code = $params->Code;
            $Username = $params->Username;

            $MaxRows = 1;
            $OrderedItem = 1;
            $SkeepRows = 0;


            $rules = [];

            array_push($rules, array("field" => "usuario.login", "data" => "$Username", "op" => "eq"));
            array_push($rules, array("field" => "usuario_token_interno.tipo", "data" => "1", "op" => "eq"));
            array_push($rules, array("field" => "usuario_token_interno.estado", "data" => "P", "op" => "eq"));
            array_push($rules, array("field" => "usuario_token_interno.valor", "data" => $Code, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_token_interno.* ";


            $UsuarioTokenInterno = new UsuarioTokenInterno();
            $data = $UsuarioTokenInterno->getUsuarioTokenInternosCustom($select, "usuario_token_interno.usutokeninterno_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);

            $response["HasError"] = false;
            $response["AlertType"] = "danger";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            if (oldCount($data->data) > 0) {

                $UsuarioTokenInterno = new UsuarioTokenInterno($data->data[0]->{"usuario_token_interno.usutokeninterno_id"});

                $UsuarioTokenInterno->setEstado('A');

                $UsuarioTokenInternoMySqlDAO = new UsuarioTokenInternoMySqlDAO();
                $UsuarioTokenInternoMySqlDAO->update($UsuarioTokenInterno);
                $UsuarioTokenInternoMySqlDAO->getTransaction()->commit();
                $response["Cookie"] = $UsuarioTokenInterno->getValor();

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "Error en el dato ingresado";
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * Setting/GetPartnerSettings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Setting/GetPartnerSettings":

            $country = $params->Country;
            $partner = $params->Partner;

            if ($partner != "") {


                $Mandante = new Mandante($partner);

                $MandanteDetalle = new MandanteDetalle();


                $mandanteConfig = array();

                $mandanteConfig = array();
                $mandanteConfig["Address"] = $Mandante->contacto;
                $mandanteConfig["CompanyName"] = $Mandante->descripcion;
                $mandanteConfig["Email"] = $Mandante->email;
                $mandanteConfig["Phone"] = $Mandante->telefono;


                $mandanteConfig["DaysNotifyBeforePasswordExpire"] = "";
                $mandanteConfig["UserPasswordMinLength"] = "";
                $mandanteConfig["UserTempPasswordExpireDays"] = "";
                $mandanteConfig["UserWrongLoginAttempts"] = "";
                $mandanteConfig["UserPasswordExpireDays"] = "";

                $mandanteConfig["MaxActiveRequests"] = "";
                $mandanteConfig["MaxRequestsPerDay"] = "";
                $mandanteConfig["RequestMaxAmountWithdraw"] = "";
                $mandanteConfig["RequestMinAmountWithdraw"] = "";

                $mandanteConfig["RequestMaxAmount"] = "";
                $mandanteConfig["RequestMinAmount"] = "";

                $mandanteConfig["TaxWithdrawBalanceAward"] = "";
                $mandanteConfig["TaxWithdrawBalanceDeposit"] = "";
                $mandanteConfig["TaxRegulator"] = "";
                $mandanteConfig["TaxWithdrawBalanceAwardFrom"] = "";
                $mandanteConfig["TaxWithdrawBalanceDepositFrom"] = "";
                $mandanteConfig["MaxAccountsBank"] = "";
                $mandanteConfig["ActivateRegisterUser"] = "I";
                $mandanteConfig["MinPercentageWagered"] = "0";
                $mandanteConfig["MonthsAlertChangePassword"] = "0";

                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 100000000;
                }

                $mismenus = "0";

                $rules = [];


                array_push($rules, array("field" => "mandante_detalle.mandante", "data" => "$Mandante->mandante", "op" => "eq"));
                array_push($rules, array("field" => "mandante_detalle.estado", "data" => "A", "op" => "eq"));

                array_push($rules, array("field" => "mandante_detalle.pais_id", "data" => "$country", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $mandanteDetalles = $MandanteDetalle->getMandanteDetallesCustom(" mandante_detalle.*,clasificador.* ", "mandante_detalle.manddetalle_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                $mandanteDetalles = json_decode($mandanteDetalles);


                foreach ($mandanteDetalles->data as $key => $value) {

                    switch ($value->{'clasificador.abreviado'}) {
                        case "MINDEPOSIT":
                            $mandanteConfig["RequestMinAmount"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "MAXDEPOSIT":
                            $mandanteConfig["RequestMaxAmount"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "DAYSNOTIFYPASSEXPIRE":
                            $mandanteConfig["DaysNotifyBeforePasswordExpire"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "DAYSEXPIREPASSWORD":
                            $mandanteConfig["UserPasswordExpireDays"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "MINLENPASSWORD":
                            $mandanteConfig["UserPasswordMinLength"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "DAYSEXPIRETEMPPASS":
                            $mandanteConfig["UserTempPasswordExpireDays"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "WRONGATTEMPTSLOGIN":
                            $mandanteConfig["UserWrongLoginAttempts"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "MAXWITHDRAWACTIVEREQUEST":
                            $mandanteConfig["MaxActiveRequests"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "MAXWITHDRAWDAY":
                            $mandanteConfig["MaxRequestsPerDay"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "MINWITHDRAW":
                            $mandanteConfig["RequestMinAmountWithdraw"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "MAXWITHDRAW":
                            $mandanteConfig["RequestMaxAmountWithdraw"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "TAXWITHDRAWDEPOSIT":
                            $mandanteConfig["TaxWithdrawBalanceDeposit"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "TAXWITHDRAWAWARD":
                            $mandanteConfig["TaxWithdrawBalanceAward"] = $value->{'mandante_detalle.valor'};
                            break;

                        case "TAXREGULATOR":
                            $mandanteConfig["TaxRegulator"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "TAXWITHDRAWDEPOSITFROM":
                            $mandanteConfig["TaxWithdrawBalanceDepositFrom"] = $value->{'mandante_detalle.valor'};
                            break;
                        case "TAXWITHDRAWAWARDFROM":
                            $mandanteConfig["TaxWithdrawBalanceAwardFrom"] = $value->{'mandante_detalle.valor'};
                            break;

                        case "TAXREGULATORFROM":
                            $mandanteConfig["TaxRegulatorFrom"] = $value->{'mandante_detalle.valor'};
                            break;

                        case "MAXACCOUNTSBANK":

                            $mandanteConfig["MaxAccountsBank"] = $value->{'mandante_detalle.valor'};
                            break;


                        case "REQREGACT":

                            $mandanteConfig["ActivateRegisterUser"] = $value->{'mandante_detalle.valor'};
                            break;


                        case "MINPERCTDEP":

                            $mandanteConfig["MinPercentageWagered"] = $value->{'mandante_detalle.valor'};
                            break;


                        case "DAYALERTCHANGEPASS":

                            $mandanteConfig["DaysAlertChangePassword"] = $value->{'mandante_detalle.valor'};
                            break;


                        case "LIQUIDAFF":

                            $mandanteConfig["Liquidations"] = (intval($value->{'mandante_detalle.valor'}) == 1) ? "A" : "I";
                            break;


                        default:

                            break;
                    }
                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["data"] = $mandanteConfig;

            }

            break;

        /**
        * setting/GetSysDate
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'setting/GetSysDate':
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "ServerTime" => round(microtime(true) * 1000),

            );

            break;

        /**
        * setting/saveSetting
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'setting/saveSetting':
            $Language = $params->Language;
            $ReportCurrency = $params->ReportCurrency;
            $TimeZone = $params->TimeZone;

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());


            $UsuarioPerfil = new UsuarioPerfil($Usuario->usuarioId);


            if ($UsuarioPerfil->getPerfilId() == "ADMIN" || $UsuarioPerfil->getPerfilId() == "ADMIN2" || $UsuarioPerfil->getPerfilId() == "SA") {
                $Usuario->moneda = $ReportCurrency;
                $Usuario->timezone = $TimeZone;

                if ($Usuario->fechaDocvalido == "" || $Usuario->fechaDocvalido == "null" || $Usuario->fechaDocvalido == null) {
                }

                $Usuario->fechaDocvalido = date('Y-m-d H:i:s');

                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $UsuarioMySqlDAO->update($Usuario);

                $UsuarioMySqlDAO->getTransaction()->commit();

                $_SESSION["timezone"] = $Usuario->timezone;
                $_SESSION["monedaReporte"] = $Usuario->monedaReporte;

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "No puede cambiarlo";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();
            }


            break;


        case 'setting/SavePartnerUser':
            $PartnerSelected = $params->PartnerSelected;

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());


            $UsuarioPerfil = new UsuarioPerfil($Usuario->usuarioId);

            if ($UsuarioPerfil->global == "S" && (is_numeric($PartnerSelected) || $PartnerSelected == "-1")) {

                if ($PartnerSelected == "-1") {
                    $PartnerSelected == -1;
                }

                $UsuarioPerfil->setGlobalMandante($PartnerSelected);

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO();
                $UsuarioPerfilMySqlDAO->update($UsuarioPerfil);

                $UsuarioPerfilMySqlDAO->getTransaction()->commit();

                $_SESSION["mandante"] = $PartnerSelected;

                if ($PartnerSelected == -1) {
                    $_SESSION["Global"] = "S";
                    $_SESSION["mandante"] = -1;

                } else {
                    $_SESSION["Global"] = "N";
                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "No puede cambiarlo";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();
            }


            break;

        /**
        * setting/saveSetting2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'setting/saveSetting2':
            $Language = $params->Language;
            $ReportCurrency = $params->ReportCurrency;
            $TimeZone = $params->TimeZone;

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());


            $UsuarioPerfil = new UsuarioPerfil($Usuario->usuarioId);


            if ($UsuarioPerfil->getPerfilId() == "ADMIN" || $UsuarioPerfil->getPerfilId() == "ADMIN2" || $UsuarioPerfil->getPerfilId() == "SA") {
                $Usuario->monedaReporte = $ReportCurrency;
                $Usuario->timezone = $TimeZone;

                if ($Usuario->fechaDocvalido == "" || $Usuario->fechaDocvalido == "null" || $Usuario->fechaDocvalido == null) {
                    $Usuario->fechaDocvalido = date('Y-m-d H:i:s');
                }

                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $UsuarioMySqlDAO->update($Usuario);

                $UsuarioMySqlDAO->getTransaction()->commit();

                $_SESSION["timezone"] = $Usuario->timezone;
                $_SESSION["monedaReporte"] = $Usuario->monedaReporte;

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "No puede cambiarlo";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();
            }


            break;

        /**
        * setting/GetSetting
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'setting/GetSetting':
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $ReportCurrencies = array();

            if ($_SESSION['PaisCond'] == "S" || ($_SESSION['win_perfil'] != "ADMIN" && $_SESSION['win_perfil'] != "ADMIN2" && $_SESSION['win_perfil'] != "SA" && $_SESSION['win_perfil'] != "OPERADOR")) {
                $ReportCurrencies = array(
                    "Id" => $_SESSION["moneda"],
                    "Name" => $_SESSION["moneda"]
                );
            } else {
                $ReportCurrencies = array(
                    array(
                        "Id" => "EUR",
                        "Name" => "EUR",
                        "IsSelected" => 0,
                    ),
                    array(
                        "Id" => "PEN",
                        "Name" => "PEN",
                        "IsSelected" => 0,
                    ),

                    array(
                        "Id" => "USD",
                        "Name" => "USD",
                        "IsSelected" => 0,
                    ),

                    array(
                        "Id" => "MXN",
                        "Name" => "MXN",
                        "IsSelected" => 0,
                    )

                );

            }

            $response["Data"] = array(
                "ReportCurrencies" => $ReportCurrencies,
                "TimeZones" => array(array("DisplayName" => "UTC−12:00", "Id" => -12.00, "IsSelected" => true), array("DisplayName" => "UTC−11:00", "Id" => -11.00, "IsSelected" => false), array("DisplayName" => "UTC−10:00", "Id" => -10.00, "IsSelected" => false), array("DisplayName" => "UTC−09:30", "Id" => -9.50, "IsSelected" => false), array("DisplayName" => "UTC−09:00", "Id" => -9.00, "IsSelected" => false), array("DisplayName" => "UTC−08:00", "Id" => -8.00, "IsSelected" => false), array("DisplayName" => "UTC−07:00", "Id" => -7.00, "IsSelected" => false), array("DisplayName" => "UTC−06:00", "Id" => -6.00, "IsSelected" => false), array("DisplayName" => "UTC−05:00", "Id" => -5.00, "IsSelected" => false), array("DisplayName" => "UTC−04:30", "Id" => -4.50, "IsSelected" => false), array("DisplayName" => "UTC−04:00", "Id" => -4.00, "IsSelected" => false), array("DisplayName" => "UTC−03:30", "Id" => -3.50, "IsSelected" => false), array("DisplayName" => "UTC−03:00", "Id" => -3.00, "IsSelected" => false), array("DisplayName" => "UTC−02:00", "Id" => -2.00, "IsSelected" => false), array("DisplayName" => "UTC−01:00", "Id" => -1.00, "IsSelected" => false), array("DisplayName" => "UTC−00:00", "Id" => 0.00, "IsSelected" => false), array("DisplayName" => "UTC+01:00", "Id" => 1.00, "IsSelected" => false), array("DisplayName" => "UTC+02:00", "Id" => 2.00, "IsSelected" => false), array("DisplayName" => "UTC+03:00", "Id" => 3.00, "IsSelected" => false), array("DisplayName" => "UTC+03:30", "Id" => 3.50, "IsSelected" => false), array("DisplayName" => "UTC+04:00", "Id" => 4.00, "IsSelected" => false), array("DisplayName" => "UTC+04:30", "Id" => 4.50, "IsSelected" => false), array("DisplayName" => "UTC+05:00", "Id" => 5.00, "IsSelected" => false), array("DisplayName" => "UTC+05:30", "Id" => 5.50, "IsSelected" => false), array("DisplayName" => "UTC+06:00", "Id" => 6.00, "IsSelected" => false), array("DisplayName" => "UTC+06:30", "Id" => 6.50, "IsSelected" => false), array("DisplayName" => "UTC+07:00", "Id" => 7.00, "IsSelected" => false), array("DisplayName" => "UTC+08:00", "Id" => 8.00, "IsSelected" => false), array("DisplayName" => "UTC+08:45", "Id" => 8.75, "IsSelected" => false), array("DisplayName" => "UTC+09:00", "Id" => 9.00, "IsSelected" => false), array("DisplayName" => "UTC+09:30", "Id" => 9.50, "IsSelected" => false), array("DisplayName" => "UTC+10:00", "Id" => 10.00, "IsSelected" => false), array("DisplayName" => "UTC+10:30", "Id" => 10.50, "IsSelected" => false), array("DisplayName" => "UTC+11:00", "Id" => 11.00, "IsSelected" => false), array("DisplayName" => "UTC+11:30", "Id" => 11.50, "IsSelected" => false), array("DisplayName" => "UTC+12:00", "Id" => 12.00, "IsSelected" => false), array("DisplayName" => "UTC+12:45", "Id" => 12.75, "IsSelected" => false), array("DisplayName" => "UTC+13:00", "Id" => 13.00, "IsSelected" => false), array("DisplayName" => "UTC+14:00", "Id" => 14.00, "IsSelected" => false))

            );
            //{"HasError":false,"AlertType":"success","AlertMessage":"Operation has completed successfully","ModelErrors":[],"Data":{"Languages":[{"Name":"English","Id":"en","IsSelected":true,"DisplayName":"English"),{"Name":"Russian","Id":"ru","IsSelected":false,"DisplayName":"Russian"},{"Name":"Spanish","Id":"es","IsSelected":false,"DisplayName":"Spanish"},{"Name":"Turkish","Id":"tr","IsSelected":false,"DisplayName":"Turkish"},{"Name":"Chinese","Id":"zh","IsSelected":false,"DisplayName":"Chinese"},{"Name":"Korean","Id":"ko","IsSelected":false,"DisplayName":"Korean"}],"TimeZones":[{"DisplayName":"UTC−12:00","Id":-12.00,"IsSelected":true},{"DisplayName":"UTC−11:00","Id":-11.00,"IsSelected":false},{"DisplayName":"UTC−10:00","Id":-10.00,"IsSelected":false},{"DisplayName":"UTC−09:30","Id":-9.50,"IsSelected":false},{"DisplayName":"UTC−09:00","Id":-9.00,"IsSelected":false},{"DisplayName":"UTC−08:00","Id":-8.00,"IsSelected":false},{"DisplayName":"UTC−07:00","Id":-7.00,"IsSelected":false},{"DisplayName":"UTC−06:00","Id":-6.00,"IsSelected":false},{"DisplayName":"UTC−05:00","Id":-5.00,"IsSelected":false},{"DisplayName":"UTC−04:30","Id":-4.50,"IsSelected":false},{"DisplayName":"UTC−04:00","Id":-4.00,"IsSelected":false},{"DisplayName":"UTC−03:30","Id":-3.50,"IsSelected":false},{"DisplayName":"UTC−03:00","Id":-3.00,"IsSelected":false},{"DisplayName":"UTC−02:00","Id":-2.00,"IsSelected":false},{"DisplayName":"UTC−01:00","Id":-1.00,"IsSelected":false},{"DisplayName":"UTC−00:00","Id":0.00,"IsSelected":false},{"DisplayName":"UTC+01:00","Id":1.00,"IsSelected":false},{"DisplayName":"UTC+02:00","Id":2.00,"IsSelected":false},{"DisplayName":"UTC+03:00","Id":3.00,"IsSelected":false},{"DisplayName":"UTC+03:30","Id":3.50,"IsSelected":false},{"DisplayName":"UTC+04:00","Id":4.00,"IsSelected":false},{"DisplayName":"UTC+04:30","Id":4.50,"IsSelected":false},{"DisplayName":"UTC+05:00","Id":5.00,"IsSelected":false},{"DisplayName":"UTC+05:30","Id":5.50,"IsSelected":false},{"DisplayName":"UTC+06:00","Id":6.00,"IsSelected":false},{"DisplayName":"UTC+06:30","Id":6.50,"IsSelected":false},{"DisplayName":"UTC+07:00","Id":7.00,"IsSelected":false},{"DisplayName":"UTC+08:00","Id":8.00,"IsSelected":false},{"DisplayName":"UTC+08:45","Id":8.75,"IsSelected":false},{"DisplayName":"UTC+09:00","Id":9.00,"IsSelected":false},{"DisplayName":"UTC+09:30","Id":9.50,"IsSelected":false},{"DisplayName":"UTC+10:00","Id":10.00,"IsSelected":false},{"DisplayName":"UTC+10:30","Id":10.50,"IsSelected":false},{"DisplayName":"UTC+11:00","Id":11.00,"IsSelected":false},{"DisplayName":"UTC+11:30","Id":11.50,"IsSelected":false},{"DisplayName":"UTC+12:00","Id":12.00,"IsSelected":false},{"DisplayName":"UTC+12:45","Id":12.75,"IsSelected":false},{"DisplayName":"UTC+13:00","Id":13.00,"IsSelected":false},{"DisplayName":"UTC+14:00","Id":14.00,"IsSelected":false}],"ReportCurrencies":[{"Id":"EUR","Name":"Euro","Precision":0,"IsVirtual":false,"IsSelected":true}],"ReportPartners":[{"Id":161640,"Name":"betbetbet","CompanyName":null,"Notes":null,"TimeZone":0.0,"CurrencyId":null,"LanguageId":null,"SiteUrl":null,"BalanceChangeTime":"00:00:00","LimitType":0,"FirstName":null,"LastName":null,"EMail":null,"Address":null,"Phone":null,"UserName":null,"Password":null,"IntegrationType":0,"IsSelected":true}],"IsSubscribedToNotification":null}}


            break;


        /**
        * Setting/UpdatePartnerSettings
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Setting/UpdatePartnerSettings":

            $Country = $params->Country;
            $Partner = $params->Partner;

            $DepositRequests = $params;
            $General = $params;
            $Security = $params;
            $WithdrawalRequests = $params;
            $GeneralSettings = $params;

            $DRequestMaxAmount = $DepositRequests->RequestMaxAmount;
            $DRequestMinAmount = $DepositRequests->RequestMinAmount;

            $Address = $General->Address;
            $CompanyName = $General->CompanyName;
            $Email = $General->Email;
            $Phone = $General->Phone;

            $DaysNotifyBeforePasswordExpire = $Security->DaysNotifyBeforePasswordExpire;
            $UserPasswordExpireDays = $Security->UserPasswordExpireDays;
            $UserPasswordMinLength = $Security->UserPasswordMinLength;
            $UserTempPasswordExpireDays = $Security->UserTempPasswordExpireDays;
            $UserWrongLoginAttempts = $Security->UserWrongLoginAttempts;


            $MaxActiveRequests = $WithdrawalRequests->MaxActiveRequests;
            $MaxRequestsPerDay = $WithdrawalRequests->MaxRequestsPerDay;
            $RequestMaxAmount = $WithdrawalRequests->RequestMaxAmountWithdraw;
            $RequestMinAmount = $WithdrawalRequests->RequestMinAmountWithdraw;

            $TaxWithdrawBalanceAward = $GeneralSettings->TaxWithdrawBalanceAward;
            $TaxWithdrawBalanceDeposit = $GeneralSettings->TaxWithdrawBalanceDeposit;
            $TaxRegulator = $GeneralSettings->TaxRegulator;

            $TaxWithdrawBalanceAwardFrom = $GeneralSettings->TaxWithdrawBalanceAwardFrom;
            $TaxWithdrawBalanceDepositFrom = $GeneralSettings->TaxWithdrawBalanceDepositFrom;
            $TaxRegulatorFrom = $GeneralSettings->TaxRegulatorFrom;
            $MaxAccountsBank = $GeneralSettings->MaxAccountsBank;

            $RequireActiveRegister = $GeneralSettings->ActivateRegisterUser;
            $MinPercentageWagered = $GeneralSettings->MinPercentageWagered;

            $DaysAlertChangePassword = $GeneralSettings->DaysAlertChangePassword;


            $AccountingAccountsAwardsTicketsStores = $GeneralSettings->AccountingAccountsAwardsTicketsStores;
            $AccountingAccountsBetsTicketsStores = $GeneralSettings->AccountingAccountsBetsTicketsStores;
            $AccountingAccountsPaymentsWithdrawal = $GeneralSettings->AccountingAccountsPaymentsWithdrawal;
            $AccountingAccountsRecharge = $GeneralSettings->AccountingAccountsRecharge;

            $Liquidations = $GeneralSettings->Liquidations;

            $Mandante = new Mandante($Partner);

            $Mandante->email = $Email;
            $Mandante->telefono = $Phone;

            $MandanteMySqlDAO = new MandanteMySqlDAO();

            $MandanteMySqlDAO->update($Mandante);
            $Transaction = $MandanteMySqlDAO->getTransaction();


            if ($DRequestMinAmount != "") {
                $tipoDetalle = 16;

                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $DRequestMinAmount) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($DRequestMinAmount);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }

            }

            if ($DRequestMaxAmount != "") {

                $tipoDetalle = 17;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $DRequestMaxAmount) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($DRequestMaxAmount);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($DaysNotifyBeforePasswordExpire != "") {
                $tipoDetalle = 18;

                try {

                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $DaysNotifyBeforePasswordExpire) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($DaysNotifyBeforePasswordExpire);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }

            }

            if ($UserPasswordExpireDays != "") {

                $tipoDetalle = 19;
                try {

                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $UserPasswordExpireDays) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($UserPasswordExpireDays);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($UserPasswordMinLength != "") {

                $tipoDetalle = 20;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $UserPasswordMinLength) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($UserPasswordMinLength);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }

            }

            if ($UserTempPasswordExpireDays != "") {

                $tipoDetalle = 21;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $UserTempPasswordExpireDays) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($UserTempPasswordExpireDays);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($UserWrongLoginAttempts != "") {

                $tipoDetalle = 22;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $UserWrongLoginAttempts) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($UserWrongLoginAttempts);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($MaxActiveRequests != "") {

                $tipoDetalle = 23;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $MaxActiveRequests) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($MaxActiveRequests);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }

            }

            if ($MaxRequestsPerDay != "") {

                $tipoDetalle = 24;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $MaxRequestsPerDay) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($MaxRequestsPerDay);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }

            }

            if ($RequestMinAmount != "") {

                $tipoDetalle = 25;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');
                    if ($MandanteDetalle->getValor() != $RequestMinAmount) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }

                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($RequestMinAmount);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($RequestMaxAmount != "") {

                $tipoDetalle = 26;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $RequestMaxAmount) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($RequestMaxAmount);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }


            if ($TaxWithdrawBalanceAward != "") {

                $tipoDetalle = 36;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $TaxWithdrawBalanceAward) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($TaxWithdrawBalanceAward);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($TaxWithdrawBalanceAwardFrom != "") {

                $tipoDetalle = 50;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $TaxWithdrawBalanceAwardFrom) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($TaxWithdrawBalanceAwardFrom);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($TaxWithdrawBalanceDeposit != "") {

                $tipoDetalle = 37;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $TaxWithdrawBalanceDeposit) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($TaxWithdrawBalanceDeposit);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($TaxWithdrawBalanceDepositFrom != "") {

                $tipoDetalle = 51;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $TaxWithdrawBalanceDepositFrom) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($TaxWithdrawBalanceDepositFrom);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($TaxRegulator != "") {

                $tipoDetalle = 38;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $TaxRegulator) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($TaxRegulator);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }


            if ($TaxRegulatorFrom != "") {

                $tipoDetalle = 52;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $TaxRegulatorFrom) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($TaxRegulatorFrom);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($MaxAccountsBank != "") {

                $tipoDetalle = 53;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $MaxAccountsBank) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($MaxAccountsBank);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }


            if ($RequireActiveRegister != "") {

                $tipoDetalle = 54;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $RequireActiveRegister) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($RequireActiveRegister);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }


            if ($MinPercentageWagered != "") {

                $tipoDetalle = 55;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $MinPercentageWagered) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($MinPercentageWagered);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($DaysAlertChangePassword != "") {

                $tipoDetalle = 56;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $DaysAlertChangePassword) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($DaysAlertChangePassword);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }
            $AccountingAccountsBetsTicketsStores = $GeneralSettings->AccountingAccountsBetsTicketsStores;
            if ($AccountingAccountsBetsTicketsStores != "") {

                $tipoDetalle = 59;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $AccountingAccountsBetsTicketsStores) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($AccountingAccountsBetsTicketsStores);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            $AccountingAccountsAwardsTicketsStores = $GeneralSettings->AccountingAccountsAwardsTicketsStores;

            if ($AccountingAccountsAwardsTicketsStores != "") {

                $tipoDetalle = 60;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $AccountingAccountsAwardsTicketsStores) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($AccountingAccountsAwardsTicketsStores);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            $AccountingAccountsPaymentsWithdrawal = $GeneralSettings->AccountingAccountsPaymentsWithdrawal;

            if ($AccountingAccountsPaymentsWithdrawal != "") {

                $tipoDetalle = 61;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $AccountingAccountsPaymentsWithdrawal) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($AccountingAccountsPaymentsWithdrawal);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            $AccountingAccountsRecharge = $GeneralSettings->AccountingAccountsRecharge;

            if ($AccountingAccountsRecharge != "") {

                $tipoDetalle = 62;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $AccountingAccountsRecharge) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($AccountingAccountsRecharge);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }

            if ($Liquidations != "") {

                $tipoDetalle = 87;
                try {
                    $MandanteDetalle = new MandanteDetalle("", $Mandante->mandante, $tipoDetalle, $Country, 'A');

                    if ($MandanteDetalle->getValor() != $Liquidations) {

                        $MandanteDetalle->setEstado('I');
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->update($MandanteDetalle);

                        throw new Exception("", "34");
                    }
                } catch (Exception $e) {

                    if ($e->getCode() == "34") {

                        $MandanteDetalle = new MandanteDetalle();

                        $MandanteDetalle->setMandante($Mandante->mandante);
                        $MandanteDetalle->setTipo($tipoDetalle);
                        $MandanteDetalle->setValor($Liquidations);
                        $MandanteDetalle->setUsucreaId($_SESSION["usuario"]);
                        $MandanteDetalle->setUsumodifId($_SESSION["usuario"]);
                        $MandanteDetalle->setPaisId($Country);
                        $MandanteDetalle->setEstado('A');

                        $MandanteDetalleMySqlDAO = new MandanteDetalleMySqlDAO($Transaction);
                        $MandanteDetalleMySqlDAO->insert($MandanteDetalle);

                    } else {
                        throw $e;
                    }
                }
            }


            $Transaction->commit();
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;


        /**
        * Admin/GetUsersSearch
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Admin/GetUsersSearch":

            $Usuario = new Usuario();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
            $Mandante = new Mandante($UsuarioMandante->getMandante());

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;
            $Login = $params->Login;
            $IsActivate = $params->IsActivate;
            $DocumentStatus = $params->DocumentStatus;
            $dateFrom = $params->dateFrom;
            $dateTo = $params->dateTo;
            $MinLastTimeLoginDateLocal = $params->MinLastTimeLoginDateLocal;
            $MaxLastTimeLoginDateLocal = $params->MaxLastTimeLoginDateLocal;
            $FirstName = $params->FirstName;
            $LastName = $params->LastName;
            $MiddleName = $params->MiddleName;
            $OriginRegistry = $params->OriginRegistry;
            $DocumentNumber = $params->DocumentNumber;
            $Region = $params->Region;

            $Id = (is_numeric($_REQUEST["Id"])) ? $_REQUEST["Id"] : '';
            $Login = $_REQUEST["Login"];
            $IsActivate = ($_REQUEST["IsActivate"] != "A" && $_REQUEST["IsActivate"] != "I" && $_REQUEST["IsActivate"] != "R") ? '' : $_REQUEST["IsActivate"];
            $IsRegisterActivate = ($_REQUEST["IsRegisterActivate"] != "A" && $_REQUEST["IsRegisterActivate"] != "I" && $_REQUEST["IsRegisterActivate"] != "R") ? '' : $_REQUEST["IsRegisterActivate"];

            if ($dateFrom == $dateTo && $dateFrom != "") {
                $dateFrom = $dateFrom . " 00:00:00";
                $dateTo = $dateTo . " 23:59:59";
            } else {
                if ($dateFrom != "") {
                    $dateFrom = $dateFrom . " 00:00:00";
                }

                if ($dateTo != "") {
                    $dateTo = $dateTo . " 23:59:59";

                }

            }

            if ($MinLastTimeLoginDateLocal == $MaxLastTimeLoginDateLocal && $MinLastTimeLoginDateLocal != "") {
                $MinLastTimeLoginDateLocal = $MinLastTimeLoginDateLocal . " 00:00:00";
                $MaxLastTimeLoginDateLocal = $MaxLastTimeLoginDateLocal . " 23:59:59";
            } else {
                if ($MinLastTimeLoginDateLocal != "") {
                    $MinLastTimeLoginDateLocal = $MinLastTimeLoginDateLocal . " 00:00:00";

                }
                if ($MaxLastTimeLoginDateLocal != "") {

                    $MaxLastTimeLoginDateLocal = $MaxLastTimeLoginDateLocal . " 00:00:00";
                }
            }


            if ($_REQUEST["dateTo"] != "" && false) {
                $dateFrom = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +1 day' . $timezone . ' hour '));
            }


            $FromDateLocal = $params->FromCreatedDateLocal;


            if ($_REQUEST["dateFrom"] != "" && false) {
                $dateTo = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100;
            }

            if ($Mandante->propio == "S") {


                $rules = [];

                if ($Id != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "in"));
                }

                if ($FirstName != "") {
                    array_push($rules, array("field" => "registro.nombre1", "data" => "$FirstName", "op" => "cn "));

                }

                if ($MiddleName != "") {
                    array_push($rules, array("field" => "registro.nombre2", "data" => "$MiddleName", "op" => "cn"));

                }


                if ($LastName != "") {
                    array_push($rules, array("field" => "registro.apellido1", "data" => "$LastName", "op" => "cn"));

                }


                if ($Login != "") {
                    array_push($rules, array("field" => "usuario.login", "data" => "$Login", "op" => "cn"));

                }


                if ($dateFrom != "") {
                    array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFrom", "op" => "ge"));

                }
                if ($dateTo != "") {
                    array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateTo", "op" => "le"));

                }

                if ($MinLastTimeLoginDateLocal != "") {
                    array_push($rules, array("field" => "usuario.fecha_ult", "data" => "$MinLastTimeLoginDateLocal", "op" => "ge"));

                }
                if ($MaxLastTimeLoginDateLocal != "") {
                    array_push($rules, array("field" => "usuario.fecha_ult", "data" => "$MaxLastTimeLoginDateLocal", "op" => "le"));

                }


                if ($DocumentNumber != "") {
                    array_push($rules, array("field" => "registro.cedula", "data" => "$DocumentNumber", "op" => "eq"));

                }

                if ($IsActivate != "" && ($IsActivate == "A" || $IsActivate == "I" || $IsActivate == "R")) {
                    array_push($rules, array("field" => "usuario.estado", "data" => "$IsActivate", "op" => "eq"));
                }

                if ($IsRegisterActivate != "" && ($IsRegisterActivate == "A" || $IsRegisterActivate == "I" || $IsRegisterActivate == "R")) {
                    array_push($rules, array("field" => "registro.estado_valida", "data" => "$IsRegisterActivate", "op" => "eq"));
                }

                if ($DocumentStatus != "" && ($DocumentStatus == "A" || $DocumentStatus == "I" || $DocumentStatus == "R")) {
                    array_push($rules, array("field" => "usuario.documento_validado", "data" => "$DocumentStatus", "op" => "eq"));
                }

                if ($OriginRegistry != "" && $OriginRegistry != "null") {
                    array_push($rules, array("field" => "usuario.origen", "data" => "$OriginRegistry", "op" => "cn"));

                }

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "cn"));

                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE", "op" => "ne"));

                if ($_REQUEST["filter"]["value"] != "") {
                    array_push($rules, array("field" => "usuario.login", "data" => $_REQUEST["filter"]["value"], "op" => "cn"));

                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.verifcedula_ant,usuario.verifcedula_post,usuario.documento_validado,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,registro.cedula,registro.sexo,registro.ciudad_id,registro.estado_valida,registro.nombre1,registro.nombre2,registro.apellido1,registro.email,registro.direccion,registro.telefono,registro.celular,registro.codigo_postal,registro.ciudnacim_id,registro.paisnacim_id,c.*,g.*,usuario.tiempo_limitedeposito,usuario.tiempo_autoexclusion,usuario.cambios_aprobacion,registro.creditos,registro.creditos_base ", "usuario.fecha_crea", "desc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $Islocked = false;

                    if ($value->{"usuario.estado"} == "I") {
                        $Islocked = true;
                    }

                    $array = [];

                    $array["id"] = $value->{"usuario.usuario_id"};
                    $array["Id"] = $value->{"usuario.usuario_id"};
                    $array["Ip"] = $value->{"ausuario.dir_ip"};
                    $array["Login"] = $value->{"usuario.login"};
                    $array["Estado"] = array($value->{"usuario.estado"});
                    $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                    $array["Idioma"] = $value->{"a.idioma"};
                    $array["Nombre"] = $value->{"a.nombre"};
                    $array["FirstName"] = $value->{"registro.nombre1"};
                    $array["MiddleName"] = $value->{"registro.nombre2"};
                    $array["LastName"] = $value->{"registro.apellido1"};
                    $array["Email"] = $value->{"registro.email"};
                    $array["Address"] = $value->{"registro.direccion"};
                    $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                    $array["Intentos"] = $value->{"usuario.intentos"};
                    $array["Observaciones"] = $value->{"usuario.observ"};
                    $array["Moneda"] = $value->{"usuario.moneda"};

                    $array["Pais"] = $value->{"usuario.pais_id"};
                    $array["City"] = $value->{"g.ciudad_nom"};

                    $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                    $array["IsLocked"] = $Islocked;
                    $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                    $array["BirthDate"] = $value->{"c.fecha_nacim"};

                    $array["BirthDepartment"] = $value->{"g.depto_id"};
                    $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                    $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                    $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["DocNumber"] = $value->{"registro.cedula"};
                    $array["Gender"] = $value->{"registro.sexo"};
                    $array["Language"] = $value->{"usuario.idioma"};
                    $array["Phone"] = $value->{"registro.telefono"};
                    $array["MobilePhone"] = $value->{"registro.celular"};
                    $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                    $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};
                    $array["Province"] = $value->{"registro.ciudad_id"};
                    $array["RegionId"] = $value->{"usuario.pais_id"};
                    $array["CountryName"] = $value->{"usuario.pais_id"};
                    $array["ZipCode"] = $value->{"registro.codigo_postal"};
                    $array["IsVerified"] = true;
                    $array["IsActivate"] = ($value->{"usuario.estado"});
                    $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                    $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                    $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                    $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                    $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                    $array["VerifdnAnt"] = ($value->{"usuario.verifcedula_ant"});
                    $array["VerifdniPost"] = ($value->{"usuario.verifcedula_post"});
                    $array["DNI"] = ($value->{"usuario.verifcedula_post"} == 'S' && $value->{"usuario.verifcedula_post"} == 'S') ? 'S' : 'N';

                    array_push($usuariosFinal, $array);

                }
            } else {

                $UsuarioMandante = new UsuarioMandante();
                $rules = [];

                if ($Id != "") {
                    array_push($rules, array("field" => "usuario_mandante.usuario_mandante", "data" => "$Id", "op" => "in"));
                }
                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario_mandante.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario_mandante.propio", "data" => "N", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $usuarios = $UsuarioMandante->getUsuariosMandantesCustom(" usuario_mandante.* ", "usuario_mandante.usumandante_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $Islocked = false;

                    $array = [];

                    $array["id"] = $value->{"usuario_mandante.usuario_mandante"};
                    $array["Id"] = $value->{"usuario_mandante.usuario_mandante"};
                    $array["Ip"] = $value->{"ausuario.dir_ip"};
                    //$array["Login"] = $value->{"usuario.login"};
                    // $array["Estado"] = array($value->{"usuario.estado"});
                    // $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                    //  $array["Idioma"] = $value->{"a.idioma"};
                    $array["Name"] = $value->{"usuario_mandante.nombres"};
                    // $array["FirstName"] = $value->{"usuario_mandante.nombre"};
                    // $array["MiddleName"] = $value->{"registro.nombre2"};
                    $array["LastName"] = $value->{"usuario_mandante.apellidos"};
                    $array["Email"] = $value->{"usuario_mandante.email"};
                    $array["Currency"] = $value->{"usuario_mandante.moneda"};
                    $array["CreatedLocalDate"] = $value->{"usuario_mandante.fecha_crea"};

                    array_push($usuariosFinal, $array);

                }

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "Objects" => $usuariosFinal,
                "Count" => $usuarios->count[0]->{".count"},

            );

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $usuariosFinal;

            if ($_REQUEST["filter"]["value"] != "") {
                $usuariosFinal2 = array();
                foreach ($usuariosFinal as $item) {
                    $array = [];

                    $array["id"] = $item["id"];
                    $array["value"] = $item["Login"];
                    array_push($usuariosFinal2, $array);


                }
                $response["data"] = $usuariosFinal2;

            }

            break;

        /**
        * Client/UpdateClients
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/UpdateClients":

            $userNow = $_SESSION['usuario2'];
            if ($_SESSION['usuario2'] == "") {
                $userNow = 5;
            }
            $Usuario = new Usuario();
            $UsuarioMandante = new UsuarioMandante($userNow);
            $Mandante = new Mandante($UsuarioMandante->getMandante());

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;
            $Login = $params->Login;
            $IsActivate = $params->IsActivate;
            $DocumentStatus = $params->DocumentStatus;
            $dateFrom = $params->dateFrom;
            $dateTo = $params->dateTo;
            $MinLastTimeLoginDateLocal = $params->MinLastTimeLoginDateLocal;
            $MaxLastTimeLoginDateLocal = $params->MaxLastTimeLoginDateLocal;
            $FirstName = $params->FirstName;
            $LastName = $params->LastName;
            $MiddleName = $params->MiddleName;
            $OriginRegistry = $params->OriginRegistry;
            $DocumentNumber = $params->DocumentNumber;
            $Region = $params->Region;

            $Id = (is_numeric($_REQUEST["Id"])) ? $_REQUEST["Id"] : '';
            $Login = $_REQUEST["Login"];
            $IsActivate = ($_REQUEST["IsActivate"] != "A" && $_REQUEST["IsActivate"] != "I" && $_REQUEST["IsActivate"] != "R") ? '' : $_REQUEST["IsActivate"];
            $IsRegisterActivate = ($_REQUEST["IsRegisterActivate"] != "A" && $_REQUEST["IsRegisterActivate"] != "I" && $_REQUEST["IsRegisterActivate"] != "R") ? '' : $_REQUEST["IsRegisterActivate"];

            if ($dateFrom == $dateTo && $dateFrom != "") {
                $dateFrom = $dateFrom . " 00:00:00";
                $dateTo = $dateTo . " 23:59:59";
            } else {
                if ($dateFrom != "") {
                    $dateFrom = $dateFrom . " 00:00:00";
                }

                if ($dateTo != "") {
                    $dateTo = $dateTo . " 23:59:59";

                }

            }

            if ($MinLastTimeLoginDateLocal == $MaxLastTimeLoginDateLocal && $MinLastTimeLoginDateLocal != "") {
                $MinLastTimeLoginDateLocal = $MinLastTimeLoginDateLocal . " 00:00:00";
                $MaxLastTimeLoginDateLocal = $MaxLastTimeLoginDateLocal . " 23:59:59";
            } else {
                if ($MinLastTimeLoginDateLocal != "") {
                    $MinLastTimeLoginDateLocal = $MinLastTimeLoginDateLocal . " 00:00:00";

                }
                if ($MaxLastTimeLoginDateLocal != "") {

                    $MaxLastTimeLoginDateLocal = $MaxLastTimeLoginDateLocal . " 00:00:00";
                }
            }


            if ($_REQUEST["dateTo"] != "" && false) {
                $dateFrom = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +1 day' . $timezone . ' hour '));
            }


            $FromDateLocal = $params->FromCreatedDateLocal;


            if ($_REQUEST["dateFrom"] != "" && false) {
                $dateTo = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1;
            }

            if ($Mandante->propio == "S") {
                $MaxRows = 15000;

                $rules = [];
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE", "op" => "eq"));

                if ($Id != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "in"));
                }

                if ($FirstName != "") {
                    array_push($rules, array("field" => "registro.nombre1", "data" => "$FirstName", "op" => "cn "));

                }

                if ($MiddleName != "") {
                    array_push($rules, array("field" => "registro.nombre2", "data" => "$MiddleName", "op" => "cn"));

                }


                if ($LastName != "") {
                    array_push($rules, array("field" => "registro.apellido1", "data" => "$LastName", "op" => "cn"));

                }


                if ($Login != "") {
                    array_push($rules, array("field" => "usuario.login", "data" => "$Login", "op" => "cn"));

                }


                if ($dateFrom != "") {
                    array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFrom", "op" => "ge"));

                }
                if ($dateTo != "") {
                    array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateTo", "op" => "le"));

                }

                if ($MinLastTimeLoginDateLocal != "") {
                    array_push($rules, array("field" => "usuario.fecha_ult", "data" => "$MinLastTimeLoginDateLocal", "op" => "ge"));

                }
                if ($MaxLastTimeLoginDateLocal != "") {
                    array_push($rules, array("field" => "usuario.fecha_ult", "data" => "$MaxLastTimeLoginDateLocal", "op" => "le"));

                }


                if ($DocumentNumber != "") {
                    array_push($rules, array("field" => "registro.cedula", "data" => "$DocumentNumber", "op" => "eq"));

                }

                if ($IsActivate != "" && ($IsActivate == "A" || $IsActivate == "I" || $IsActivate == "R")) {
                    array_push($rules, array("field" => "usuario.estado", "data" => "$IsActivate", "op" => "eq"));
                }

                if ($IsRegisterActivate != "" && ($IsRegisterActivate == "A" || $IsRegisterActivate == "I" || $IsRegisterActivate == "R")) {
                    array_push($rules, array("field" => "registro.estado_valida", "data" => "$IsRegisterActivate", "op" => "eq"));
                }

                if ($DocumentStatus != "" && ($DocumentStatus == "A" || $DocumentStatus == "I" || $DocumentStatus == "R")) {
                    array_push($rules, array("field" => "usuario.documento_validado", "data" => "$DocumentStatus", "op" => "eq"));
                }

                if ($OriginRegistry != "" && $OriginRegistry != "null") {
                    array_push($rules, array("field" => "usuario.origen", "data" => "$OriginRegistry", "op" => "cn"));

                }

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "cn"));

                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.verifcedula_ant,usuario.verifcedula_post,usuario.documento_validado,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,registro.cedula,registro.sexo,registro.ciudad_id,registro.estado_valida,registro.nombre1,registro.nombre2,registro.apellido1,registro.email,registro.direccion,registro.telefono,registro.celular,registro.codigo_postal,registro.ciudnacim_id,registro.paisnacim_id,c.*,g.*,usuario.tiempo_limitedeposito,usuario.tiempo_autoexclusion,usuario.cambios_aprobacion,registro.creditos,registro.creditos_base ", "usuario.fecha_crea", "desc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $Islocked = false;

                    if ($value->{"usuario.estado"} == "I") {
                        $Islocked = true;
                    }

                    $array = [];

                    $array["id"] = $value->{"usuario.usuario_id"};
                    $array["Id"] = $value->{"usuario.usuario_id"};
                    $array["Ip"] = $value->{"ausuario.dir_ip"};
                    $array["Login"] = $value->{"usuario.login"};
                    $array["Estado"] = array($value->{"usuario.estado"});
                    $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                    $array["Idioma"] = $value->{"a.idioma"};
                    $array["Nombre"] = $value->{"a.nombre"};
                    $array["FirstName"] = $value->{"registro.nombre1"};
                    $array["MiddleName"] = $value->{"registro.nombre2"};
                    $array["LastName"] = $value->{"registro.apellido1"};
                    $array["Email"] = $value->{"registro.email"};
                    $array["Address"] = $value->{"registro.direccion"};
                    $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                    $array["Intentos"] = $value->{"usuario.intentos"};
                    $array["Observaciones"] = $value->{"usuario.observ"};
                    $array["Moneda"] = $value->{"usuario.moneda"};

                    $array["Pais"] = $value->{"usuario.pais_id"};
                    $array["City"] = $value->{"g.ciudad_nom"};

                    $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                    $array["IsLocked"] = $Islocked;
                    $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                    $array["BirthDate"] = $value->{"c.fecha_nacim"};

                    $array["BirthDepartment"] = $value->{"g.depto_id"};
                    $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                    $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                    $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["DocNumber"] = $value->{"registro.cedula"};
                    $array["Gender"] = $value->{"registro.sexo"};
                    $array["Language"] = $value->{"usuario.idioma"};
                    $array["Phone"] = $value->{"registro.telefono"};
                    $array["MobilePhone"] = $value->{"registro.celular"};
                    $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                    $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};
                    $array["Province"] = $value->{"registro.ciudad_id"};
                    $array["RegionId"] = $value->{"usuario.pais_id"};
                    $array["CountryName"] = $value->{"usuario.pais_id"};
                    $array["ZipCode"] = $value->{"registro.codigo_postal"};
                    $array["IsVerified"] = true;
                    $array["IsActivate"] = ($value->{"usuario.estado"});
                    $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                    $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                    $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                    $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                    $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                    $array["VerifdnAnt"] = ($value->{"usuario.verifcedula_ant"});
                    $array["VerifdniPost"] = ($value->{"usuario.verifcedula_post"});
                    $array["DNI"] = ($value->{"usuario.verifcedula_post"} == 'S' && $value->{"usuario.verifcedula_post"} == 'S') ? 'S' : 'N';

                    array_push($usuariosFinal, $array);

                }

                $dddd = array();

                foreach ($usuariosFinal as $item) {

                    $ddd = array('email' => $item["Login"]
                    , 'name' => $item["FirstName"]
                    , 'lastname' => $item["LastName"]
                    , 'mobile' => $item["MobilePhone"]
                    , 'id' => $item["id"]
                    , 'profile_image_url' => 'https://images.doradobet.com/site/doradobet/logo-d-white.png'
                    , 'dateBirth' => $item["BirthDate"]
                    , 'dateCreated' => $item["CreatedLocalDate"]
                    , 'country' => $item["Pais"]
                    );

                    array_push($dddd, $ddd);
                }

                $usuariosFinal = $dddd;
            } else {

                $UsuarioMandante = new UsuarioMandante();
                $rules = [];

                if ($Id != "") {
                    array_push($rules, array("field" => "usuario_mandante.usuario_mandante", "data" => "$Id", "op" => "in"));
                }
                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario_mandante.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario_mandante.propio", "data" => "N", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $usuarios = $UsuarioMandante->getUsuariosMandantesCustom(" usuario_mandante.* ", "usuario_mandante.usumandante_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $Islocked = false;

                    $array = [];

                    $array["id"] = $value->{"usuario_mandante.usuario_mandante"};
                    $array["Id"] = $value->{"usuario_mandante.usuario_mandante"};
                    $array["Ip"] = $value->{"ausuario.dir_ip"};
                    //$array["Login"] = $value->{"usuario.login"};
                    // $array["Estado"] = array($value->{"usuario.estado"});
                    // $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                    //  $array["Idioma"] = $value->{"a.idioma"};
                    $array["Name"] = $value->{"usuario_mandante.nombres"};
                    // $array["FirstName"] = $value->{"usuario_mandante.nombre"};
                    // $array["MiddleName"] = $value->{"registro.nombre2"};
                    $array["LastName"] = $value->{"usuario_mandante.apellidos"};
                    $array["Email"] = $value->{"usuario_mandante.email"};
                    $array["Currency"] = $value->{"usuario_mandante.moneda"};
                    $array["CreatedLocalDate"] = $value->{"usuario_mandante.fecha_crea"};

                    array_push($usuariosFinal, $array);

                }

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "Objects" => $usuariosFinal,
                "Count" => $usuarios->count[0]->{".count"},

            );

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $usuariosFinal;

            break;


        /**
        * Client/GetClients
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClients":

            $userNow = $_SESSION['usuario2'];
            if ($_SESSION['usuario2'] == "") {
                $userNow = 5;
            }
            $Usuario = new Usuario();
            $UsuarioMandante = new UsuarioMandante($userNow);
            $Mandante = new Mandante($UsuarioMandante->getMandante());

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;
            $Login = $params->Login;
            $IsActivate = $params->IsActivate;
            $DocumentStatus = $params->DocumentStatus;
            $dateFrom = $params->dateFrom;
            $dateTo = $params->dateTo;
            $MinLastTimeLoginDateLocal = $params->MinLastTimeLoginDateLocal;
            $MaxLastTimeLoginDateLocal = $params->MaxLastTimeLoginDateLocal;
            $FirstName = $params->FirstName;
            $LastName = $params->LastName;
            $MiddleName = $params->MiddleName;
            $OriginRegistry = $params->OriginRegistry;
            $DocumentNumber = $params->DocumentNumber;
            $Region = $params->Region;

            $Id = (is_numeric($_REQUEST["Id"])) ? $_REQUEST["Id"] : '';
            $Login = $_REQUEST["Login"];
            $IsActivate = ($_REQUEST["IsActivate"] != "A" && $_REQUEST["IsActivate"] != "I" && $_REQUEST["IsActivate"] != "R") ? '' : $_REQUEST["IsActivate"];
            $IsRegisterActivate = ($_REQUEST["IsRegisterActivate"] != "A" && $_REQUEST["IsRegisterActivate"] != "I" && $_REQUEST["IsRegisterActivate"] != "R") ? '' : $_REQUEST["IsRegisterActivate"];
            $RegisterMedia = ($_REQUEST["RegisterMedia"] != "1" && $_REQUEST["RegisterMedia"] != "2") ? '' : $_REQUEST["RegisterMedia"];

            $DocumentNumber = $_REQUEST["DocNumber"];
            if ($dateFrom == $dateTo && $dateFrom != "") {
                $dateFrom = $dateFrom . " 00:00:00";
                $dateTo = $dateTo . " 23:59:59";
            } else {
                if ($dateFrom != "") {
                    $dateFrom = $dateFrom . " 00:00:00";
                }

                if ($dateTo != "") {
                    $dateTo = $dateTo . " 23:59:59";

                }

            }

            if ($MinLastTimeLoginDateLocal == $MaxLastTimeLoginDateLocal && $MinLastTimeLoginDateLocal != "") {
                $MinLastTimeLoginDateLocal = $MinLastTimeLoginDateLocal . " 00:00:00";
                $MaxLastTimeLoginDateLocal = $MaxLastTimeLoginDateLocal . " 23:59:59";
            } else {
                if ($MinLastTimeLoginDateLocal != "") {
                    $MinLastTimeLoginDateLocal = $MinLastTimeLoginDateLocal . " 00:00:00";

                }
                if ($MaxLastTimeLoginDateLocal != "") {

                    $MaxLastTimeLoginDateLocal = $MaxLastTimeLoginDateLocal . " 00:00:00";
                }
            }


            if ($_REQUEST["dateTo"] != "" && false) {
                $dateFrom = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +1 day' . $timezone . ' hour '));
            }


            $FromDateLocal = $params->FromCreatedDateLocal;


            if ($_REQUEST["dateFrom"] != "" && false) {
                $dateTo = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1;
            }

            if ($Mandante->propio == "S") {


                $rules = [];
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE", "op" => "eq"));

                if ($Id != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "in"));
                }

                if ($FirstName != "") {
                    array_push($rules, array("field" => "registro.nombre1", "data" => "$FirstName", "op" => "cn "));

                }

                if ($MiddleName != "") {
                    array_push($rules, array("field" => "registro.nombre2", "data" => "$MiddleName", "op" => "cn"));

                }


                if ($LastName != "") {
                    array_push($rules, array("field" => "registro.apellido1", "data" => "$LastName", "op" => "cn"));

                }


                if ($Login != "") {
                    array_push($rules, array("field" => "usuario.login", "data" => "$Login", "op" => "cn"));

                }


                if ($dateFrom != "") {
                    array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFrom", "op" => "ge"));

                }
                if ($dateTo != "") {
                    array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateTo", "op" => "le"));

                }

                if ($MinLastTimeLoginDateLocal != "") {
                    array_push($rules, array("field" => "usuario.fecha_ult", "data" => "$MinLastTimeLoginDateLocal", "op" => "ge"));

                }
                if ($MaxLastTimeLoginDateLocal != "") {
                    array_push($rules, array("field" => "usuario.fecha_ult", "data" => "$MaxLastTimeLoginDateLocal", "op" => "le"));

                }


                if ($DocumentNumber != "") {
                    array_push($rules, array("field" => "registro.cedula", "data" => "$DocumentNumber", "op" => "eq"));

                }

                if ($IsActivate != "" && ($IsActivate == "A" || $IsActivate == "I" || $IsActivate == "R")) {
                    array_push($rules, array("field" => "usuario.estado", "data" => "$IsActivate", "op" => "eq"));
                }

                if ($IsRegisterActivate != "" && ($IsRegisterActivate == "A" || $IsRegisterActivate == "I" || $IsRegisterActivate == "R")) {
                    array_push($rules, array("field" => "registro.estado_valida", "data" => "$IsRegisterActivate", "op" => "eq"));
                }

                if ($DocumentStatus != "" && ($DocumentStatus == "A" || $DocumentStatus == "I" || $DocumentStatus == "R")) {
                    array_push($rules, array("field" => "usuario.documento_validado", "data" => "$DocumentStatus", "op" => "eq"));
                }

                if ($OriginRegistry != "" && $OriginRegistry != "null") {
                    array_push($rules, array("field" => "usuario.origen", "data" => "$OriginRegistry", "op" => "cn"));

                }

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "cn"));

                }

                if ($RegisterMedia != "") {
                    array_push($rules, array("field" => "registro.codpromocional_id", "data" => "0", "op" => "ne"));

                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.verifcedula_ant,usuario.verifcedula_post,usuario.documento_validado,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,registro.cedula,registro.sexo,registro.ciudad_id,registro.estado_valida,registro.codpromocional_id,registro.nombre1,registro.nombre2,registro.apellido1,registro.email,registro.direccion,registro.telefono,registro.celular,registro.codigo_postal,registro.ciudnacim_id,registro.paisnacim_id,c.*,g.*,usuario.tiempo_limitedeposito,usuario.tiempo_autoexclusion,usuario.cambios_aprobacion,registro.creditos,registro.creditos_base ", "usuario.fecha_crea", "desc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $Islocked = false;

                    if ($value->{"usuario.estado"} == "I") {
                        $Islocked = true;
                    }

                    $array = [];

                    $array["id"] = $value->{"usuario.usuario_id"};
                    $array["Id"] = $value->{"usuario.usuario_id"};
                    $array["Ip"] = $value->{"ausuario.dir_ip"};
                    $array["Login"] = $value->{"usuario.login"};
                    $array["Estado"] = array($value->{"usuario.estado"});
                    $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                    $array["Idioma"] = $value->{"a.idioma"};
                    $array["Nombre"] = $value->{"a.nombre"};
                    $array["FirstName"] = $value->{"registro.nombre1"};
                    $array["MiddleName"] = $value->{"registro.nombre2"};
                    $array["LastName"] = $value->{"registro.apellido1"};
                    $array["Email"] = $value->{"registro.email"};
                    $array["Address"] = $value->{"registro.direccion"};
                    $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                    $array["Intentos"] = $value->{"usuario.intentos"};
                    $array["Observaciones"] = $value->{"usuario.observ"};
                    $array["Moneda"] = $value->{"usuario.moneda"};

                    $array["Pais"] = $value->{"usuario.pais_id"};
                    $array["City"] = $value->{"g.ciudad_nom"};

                    $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                    $array["IsLocked"] = $Islocked;
                    $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                    $array["BirthDate"] = $value->{"c.fecha_nacim"};

                    $array["BirthDepartment"] = $value->{"g.depto_id"};
                    $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                    $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                    $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["DocNumber"] = $value->{"registro.cedula"};
                    $array["Gender"] = $value->{"registro.sexo"};
                    $array["Language"] = $value->{"usuario.idioma"};
                    $array["Phone"] = $value->{"registro.telefono"};
                    $array["MobilePhone"] = $value->{"registro.celular"};
                    $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                    $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};
                    $array["Province"] = $value->{"registro.ciudad_id"};
                    $array["RegionId"] = $value->{"usuario.pais_id"};
                    $array["CountryName"] = $value->{"usuario.pais_id"};
                    $array["ZipCode"] = $value->{"registro.codigo_postal"};
                    $array["IsVerified"] = true;
                    $array["IsActivate"] = ($value->{"usuario.estado"});
                    $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                    $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                    $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                    $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                    $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                    $array["VerifdnAnt"] = ($value->{"usuario.verifcedula_ant"});
                    $array["VerifdniPost"] = ($value->{"usuario.verifcedula_post"});
                    $array["DNI"] = ($value->{"usuario.verifcedula_post"} == 'S' && $value->{"usuario.verifcedula_post"} == 'S') ? 'S' : 'N';
                    $array["CodePromotional"] = $value->{"registro.codpromocional_id"};
                    array_push($usuariosFinal, $array);

                }
            } else {

                $UsuarioMandante = new UsuarioMandante();
                $rules = [];

                if ($Id != "") {
                    array_push($rules, array("field" => "usuario_mandante.usuario_mandante", "data" => "$Id", "op" => "in"));
                }
                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario_mandante.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario_mandante.propio", "data" => "N", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $usuarios = $UsuarioMandante->getUsuariosMandantesCustom(" usuario_mandante.* ", "usuario_mandante.usumandante_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $Islocked = false;

                    $array = [];

                    $array["id"] = $value->{"usuario_mandante.usuario_mandante"};
                    $array["Id"] = $value->{"usuario_mandante.usuario_mandante"};
                    $array["Ip"] = $value->{"ausuario.dir_ip"};
                    //$array["Login"] = $value->{"usuario.login"};
                    // $array["Estado"] = array($value->{"usuario.estado"});
                    // $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                    //  $array["Idioma"] = $value->{"a.idioma"};
                    $array["Name"] = $value->{"usuario_mandante.nombres"};
                    // $array["FirstName"] = $value->{"usuario_mandante.nombre"};
                    // $array["MiddleName"] = $value->{"registro.nombre2"};
                    $array["LastName"] = $value->{"usuario_mandante.apellidos"};
                    $array["Email"] = $value->{"usuario_mandante.email"};
                    $array["Currency"] = $value->{"usuario_mandante.moneda"};
                    $array["CreatedLocalDate"] = $value->{"usuario_mandante.fecha_crea"};

                    array_push($usuariosFinal, $array);

                }

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "Objects" => $usuariosFinal,
                "Count" => $usuarios->count[0]->{".count"},

            );

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $usuariosFinal;

            break;

        /**
        * vapi/GetClients
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "vapi/GetClients":

            $Usuario = new Usuario();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;
            $Login = $params->Login;
            $IsActivate = $params->IsActivate;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 5000;
            }

            $rules = [];
            array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE", "op" => "eq"));

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "in"));
            }

            if ($Login != "") {
                array_push($rules, array("field" => "usuario.login", "data" => "$Login", "op" => "eq"));

            }

            if ($IsActivate != "" && ($IsActivate == "A" || $IsActivate == "I" || $IsActivate == "R")) {
                array_push($rules, array("field" => "registro.estado_valida", "data" => "$IsActivate", "op" => "eq"));
            }

            if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,registro.cedula,registro.sexo,registro.ciudad_id,registro.estado_valida,registro.nombre1,registro.nombre2,registro.apellido1,registro.email,registro.direccion,registro.telefono,registro.celular,registro.codigo_postal,registro.ciudnacim_id,registro.paisnacim_id,c.*,g.*,usuario.tiempo_limitedeposito,usuario.tiempo_autoexclusion,usuario.cambios_aprobacion,registro.creditos,registro.creditos_base ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {

                $Islocked = false;

                if ($value->{"usuario.estado"} == "I") {
                    $Islocked = true;
                }

                $array = [];

                $array["id"] = $value->{"usuario.usuario_id"};
                $array["dirip"] = $value->{"ausuario.dir_ip"};
                $array["login"] = $value->{"usuario.login"};
                $array["status"] = ($value->{"usuario.estado"} == "A") ? "activated" : "inactivated";
                $array["statusRegister"] = ($value->{"registro.estado_valida"} == "S") ? "activated" : "inactivated";
                $array["timestampCreate"] = strtotime($value->{"usuario.fecha_crea"});
                $array["timestampUlt"] = strtotime($value->{"usuario.fecha_crea"});

                $array["firstname"] = $value->{"registro.nombre1"};
                $array["middlename"] = $value->{"registro.nombre2"};
                $array["lastname"] = $value->{"registro.apellido1"};
                $array["email"] = $value->{"registro.email"};

                $array["address"] = $value->{"registro.direccion"};
                $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                $array["Intentos"] = $value->{"usuario.intentos"};
                $array["Observaciones"] = $value->{"usuario.observ"};
                $array["Moneda"] = $value->{"usuario.moneda"};

                $array["Pais"] = $value->{"usuario.pais_id"};
                $array["City"] = $value->{"g.ciudad_nom"};


                $array["IsLocked"] = $Islocked;
                $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                $array["BirthDate"] = $value->{"c.fecha_nacim"};

                $array["BirthDepartment"] = $value->{"g.depto_id"};
                $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                $array["CurrencyId"] = $value->{"usuario.moneda"};
                $array["DocNumber"] = $value->{"registro.cedula"};
                $array["Gender"] = $value->{"registro.sexo"};
                $array["Language"] = $value->{"usuario.idioma"};
                $array["Phone"] = $value->{"registro.telefono"};
                $array["MobilePhone"] = $value->{"registro.celular"};
                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                $array["Province"] = $value->{"registro.ciudad_id"};
                $array["RegionId"] = $value->{"usuario.pais_id"};
                $array["CountryName"] = $value->{"usuario.pais_id"};
                $array["ZipCode"] = $value->{"registro.codigo_postal"};
                $array["IsVerified"] = true;

                $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);

                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response = array(
                "items" => $usuariosFinal,
                "total" => $usuarios->count[0]->{".count"},

            );

            break;


        /**
        * GetUsers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'GetUsers':

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $usuarios = $Usuario->getUsuarios("A", "", "a.usuario_id", "asc", $SkeepRows, $MaxRows);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"a.usuario_id"};
                $array["Ip"] = $value->{"a.dir_ip"};
                $array["Login"] = $value->{"a.login"};
                $array["Estado"] = array($value->{"a.estado"});
                $array["EstadoEspecial"] = $value->{"a.estado_esp"};
                $array["PermiteRecargas"] = $value->{".permite_recarga"};
                $array["ImprimeRecibo"] = $value->{".recibo_caja"};
                $array["Pais"] = $value->{"a.pais_id"};
                $array["Idioma"] = $value->{"a.idioma"};
                $array["Nombre"] = $value->{"a.nombre"};
                $array["FirstName"] = $value->{"a.nombre"};
                $array["TipoUsuario"] = $value->{"e.perfil_id"};
                $array["Intentos"] = $value->{"a.intentos"};
                $array["Observaciones"] = $value->{"a.observ"};
                $array["PinAgent"] = $value->{".pinagent"};
                $array["BloqueoVentas"] = $value->{"a.bloqueo_ventas"};
                $array["Moneda"] = $value->{"a.moneda"};
                $array["ActivarRecarga"] = $value->{"a.permite_activareg"};
                $array["City"] = $value->{"g.ciudad_nom"};
                $array["Phone"] = $value->{"f.telefono"};
                $array["FechaCrea"] = $value->{"a.fecha_crea"};
                $array["LastLoginLocalDate"] = $value->{"a.fecha_crea"};
                $array["FechaCrea"] = $value->{".fecha_ult"};
                $array["IsLocked"] = false;

                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "Objects" => $usuariosFinal,
                "Count" => $usuarios->count[0]->{".count"},

            );

            break;

        /**
        * Setting/GetReportColumns
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Setting/GetReportColumns':
            $ReportName = $_GET["reportName"];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "success";
            $response["ModelErrors"] = [];

            if ($ReportName == "PlayerInfo") {
                $response["Data"] = array(
                    "RegionId", "Id", "Ip", "Clave", "Estado", "EstadoEspecial", "PermiteRecargas", "ImprimeRecibo", "Pais", "Idioma", "Nombre", "TipoUsuario", "Intentos", "Observaciones", "PinAgent", "BloqueoVentas", "Moneda", "ActivarRecarga", "Login", "FirstName", "LastName", "PersonalId", "Email", "AffilateId", "BTag", "IsSubscribeToEmail", "IsSubscribeToSMS", "ExternalId", "AccountHolder", "Address", "BirthCity", "BirthDate", "BirthDepartment", "BirthRegionCode2", "BirthRegionId", "CashDesk", "CreatedLocalDate", "CurrencyId", "DocIssueCode", "DocIssueDate", "DocIssuedBy", "DocNumber", "Gender", "PartnerName", "City", "IBAN", "RFId", "BTag", "IsUsingLoyaltyProgram", "LoyaltyLevelId", "TimeZone", "IsLoggedIn", "IsResident", "IsSubscribedToNewsletter", "IsTest", "IsVerified", "Language", "LastLoginLocalDate", "MiddleName", "MobilePhone", "Phone", "ProfileId", "PromoCode", "Province", "CountryName", "RegistrationSource", "SportsbookProfileId", "SwiftCode", "Title", "ZipCode", "IsLocked",

                );
            }
            if ($ReportName == "PlayerTables") {
                $response["Data"] = array(
                    "Id", "Ip", "Clave", "Estado", "EstadoEspecial", "PermiteRecargas", "ImprimeRecibo", "Pais", "Idioma", "Nombre", "TipoUsuario", "Intentos", "Observaciones", "PinAgent", "BloqueoVentas", "Moneda", "ActivarRecarga", "Login", "FirstName", "LastName", "PersonalId", "Email", "AffilateId", "BTag", "IsSubscribeToEmail", "IsSubscribeToSMS", "ExternalId", "AccountHolder", "Address", "BirthCity", "BirthDate", "BirthDepartment", "BirthRegionCode2", "BirthRegionId", "CashDesk", "CreatedLocalDate", "CurrencyId", "DocIssueCode", "DocIssueDate", "DocIssuedBy", "DocNumber", "Gender", "PartnerName", "City", "IBAN", "RFId", "BTag", "IsUsingLoyaltyProgram", "LoyaltyLevelId", "TimeZone", "IsLoggedIn", "IsResident", "IsSubscribedToNewsletter", "IsTest", "IsVerified", "Language", "LastLoginLocalDate", "MiddleName", "MobilePhone", "Phone", "ProfileId", "PromoCode", "Province", "CountryName", "RegistrationSource", "SportsbookProfileId", "SwiftCode", "Title", "ZipCode", "IsLocked",

                );
            }
            if ($ReportName == "PlayersTable") {
                /*$response["Data"] = array(
                    "Id", "Ip", "Clave", "Estado", "EstadoEspecial", "PermiteRecargas", "ImprimeRecibo", "Pais", "Idioma", "Nombre", "TipoUsuario", "Intentos", "Observaciones", "PinAgent", "BloqueoVentas", "Moneda", "ActivarRecarga", "Login", "FirstName", "LastName", "PersonalId", "Email", "AffilateId", "BTag", "IsSubscribeToEmail", "IsSubscribeToSMS", "ExternalId", "AccountHolder", "Address", "BirthCity", "BirthDate", "BirthDepartment", "BirthRegionCode2", "BirthRegionId", "CashDesk", "CreatedLocalDate", "CurrencyId", "DocIssueCode", "DocIssueDate", "DocIssuedBy", "DocNumber", "Gender", "PartnerName", "City", "IBAN", "RFId", "BTag", "IsUsingLoyaltyProgram", "LoyaltyLevelId", "TimeZone", "IsLoggedIn", "IsResident", "IsSubscribedToNewsletter", "IsTest", "IsVerified", "Language", "LastLoginLocalDate", "MiddleName", "MobilePhone", "Phone", "ProfileId", "PromoCode", "Province", "CountryName", "RegistrationSource", "SportsbookProfileId", "SwiftCode", "Title", "ZipCode", "IsLocked",

                );*/
                $response["Data"] = array(
                    "Id", "Ip", "Clave", "Estado", "EstadoEspecial", "PermiteRecargas", "ImprimeRecibo", "Pais", "Idioma", "Nombre", "TipoUsuario", "Intentos", "Observaciones", "PinAgent", "BloqueoVentas", "Moneda", "ActivarRecarga", "Login", "FirstName", "LastName", "PersonalId", "Email", "AffilateId", "BTag", "ExternalId", "AccountHolder", "CashDesk", "CreatedLocalDate", "CurrencyId", "DocIssueCode", "DocIssueDate", "DocIssuedBy", "DocNumber", "Gender", "PartnerName", "City", "IBAN", "RFId", "BTag", "IsUsingLoyaltyProgram", "LoyaltyLevelId", "TimeZone", "IsTest", "IsVerified", "Language", "LastLoginLocalDate", "MiddleName", "MobilePhone", "Phone", "ProfileId", "PromoCode", "Province", "CountryName", "RegistrationSource", "SportsbookProfileId", "SwiftCode", "Title", "ZipCode", "IsLocked",

                );
            }

            if ($ReportName == "DashboardSettings") {
                $response["Data"] = array(
                    "ActivePlayersToday", "NewRegistrationToday", "SportsByStakes", "TopFiveGames", "SportBets", "CasinoBets", "TopFiveMatches", "TopFiveCasinoPlayers",

                );
            }
            if ($ReportName == "DepositReportSettings") {
                $response["Data"] = array(
                    "Id", "ClientId", "CreatedLocal", "TypeName", "CurrencyId", "ModifiedLocal", "PaymentSystemName", "CashDeskId", "State", "ExternalId", "Amount",

                );
            }
//                   "ClientId","ClientLogin", "Id", "Type", "Currency", "State", "Amount", "TransactionDate", "CreatedTime", "Modified", "ModifiedSessionId", "Notes"

            if ($ReportName == "WithdrawalRequests") {
                $response["Data"] = array(
                    "Id", "ClientId", "ClientLogin", "ClientName", "State", "Amount", "RequestTime", "BetshopId", "BetShopName", "RejectUserName", "AllowUserName", "PaidUserName", "Notes", "Info", "PaymentSystemId", "PaymentSystemName", "AllowTimeLocal", "RejectReason"

                );
            }

            if ($ReportName == "LiquidationRequests") {
                $response["Data"] = array(
                    "Id", "ClientId", "ClientLogin", "ClientName", "State", "Amount", "RequestTime", "RejectUserName", "AllowUserName", "PaidUserName", "Notes", "Info", "RejectReason"

                );
            }


            if ($ReportName == "DepositRequests") {
                $response["Data"] = array(
                    "Id", "ClientId", "ClientLogin", "ClientName", "State", "Amount", "RequestTime", "RejectUserName", "AllowUserName", "PaidUserName", "Notes", "Info", "RejectReason", "PaymentSystemId"

                );
            }
            break;

        /**
        * Setting/GetFilters
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Setting/GetFilters':

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "success";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "RegionFilter", "CountryFilter", "CurrencyFilter",
            );

            break;

        /**
        * Client/GetClientById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Client/GetClientById':

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $id = $_GET["id"];

            if ($id != "") {

                if($_SESSION["Global"] == "N"){
                    $Mandante = new Mandante($_SESSION["mandante"]);

                }


                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 10;
                }
                

                if ($Mandante->propio == "S" || $_SESSION["Global"] == "S") {

                    $rules = [];
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => $id, "op" => "eq"));


                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }
                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.verifcedula_ant,usuario.verifcedula_post,usuario.nombre,usuario.contingencia,usuario.contingencia_deportes,usuario.contingencia_casino,usuario.contingencia_casvivo,usuario.contingencia_virtuales,usuario.contingencia_poker,usuario.idioma,usuario.documento_validado,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,registro.cedula,registro.sexo,registro.estado_valida,registro.ciudad_id,registro.nombre1,registro.nombre2,registro.apellido1,registro.email,registro.direccion,registro.telefono,registro.celular,registro.codigo_postal,registro.ciudnacim_id,registro.paisnacim_id,registro.tipo_doc,c.*,d.*,g.*,usuario.tiempo_limitedeposito,usuario.tiempo_autoexclusion,usuario.cambios_aprobacion,registro.creditos,registro.creditos_base,usuario_perfil.* ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

                    $usuarios = json_decode($usuarios);

                    $usuariosFinal = [];

                    foreach ($usuarios->data as $key => $value) {

                        $array = [];
                        if ($value->{"usuario_perfil.perfil_id"} != "USUONLINE") {
                            $array["Id"] = $value->{"usuario.usuario_id"};
                            $array["id"] = $value->{"usuario.usuario_id"};
                            $array["Ip"] = $value->{"ausuario.dir_ip"};
                            $array["Login"] = $value->{"usuario.login"};
                            $array["Estado"] = array($value->{"usuario.estado"});
                            $array["State"] = array($value->{"usuario.estado"});
                            $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                            $array["Idioma"] = $value->{"a.idioma"};
                            $array["PreferredLanguage"] = $value->{"usuario.idioma"};
                            $array["Name"] = $value->{"usuario.nombre"};
                            $array["FirstName"] = $value->{"registro.nombre1"};
                            $array["MiddleName"] = $value->{"registro.nombre2"};
                            $array["LastName"] = $value->{"registro.apellido1"};
                            $array["Email"] = $value->{"punto_venta.email"};
                            $array["Address"] = $value->{"registro.direccion"};
                            $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                            $array["Intentos"] = $value->{"usuario.intentos"};
                            $array["Observaciones"] = $value->{"usuario.observ"};
                            $array["Moneda"] = $value->{"usuario.moneda"};
                            $array["CurrencyId"] = $value->{"usuario.moneda"};
                            $array["Type"] = "";

                            if ($value->{"usuario_perfil.perfil_id"} == "AFILIADOR") {
                                $array["Type"] = "1";
                            } elseif (strpos($value->{"usuario_perfil.perfil_id"}, "CONCESIONARIO")) {
                                $array["Type"] = "0";
                            }


                            $array["Pais"] = $value->{"usuario.pais_id"};
                            $array["City"] = $value->{"g.ciudad_nom"};

                            $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                            $array["IsLocked"] = false;
                            $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                            $array["BirthDate"] = $value->{"c.fecha_nacim"};

                            $array["BirthDepartment"] = $value->{"g.depto_id"};
                            $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                            $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                            $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                            $array["CurrencyId"] = $value->{"usuario.moneda"};
                            $array["DocNumber"] = $value->{"registro.cedula"};
                            $array["Gender"] = $value->{"registro.sexo"};
                            $array["Language"] = $value->{"usuario.idioma"};
                            $array["MobilePhone"] = $value->{"registro.celular"};
                            $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                            $array["Province"] = $value->{"registro.ciudad_id"};
                            $array["RegionId"] = $value->{"usuario.pais_id"};
                            $array["CountryId"] = $value->{"usuario.pais_id"};
                            $array["CountryName"] = $value->{"usuario.pais_id"};
                            $array["ZipCode"] = $value->{"registro.codigo_postal"};
                            $array["IsVerified"] = true;
                            $array["IsActivate"] = ($value->{"usuario.estado"});
                            $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                            $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                            $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                            $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                            $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                            $array["ContactName"] = ($value->{"punto_venta.nombre_contacto"});
                            $array["Description"] = $value->{"punto_venta.descripcion"};
                            $array["Phone"] = $value->{"punto_venta.telefono"};
                            $array["RegionId"] = $value->{"punto_venta.telefono"};
                            $array["Concessionaire"] = 0;

                            $array["IsActivateContingency"] = ($value->{"usuario.contingencia"});
                            $array["IsActivateContingencyDeportivas"] = ($value->{"usuario.contingencia_deportes"});
                            $array["IsActivateContingencyCasino"] = ($value->{"usuario.contingencia_casino"});
                            $array["IsActivateContingencyCasinoVivo"] = ($value->{"usuario.contingencia_casvivo"});
                            $array["IsActivateContingencyVirtuales"] = ($value->{"usuario.contingencia_virtuales"});
                            $array["IsActivateContingencyPoker"] = ($value->{"usuario.contingencia_poker"});



                                $array["Id"] = $value->{"usuario.usuario_id"};
                                $array["id"] = $value->{"usuario.usuario_id"};
                                $array["Ip"] = $value->{"usuario.dir_ip"};
                                $array["Login"] = $value->{"usuario.login"};
                                $array["Estado"] = array($value->{"usuario.estado"});
                                $array["State"] = array($value->{"usuario.estado"});
                                $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                                $array["Idioma"] = $value->{"a.idioma"};
                                $array["PreferredLanguage"] = $value->{"usuario.idioma"};
                                $array["Name"] = $value->{"usuario.nombre"};
                                $array["FirstName"] = $value->{"registro.nombre1"};
                                $array["MiddleName"] = $value->{"registro.nombre2"};
                                $array["LastName"] = $value->{"registro.apellido1"};
                                $array["Email"] = $value->{"punto_venta.email"};
                                $array["Address"] = $value->{"punto_venta.direccion"};
                                $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                                $array["Intentos"] = $value->{"usuario.intentos"};
                                $array["Observaciones"] = $value->{"usuario.observ"};
                                $array["Moneda"] = $value->{"usuario.moneda"};
                                $array["CurrencyId"] = $value->{"usuario.moneda"};
                                $array["Type"] = $value->{"usuario_perfil.perfil_id"};

                                if ($value->{"usuario_perfil.perfil_id"} == "AFILIADOR") {
                                    $array["Type"] = 1;
                                } elseif (strpos($value->{"usuario_perfil.perfil_id"}, "CONCESIONARIO") !== FALSE) {
                                    $array["Type"] = 0;
                                }

                                $array["Pais"] = $value->{"usuario.pais_id"};
                                $array["City"] = $value->{"g.ciudad_nom"};

                                $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                                $array["IsLocked"] = false;
                                $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                                $array["BirthDate"] = $value->{"c.fecha_nacim"};

                                $array["BirthDepartment"] = $value->{"g.depto_id"};
                                $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                                $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                                $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                                $array["CurrencyId"] = $value->{"usuario.moneda"};
                                $array["DocNumber"] = $value->{"registro.cedula"};
                                $array["Gender"] = $value->{"registro.sexo"};
                                $array["Language"] = $value->{"usuario.idioma"};
                                $array["MobilePhone"] = $value->{"registro.celular"};
                                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                                $array["Province"] = $value->{"registro.ciudad_id"};
                                $array["RegionId"] = $value->{"usuario.pais_id"};
                                $array["CountryId"] = $value->{"usuario.pais_id"};
                                $array["CountryName"] = $value->{"usuario.pais_id"};
                                $array["ZipCode"] = $value->{"registro.codigo_postal"};
                                $array["IsVerified"] = true;
                                $array["IsActivate"] = ($value->{"usuario.estado"});
                                $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                                $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                                $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                                $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                                $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                                $array["ContactName"] = ($value->{"punto_venta.nombre_contacto"});
                                $array["Description"] = $value->{"punto_venta.descripcion"};
                                $array["Phone"] = $value->{"punto_venta.telefono"};
                                $array["RegionId"] = $value->{"departamento.depto_id"};
                                $array["CityId"] = $value->{"ciudad.ciudad_id"};
                                $array["Pinagent"] = $value->{"usuario_config.pinagent"};
                                $array["Lockedsales"] = $value->{"usuario.bloqueo_ventas"};
                                $array["PrintReceiptBox"] = $value->{"usuario_config.recibo_caja"};
                                $array["AllowsRecharges"] = $value->{"usuario_config.permite_recarga"};
                                $array["ActivateRegistration"] = $value->{"usuario.permite_activareg"};
                                $array["District"] = $value->{"punto_venta.barrio"};
                                $array["LastModifiedUser"] = $value->{"usuario.usumodif_id"};
                                $array["LastIPaddress"] = $value->{"usuario.dir_ip"};
                                $array["IP"] = $value->{"usuario.usuario_ip"};
                                $array["IsRestrictionIP"] = $value->{"usuario.restriccion_ip"};
                                $array["IsTokenGoogle"] = $value->{"usuario.token_google"};
                                $array["IsTokenLocal"] = $value->{"usuario.token_local"};
                                $array["AllowDeposits"] = ($value->{"usuario_config.permite_recarga"} == "S") ? "A" : "I";
                                $array["Longitud"] = $value->{"usuario.ubicacion_longitud"};
                                $array["Latitud"] = $value->{"usuario.ubicacion_latitud"};
                                $array["UserCountry"] = $value->{"usuario_perfil.pais"};
                                $array["UserGlobal"] = $value->{"usuario_perfil.global"};


                                if ($value->{"concesionario.usupadre_id"} != "") {
                                    $array["Concessionaire"] = $value->{"concesionario.usupadre_id"};
                                }

                                if ($value->{"concesionario.usupadre2_id"} != "") {
                                    $array["Subconcessionaire"] = $value->{"concesionario.usupadre2_id"};
                                }



                        } else {
                            $array["Id"] = $value->{"usuario.usuario_id"};
                            $array["id"] = $value->{"usuario.usuario_id"};
                            $array["Ip"] = $value->{"ausuario.dir_ip"};
                            $array["Login"] = $value->{"usuario.login"};
                            $array["Estado"] = array($value->{"usuario.estado"});
                            $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                            $array["Idioma"] = $value->{"a.idioma"};
                            $array["Nombre"] = $value->{"a.nombre"};
                            $array["FirstName"] = $value->{"registro.nombre1"};
                            $array["MiddleName"] = $value->{"registro.nombre2"};
                            $array["LastName"] = $value->{"registro.apellido1"};
                            $array["Email"] = $value->{"registro.email"};
                            $array["Address"] = $value->{"registro.direccion"};
                            $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                            $array["Intentos"] = $value->{"usuario.intentos"};
                            $array["Observaciones"] = $value->{"usuario.observ"};
                            $array["Moneda"] = $value->{"usuario.moneda"};

                            $array["Pais"] = $value->{"usuario.pais_id"};
                            $array["City"] = $value->{"g.ciudad_nom"};

                            $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                            $array["IsLocked"] = false;
                            $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                            $array["BirthDate"] = $value->{"c.fecha_nacim"};

                            $array["BirthDepartment"] = $value->{"g.depto_id"};
                            $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                            $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                            $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};


                            $array["CurrencyId"] = $value->{"usuario.moneda"};
                            $array["Currency"] = $value->{"usuario.moneda"};
                            $array["DocNumber"] = $value->{"registro.cedula"};
                            $array["Gender"] = $value->{"registro.sexo"};
                            $array["Language"] = $value->{"usuario.idioma"};
                            $array["Phone"] = $value->{"registro.telefono"};
                            $array["MobilePhone"] = $value->{"registro.celular"};
                            $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                            $array["Province"] = $value->{"registro.ciudad_id"};
                            $array["CityId"] = $value->{"registro.ciudad_id"};
                            //$array["RegionId"] = $value->{"usuario.pais_id"};
                            $array["CountryId"] = $value->{"usuario.pais_id"};
                            $array["RegionId"] = $value->{"d.depto_id"};
                            $array["DocumentType"] = ($value->{"registro.tipo_doc"});

                            $array["CountryName"] = $value->{"usuario.pais_id"};
                            $array["ZipCode"] = $value->{"registro.codigo_postal"};
                            $array["IsVerified"] = true;
                            $array["IsActivate"] = ($value->{"usuario.estado"});
                            $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                            $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                            $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                            $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                            $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                            $array["CreatedLocalDate"] = ($value->{"usuario.fecha_crea"});

                            $array["IsActivateContingency"] = ($value->{"usuario.contingencia"});
                            $array["IsActivateContingencyDeportivas"] = ($value->{"usuario.contingencia_deportes"});
                            $array["IsActivateContingencyCasino"] = ($value->{"usuario.contingencia_casino"});
                            $array["IsActivateContingencyCasinoVivo"] = ($value->{"usuario.contingencia_casvivo"});
                            $array["IsActivateContingencyVirtuales"] = ($value->{"usuario.contingencia_virtuales"});
                            $array["IsActivateContingencyPoker"] = ($value->{"usuario.contingencia_poker"});
                            $array["IsActivateDniAnterior"] = "I";
                            $array["IsActivateDniPosterior"] = "I";

                            if ($value->{"usuario.verifcedula_ant"} == "S") {
                                $array["IsActivateDniAnterior"] = "A";

                                $filename = "https://images.doradobet.com/c/c" . $value->{"usuario.usuario_id"} . 'A' . '.png';

                                $array["DNIA"] = $filename;
                            }
                            if ($value->{"usuario.verifcedula_post"} == "S") {
                                $array["IsActivateDniPosterior"] = "A";

                                $filename = "https://images.doradobet.com/c/c" . $value->{"usuario.usuario_id"} . 'P' . '.png';

                                $array["DNIP"] = $filename;
                            }

                        }


                        $usuariosFinal = $array;

                    }
                } else {

                    $UsuarioMandante = new UsuarioMandante();
                    $rules = [];

                    array_push($rules, array("field" => "usuario_mandante.usuario_mandante", "data" => "$id", "op" => "in"));

                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }
                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario_mandante.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }
                    array_push($rules, array("field" => "usuario_mandante.propio", "data" => "N", "op" => "eq"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $usuarios = $UsuarioMandante->getUsuariosMandantesCustom(" usuario_mandante.* ", "usuario_mandante.usumandante_id", "asc", $SkeepRows, $MaxRows, $json, true);

                    $usuarios = json_decode($usuarios);

                    $usuariosFinal = [];

                    foreach ($usuarios->data as $key => $value) {

                        $Islocked = false;

                        $array = [];

                        $array["id"] = $value->{"usuario_mandante.usuario_mandante"};
                        $array["Id"] = $value->{"usuario_mandante.usuario_mandante"};
                        $array["Ip"] = $value->{"ausuario.dir_ip"};
                        //$array["Login"] = $value->{"usuario.login"};
                        // $array["Estado"] = array($value->{"usuario.estado"});
                        // $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                        //  $array["Idioma"] = $value->{"a.idioma"};
                        $array["Name"] = $value->{"usuario_mandante.nombres"};
                        $array["FirstName"] = $value->{"usuario_mandante.nombres"};
                        // $array["MiddleName"] = $value->{"registro.nombre2"};
                        $array["LastName"] = $value->{"usuario_mandante.apellidos"};
                        $array["Email"] = $value->{"usuario_mandante.email"};
                        $array["Currency"] = $value->{"usuario_mandante.moneda"};
                        $array["CreatedLocalDate"] = $value->{"usuario_mandante.fecha_crea"};

                        $usuariosFinal = $array;

                    }


                }


                if ($usuariosFinal) {

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                    $response = [$usuariosFinal];

                }
            }

            break;

        /**
        * Client/GetClientSpById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Client/GetClientSpById':

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $id = $_GET["id"];

            $seguir = true;
            if ($_SESSION["win_perfil"] == "PUNTOVENTA" || $_SESSION["win_perfil"] == "CAJERO") {
                $seguir = false;
            }

            if ($id != "" && $seguir) {


                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 10;
                }

                $rules = [];
                array_push($rules, array("field" => "usuario.usuario_id", "data" => $id, "op" => "eq"));

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $usuarios = $Usuario->getUsuariosSuperCustom("  DISTINCT (usuario.usuario_id),usuario.usumodif_id,usuario.token_google,usuario.token_local,usuario.ubicacion_longitud,usuario.ubicacion_latitud,usuario.restriccion_ip,usuario.usuario_ip,usuario.permite_activareg,usuario.bloqueo_ventas,usuario.nombre,usuario.idioma,usuario_config.*,usuario.documento_validado,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,ciudad.*,departamento.*,pais.*,usuario.tiempo_limitedeposito,usuario.tiempo_autoexclusion,usuario.cambios_aprobacion,usuario_perfil.*,punto_venta.*,concesionario.*,usuario.contingencia,usuario.contingencia_deportes,usuario.contingencia_casino,usuario.contingencia_casvivo,usuario.contingencia_virtuales,usuario.contingencia_poker ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);
                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $array = [];

                    if ($value->{"usuario_perfil.perfil_id"} != "USUARIO") {
                        $array["Id"] = $value->{"usuario.usuario_id"};
                        $array["id"] = $value->{"usuario.usuario_id"};
                        $array["Ip"] = $value->{"usuario.dir_ip"};
                        $array["Login"] = $value->{"usuario.login"};
                        $array["Estado"] = array($value->{"usuario.estado"});
                        $array["State"] = array($value->{"usuario.estado"});
                        $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                        $array["Idioma"] = $value->{"a.idioma"};
                        $array["PreferredLanguage"] = $value->{"usuario.idioma"};
                        $array["Name"] = $value->{"usuario.nombre"};
                        $array["FirstName"] = $value->{"registro.nombre1"};
                        $array["MiddleName"] = $value->{"registro.nombre2"};
                        $array["LastName"] = $value->{"registro.apellido1"};
                        $array["Email"] = $value->{"punto_venta.email"};
                        $array["Address"] = $value->{"punto_venta.direccion"};
                        $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                        $array["Intentos"] = $value->{"usuario.intentos"};
                        $array["Observaciones"] = $value->{"usuario.observ"};
                        $array["Moneda"] = $value->{"usuario.moneda"};
                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["Type"] = $value->{"usuario_perfil.perfil_id"};

                        if ($value->{"usuario_perfil.perfil_id"} == "AFILIADOR") {
                            $array["Type"] = 1;
                        } elseif (strpos($value->{"usuario_perfil.perfil_id"}, "CONCESIONARIO") !== FALSE) {
                            $array["Type"] = 0;
                        }

                        $array["Pais"] = $value->{"usuario.pais_id"};
                        $array["City"] = $value->{"g.ciudad_nom"};

                        $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                        $array["IsLocked"] = false;
                        $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                        $array["BirthDate"] = $value->{"c.fecha_nacim"};

                        $array["BirthDepartment"] = $value->{"g.depto_id"};
                        $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                        $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                        $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["DocNumber"] = $value->{"registro.cedula"};
                        $array["Gender"] = $value->{"registro.sexo"};
                        $array["Language"] = $value->{"usuario.idioma"};
                        $array["MobilePhone"] = $value->{"registro.celular"};
                        $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                        $array["Province"] = $value->{"registro.ciudad_id"};
                        $array["RegionId"] = $value->{"usuario.pais_id"};
                        $array["CountryId"] = $value->{"usuario.pais_id"};
                        $array["CountryName"] = $value->{"usuario.pais_id"};
                        $array["ZipCode"] = $value->{"registro.codigo_postal"};
                        $array["IsVerified"] = true;
                        $array["IsActivate"] = ($value->{"usuario.estado"});
                        $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                        $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                        $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                        $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                        $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                        $array["ContactName"] = ($value->{"punto_venta.nombre_contacto"});
                        $array["Description"] = $value->{"punto_venta.descripcion"};
                        $array["Phone"] = $value->{"punto_venta.telefono"};
                        $array["RegionId"] = $value->{"departamento.depto_id"};
                        $array["CityId"] = $value->{"ciudad.ciudad_id"};
                        $array["Pinagent"] = $value->{"usuario_config.pinagent"};
                        $array["Lockedsales"] = $value->{"usuario.bloqueo_ventas"};
                        $array["PrintReceiptBox"] = $value->{"usuario_config.recibo_caja"};
                        $array["AllowsRecharges"] = $value->{"usuario_config.permite_recarga"};
                        $array["ActivateRegistration"] = $value->{"usuario.permite_activareg"};
                        $array["District"] = $value->{"punto_venta.barrio"};
                        $array["LastModifiedUser"] = $value->{"usuario.usumodif_id"};
                        $array["LastIPaddress"] = $value->{"usuario.dir_ip"};
                        $array["IP"] = $value->{"usuario.usuario_ip"};
                        $array["IsRestrictionIP"] = $value->{"usuario.restriccion_ip"};
                        $array["IsTokenGoogle"] = $value->{"usuario.token_google"};
                        $array["IsTokenLocal"] = $value->{"usuario.token_local"};
                        $array["AllowDeposits"] = ($value->{"usuario_config.permite_recarga"} == "S") ? "A" : "I";
                        $array["Longitud"] = $value->{"usuario.ubicacion_longitud"};
                        $array["Latitud"] = $value->{"usuario.ubicacion_latitud"};
                        $array["UserCountry"] = $value->{"usuario_perfil.pais"};
                        $array["UserGlobal"] = $value->{"usuario_perfil.global"};

                        $array["IsActivateContingency"] = $value->{"usuario.contingencia"};
                        $array["IsActivateContingencyDeportivas"] = $value->{"usuario.contingencia_deportes"};
                        $array["IsActivateContingencyCasino"] = $value->{"usuario.contingencia_casino"};
                        $array["IsActivateContingencyCasinoVivo"] = $value->{"usuario.contingencia_casvivo"};
                        $array["IsActivateContingencyVirtuales"] = $value->{"usuario.contingencia_virtuales"};
                        $array["IsActivateContingencyPoker"] = $value->{"usuario.contingencia_poker"};

                        if ($value->{"concesionario.usupadre_id"} != "") {
                            $array["Concessionaire"] = $value->{"concesionario.usupadre_id"};
                        }

                        if ($value->{"concesionario.usupadre2_id"} != "") {
                            $array["Subconcessionaire"] = $value->{"concesionario.usupadre2_id"};
                        }

                    } else {

                    }


                    $usuariosFinal = $array;

                }
                if ($usuariosFinal) {

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                    $response = [$usuariosFinal];

                }
            }

            break;

        /**
        * Client/GetClientSpMyInfo
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Client/GetClientSpMyInfo':

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $id = $_SESSION["usuario"];

            $seguir = true;
            if ($_SESSION["win_perfil"] == "PUNTOVENTA" || $_SESSION["win_perfil"] == "CAJERO") {
                $seguir = false;
            }

            if ($id != "" && $seguir) {


                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 10;
                }

                $rules = [];
                array_push($rules, array("field" => "usuario.usuario_id", "data" => $id, "op" => "eq"));

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $usuarios = $Usuario->getUsuariosSuperCustom("  DISTINCT (usuario.usuario_id),usuario.usumodif_id,usuario.token_google,usuario.token_local,usuario.ubicacion_longitud,usuario.ubicacion_latitud,usuario.restriccion_ip,usuario.usuario_ip,usuario.permite_activareg,usuario.bloqueo_ventas,usuario.nombre,usuario.idioma,usuario_config.*,usuario.documento_validado,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,ciudad.*,departamento.*,pais.*,usuario.tiempo_limitedeposito,usuario.tiempo_autoexclusion,usuario.cambios_aprobacion,usuario_perfil.*,punto_venta.*,concesionario.* ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];

                foreach ($usuarios->data as $key => $value) {

                    $array = [];

                    if ($value->{"usuario_perfil.perfil_id"} != "USUARIO") {
                        $array["Id"] = $value->{"usuario.usuario_id"};
                        $array["id"] = $value->{"usuario.usuario_id"};
                        $array["Ip"] = $value->{"usuario.dir_ip"};
                        $array["Login"] = $value->{"usuario.login"};
                        $array["Estado"] = array($value->{"usuario.estado"});
                        $array["State"] = array($value->{"usuario.estado"});
                        $array["EstadoEspecial"] = $value->{"usuario.estado_esp"};
                        $array["Idioma"] = $value->{"a.idioma"};
                        $array["PreferredLanguage"] = $value->{"usuario.idioma"};
                        $array["Name"] = $value->{"usuario.nombre"};
                        $array["FirstName"] = $value->{"registro.nombre1"};
                        $array["MiddleName"] = $value->{"registro.nombre2"};
                        $array["LastName"] = $value->{"registro.apellido1"};
                        $array["Email"] = $value->{"punto_venta.email"};
                        $array["Address"] = $value->{"punto_venta.direccion"};
                        $array["TipoUsuario"] = $value->{"usuario_perfil.perfil_id"};
                        $array["Intentos"] = $value->{"usuario.intentos"};
                        $array["Observaciones"] = $value->{"usuario.observ"};
                        $array["Moneda"] = $value->{"usuario.moneda"};
                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["Type"] = $value->{"usuario_perfil.perfil_id"};

                        if ($value->{"usuario_perfil.perfil_id"} == "AFILIADOR") {
                            $array["Type"] = 1;
                        } elseif (strpos($value->{"usuario_perfil.perfil_id"}, "CONCESIONARIO") !== FALSE) {
                            $array["Type"] = 0;
                        }

                        $array["Pais"] = $value->{"usuario.pais_id"};
                        $array["City"] = $value->{"g.ciudad_nom"};

                        $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};

                        $array["IsLocked"] = false;
                        $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
                        $array["BirthDate"] = $value->{"c.fecha_nacim"};

                        $array["BirthDepartment"] = $value->{"g.depto_id"};
                        $array["BirthRegionCode2"] = $value->{"registro.paisnacim_id"};
                        $array["BirthRegionId"] = $value->{"registro.paisnacim_id"};
                        $array["Balance"] = $value->{"registro.creditos"} + $value->{"registro.creditos_base"};

                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["DocNumber"] = $value->{"registro.cedula"};
                        $array["Gender"] = $value->{"registro.sexo"};
                        $array["Language"] = $value->{"usuario.idioma"};
                        $array["MobilePhone"] = $value->{"registro.celular"};
                        $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                        $array["Province"] = $value->{"registro.ciudad_id"};
                        $array["RegionId"] = $value->{"usuario.pais_id"};
                        $array["CountryId"] = $value->{"usuario.pais_id"};
                        $array["CountryName"] = $value->{"usuario.pais_id"};
                        $array["ZipCode"] = $value->{"registro.codigo_postal"};
                        $array["IsVerified"] = true;
                        $array["IsActivate"] = ($value->{"usuario.estado"});
                        $array["IsRegisterActivate"] = ($value->{"registro.estado_valida"});
                        $array["IsDocumentActivate"] = ($value->{"usuario.documento_validado"});

                        $array["DaysChangeLimitDeposit"] = $value->{"usuario.tiempo_limitedeposito"};
                        $array["DaysChangeLimitSelfExclusion"] = $value->{"usuario.tiempo_autoexclusion"};
                        $array["ChangesToApproval"] = ($value->{"usuario.cambios_aprobacion"} == "S" ? true : false);


                        $array["ContactName"] = ($value->{"punto_venta.nombre_contacto"});
                        $array["Description"] = $value->{"punto_venta.descripcion"};
                        $array["Phone"] = $value->{"punto_venta.telefono"};
                        $array["RegionId"] = $value->{"departamento.depto_id"};
                        $array["CityId"] = $value->{"ciudad.ciudad_id"};
                        $array["Pinagent"] = $value->{"usuario_config.pinagent"};
                        $array["Lockedsales"] = $value->{"usuario.bloqueo_ventas"};
                        $array["PrintReceiptBox"] = $value->{"usuario_config.recibo_caja"};
                        $array["AllowsRecharges"] = $value->{"usuario_config.permite_recarga"};
                        $array["ActivateRegistration"] = $value->{"usuario.permite_activareg"};
                        $array["District"] = $value->{"punto_venta.barrio"};
                        $array["LastModifiedUser"] = $value->{"usuario.usumodif_id"};
                        $array["LastIPaddress"] = $value->{"usuario.dir_ip"};
                        $array["IP"] = $value->{"usuario.usuario_ip"};
                        $array["IsRestrictionIP"] = $value->{"usuario.restriccion_ip"};
                        $array["IsTokenGoogle"] = $value->{"usuario.token_google"};
                        $array["IsTokenLocal"] = $value->{"usuario.token_local"};
                        $array["AllowDeposits"] = ($value->{"usuario_config.permite_recarga"} == "S") ? "A" : "I";
                        $array["Longitud"] = $value->{"usuario.ubicacion_longitud"};
                        $array["Latitud"] = $value->{"usuario.ubicacion_latitud"};
                        $array["UserCountry"] = $value->{"usuario_perfil.pais"};
                        $array["UserGlobal"] = $value->{"usuario_perfil.global"};


                        if ($value->{"concesionario.usupadre_id"} != "") {
                            $array["Concessionaire"] = $value->{"concesionario.usupadre_id"};
                        }

                        if ($value->{"concesionario.usupadre2_id"} != "") {
                            $array["Subconcessionaire"] = $value->{"concesionario.usupadre2_id"};
                        }

                    } else {

                    }


                    $usuariosFinal = $array;

                }
                if ($usuariosFinal) {

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                    $response = [$usuariosFinal];

                }
            }

            break;

        /**
        * Agent/GetAgentById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Agent/GetAgentById':


            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $id = $_GET["id"];

            $Usuario = new Usuario();

            $Usuario->usuarioId = $id;
            $Usuario->mandante = 0;


            $Agent = $Usuario->getAdminDetails();


            //$usuarios = json_decode($usuarios);


            $usuariosFinal = [];


            $array = [];

            $array["Id"] = $Agent["a.usuario_id"];
            $array["UserName"] = $Agent["a.login"];
            $array["SystemName"] = 1;
            $array["IsSuspended"] = ($Agent["a.estado"] == 'A' ? false : true);
            $array["FirstName"] = $Agent["a.nombre"];
            $array["Name"] = $Agent["a.nombre"];
            $array["LastName"] = "T";
            $array["Phone"] = '';
            $array["LastLoginLocalDate"] = $Agent["a.fecha_ult"];
            $array["LastLoginIp"] = $Agent["a.dir_ip"];
            $array["CurrencyId"] = $Agent["a.moneda"];
            $array["Currency"] = $Agent["a.moneda"];
            $array["Address"] = $Agent["e.direccion"];
            $array["Email"] = $Agent["e.email"];
            $array["AgentAmount"] = $Agent["e.creditos_base"];
            $array["AgentAmount2"] = $Agent["e.cupo_recarga"];
            $array["State"] = $Agent["a.estado"];

            $array['UserId'] = $Agent["a.usuario_id"];


            $usuariosFinal = $array;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuariosFinal;
            $response["data"] = $usuariosFinal;

            break;

        /**
        * Agent/GetAgentAccount
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Agent/GetAgentAccount':


            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $id = "";

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Usuario = new Usuario();
            $Usuario->usuarioId = $UsuarioMandante->getUsuarioMandante();
            $Usuario->mandante = 0;


            $Agent = $Usuario->getAdminDetails();


            //$usuarios = json_decode($usuarios);


            $usuariosFinal = [];


            $array = [];

            $array["Id"] = $Agent["a.usuario_id"];
            $array["UserName"] = $Agent["a.login"];
            $array["SystemName"] = 1;
            $array["IsSuspended"] = ($Agent["a.estado"] == 'A' ? false : true);
            $array["FirstName"] = $Agent["a.nombre"];
            $array["LastName"] = "T";
            $array["Phone"] = '';
            $array["LastLoginLocalDate"] = $Agent["a.fecha_ult"];
            $array["LastLoginIp"] = $Agent["a.dir_ip"];
            $array["CurrencyId"] = $Agent["a.moneda"];
            $array["Address"] = $Agent["e.direccion"];
            $array["Email"] = $Agent["e.email"];
            $array["CashBalance"] = $Agent["e.creditos_base"];

            $array['UserId'] = $Agent["a.usuario_id"];


            $usuariosFinal = $array;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuariosFinal;

            break;


        /**
        * Agent/GetAgentById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Agent/GetAgentById':


            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $id = $_GET["id"];

            $Usuario = new Usuario();

            $Usuario->usuarioId = $id;
            $Usuario->mandante = 0;


            $Agent = $Usuario->getAdminDetails();


            //$usuarios = json_decode($usuarios);


            $usuariosFinal = [];


            $array = [];

            $array["Id"] = $Agent["a.usuario_id"];
            $array["UserName"] = $Agent["a.login"];
            $array["SystemName"] = 1;
            $array["IsSuspended"] = ($Agent["a.estado"] == 'A' ? false : true);
            $array["FirstName"] = $Agent["a.nombre"];
            $array["LastName"] = "T";
            $array["Phone"] = '';
            $array["LastLoginLocalDate"] = $Agent["a.fecha_ult"];
            $array["LastLoginIp"] = $Agent["a.dir_ip"];
            $array["CurrencyId"] = $Agent["a.moneda"];
            $array["Address"] = $Agent["e.direccion"];
            $array["Email"] = $Agent["e.email"];

            $array['UserId'] = $Agent["a.usuario_id"];


            $usuariosFinal = $array;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuariosFinal;

            break;

        /**
        * Agent/GetAgentById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentById":


            $AgentId = $params->AgentId;

            $filter = $params->filter;
            $action = $filter->action;

            $dateFilter1 = date("Y-m-d 00:00:00", strtotime('-1 days'));
            $dateFilter2 = date("Y-m-d 23:59:59", strtotime('-1 days'));


            $dateFilterFrom = date("Y-m-d H:i:s", strtotime($filter->date->from));
            // $dateFilterFrom = "2018-01-01 00::s";
            $dateFilterTo = date("Y-m-d 23:59:59", strtotime($filter->date->to));


            if ($params->FromDateLocal != "") {
                $dateFilterFrom = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            } else {
                $seguir = false;
            }

            if ($params->ToDateLocal != "") {
                $dateFilterTo = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            } else {
                $seguir = false;
            }


            $productsReportPlayersTotal = array(array(
                "administrativeCost" => 0,
                "deposit" => 0,
                "bets" => 0,
                "wins" => 0,
                "grossRevenue" => 0,
                "expences" => 0,
                "convertedBonuses" => 0,
                "netRevenue" => 0,
                "bonus" => 0,
                "tax" => 0,
                "commission" => 0,

            ));


            $productsReportByPlayersTotals = array();


            //Obtenemos el monto por producto por fecha


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));
            array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsucomisionResumen = new UsucomisionResumen();
            $UsucomisionResumens = $UsucomisionResumen->getUsucomisionResumenGroupCustom(" SUM(usucomision_resumen.comision) totalcomision,SUM(usucomision_resumen.valor) total,usucomision_resumen.tipo,producto_interno.abreviado,DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m-%d') fecha ", "DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m-%d')", "asc ", $SkeepRows, $MaxRows, $json, true, "DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m-%d'),usucomision_resumen.tipo");
            $UsucomisionResumens = json_decode($UsucomisionResumens);

            $final = array();
            $fecha = "";

            foreach ($UsucomisionResumens->data as $key => $value) {

                if ($fecha != $value->{'.fecha'}) {
                    if ($fecha != "") {
                        array_push($final, $array1);
                    }
                    $fecha = $value->{'.fecha'};
                    $array1 = array(
                        "administrativeCost" => "0",
                        "bets" => "0",
                        "bonus" => "0",
                        "commission" => "0",
                        "convertedBonuses" => "0",
                        "date" => $fecha,
                        "deposit" => "0",
                        "expences" => "0",
                        "grossRevenue" => "0",
                        "netRevenue" => "0",
                        "tax" => "0",
                        "wins" => "0"
                    );

                }


                switch ($value->{'producto_interno.abreviado'}) {

                    case "BETSPORT":
                        $array1["bets"] = $array1["bets"] + $value->{'.total'};
                        break;

                    case "WINSPORT":
                        $array1["wins"] = $array1["wins"] + $value->{'.total'};
                        break;

                    case "DEPOSITO":
                        $array1["deposit"] = $array1["deposit"] + $value->{'.total'};

                        break;


                }


            }

            array_push($final, $array1);


            //Obtenemos TOP Jugadores
            $productsReportByPlayersTotals = $final;

            $MediaStat = array();


            //Obtenemos el monto por producto por fecha


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));
            array_push($rules, array("field" => "usumarketing_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsumarketingResumen = new UsumarketingResumen();
            $UsumarketingResumens = $UsumarketingResumen->getUsumarketingResumenCustom(" SUM(usumarketing_resumen.valor) total,usumarketing_resumen.tipo,DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d') fecha ", "DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d')", "asc ", $SkeepRows, $MaxRows, $json, true, "DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d'),usumarketing_resumen.tipo", "DATE_FORMAT(usumarketing_resumen.fecha_crea, '%Y-%m-%d'),usumarketing_resumen.tipo");
            $UsumarketingResumens = json_decode($UsumarketingResumens);

            $final = array();
            $fecha = "";
            $array1 = array();


            foreach ($UsumarketingResumens->data as $key => $value) {

                if ($fecha != $value->{'.fecha'}) {
                    if ($fecha != "") {
                        array_push($final, $array1);
                    }
                    $fecha = $value->{'.fecha'};
                    $array1 = array(
                        "date" => $fecha
                    );

                }


                switch ($value->{'usumarketing_resumen.tipo'}) {

                    case "LINKVISIT":
                        $array1["visits"] = $array1["visits"] + $value->{'.total'};
                        break;

                    case "CLICKBANNER":
                        $array1["clicks"] = $array1["clicks"] + $value->{'.total'};
                        break;

                    case "REGISTRO":
                        $array1["register"] = $array1["register"] + $value->{'.total'};
                        break;

                }


            }

            array_push($final, $array1);

            //Obtenemos TOP Jugadores
            $MediaStat = $final;

            $MarketingVsRegistros = array();


            //Obtenemos el monto por producto por fecha


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));
            array_push($rules, array("field" => "usumarketing_resumen.tipo", "data" => "'LINKVISIT','CLICKBANNER'", "op" => "in"));
            array_push($rules, array("field" => "usumarketing_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsumarketingResumen = new UsumarketingResumen();
            $UsumarketingResumens = $UsumarketingResumen->getUsumarketingResumenCustom(" usumarketing_resumen.externo_id,SUM(usumarketing_resumen.valor) total,usumarketing_resumen.tipo,DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d') fecha ", "DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d')", "asc ", $SkeepRows, $MaxRows, $json, true, "usumarketing_resumen.externo_id,usumarketing_resumen.tipo", "usumarketing_resumen.externo_id,usumarketing_resumen.tipo");
            $UsumarketingResumens = json_decode($UsumarketingResumens);

            $final = array();
            $fecha = "";
            $array1 = array();


            foreach ($UsumarketingResumens->data as $key => $value) {

                if ($fecha != $value->{'usumarketing_resumen.externo_id'}) {
                    if ($fecha != "") {
                        array_push($final, $array1);

                    }
                    $fecha = $value->{'usumarketing_resumen.externo_id'};
                    $array1 = array(
                        "marketing" => $fecha
                    );

                }


                $Usuario = new Usuario();


                $rules = [];
                $externoId = $value->{'usumarketing_resumen.externo_id'};

                switch ($value->{'usumarketing_resumen.tipo'}) {

                    case "LINKVISIT":

                        $array1["value"] = $array1["value"] + $value->{'.total'};
                        array_push($rules, array("field" => "registro.link_id", "data" => $externoId, "op" => "eq"));

                        break;

                    case "CLICKBANNER":
                        $array1["value"] = $array1["value"] + $value->{'.total'};
                        array_push($rules, array("field" => "registro.banner_id", "data" => $externoId, "op" => "eq"));

                        break;

                    case "REGISTRO":
                        // $array1["register"] = $array1["register"] + $value->{'.total'};
                        break;

                }

                array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFilterFrom ", "op" => "ge"));
                array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFilterTo", "op" => "le"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);


                $usuarios = $Usuario->getUsuariosCustom(" COUNT(*) count ", "usuario.usuario_id", "asc", 0, 10, $json2, true);

                $usuarios = json_decode($usuarios);

                $usuariosFinal = [];
                $response["Data"] = $usuarios->data[0]->{".count"};
                $array1["register"] = 0;

                if ($response["Data"] = $usuarios->data[0]->{".count"} != "") {
                    $array1["register"] = $usuarios->data[0]->{".count"};
                }

            }

            array_push($final, $array1);

            //Obtenemos TOP Jugadores
            $MarketingVsRegistros = $final;


            $MoneyUsers = array();
            $AgeUsers = array();


            //Obtenemos el monto por producto por fecha
            $Usuario = new Usuario();

            $rules = [];
            array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFilterFrom ", "op" => "ge"));
            array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFilterTo", "op" => "le"));
            array_push($rules, array("field" => "registro.afiliador_id", "data" => "198", "op" => "eq"));
            //array_push($rules, array("field" => "usumarketing_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $Usuario->getUsuariosCustom(" usuario.usuario_id,registro.creditos_base, registro.creditos, ( registro.creditos_base + registro.creditos ) saldo,c.fecha_nacim ", "saldo", "desc", 0, 100, $json, true);

            $usuarios = json_decode($usuarios);

            $final = array();


            foreach ($usuarios->data as $key => $value) {

                $array1 = array();

                $array1["user"] = "Usuario " . $value->{"usuario.usuario_id"};
                $array1["money"] = $value->{"registro.creditos_base"} + $value->{"registro.creditos"};

                array_push($MoneyUsers, $array1);


                $array2 = array();

                $array1["user"] = "Usuario " . $value->{"usuario.usuario_id"};
                $array1["money"] = $value->{"registro.creditos_base"} + $value->{"registro.creditos"};
                $array1["age"] = $value->{"c.fecha_nacim"};

                array_push($AgeUsers, $array1);

            }


            //Obtenemos TOP Jugadores


            $response["status"] = true;
            $response["html"] = "";
            $response["result"] = array(
                "charts" => array(
                    // Grafico de estadisticas

                    "MediaStat" => array(
                        "records" => $MediaStat

                    ),
                    "MarketingVsRegistros" => array(
                        "records" => $MarketingVsRegistros

                    ),

                    "MoneyUsers" => array(
                        "records" => $MoneyUsers

                    ),

                    "AgeUsers" => array(
                        "records" => $AgeUsers

                    )
                )
            );

            $response["notification"] = array();

            break;

        /**
        * Agent/SetStateValidate
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/SetStateValidate":

            $Id = $params->Id;
            $Action = ($params->Action == "A") ? 'A' : 'I';

            if ($Id != "") {
                $Usuario = new Usuario($Id);

                $Usuario->estadoValida = $Action;
                $Usuario->usuvalidaId = $_SESSION["usuario"];
                $Usuario->fechaValida = date('Y-m-d H:i:s');

                if ($Action == "A") {
                    $Usuario->estado = 'A';
                }

                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $UsuarioMySqlDAO->update($Usuario);
                $UsuarioMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "Datos no validos";
                $response["AlertMessage"] = "";

            }

            break;


        /**
        * Agent/GetMarketingStats2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetMarketingStats2":

            $AgentId = $params->AgentId;

            $filter = $params->filter;
            $action = $filter->action;

            $dateFilter1 = date("Y-m-d 00:00:00", strtotime('-1 days'));
            $dateFilter2 = date("Y-m-d 23:59:59", strtotime('-1 days'));


            $dateFilterFrom = date("Y-m-d H:i:s", strtotime($filter->date->from));
            // $dateFilterFrom = "2018-01-01 00::s";
            $dateFilterTo = date("Y-m-d 23:59:59", strtotime($filter->date->to));


            if ($params->FromDateLocal != "") {
                $dateFilterFrom = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            } else {
                $seguir = false;
            }

            if ($params->ToDateLocal != "") {
                $dateFilterTo = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            } else {
                $seguir = false;
            }


            $productsReportPlayersTotal = array(array(
                "administrativeCost" => 0,
                "deposit" => 0,
                "bets" => 0,
                "wins" => 0,
                "grossRevenue" => 0,
                "expences" => 0,
                "convertedBonuses" => 0,
                "netRevenue" => 0,
                "bonus" => 0,
                "tax" => 0,
                "commission" => 0,

            ));


            $TotalProducsStatistics = array();


            //Obtenemos los montos de los productos en las fechas
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));

            array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsucomisionResumen = new UsucomisionResumen();
            $UsucomisionResumens = $UsucomisionResumen->getUsucomisionResumenGroupCustom(" SUM(usucomision_resumen.comision) totalcomision,SUM(usucomision_resumen.valor) total,usucomision_resumen.tipo,producto_interno.abreviado ", "usucomision_resumen.tipo", "asc ", $SkeepRows, $MaxRows, $json, true, "usucomision_resumen.tipo");
            $UsucomisionResumens = json_decode($UsucomisionResumens);

            $final = array();
            $array1 = array(

                "bettingGames " => "0",
                "bettingGamesCommission " => "0",
                "bettingGamesProfit " => "0",
                "brandId " => "0",
                "brandIdCommission " => "0",
                "brandIdProfit " => "0",
                "liveGames " => "0",
                "liveGamesCommission " => "0",
                "liveGamesProfit " => "0",
                "nativePoker " => "0",
                "nativePokerCommission " => "0",
                "nativePokerProfit " => "0",
                "poolBettingGames " => "0",
                "poolBettingGamesCommission " => "0",
                "poolBettingGamesProfit " => "0",
                "skillGames " => "0",
                "skillGamesCommission " => "0",
                "skillGamesProfit " => "0",
                "slots " => "0",
                "slotsCommission " => "0",
                "slotsProfit " => "0",
                "sportsbook " => "0",
                "sportsbookCommission " => "0",
                "sportsbookProfit " => "0",
                "tableGames " => "0",
                "tableGamesCommission " => "0",
                "tableGamesProfit " => "0",
                "total " => "0",
                "totalCommission " => "0",
                "totalProfit " => "0",
                "videoPoker " => "0",
                "videoPokerCommission " => "0",
                "videoPokerProfit " => "0",
                "virtualGames " => "0",
                "virtualGamesCommission " => "0",
                "virtualGamesProfit " => "0"

            );
            foreach ($UsucomisionResumens->data as $key => $value) {


                switch ($value->{'producto_interno.abreviado'}) {

                    case "BETSPORT":
                        $productsReportPlayersTotal[0]["bets"] = $productsReportPlayersTotal[0]["bets"] + $value->{'.total'};
                        $array1["sportsbook"] = $array1["sportsbook"] + $value->{'.total'};
                        $array1["total"] = $array1["total"] + $value->{'.total'};
                        //$array1["sportsbookProfit"] = $array1[0]["sportsbookProfit"] + $value->{'.total'};
                        break;


                    case "WINSPORT":
                        $productsReportPlayersTotal[0]["wins"] = $productsReportPlayersTotal[0]["wins"] + $value->{'.total'};
                        $array1["sportsbook"] = $array1["sportsbook"] - $value->{'.total'};
                        $array1["total"] = $array1["total"] - $value->{'.total'};

                        // $array1["sportsbookProfit"] = $array1[0]["sportsbookProfit"] + $value->{'.total'};
                        break;

                    case "DEPOSITO":
                        $productsReportPlayersTotal[0]["deposit"] = $productsReportPlayersTotal[0]["deposit"] + $value->{'.total'};

                        break;


                }


            }

            array_push($TotalProducsStatistics, $array1);


            $productsReportByPlayersTotals = array();


            //Obtenemos el monto por producto por fecha


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));
            array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsucomisionResumen = new UsucomisionResumen();
            $UsucomisionResumens = $UsucomisionResumen->getUsucomisionResumenGroupCustom(" SUM(usucomision_resumen.comision) totalcomision,SUM(usucomision_resumen.valor) total,usucomision_resumen.tipo,producto_interno.abreviado,DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m-%d') fecha ", "DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m-%d')", "asc ", $SkeepRows, $MaxRows, $json, true, "DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m-%d'),usucomision_resumen.tipo");
            $UsucomisionResumens = json_decode($UsucomisionResumens);

            $final = array();
            $fecha = "";

            foreach ($UsucomisionResumens->data as $key => $value) {

                if ($fecha != $value->{'.fecha'}) {
                    if ($fecha != "") {
                        array_push($final, $array1);
                    }
                    $fecha = $value->{'.fecha'};
                    $array1 = array(
                        "administrativeCost" => "0",
                        "bets" => "0",
                        "bonus" => "0",
                        "commission" => "0",
                        "convertedBonuses" => "0",
                        "date" => $fecha,
                        "deposit" => "0",
                        "expences" => "0",
                        "grossRevenue" => "0",
                        "netRevenue" => "0",
                        "tax" => "0",
                        "wins" => "0"
                    );

                }


                switch ($value->{'producto_interno.abreviado'}) {

                    case "BETSPORT":
                        $array1["bets"] = $array1["bets"] + $value->{'.total'};
                        break;

                    case "WINSPORT":
                        $array1["wins"] = $array1["wins"] + $value->{'.total'};
                        break;

                    case "DEPOSITO":
                        $array1["deposit"] = $array1["deposit"] + $value->{'.total'};

                        break;


                }


            }

            array_push($final, $array1);


            //Obtenemos TOP Jugadores
            $productsReportByPlayersTotals = $final;

            $MediaStat = array();


            //Obtenemos el monto por producto por fecha


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));
            array_push($rules, array("field" => "usumarketing_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsumarketingResumen = new UsumarketingResumen();
            $UsumarketingResumens = $UsumarketingResumen->getUsumarketingResumenCustom(" SUM(usumarketing_resumen.valor) total,usumarketing_resumen.tipo,DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d') fecha ", "DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d')", "asc ", $SkeepRows, $MaxRows, $json, true, "DATE_FORMAT(usumarketing_resumen.fecha_crea,'%Y-%m-%d'),usumarketing_resumen.tipo", "DATE_FORMAT(usumarketing_resumen.fecha_crea, '%Y-%m-%d'),usumarketing_resumen.tipo");
            $UsumarketingResumens = json_decode($UsumarketingResumens);

            $final = array();
            $fecha = "";
            $array1 = array();

            foreach ($UsumarketingResumens->data as $key => $value) {

                if ($fecha != $value->{'.fecha'}) {
                    if ($fecha != "") {
                        array_push($final, $array1);
                    }
                    $fecha = $value->{'.fecha'};
                    $array1 = array(
                        "date" => $fecha
                    );

                }


                switch ($value->{'usumarketing_resumen.tipo'}) {

                    case "LINKVISIT":
                        $array1["visits"] = $array1["visits"] + $value->{'.total'};
                        break;

                    case "CLICKBANNER":
                        $array1["clicks"] = $array1["clicks"] + $value->{'.total'};
                        break;


                }


            }

            array_push($final, $array1);

            //Obtenemos TOP Jugadores
            $MediaStat = $final;


            $TopUsers = array();

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));
            array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsucomisionResumen = new UsucomisionResumen();
            $UsucomisionResumens = $UsucomisionResumen->getUsucomisionResumenGroupCustom(" SUM(usucomision_resumen.comision) totalcomision,SUM(usucomision_resumen.valor) total,usucomision_resumen.usuarioref_id ", "usucomision_resumen.usuarioref_id", "asc ", $SkeepRows, $MaxRows, $json, true, "usucomision_resumen.usuarioref_id");
            $UsucomisionResumens = json_decode($UsucomisionResumens);


            foreach ($UsucomisionResumens->data as $key => $value) {
                $array = array(
                    "playerId" => $value->{'usucomision_resumen.usuarioref_id'},
                    "profit" => $value->{'.total'},
                    "commission" => $value->{'.totalcomision'}
                );

                array_push($TopUsers, $array);


            }

            $sumClick = 0;
            $sumClickAyer = 0;
            $sumClickTodos = 0;

            $sumRegistro = 0;
            $sumRegistroAyer = 0;
            $sumRegistroTodos = 0;

            $sumComision = 0;
            $sumComisionAyer = 0;
            $sumComisionTodos = 0;


            //Obtenemos el marketing en las fechas


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterFrom, "op" => "ge"));
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilterTo, "op" => "le"));
            array_push($rules, array("field" => "usumarketing_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsumarketingResumen = new UsumarketingResumen();
            $UsuarioMarketings = $UsumarketingResumen->getUsumarketingResumenGroupCustom(" SUM(usumarketing_resumen.valor) total,usumarketing_resumen.tipo ", "usumarketing_resumen.tipo", "asc ", $SkeepRows, $MaxRows, $json, true, "usumarketing_resumen.tipo");
            $UsuarioMarketings = json_decode($UsuarioMarketings);


            foreach ($UsuarioMarketings->data as $key => $value) {

                switch ($value->{'usumarketing_resumen.tipo'}) {
                    case "LINKVISIT":

                        $sumClick = $value->{'.total'};

                        break;

                    case "CLICKBANNER":

                        $sumClick = $value->{'.total'};

                        break;


                    case "REGISTRO":

                        $sumRegistro = $value->{'.total'};

                        break;


                }

            }


            //Obtenemos los clicks

            $rules = [];

            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilter1, "op" => "ge"));
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilter2, "op" => "le"));
            array_push($rules, array("field" => "usumarketing_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $UsumarketingResumen = new UsumarketingResumen();
            $UsuarioMarketings = $UsumarketingResumen->getUsumarketingResumenGroupCustom(" SUM(usumarketing_resumen.valor) total,usumarketing_resumen.tipo ", "usumarketing_resumen.tipo", "asc ", $SkeepRows, $MaxRows, $json, true, "usumarketing_resumen.tipo");
            $UsuarioMarketings = json_decode($UsuarioMarketings);


            foreach ($UsuarioMarketings->data as $key => $value) {

                switch ($value->{'usumarketing_resumen.tipo'}) {
                    case "CLICKBANNER":

                        $sumClickTodos = $value->{'.total'};
                        $sumClickAyer = $value->{'.total'};

                        break;

                    case "REGISTRO":

                        $sumRegistroAyer = $value->{'.total'};
                        $sumRegistroTodos = $value->{'.total'};

                        break;


                }

            }

            //Obtenemos los clicks

            $rules = [];

            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilter1, "op" => "ge"));
            array_push($rules, array("field" => "usumarketing_resumen.fecha_crea", "data" => $dateFilter2, "op" => "le"));
            array_push($rules, array("field" => "usumarketing_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $UsumarketingResumen = new UsumarketingResumen();
            $UsuarioMarketings = $UsumarketingResumen->getUsumarketingResumenGroupCustom(" SUM(usumarketing_resumen.valor) total,usumarketing_resumen.tipo ", "usumarketing_resumen.tipo", "asc ", $SkeepRows, $MaxRows, $json, true, "usumarketing_resumen.tipo");
            $UsuarioMarketings = json_decode($UsuarioMarketings);


            foreach ($UsuarioMarketings->data as $key => $value) {

                switch ($value->{'usumarketing_resumen.tipo'}) {
                    case "CLICKBANNER":

                        $sumClickTodos = $value->{'.total'};

                        break;

                    case "REGISTRO":

                        $sumRegistroTodos = $value->{'.total'};

                        break;


                }

            }


            $MaxRows = 1;
            $OrderedItem = 1;
            $SkeepRows = 0;

            $rules = [];
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilter1, "op" => "ge"));
            array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => $dateFilter2, "op" => "le"));
            array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => $AgentId, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsucomisionResumen = new UsucomisionResumen();
            $UsucomisionResumens = $UsucomisionResumen->getUsucomisionResumenGroupCustom(" SUM(usucomision_resumen.comision) totalcomision,SUM(usucomision_resumen.valor) total ", "usucomision_resumen.usuario_id", "asc ", $SkeepRows, $MaxRows, $json, true, "usucomision_resumen.usuario_id");
            $UsucomisionResumens = json_decode($UsucomisionResumens);

            $sumComisionAyer = $UsucomisionResumens->data[0]->{'.totalcomision'};
            $sumComision = $UsucomisionResumens->data[0]->{'.totalcomision'};
            $sumComisionTodos = $UsucomisionResumens->data[0]->{'.totalcomision'};

            $response["status"] = true;
            $response["html"] = "";
            $response["result"] = array(
                "charts" => array(
                    // Grafico de estadisticas
                    "getMediaStats" => array(
                        array(
                            "activeMedia" => 0,
                            "sumClick" => $sumClick,
                            "sumSignUps" => $sumRegistro,
                            "sumUnique" => 0,
                            "sumView" => 0,

                        )

                    ),
                    "getTotalProductStatistics" => $TotalProducsStatistics,
                    "productsReportByPlayersTotals" => array(
                        "records" => $productsReportByPlayersTotals

                    ),
                    "MediaStat" => array(
                        "records" => $MediaStat

                    ),
                    "getUsersStatistics" => array(
                        array(
                            "count" => 0,
                            "name" => "signUps",
                            "title" => "Sign Ups",

                        ),
                        array(
                            "count" => 0,
                            "name" => "depositing",
                            "title" => "Depositing",

                        ), array(
                            "count" => 0,
                            "name" => "firstDepositing",
                            "title" => "firstDepositing",

                        ), array(
                            "count" => 0,
                            "name" => "activeUsers",
                            "title" => "activeUsers",

                        ), array(
                            "count" => 0,
                            "name" => "firstActiveUsers",
                            "title" => "firstActiveUsers",

                        ),

                    )
                ),
                "widgets" => array(
                    "activeBannersCount" => array(
                        "activeBannersCount" => 0,
                        "yesterdayBannersCount" => $sumClickAyer,

                        "allBannersCount" => $sumClickTodos

                    ),

                    "commissionsForYesterday" => array(
                        "allCommission" => $sumComisionAyer,
                        "yesterdayCommission" => $sumComisionTodos

                    ),
                    "getTopUsers" => $TopUsers,
                    "getNewRegisteredPlayersCount" => array(
                        "count" => $sumRegistroAyer,
                        "totalPlayers" => $sumRegistroTodos

                    ),
                    "productsReportByPlayersTotals" => array(
                        "records" => $productsReportPlayersTotal,
                        "titles" => "",
                        "total" => "",
                        "totalRecordsCount" => "1",
                    ),
                    "getAcceptedWithdrawCount" => array(
                        "count" => "0",
                        "total" => "$ 0"

                    ),
                    "getDeniedWithdrawCount" => array(
                        "count" => "0",
                        "total" => "$ 0"

                    ),
                    "getPendingWithdrawCount" => array(
                        "count" => "0",
                        "total" => "$ 0"

                    ),

                )
            );

            $response["notification"] = array();

            break;


        /**
        * Agent/SearchAgent
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/SearchAgent":

            $filter = $_REQUEST["filter"];

            $UsuarioPerfil = new UsuarioPerfil();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Perfil_id = $_GET["roleId"];
            $Type = $_GET["Type"];
            $tipoUsuario = "";

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000000;
            }

            $mismenus = "0";

            $rules = [];


            if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                if ($Type == "1") {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                } else {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.fecha_ult,usuario.fecha_crea,usuario.moneda,punto_venta.*,departamento.*,ciudad.*,pais.*  ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                if ($Type == "1") {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                } else {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.fecha_ult,usuario.fecha_crea,usuario.moneda,punto_venta.*,departamento.*,ciudad.*,pais.*   ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            } else {

                if ($Type == "1") {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                } elseif (($Type == "1")) {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'CONCESIONARIO','CONCESIONARIO2'", "op" => "in"));
                } else {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'AFILIADOR','CONCESIONARIO','CONCESIONARIO2'", "op" => "in"));

                }

                if ($filter != "") {
                    array_push($rules, array("field" => "usuario.nombre", "data" => "$filter", "op" => "cn"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);


                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.estado_valida,usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.moneda,usuario.fecha_ult,usuario.fecha_crea,punto_venta.*,departamento.*,ciudad.*,pais.*  ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            }

            $usuarios = json_decode($usuarios);
            $arrayf = [];

            $balanceAgent = 0;

            foreach ($usuarios->data as $key => $value) {
                $array = [];
                $array["id"] = $value->{"usuario.usuario_id"};
                $array["value"] = $value->{"usuario.nombre"};
                $array["Children"] = array();

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $rules2 = array();

                    array_push($rules2, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                    $filtro = array("rules" => $rules2, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                    $usuariosdetalle = json_decode($usuariosdetalle);


                    foreach ($usuariosdetalle->data as $key2 => $value2) {
                        $array2 = [];

                        $array2["id"] = $value2->{"usuario.usuario_id"};
                        $array2["value"] = $value2->{"usuario.nombre"};

                        array_push($array["Children"], $array2);


                    }

                } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {

                } else {
                    $rules2 = array();

                    array_push($rules2, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                    $filtro = array("rules" => $rules2, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                    $usuariosdetalle = json_decode($usuariosdetalle);

                    foreach ($usuariosdetalle->data as $key2 => $value2) {
                        $array2 = [];

                        $array2["id"] = $value2->{"usuario.usuario_id"};
                        $array2["value"] = $value2->{"usuario.nombre"};

                        $array2["Children"] = array();

                        if (true) {
                            $rules3 = array();

                            array_push($rules3, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                            array_push($rules3, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                            $filtro = array("rules" => $rules3, "groupOp" => "AND");
                            $json3 = json_encode($filtro);

                            $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json3, true);
                            $usuariosdetalle = json_decode($usuariosdetalle);


                            foreach ($usuariosdetalle->data as $key3 => $value3) {
                                $array2 = [];

                                $array2["id"] = $value3->{"usuario.usuario_id"};
                                $array2["value"] = $value3->{"usuario.nombre"};

                                array_push($array2["Children"], $array3);


                            }

                        }

                        array_push($array["Children"], $array2);


                    }


                }

                array_push($arrayf, $array);

                $balanceAgent = $balanceAgent + $value->{"punto_venta.creditos_base"};
            }

            $response = $arrayf;

            break;


        /**
        * Agent/GetAgentsTwoLevels
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentsTwoLevels":


            $UsuarioPerfil = new UsuarioPerfil();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Perfil_id = $_GET["roleId"];
            $Type = ($_GET["Type"] != 1 && $_GET["Type"] != 0) ? '' : $_GET["Type"];
            $IsRegisterActivate = ($_GET["IsRegisterActivate"] != "A" && $_GET["IsRegisterActivate"] != "I" && $_GET["IsRegisterActivate"] != "N" && $_GET["IsRegisterActivate"] != "R") ? '' : $_GET["IsRegisterActivate"];
            $IsActivate = ($_GET["IsActivate"] != "A" && $_GET["IsActivate"] != "I") ? '' : $_GET["IsActivate"];
            $tipoUsuario = "";

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            $seguir = true;

            $isList = $_REQUEST["isList"];

            if ($isList != "") {
                $SkeepRows = 0;
                $MaxRows = 10000;
            }
            if (($MaxRows == "" || $SkeepRows == "") && $isList == "") {
                $seguir = false;
            }

            if ($_SESSION["win_perfil"] == "PUNTOVENTA" || $_SESSION["win_perfil"] == "CAJERO") {
                $seguir = false;

            }

            /*
                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 100000000;
                        }*/
            if ($seguir) {

                $mismenus = "0";

                $rules = [];


                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                    if ($Type == "1") {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                    }

                    if ($IsRegisterActivate != "") {
                        array_push($rules, array("field" => "usuario.estado_valida", "data" => "$IsRegisterActivate", "op" => "eq"));
                    }

                    if ($IsActivate != "") {
                        array_push($rules, array("field" => "usuario.estado", "data" => "$IsActivate", "op" => "eq"));
                    }


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.fecha_ult,usuario.fecha_crea,usuario.moneda,punto_venta.*,departamento.*,ciudad.*,pais.*  ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                    if ($Type == "1") {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                    }

                    if ($IsRegisterActivate != "") {
                        array_push($rules, array("field" => "usuario.estado_valida", "data" => "$IsRegisterActivate", "op" => "eq"));
                    }

                    if ($IsActivate != "") {
                        array_push($rules, array("field" => "usuario.estado", "data" => "$IsActivate", "op" => "eq"));
                    }

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.fecha_ult,usuario.fecha_crea,usuario.moneda,punto_venta.*,departamento.*,ciudad.*,pais.*   ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                } elseif ($_SESSION["win_perfil"] == "ADMINAFILIADOS") {
                    array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));


                    if ($IsRegisterActivate != "") {
                        array_push($rules, array("field" => "usuario.estado_valida", "data" => "$IsRegisterActivate", "op" => "eq"));
                    }

                    if ($IsActivate != "") {
                        array_push($rules, array("field" => "usuario.estado", "data" => "$IsActivate", "op" => "eq"));
                    }


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.fecha_ult,usuario.fecha_crea,usuario.moneda,punto_venta.*,departamento.*,ciudad.*,pais.*  ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                } else {

                    if ($Type == "1") {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                    } elseif (($Type == "1")) {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'CONCESIONARIO','CONCESIONARIO2'", "op" => "in"));
                    } else {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'AFILIADOR','CONCESIONARIO','CONCESIONARIO2'", "op" => "in"));

                    }

                    if ($IsRegisterActivate != "") {
                        array_push($rules, array("field" => "usuario.estado_valida", "data" => "$IsRegisterActivate", "op" => "eq"));
                    }

                    if ($IsActivate != "") {
                        array_push($rules, array("field" => "usuario.estado", "data" => "$IsActivate", "op" => "eq"));
                    }

                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }
                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json2 = json_encode($filtro);


                    $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.estado_valida,usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.moneda,usuario.fecha_ult,usuario.fecha_crea,punto_venta.*,departamento.*,ciudad.*,pais.*  ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                }

                $usuarios = json_decode($usuarios);
                $arrayf = [];

                $balanceAgent = 0;

                foreach ($usuarios->data as $key => $value) {

                    if ($isList != 1) {

                        $array = [];
                        $array["id"] = $value->{"usuario.usuario_id"};
                        $array["Id"] = $value->{"usuario.usuario_id"};
                        $array["StateValidate"] = $value->{"usuario.estado_valida"};

                        if ($_SESSION["win_perfil2"] != "CONCESIONARIO" && $_SESSION["win_perfil2"] != "CONCESIONARIO2") {
                            $array["Action"] = $value->{"usuario.estado_valida"};

                        } else {
                            $array["Action"] = '';
                        }

                        $array["State"] = $value->{"usuario.estado"};

                        $array["UserName"] = str_replace("VAFILV", '', $value->{"usuario.login"});
                        $array["Name"] = $value->{"usuario.nombre"};
                        $array["Email"] = str_replace("VAFILV", "", $value->{"punto_venta.email"});
                        $array["Phone"] = $value->{"punto_venta.telefono"};
                        $array["Address"] = $value->{"punto_venta.direccion"};
                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["RegionName"] = $value->{"pais.pais_nom"};
                        $array["DepartmentName"] = $value->{"departamento.depto_nom"};
                        $array["CityName"] = $value->{"ciudad.ciudad_nom"};
                        $array["SystemName"] = 22;
                        $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : true);
                        $array["AgentBalance"] = $value->{"punto_venta.creditos_base"};
                        $array["PlayerCount"] = 0;
                        $array["LastLoginDateLabel"] = $value->{"usuario.fecha_ult"};
                        $array["CreatedDate"] = $value->{"usuario.fecha_crea"};
                        $array["Children"] = array();

                        if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                            $rules2 = array();

                            array_push($rules2, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                            array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                            $filtro = array("rules" => $rules2, "groupOp" => "AND");
                            $json2 = json_encode($filtro);

                            $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                            $usuariosdetalle = json_decode($usuariosdetalle);


                            foreach ($usuariosdetalle->data as $key2 => $value2) {
                                $array2 = [];

                                $array2["Id"] = $value2->{"usuario.usuario_id"};

                                $array2["UserName"] = $value2->{"usuario.login"};
                                $array2["Name"] = $value2->{"usuario.nombre"};

                                $array2["SystemName"] = 22;
                                $array2["IsSuspended"] = ($value2->{"usuario.estado"} == 'A' ? false : truee);
                                $array2["AgentBalance"] = $value2->{"punto_venta.creditos_base"};
                                $array2["PlayerCount"] = 0;
                                array_push($array["Children"], $array2);


                            }

                        } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {

                        } else {
                            $rules2 = array();

                            array_push($rules2, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                            array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                            array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                            $filtro = array("rules" => $rules2, "groupOp" => "AND");
                            $json2 = json_encode($filtro);

                            $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                            $usuariosdetalle = json_decode($usuariosdetalle);

                            foreach ($usuariosdetalle->data as $key2 => $value2) {
                                $array2 = [];

                                $array2["Id"] = $value2->{"usuario.usuario_id"};
                                $array2["UserName"] = $value2->{"usuario.login"};
                                $array2["Name"] = $value2->{"usuario.nombre"};

                                $array2["SystemName"] = 22;
                                $array2["IsSuspended"] = ($value2->{"usuario.estado"} == 'A' ? false : truee);
                                $array2["AgentBalance"] = $value2->{"punto_venta.creditos_base"};
                                $array2["PlayerCount"] = 0;
                                $array["LastLoginDateLabel"] = $value2->{"usuario.fecha_ult"};
                                $array2["Children"] = array();

                                if (true) {
                                    $rules3 = array();

                                    array_push($rules3, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                                    array_push($rules3, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                                    $filtro = array("rules" => $rules3, "groupOp" => "AND");
                                    $json3 = json_encode($filtro);

                                    $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json3, true);
                                    $usuariosdetalle = json_decode($usuariosdetalle);


                                    foreach ($usuariosdetalle->data as $key3 => $value3) {
                                        $array2 = [];

                                        $array2["Id"] = $value3->{"usuario.usuario_id"};
                                        $array2["UserName"] = $value3->{"usuario.login"};
                                        $array2["Name"] = $value3->{"usuario.nombre"};
                                        $array2["SystemName"] = 22;
                                        $array2["IsSuspended"] = ($value3->{"usuario.estado"} == 'A' ? false : truee);
                                        $array2["AgentBalance"] = $value3->{"punto_venta.creditos_base"};
                                        $array2["PlayerCount"] = 0;
                                        array_push($array2["Children"], $array3);


                                    }

                                }

                                array_push($array["Children"], $array2);


                            }


                        }
                    } else {
                        $array = [];
                        $array["id"] = $value->{"usuario.usuario_id"};
                        $array["Name"] = $value->{"usuario.nombre"};

                    }

                    array_push($arrayf, $array);

                    $balanceAgent = $balanceAgent + $value->{"punto_venta.creditos_base"};
                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] ["Children"] = $arrayf;

                $response["Data"]["DownStreamChildrenCount"] = oldCount($arrayf);
                $response["Data"]["DownStreamChildrenBalanceSum"] = $balanceAgent;
                $response["Data"]["DownStreamPlayerCount"] = 10;
                $response["Data"]["DownStreamPlayerBalanceSum"] = 10;

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $usuarios->count[0]->{".count"};
                $response["data"] = $arrayf;


                /*
                            $response["HasError"] = false;
                            $response["AlertType"] = "success";
                            $response["AlertMessage"] = "";
                            $response["ModelErrors"] = [];

                            $response["Data"] = array(
                                "DownStreamChildrenCount"=>100,
                                "DownStreamChildrenBalanceSum"=>1000,
                                "DownStreamPlayerCount"=>100,
                                "DownStreamPlayerBalanceSum"=>100,
                                "Children"=>array(
                                    array(
                                        "UserName"=>"test",
                                        "AgentId"=>1,
                                        "SystemName"=>1,
                                        "PlayerCount"=>100,
                                        "AgentBalance"=>1000,
                                        "Children"=>array(
                                            array(
                                                "UserName"=>"test2",
                                                "SystemName"=>1,

                                                "PlayerCount"=>100,
                                                "AgentBalance"=>1000,

                                            )
                                        )
                                    )
                                )
                            );
                */
            }
            break;

        /**
        * Agent/GetAgentsTwoLevels2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentsTwoLevels2":


            $UsuarioPerfil = new UsuarioPerfil();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            if (!strpos($_SESSION["win_perfil"], "CONCESIONARIO")) {

                $Perfil_id = $_GET["roleId"];
                $Type = $_GET["Type"];
                $tipoUsuario = "";

                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                $MaxRows = $_REQUEST["count"];
                $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 100000000;
                }

                $mismenus = "0";

                $rules = [];


                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                    if ($Type == "1") {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                    }


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.fecha_ult,usuario.fecha_crea,usuario.moneda,punto_venta.*,departamento.*,ciudad.*,pais.*  ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                    if ($Type == "1") {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                    }

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.fecha_ult,usuario.fecha_crea,usuario.moneda,punto_venta.*,departamento.*,ciudad.*,pais.*   ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                } else {

                    if ($Type == "1") {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "AFILIADOR", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO", "op" => "eq"));
                    }

                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }
                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json2 = json_encode($filtro);


                    $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,usuario.moneda,usuario.fecha_ult,usuario.fecha_crea,punto_venta.*,departamento.*,ciudad.*,pais.*  ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                }

                $usuarios = json_decode($usuarios);
                $arrayf = [];

                $balanceAgent = 0;

                foreach ($usuarios->data as $key => $value) {
                    $array = [];
                    $array["id"] = $value->{"usuario.usuario_id"};
                    $array["Id"] = $value->{"usuario.usuario_id"};

                    $array["UserName"] = $value->{"usuario.login"};
                    $array["Name"] = $value->{"usuario.nombre"};
                    $array["Email"] = $value->{"punto_venta.email"};
                    $array["Phone"] = $value->{"punto_venta.telefono"};
                    $array["Address"] = $value->{"punto_venta.direccion"};
                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["RegionName"] = $value->{"pais.pais_nom"};
                    $array["DepartmentName"] = $value->{"departamento.depto_nom"};
                    $array["CityName"] = $value->{"ciudad.ciudad_nom"};
                    $array["SystemName"] = 22;
                    $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : truee);
                    $array["AgentBalance"] = $value->{"punto_venta.creditos_base"};
                    $array["PlayerCount"] = 0;
                    $array["LastLoginDateLabel"] = $value->{"usuario.fecha_ult"};
                    $array["CreatedDate"] = $value->{"usuario.fecha_crea"};
                    $array["Children"] = array();

                    if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                        $rules2 = array();

                        array_push($rules2, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                        array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                        $filtro = array("rules" => $rules2, "groupOp" => "AND");
                        $json2 = json_encode($filtro);

                        $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                        $usuariosdetalle = json_decode($usuariosdetalle);


                        foreach ($usuariosdetalle->data as $key2 => $value2) {
                            $array2 = [];

                            $array2["Id"] = $value2->{"usuario.usuario_id"};

                            $array2["UserName"] = $value2->{"usuario.login"};
                            $array2["Name"] = $value2->{"usuario.nombre"};

                            $array2["SystemName"] = 22;
                            $array2["IsSuspended"] = ($value2->{"usuario.estado"} == 'A' ? false : truee);
                            $array2["AgentBalance"] = $value2->{"punto_venta.creditos_base"};
                            $array2["PlayerCount"] = 0;
                            array_push($array["Children"], $array2);


                        }

                    } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {

                    } else {
                        $rules2 = array();

                        array_push($rules2, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                        array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                        array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                        $filtro = array("rules" => $rules2, "groupOp" => "AND");
                        $json2 = json_encode($filtro);

                        $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                        $usuariosdetalle = json_decode($usuariosdetalle);

                        foreach ($usuariosdetalle->data as $key2 => $value2) {
                            $array2 = [];

                            $array2["Id"] = $value2->{"usuario.usuario_id"};
                            $array2["UserName"] = $value2->{"usuario.login"};
                            $array2["Name"] = $value2->{"usuario.nombre"};

                            $array2["SystemName"] = 22;
                            $array2["IsSuspended"] = ($value2->{"usuario.estado"} == 'A' ? false : truee);
                            $array2["AgentBalance"] = $value2->{"punto_venta.creditos_base"};
                            $array2["PlayerCount"] = 0;
                            $array["LastLoginDateLabel"] = $value2->{"usuario.fecha_ult"};
                            $array2["Children"] = array();

                            if (true) {
                                $rules3 = array();

                                array_push($rules3, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                                array_push($rules3, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                                $filtro = array("rules" => $rules3, "groupOp" => "AND");
                                $json3 = json_encode($filtro);

                                $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json3, true);
                                $usuariosdetalle = json_decode($usuariosdetalle);


                                foreach ($usuariosdetalle->data as $key3 => $value3) {
                                    $array2 = [];

                                    $array2["Id"] = $value3->{"usuario.usuario_id"};
                                    $array2["UserName"] = $value3->{"usuario.login"};
                                    $array2["Name"] = $value3->{"usuario.nombre"};
                                    $array2["SystemName"] = 22;
                                    $array2["IsSuspended"] = ($value3->{"usuario.estado"} == 'A' ? false : truee);
                                    $array2["AgentBalance"] = $value3->{"punto_venta.creditos_base"};
                                    $array2["PlayerCount"] = 0;
                                    array_push($array2["Children"], $array3);


                                }

                            }

                            array_push($array["Children"], $array2);


                        }


                    }

                    array_push($arrayf, $array);

                    $balanceAgent = $balanceAgent + $value->{"punto_venta.creditos_base"};
                }
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] ["Children"] = $arrayf;

            $response["Data"]["DownStreamChildrenCount"] = oldCount($arrayf);
            $response["Data"]["DownStreamChildrenBalanceSum"] = $balanceAgent;
            $response["Data"]["DownStreamPlayerCount"] = 10;
            $response["Data"]["DownStreamPlayerBalanceSum"] = 10;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $arrayf;


            /*
                        $response["HasError"] = false;
                        $response["AlertType"] = "success";
                        $response["AlertMessage"] = "";
                        $response["ModelErrors"] = [];

                        $response["Data"] = array(
                            "DownStreamChildrenCount"=>100,
                            "DownStreamChildrenBalanceSum"=>1000,
                            "DownStreamPlayerCount"=>100,
                            "DownStreamPlayerBalanceSum"=>100,
                            "Children"=>array(
                                array(
                                    "UserName"=>"test",
                                    "AgentId"=>1,
                                    "SystemName"=>1,
                                    "PlayerCount"=>100,
                                    "AgentBalance"=>1000,
                                    "Children"=>array(
                                        array(
                                            "UserName"=>"test2",
                                            "SystemName"=>1,

                                            "PlayerCount"=>100,
                                            "AgentBalance"=>1000,

                                        )
                                    )
                                )
                            )
                        );
            */
            break;


        /**
        * Agent/GetAgentDownStreamAgents
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentDownStreamAgents":


            $UsuarioPerfil = new UsuarioPerfil();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Perfil_id = $_GET["roleId"];
            $Login = $_GET["Login"];
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000000;
            }

            $mismenus = "0";

            $rules = [];


            if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.moneda,usuario.usuario_id,punto_venta.cupo_recarga,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json2, true);

            } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                if($Login != ""){
                    array_push($rules, array("field" => "usuario.login", "data" => $Login, "op" => "cn"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.moneda,usuario.usuario_id,punto_venta.cupo_recarga,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json2, true);

            } else {
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO", "op" => "eq"));

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);


                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom("usuario.mandante, usuario.usuario_id,usuario.moneda,punto_venta.creditos_base,punto_venta.cupo_recarga,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json2, true);

            }

            $usuarios = json_decode($usuarios);
            $arrayf = [];

            $balanceAgent = 0;

            foreach ($usuarios->data as $key => $value) {
                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["Country"] = $value->{"usuario.mandante"} .'-'. $value->{"pais.pais_nom"};
                $array["Currency"] = $value->{"usuario.moneda"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["SystemName"] = 22;
                $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : true);
                $array["AgentBalance"] = $value->{"punto_venta.creditos_base"};
                $array["AgentBalance2"] = $value->{"punto_venta.cupo_recarga"};
                $array["Partner"] = $value->{"usuario.mandante"};
                $array["PlayerCount"] = 0;
                $array["Children"] = array();
                $array["data"] = array();

                $array["flag"] = strtolower($value->{"pais.iso"});
                switch ($value->{"usuario_perfil.perfil_id"}) {
                    case "CONCESIONARIO":
                        $array["icon"] = "icon-user-secret";
                        break;
                    case "CONCESIONARIO2":
                        $array["icon"] = "icon-user-secret";
                        break;
                    case "PUNTOVENTA":
                        $array["icon"] = "icon-shop";
                        break;
                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $rules2 = array();

                    array_push($rules2, array("field" => "concesionario.usupadre2_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                    array_push($rules2, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

                    if($Login != ""){
                        array_push($rules2, array("field" => "usuario.login", "data" => $Login, "op" => "cn"));

                    }

                    $filtro = array("rules" => $rules2, "groupOp" => "AND");

                    $json2 = json_encode($filtro);

                    $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.usuario_id,usuario.moneda,usuario.nombre,punto_venta.creditos_base,punto_venta.cupo_recarga,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json2, true);
                    $usuariosdetalle = json_decode($usuariosdetalle);


                    foreach ($usuariosdetalle->data as $key2 => $value2) {
                        $array2 = [];

                        $array2["UserName"] = $value2->{"usuario.login"};
                        $array2["Currency"] = $value2->{"usuario.moneda"};
                        $array2["Country"] = $value2->{"usuario.mandante"} .'-'.$value2->{"pais.pais_nom"};

                        $array2["Name"] = $value2->{"usuario.nombre"};
                        $array2["SystemName"] = 22;
                        $array2["IsSuspended"] = ($value2->{"usuario.estado"} == 'A' ? false : truee);
                        $array2["AgentBalance"] = $value2->{"punto_venta.creditos_base"};
                        $array2["AgentBalance2"] = $value2->{"punto_venta.cupo_recarga"};
                        $array2["PlayerCount"] = 0;
                        $array2["Id"] = $value2->{"usuario.usuario_id"};
                        $array2["Partner"] = $value->{"usuario.mandante"};

                        $array2["flag"] = strtolower($value2->{"pais.iso"});
                        switch ($value2->{"usuario_perfil.perfil_id"}) {
                            case "CONCESIONARIO":
                                $array2["icon"] = "icon-user-secret";
                                break;
                            case "CONCESIONARIO2":
                                $array2["icon"] = "icon-user-secret";
                                break;
                            case "PUNTOVENTA":
                                $array2["icon"] = "icon-shop";
                                break;
                        }

                        array_push($array["Children"], $array2);
                        array_push($array["data"], $array2);


                    }


                } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {

                } else {
                    $rules2 = array();

                    array_push($rules2, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                    array_push($rules2, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    array_push($rules2, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));
                    $filtro = array("rules" => $rules2, "groupOp" => "AND");
                    $json2 = json_encode($filtro);

                    $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.usuario_id,usuario.moneda,usuario.nombre,punto_venta.creditos_base,punto_venta.cupo_recarga,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json2, true);
                    $usuariosdetalle = json_decode($usuariosdetalle);

                    foreach ($usuariosdetalle->data as $key2 => $value2) {
                        $array2 = [];

                        $array2["UserName"] = $value2->{"usuario.login"};
                        $array2["Currency"] = $value2->{"usuario.moneda"};
                        $array2["Country"] = $value2->{"usuario.mandante"} .'-'.$value2->{"pais.pais_nom"};
                        $array2["Name"] = $value2->{"usuario.nombre"};
                        $array2["Id"] = $value2->{"usuario.usuario_id"};

                        $array2["SystemName"] = 22;
                        $array2["IsSuspended"] = ($value2->{"usuario.estado"} == 'A' ? false : true);
                        $array2["AgentBalance"] = $value2->{"punto_venta.creditos_base"};
                        $array2["AgentBalance2"] = $value2->{"punto_venta.cupo_recarga"};
                        $array2["PlayerCount"] = 0;
                        $array2["Children"] = array();
                        $array2["data"] = array();
                        $array2["Partner"] = $value->{"usuario.mandante"};

                        $array2["flag"] = strtolower($value2->{"pais.iso"});
                        switch ($value2->{"usuario_perfil.perfil_id"}) {
                            case "CONCESIONARIO":
                                $array2["icon"] = "icon-user-secret";
                                break;
                            case "CONCESIONARIO2":
                                $array2["icon"] = "icon-user-secret";
                                break;
                            case "PUNTOVENTA":
                                $array2["icon"] = "icon-shop";
                                break;
                        }

                        if (true) {
                            $rules3 = array();

                            array_push($rules3, array("field" => "concesionario.usupadre2_id", "data" => $value2->{"usuario.usuario_id"}, "op" => "eq"));
                            array_push($rules3, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                            array_push($rules3, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

                            if($Login != ""){
                                array_push($rules3, array("field" => "usuario.login", "data" => $Login, "op" => "cn"));

                            }

                            $filtro = array("rules" => $rules3, "groupOp" => "AND");
                            $json3 = json_encode($filtro);

                            $usuariosdetalle = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.usuario_id,usuario.moneda,usuario.nombre,punto_venta.creditos_base,punto_venta.cupo_recarga,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json3, true);
                            $usuariosdetalle = json_decode($usuariosdetalle);


                            foreach ($usuariosdetalle->data as $key3 => $value3) {
                                $array3 = [];
                                $array3["Id"] = $value3->{"usuario.usuario_id"};
                                $array3["UserName"] = $value3->{"usuario.login"};
                                $array3["Currency"] = $value3->{"usuario.moneda"};
                                $array3["Country"] = $value3->{"usuario.mandante"} .'-'.$value3->{"pais.pais_nom"};
                                $array3["Name"] = $value3->{"usuario.nombre"};
                                $array3["SystemName"] = 22;
                                $array3["IsSuspended"] = ($value3->{"usuario.estado"} == 'A' ? false : true);
                                $array3["AgentBalance"] = $value3->{"punto_venta.creditos_base"};
                                $array3["AgentBalance2"] = $value3->{"punto_venta.cupo_recarga"};
                                $array3["PlayerCount"] = 0;
                                $array3["Partner"] = $value->{"usuario.mandante"};

                                $array3["flag"] = strtolower($value3->{"pais.iso"});
                                switch ($value3->{"usuario_perfil.perfil_id"}) {
                                    case "CONCESIONARIO":
                                        $array3["icon"] = "icon-user-secret";
                                        break;
                                    case "CONCESIONARIO2":
                                        $array3["icon"] = "icon-user-secret";
                                        break;
                                    case "PUNTOVENTA":
                                        $array3["icon"] = "icon-shop";
                                        break;
                                }

                                array_push($array2["Children"], $array3);
                                array_push($array2["data"], $array3);


                            }

                        }


                        array_push($array["Children"], $array2);
                        array_push($array["data"], $array2);


                    }

                    $rules4 = array();

                    array_push($rules4, array("field" => "concesionario.usupadre_id", "data" => $value->{"usuario.usuario_id"}, "op" => "eq"));
                    array_push($rules4, array("field" => "concesionario.usupadre2_id", "data" => 0, "op" => "eq"));
                    array_push($rules4, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                    array_push($rules4, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

                    if($Login != ""){
                        array_push($rules4, array("field" => "usuario.login", "data" => $Login, "op" => "cn"));

                    }

                    $filtro4 = array("rules" => $rules4, "groupOp" => "AND");
                    $json4 = json_encode($filtro4);

                    $usuariosdetalle4 = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.usuario_id,usuario.moneda,usuario.nombre,punto_venta.creditos_base,punto_venta.cupo_recarga,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json4, true);
                    $usuariosdetalle4 = json_decode($usuariosdetalle4);


                    foreach ($usuariosdetalle4->data as $key4 => $value4) {
                        $array4 = [];
                        $array4["Id"] = $value4->{"usuario.usuario_id"};
                        $array4["UserName"] = $value4->{"usuario.login"};
                        $array4["Currency"] = $value4->{"usuario.moneda"};
                        $array4["Country"] = $value4->{"usuario.mandante"} .'-'.$value4->{"pais.pais_nom"};
                        $array4["Name"] = $value4->{"usuario.nombre"};
                        $array4["SystemName"] = 22;
                        $array4["IsSuspended"] = ($value4->{"usuario.estado"} == 'A' ? false : true);
                        $array4["AgentBalance"] = $value4->{"punto_venta.creditos_base"};
                        $array4["AgentBalance2"] = $value4->{"punto_venta.cupo_recarga"};
                        $array4["PlayerCount"] = 0;

                        $array4["Partner"] = $value->{"usuario.mandante"};
                        $array4["flag"] = strtolower($value4->{"pais.iso"});
                        switch ($value4->{"usuario_perfil.perfil_id"}) {
                            case "CONCESIONARIO":
                                $array4["icon"] = "icon-user-secret";
                                break;
                            case "CONCESIONARIO2":
                                $array4["icon"] = "icon-user-secret";
                                break;
                            case "PUNTOVENTA":
                                $array4["icon"] = "icon-shop";
                                break;
                        }
                        array_push($array["Children"], $array4);
                        array_push($array["data"], $array4);

                    }


                }

                array_push($arrayf, $array);

                $balanceAgent = $balanceAgent + $value->{"punto_venta.creditos_base"};
            }


            $rules = [];


            if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => 0, "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

                if($Login != ""){
                    array_push($rules, array("field" => "usuario.login", "data" => $Login, "op" => "cn"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.moneda,usuario.usuario_id,punto_venta.cupo_recarga,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json2, true);

            } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

                if($Login != ""){
                    array_push($rules, array("field" => "usuario.login", "data" => $Login, "op" => "cn"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.mandante,usuario.moneda,usuario.usuario_id,punto_venta.cupo_recarga,punto_venta.creditos_base,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id,pais.* ", "usuario.login", "asc", $SkeepRows, $MaxRows, $json2, true);

            } else {
            }

            $usuarios = json_decode($usuarios);


            foreach ($usuarios->data as $key => $value) {
                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["Currency"] = $value->{"usuario.moneda"};
                $array["Country"] = $value->{"usuario.mandante"} .'-'.$value->{"pais.pais_nom"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["SystemName"] = 22;
                $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : true);
                $array["AgentBalance"] = $value->{"punto_venta.creditos_base"};
                $array["AgentBalance2"] = $value->{"punto_venta.cupo_recarga"};
                $array["PlayerCount"] = 0;
                $array["Children"] = array();
                $array["data"] = array();

                $array["Partner"] = $value->{"usuario.mandante"};
                $array["flag"] = strtolower($value->{"pais.iso"});
                switch ($value->{"usuario_perfil.perfil_id"}) {
                    case "CONCESIONARIO":
                        $array["icon"] = "icon-user-secret";
                        break;
                    case "CONCESIONARIO2":
                        $array["icon"] = "icon-user-secret";
                        break;
                    case "PUNTOVENTA":
                        $array["icon"] = "icon-shop";
                        break;
                }
                array_push($arrayf, $array);

                $balanceAgent = $balanceAgent + $value->{"punto_venta.creditos_base"};
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] ["Children"] = $arrayf;
            $response["data"] = $arrayf;

            $response["Data"]["DownStreamChildrenCount"] = oldCount($arrayf);
            $response["Data"]["DownStreamChildrenBalanceSum"] = $balanceAgent;
            $response["Data"]["DownStreamPlayerCount"] = 10;
            $response["Data"]["DownStreamPlayerBalanceSum"] = 10;


            /*
                        $response["HasError"] = false;
                        $response["AlertType"] = "success";
                        $response["AlertMessage"] = "";
                        $response["ModelErrors"] = [];

                        $response["Data"] = array(
                            "DownStreamChildrenCount"=>100,
                            "DownStreamChildrenBalanceSum"=>1000,
                            "DownStreamPlayerCount"=>100,
                            "DownStreamPlayerBalanceSum"=>100,
                            "Children"=>array(
                                array(
                                    "UserName"=>"test",
                                    "AgentId"=>1,
                                    "SystemName"=>1,
                                    "PlayerCount"=>100,
                                    "AgentBalance"=>1000,
                                    "Children"=>array(
                                        array(
                                            "UserName"=>"test2",
                                            "SystemName"=>1,

                                            "PlayerCount"=>100,
                                            "AgentBalance"=>1000,

                                        )
                                    )
                                )
                            )
                        );
            */
            break;


        /**
        * Agent/GetAgentsWithBalance
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentsWithBalance":

            $UsuarioPerfil = new UsuarioPerfil();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Perfil_id = $_GET["roleId"];
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000000;
            }

            $mismenus = "0";

            $rules = [];


            if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getChilds(" punto_venta.creditos_base,usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                $usuarios = json_decode($usuarios);

            } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getChilds(" punto_venta.creditos_base,usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                $usuarios = json_decode($usuarios);

            } else {
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" punto_venta.creditos_base,usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

                $usuarios = json_decode($usuarios);

                $rules = [];

                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
                //array_push($rules, array("field" => "usuario.puntoventa_id", "data" => "0", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios2 = $UsuarioPerfil->getUsuarioPerfilesCustom(" punto_venta.creditos_base,usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
                $usuarios2 = json_decode($usuarios2);


                $usuarios->data = array_merge($usuarios->data, $usuarios2->data);

            }

            $arrayf = [];

            $balanceAgent = 0;

            foreach ($usuarios->data as $key => $value) {
                $array = [];

                $array["UserName"] = $value->{"usuario.login"};
                $array["SystemName"] = 1;
                $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : true);
                $array["AgentBalance"] = $value->{"punto_venta.creditos_base"};
                $array["CashBalance"] = $value->{"punto_venta.creditos_base"};

                $array["FirstName"] = $value->{"usuario.nombre"};
                $array["LastName"] = "T";
                $array["Phone"] = '';
                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                $array["LastLoginIp"] = $value->{"usuario.dir_ip"};


                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Role"] = $value->{"usuario_perfil.perfil_id"};


                array_push($arrayf, $array);

                $balanceAgent = $balanceAgent + $value->{"punto_venta.creditos_base"};
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] ["Children"] = $arrayf;
            $response["Data"] = array("Objects" => $arrayf,
                "Count" => $usuarios->count[0]->{".count"});

            break;

        /**
        * BetShop/GetBetShopById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetBetShopById":

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $id = $_REQUEST["id"];

            $Mandante = new Mandante();

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }

            $json = '{"rules" : [{"field" : "punto_venta.puntoventa_id", "data": ' . $id . ',"op":"eq"},{"field" : "usuario_perfil.perfil_id", "data": "PUNTOVENTA","op":"eq"}] ,"groupOp" : "AND"}';

            $mandantes = $Mandante->getPuntosVentaTree("mandante.mandante", "asc", $SkeepRows, $MaxRows, $json, true);

            $mandantes = json_decode($mandantes);

            $final = [];

            foreach ($mandantes->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"punto_venta.puntoventa_id"};
                $array["Name"] = $value->{"punto_venta.descripcion"};
                $array["CurrencyId"] = $value->{"usuario.moneda"};
                $array["Type"] = $value->{"tipo_punto.descripcion"};
                $array["MinBet"] = $value->{"usuario_premiomax.apuesta_min"};
                $array["PreMatchPercentage"] = $value->{"punto_venta.porcen_comision"};
                $array["LivePercentage"] = $value->{"punto_venta.porcen_comision"};
                $array["RecargasPercentage"] = $value->{"punto_venta.porcen_comision2"};
                $array["DepositCupo"] = $value->{"punto_venta.valor_cupo2"};
                $final = $array;

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * BetShop/GetCashDesks
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetCashDesks":

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $id = $params->BetShopId;
            $FromId = $_REQUEST["FromId"];

            if ($FromId == "undefined" && $_SESSION["win_perfil2"] == "PUNTOVENTA") {

                $FromId = $_SESSION["usuario"];

            }

            if ($FromId != "" && is_numeric($FromId)) {


                $Usuario = new Usuario();

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 100000;
                }


                $rules = [];

                if ($id != "") {
                    array_push($rules, array("field" => "usuario.puntoventa_id", "data" => "$id", "op" => "eq"));
                }

                if ($FromId != "") {
                    array_push($rules, array("field" => "usuario.puntoventa_id", "data" => "$FromId", "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'CAJERO'", "op" => "in"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $mandantes = $Usuario->getUsuariosCustom("  usuario.nombre,usuario.usuario_id,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);


                $mandantes = json_decode($mandantes);

                $final = [];

                foreach ($mandantes->data as $key => $value) {

                    $array = [];

                    $array["id"] = $value->{"usuario.usuario_id"};
                    $array["Id"] = $value->{"usuario.usuario_id"};
                    $array["UserName"] = $value->{"usuario.login"};
                    $array["Name"] = $value->{"usuario.nombre"};
                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    // $array["Type"] = $value->{"tipo_punto.descripcion"};
                    $array["MinBet"] = $value->{"usuario_premiomax.apuesta_min"};
                    //  $array["PreMatchPercentage"] = $value->{"punto_venta.porcen_comision"};
                    // $array["LivePercentage"] = $value->{"punto_venta.porcen_comision"};
                    // $array["RecargasPercentage"] = $value->{"punto_venta.porcen_comision2"};
                    // $array["DepositCupo"] = $value->{"punto_venta.valor_cupo2"};

                    // $array["CanDeposit"] = ($value->{"usuario_config.permite_recarga"} == "S" ? true : false);
                    // $array["CanReceipt"] = ($value->{"usuario_config.recibo_caja"} == "S" ? true : false);
                    // $array["CanActivateRegister"] = ($value->{"usuario.permite_activareg"} == "S" ? true : false);

                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = $final;

                $response["pos"] = 0;
                $response["total_count"] = $mandantes->count[0]->{".count"};
                $response["data"] = $final;


            } else {

            }

            break;

        /**
        * BetShop/GetCashDesks2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetCashDesks2":

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $id = $params->BetShopId;

            $PuntoVenta = new PuntoVenta();

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }

            $json = '{"rules" : [{"field" : "punto_venta.puntoventa_id", "data": ' . $id . ',"op":"eq"}] ,"groupOp" : "AND"}';

            $mandantes = $PuntoVenta->getPuntoVentasCustom("punto_venta.*", "punto_venta.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $mandantes = json_decode($mandantes);

            $final = [];

            foreach ($mandantes->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"punto_venta.puntoventa_id"};
                $array["Name"] = $value->{"punto_venta.descripcion"};
                // $array["CurrencyId"] = $value->{"usuario.moneda"};
                // $array["Type"] = $value->{"tipo_punto.descripcion"};
                // $array["MinBet"] = $value->{"usuario_premiomax.apuesta_min"};
                $array["PreMatchPercentage"] = $value->{"punto_venta.porcen_comision"};
                $array["LivePercentage"] = $value->{"punto_venta.porcen_comision"};
                $array["RecargasPercentage"] = $value->{"punto_venta.porcen_comision2"};
                $array["DepositCupo"] = $value->{"punto_venta.valor_cupo2"};

                // $array["CanDeposit"] = ($value->{"usuario_config.permite_recarga"} == "S" ? true : false);
                // $array["CanReceipt"] = ($value->{"usuario_config.recibo_caja"} == "S" ? true : false);
                // $array["CanActivateRegister"] = ($value->{"usuario.permite_activareg"} == "S" ? true : false);

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * BetShop/SaveBetShop
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/SaveBetShop":


            $Address = $params->Address;
            $CityId = $params->CityId;
            $CountryId = $params->CountryId;
            $CurrencyId = $params->CurrencyId;
            $PreferredLanguage = $params->PreferredLanguage;
            $DocumentLegalID = $params->DocumentLegalID;
            $Email = $params->Email;
            $GroupId = $params->GroupId;
            $IP = $params->IP;
            $Latitud = $params->Latitud;
            $Longitud = $params->Longitud;
            $ManagerDocument = $params->ManagerDocument;
            $ManagerName = $params->ManagerName;
            $ManagerName = $params->ContactName;

            $ManagerPhone = $params->ManagerPhone;
            $MobilePhone = $params->MobilePhone;
            $Name = $params->Name;
            $Login = $params->LoginAccess;
            $Phone = $params->Phone;
            $RegionId = $params->RegionId;

            $District = $params->District;

            $CanDeposit = $params->AllowsRecharges;
            $CanReceipt = $params->PrintReceiptBox;
            $CanActivateRegister = $params->ActivateRegistration;
            $Lockedsales = $params->Lockedsales;
            $Pinagent = $params->Pinagent;

            $RepresentLegalDocument = $params->RepresentLegalDocument;
            $RepresentLegalName = $params->RepresentLegalName;
            $RepresentLegalPhone = $params->RepresentLegalPhone;
            $Partner = $params->Partner;


            $Address = $Address;
            $CurrencyId = $CurrencyId;
            $Email = $Email;
            $FirstName = $Name;
            $Id = $params->Id;
            $IsSuspended = false;
            $LastLoginIp = "";
            $LastLoginLocalDate = "";
            $LastName = "";
            $clave = '';
            $SystemName = '';
            $UserId = '';
            $UserName = $params->UserName;
            $Phone = $params->ManagerPhone;

            if ($Id != "" && $UserId != "") {

            } else {
                $login = $Login;
                $Password = $params->Password;

                $CanReceipt = ($CanReceipt == "S") ? "S" : "N";
                $CanDeposit = ($CanDeposit == "S") ? "S" : "N";
                $CanActivateRegister = ($CanActivateRegister == "S") ? "S" : "N";
                $Lockedsales = ($Lockedsales == "S") ? "S" : "N";
                $Pinagent = ($Pinagent == "S") ? "S" : "N";


                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $PuntoVenta = new PuntoVenta($CashDeskId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'A';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = $Partner;

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = $Lockedsales;

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';

                $Usuario->paisId = $CountryId;

                $Usuario->moneda = $CurrencyId;

                $Usuario->idioma = $PreferredLanguage;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = $consecutivo_usuario;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = $Usuario->fechaCrea;
                $Usuario->usuDocvalido = 0;

                $Usuario->estadoValida = 'N';
                $Usuario->usuvalidaId = 0;
                $Usuario->fechaValida = date('Y-m-d H:i:s');
                $Usuario->contingencia = 'I';
                $Usuario->contingenciaDeportes = 'I';
                $Usuario->contingenciaCasino = 'I';
                $Usuario->contingenciaCasvivo = 'I';
                $Usuario->contingenciaVirtuales = 'I';
                $Usuario->contingenciaPoker = 'I';
                $Usuario->restriccionIp = 'I';
                $Usuario->ubicacionLongitud = $Longitud;
                $Usuario->ubicacionLatitud = $Latitud;
                $Usuario->usuarioIp = $IP;
                $Usuario->tokenGoogle = "I";
                $Usuario->tokenLocal = "I";
                $Usuario->saltGoogle = '';


                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = $Pinagent;
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = $Partner;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;


                $Concesionario = new Concesionario();

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'PUNTOVENTA';
                    $UsuarioPerfil->mandante = $Partner;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    // $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($_SESSION["usuario"]);
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'PUNTOVENTA';
                    $UsuarioPerfil->mandante = $Partner;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($ConcesionarioU->getUsupadreId());
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id($_SESSION["usuario"]);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } else {

                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'PUNTOVENTA';
                    $UsuarioPerfil->mandante = $Partner;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';

                    $Concesionario->setUsupadreId(0);
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                }


                $UsuarioPremiomax = new UsuarioPremiomax();


                $UsuarioPremiomax->usuarioId = $consecutivo_usuario;

                $UsuarioPremiomax->premioMax = 0;

                $UsuarioPremiomax->usumodifId = 0;

                $UsuarioPremiomax->fechaModif = "";

                $UsuarioPremiomax->cantLineas = 0;

                $UsuarioPremiomax->premioMax1 = 0;

                $UsuarioPremiomax->premioMax2 = 0;

                $UsuarioPremiomax->premioMax3 = 0;

                $UsuarioPremiomax->apuestaMin = 0;

                $UsuarioPremiomax->valorDirecto = 0;

                $UsuarioPremiomax->premioDirecto = 0;

                $UsuarioPremiomax->mandante = $Partner;

                $UsuarioPremiomax->optimizarParrilla = "N";

                $UsuarioPremiomax->textoOp1 = "";

                $UsuarioPremiomax->textoOp2 = "";

                $UsuarioPremiomax->urlOp2 = "";

                $UsuarioPremiomax->textoOp3 = 0;

                $UsuarioPremiomax->urlOp3 = 0;

                $UsuarioPremiomax->valorEvento = 0;

                $UsuarioPremiomax->valorDiario = 0;


                $PuntoVenta = new PuntoVenta();
                $PuntoVenta->descripcion = $Name;
                $PuntoVenta->nombreContacto = $ManagerName;
                $PuntoVenta->ciudadId = $CityId->Id;
                $PuntoVenta->ciudadId = $CityId;
                $PuntoVenta->direccion = $Address;
                $PuntoVenta->barrio = $District;
                $PuntoVenta->telefono = $Phone;
                $PuntoVenta->email = $Email;
                $PuntoVenta->periodicidadId = 0;
                $PuntoVenta->clasificador1Id = 0;
                $PuntoVenta->clasificador2Id = 0;
                $PuntoVenta->clasificador3Id = 0;
                $PuntoVenta->valorRecarga = 0;
                $PuntoVenta->valorCupo = '0';
                $PuntoVenta->valorCupo2 = '0';
                $PuntoVenta->porcenComision = '0';
                $PuntoVenta->porcenComision2 = '0';
                $PuntoVenta->estado = 'A';
                $PuntoVenta->usuarioId = '0';
                $PuntoVenta->mandante = $Partner;
                //$PuntoVenta->moneda = $CurrencyId;
                $PuntoVenta->moneda = $CurrencyId;
                $PuntoVenta->idioma = 'ES';
                $PuntoVenta->cupoRecarga = 0;
                $PuntoVenta->creditosBase = 0;
                $PuntoVenta->creditos = 0;
                $PuntoVenta->creditosAnt = 0;
                $PuntoVenta->creditosBaseAnt = 0;
                $PuntoVenta->usuarioId = $consecutivo_usuario;


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);


                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO = new ConcesionarioMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO->insert($Concesionario);

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO->insert($UsuarioPerfil);

                $UsuarioPremiomaxMySqlDAO = new UsuarioPremiomaxMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPremiomaxMySqlDAO->insert($UsuarioPremiomax);

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($UsuarioMySqlDAO->getTransaction());
                $PuntoVentaMySqlDAO->insert($PuntoVenta);

                $UsuarioMySqlDAO->getTransaction()->commit();


                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $response["id"] = $consecutivo_usuario;

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * BetShop/SaveMachine
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/SaveMachine":


            $Address = $params->Address;
            $CityId = $params->CityId;
            $CountryId = $params->CountryId;
            $CurrencyId = $params->CurrencyId;
            $PreferredLanguage = $params->PreferredLanguage;
            $DocumentLegalID = $params->DocumentLegalID;
            $Email = $params->Email;
            $GroupId = $params->GroupId;
            $IP = $params->IP;
            $Latitud = $params->Latitud;
            $Longitud = $params->Longitud;
            $ManagerDocument = $params->ManagerDocument;
            $ManagerName = $params->ManagerName;
            $ManagerName = $params->ContactName;

            $ManagerPhone = $params->ManagerPhone;
            $MobilePhone = $params->MobilePhone;
            $Name = $params->Name;
            $Login = $params->LoginAccess;
            $Phone = $params->Phone;
            $RegionId = $params->RegionId;

            $District = $params->District;

            $CanDeposit = $params->AllowsRecharges;
            $CanReceipt = $params->PrintReceiptBox;
            $CanActivateRegister = $params->ActivateRegistration;
            $Lockedsales = $params->Lockedsales;
            $Pinagent = $params->Pinagent;

            $RepresentLegalDocument = $params->RepresentLegalDocument;
            $RepresentLegalName = $params->RepresentLegalName;
            $RepresentLegalPhone = $params->RepresentLegalPhone;


            $Address = $Address;
            $CurrencyId = $CurrencyId;
            $Email = $Email;
            $FirstName = $Name;
            $Id = $params->Id;
            $IsSuspended = false;
            $LastLoginIp = "";
            $LastLoginLocalDate = "";
            $LastName = "";
            $clave = '';
            $SystemName = '';
            $UserId = '';
            $UserName = $params->UserName;
            $Phone = $params->ManagerPhone;

            if ($Id != "" && $UserId != "") {

            } else {
                $login = $Login;
                $Password = $params->Password;

                $CanReceipt = ($CanReceipt == "S") ? "S" : "N";
                $CanDeposit = ($CanDeposit == "S") ? "S" : "N";
                $CanActivateRegister = ($CanActivateRegister == "S") ? "S" : "N";
                $Lockedsales = ($Lockedsales == "S") ? "S" : "N";
                $Pinagent = ($Pinagent == "S") ? "S" : "N";


                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $PuntoVenta = new PuntoVenta($CashDeskId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'A';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = '0';

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = $Lockedsales;

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';

                $Usuario->paisId = $CountryId;

                $Usuario->moneda = $CurrencyId;

                $Usuario->idioma = $PreferredLanguage;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = $consecutivo_usuario;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = $Usuario->fechaCrea;
                $Usuario->usuDocvalido = 0;

                $Usuario->estadoValida = 'N';
                $Usuario->usuvalidaId = 0;
                $Usuario->fechaValida = date('Y-m-d H:i:s');
                $Usuario->contingencia = 'I';
                $Usuario->contingenciaDeportes = 'I';
                $Usuario->contingenciaCasino = 'I';
                $Usuario->contingenciaCasvivo = 'I';
                $Usuario->contingenciaVirtuales = 'I';
                $Usuario->contingenciaPoker = 'I';
                $Usuario->restriccionIp = 'I';
                $Usuario->ubicacionLongitud = $Longitud;
                $Usuario->ubicacionLatitud = $Latitud;
                $Usuario->usuarioIp = $IP;
                $Usuario->tokenGoogle = "I";
                $Usuario->tokenLocal = "I";
                $Usuario->saltGoogle = '';


                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = $Pinagent;
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = 0;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;


                $Concesionario = new Concesionario();

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'MAQUINAANONIMA';
                    $UsuarioPerfil->mandante = 0;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    // $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($_SESSION["usuario"]);
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'MAQUINAANONIMA';
                    $UsuarioPerfil->mandante = 0;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($ConcesionarioU->getUsupadreId());
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id($_SESSION["usuario"]);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } else {

                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = 'MAQUINAANONIMA';
                    $UsuarioPerfil->mandante = 0;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';

                    $Concesionario->setUsupadreId(0);
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                }


                $UsuarioPremiomax = new UsuarioPremiomax();


                $UsuarioPremiomax->usuarioId = $consecutivo_usuario;

                $UsuarioPremiomax->premioMax = 0;

                $UsuarioPremiomax->usumodifId = 0;

                $UsuarioPremiomax->fechaModif = "";

                $UsuarioPremiomax->cantLineas = 0;

                $UsuarioPremiomax->premioMax1 = 0;

                $UsuarioPremiomax->premioMax2 = 0;

                $UsuarioPremiomax->premioMax3 = 0;

                $UsuarioPremiomax->apuestaMin = 0;

                $UsuarioPremiomax->valorDirecto = 0;

                $UsuarioPremiomax->premioDirecto = 0;

                $UsuarioPremiomax->mandante = 0;

                $UsuarioPremiomax->optimizarParrilla = "N";

                $UsuarioPremiomax->textoOp1 = "";

                $UsuarioPremiomax->textoOp2 = "";

                $UsuarioPremiomax->urlOp2 = "";

                $UsuarioPremiomax->textoOp3 = 0;

                $UsuarioPremiomax->urlOp3 = 0;

                $UsuarioPremiomax->valorEvento = 0;

                $UsuarioPremiomax->valorDiario = 0;


                $PuntoVenta = new PuntoVenta();
                $PuntoVenta->descripcion = $Name;
                $PuntoVenta->nombreContacto = $ManagerName;
                $PuntoVenta->ciudadId = $CityId->Id;
                $PuntoVenta->ciudadId = $CityId;
                $PuntoVenta->direccion = $Address;
                $PuntoVenta->barrio = $District;
                $PuntoVenta->telefono = $Phone;
                $PuntoVenta->email = $Email;
                $PuntoVenta->periodicidadId = 0;
                $PuntoVenta->clasificador1Id = 0;
                $PuntoVenta->clasificador2Id = 0;
                $PuntoVenta->clasificador3Id = 0;
                $PuntoVenta->valorRecarga = 0;
                $PuntoVenta->valorCupo = '0';
                $PuntoVenta->valorCupo2 = '0';
                $PuntoVenta->porcenComision = '0';
                $PuntoVenta->porcenComision2 = '0';
                $PuntoVenta->estado = 'A';
                $PuntoVenta->usuarioId = '0';
                $PuntoVenta->mandante = 0;
                //$PuntoVenta->moneda = $CurrencyId;
                $PuntoVenta->moneda = $CurrencyId;
                $PuntoVenta->idioma = 'ES';
                $PuntoVenta->cupoRecarga = 0;
                $PuntoVenta->creditosBase = 0;
                $PuntoVenta->creditos = 0;
                $PuntoVenta->creditosAnt = 0;
                $PuntoVenta->creditosBaseAnt = 0;
                $PuntoVenta->usuarioId = $consecutivo_usuario;


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);


                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO = new ConcesionarioMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO->insert($Concesionario);

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO->insert($UsuarioPerfil);

                $UsuarioPremiomaxMySqlDAO = new UsuarioPremiomaxMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPremiomaxMySqlDAO->insert($UsuarioPremiomax);

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($UsuarioMySqlDAO->getTransaction());
                $PuntoVentaMySqlDAO->insert($PuntoVenta);

                $UsuarioMySqlDAO->getTransaction()->commit();


                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $response["id"] = $consecutivo_usuario;

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;


        /**
        * Configuration/ChangeMyPassword
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Configuration/ChangeMyPassword":

            $FromId = $_SESSION["usuario"];

            if ($FromId != "" && is_numeric($FromId)) {

                $Usuario = new Usuario($FromId);

                $OldPassword = $params->OldPassword;
                $NewPassword = $params->NewPassword;
                $ConfirmPassword = $params->ConfirmPassword;

                if ($NewPassword == $ConfirmPassword) {
                    $Usuario->checkClave($OldPassword);

                    $Usuario->changeClave($NewPassword);

                    $response["HasError"] = false;
                    $response["AlertType"] = "Success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];


                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "Error";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                }

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }

            break;

        /**
        * betShop/ChangePassword
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "betShop/ChangePassword":

            $FromId = $params->FromId;

            if ($FromId != "" && is_numeric($FromId)) {

                $Usuario = new Usuario($FromId);

                $NewPassword = $params->NewPassword;
                $ConfirmPassword = $params->ConfirmPassword;

                if ($NewPassword == $ConfirmPassword) {

                    $Usuario->changeClave($NewPassword);

                    $response["HasError"] = false;
                    $response["AlertType"] = "Success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];


                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "Error";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                }

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }

            break;

        /**
        * AgentList/ChangePassword
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "AgentList/ChangePassword":

            $FromId = $params->FromId;

            if ($FromId != "" && is_numeric($FromId)) {

                $Usuario = new Usuario($FromId);

                $NewPassword = $params->NewPassword;
                $ConfirmPassword = $params->ConfirmPassword;

                if ($NewPassword == $ConfirmPassword) {

                    $Usuario->changeClave($NewPassword);

                    $response["HasError"] = false;
                    $response["AlertType"] = "Success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];


                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "Error";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                }

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }

            break;


        /**
        * Agent/SaveAgent
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/SaveAgent":


            $Address = $params->Address;
            $CityId = $params->CityId;
            $CountryId = $params->CountryId;
            $CurrencyId = $params->CurrencyId;
            $PreferredLanguage = $params->PreferredLanguage;

            $DocumentLegalID = $params->DocumentLegalID;
            $Email = $params->Email;
            $GroupId = $params->GroupId;
            $IP = $params->IP;
            $Latitud = $params->Latitud;
            $Longitud = $params->Longitud;
            $ManagerDocument = $params->ManagerDocument;
            $ManagerName = $params->ContactName;
            $ManagerPhone = $params->ManagerPhone;
            $MobilePhone = $params->MobilePhone;
            $Name = $params->Name;
            $Login = $params->LoginAccess;
            $Phone = $params->Phone;
            $RegionId = $params->RegionId;
            $Partner = $params->Partner;

            $District = $params->District;

            $Type = $params->Type;
            $tipoUsuario = "";
            $seguir = true;

            if ($Type == 0) {
                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    $tipoUsuario = 'CONCESIONARIO2';
                } elseif ($_SESSION["win_perfil2"] != "CONCESIONARIO2" && $_SESSION["win_perfil2"] != "PUNTOVENTA") {
                    $tipoUsuario = 'CONCESIONARIO';

                } else {
                    $seguir = false;
                }
            }

            if ($Type == 1) {
                $tipoUsuario = 'AFILIADOR';
            }

            $RepresentLegalDocument = $params->RepresentLegalDocument;
            $RepresentLegalName = $params->RepresentLegalName;
            $RepresentLegalPhone = $params->RepresentLegalPhone;


            $Address = $Address;
            $CurrencyId = $CurrencyId;
            $Email = $Email;
            $FirstName = $Name;
            $Id = $params->Id;
            $IsSuspended = false;
            $LastLoginIp = "";
            $LastLoginLocalDate = "";
            $LastName = "";
            $clave = '';
            $SystemName = '';
            $UserId = '';
            $UserName = $params->UserName;
            $Phone = $ManagerPhone;

            if ($Id != "" && $UserId != "" && $seguir) {

            } elseif ($seguir) {
                $login = $Login;
                $Password = $params->Password;

                $CanReceipt = ($CanReceipt == "S") ? "S" : "N";
                $CanDeposit = ($CanDeposit == "S") ? "S" : "N";
                $CanActivateRegister = ($CanActivateRegister == "S") ? "S" : "N";
                $Lockedsales = ($Lockedsales == "S") ? "S" : "N";
                $Pinagent = ($Pinagent == "S") ? "S" : "N";

                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $PuntoVenta = new PuntoVenta($CashDeskId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'A';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = $Partner;

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = 'N';

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';


                $Usuario->paisId = $CountryId;

                $Usuario->moneda = $CurrencyId;

                $Usuario->idioma = $PreferredLanguage;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = $consecutivo_usuario;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = $Usuario->fechaCrea;
                $Usuario->usuDocvalido = 0;


                $Usuario->estadoValida = 'N';
                $Usuario->usuvalidaId = 0;
                $Usuario->fechaValida = date('Y-m-d H:i:s');
                $Usuario->contingencia = 'I';
                $Usuario->contingenciaDeportes = 'I';
                $Usuario->contingenciaCasino = 'I';
                $Usuario->contingenciaCasvivo = 'I';
                $Usuario->contingenciaVirtuales = 'I';
                $Usuario->contingenciaPoker = 'I';
                $Usuario->restriccionIp = 'I';
                $Usuario->ubicacionLongitud = $Longitud;
                $Usuario->ubicacionLatitud = $Latitud;
                $Usuario->usuarioIp = $IP;
                $Usuario->tokenGoogle = "I";
                $Usuario->tokenLocal = "I";
                $Usuario->saltGoogle = '';

                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = $Pinagent;
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = $Partner;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;


                $Concesionario = new Concesionario();

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;

                    $UsuarioPerfil->perfilId = $tipoUsuario;
                    $UsuarioPerfil->mandante = $Partner;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    // $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($_SESSION["usuario"]);
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } elseif ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = $tipoUsuario;
                    $UsuarioPerfil->mandante = $Partner;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';


                    $ConcesionarioU = new Concesionario($_SESSION["usuario"], 0);

                    $Concesionario->setUsupadreId($ConcesionarioU->getUsupadreId());
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id($_SESSION["usuario"]);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                } else {

                    $UsuarioPerfil = new UsuarioPerfil();
                    $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                    $UsuarioPerfil->perfilId = $tipoUsuario;
                    $UsuarioPerfil->mandante = $Partner;
                    $UsuarioPerfil->pais = 'S';
                    $UsuarioPerfil->global = 'N';

                    $Concesionario->setUsupadreId(0);
                    $Concesionario->setUsuhijoId($consecutivo_usuario);
                    $Concesionario->setusupadre2Id(0);
                    $Concesionario->setusupadre3Id(0);
                    $Concesionario->setusupadre4Id(0);
                    $Concesionario->setPorcenhijo(0);
                    $Concesionario->setPorcenpadre1(0);
                    $Concesionario->setPorcenpadre2(0);
                    $Concesionario->setPorcenpadre3(0);
                    $Concesionario->setPorcenpadre4(0);
                    $Concesionario->setProdinternoId(0);
                    $Concesionario->setMandante(0);
                    $Concesionario->setUsucreaId(0);
                    $Concesionario->setUsumodifId(0);
                    $Concesionario->setEstado("A");
                }


                $UsuarioPremiomax = new UsuarioPremiomax();


                $UsuarioPremiomax->usuarioId = $consecutivo_usuario;

                $UsuarioPremiomax->premioMax = 0;

                $UsuarioPremiomax->usumodifId = 0;

                $UsuarioPremiomax->fechaModif = "";

                $UsuarioPremiomax->cantLineas = 0;

                $UsuarioPremiomax->premioMax1 = 0;

                $UsuarioPremiomax->premioMax2 = 0;

                $UsuarioPremiomax->premioMax3 = 0;

                $UsuarioPremiomax->apuestaMin = 0;

                $UsuarioPremiomax->valorDirecto = 0;

                $UsuarioPremiomax->premioDirecto = 0;

                $UsuarioPremiomax->mandante = $Partner;

                $UsuarioPremiomax->optimizarParrilla = "N";

                $UsuarioPremiomax->textoOp1 = "";

                $UsuarioPremiomax->textoOp2 = "";

                $UsuarioPremiomax->urlOp2 = "";

                $UsuarioPremiomax->textoOp3 = 0;

                $UsuarioPremiomax->urlOp3 = 0;

                $UsuarioPremiomax->valorEvento = 0;

                $UsuarioPremiomax->valorDiario = 0;


                $PuntoVenta = new PuntoVenta();
                $PuntoVenta->descripcion = $Name;
                $PuntoVenta->nombreContacto = $ManagerName;
                $PuntoVenta->ciudadId = $CityId->Id;
                $PuntoVenta->ciudadId = $CityId;
                $PuntoVenta->direccion = $Address;
                $PuntoVenta->barrio = $District;
                $PuntoVenta->telefono = $Phone;
                $PuntoVenta->email = $Email;
                $PuntoVenta->periodicidadId = 0;
                $PuntoVenta->clasificador1Id = 0;
                $PuntoVenta->clasificador2Id = 0;
                $PuntoVenta->clasificador3Id = 0;
                $PuntoVenta->valorRecarga = 0;
                $PuntoVenta->valorCupo = '0';
                $PuntoVenta->valorCupo2 = '0';
                $PuntoVenta->porcenComision = '0';
                $PuntoVenta->porcenComision2 = '0';
                $PuntoVenta->estado = 'A';
                $PuntoVenta->usuarioId = '0';
                $PuntoVenta->mandante = $Partner;
                $PuntoVenta->moneda = $CurrencyId;
                //$PuntoVenta->moneda = $CurrencyId->Id;
                $PuntoVenta->idioma = 'ES';
                $PuntoVenta->cupoRecarga = 0;
                $PuntoVenta->creditosBase = 0;
                $PuntoVenta->creditos = 0;
                $PuntoVenta->creditosAnt = 0;
                $PuntoVenta->creditosBaseAnt = 0;
                $PuntoVenta->usuarioId = $consecutivo_usuario;


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);


                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO = new ConcesionarioMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $ConcesionarioMySqlDAO->insert($Concesionario);

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO->insert($UsuarioPerfil);

                $UsuarioPremiomaxMySqlDAO = new UsuarioPremiomaxMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPremiomaxMySqlDAO->insert($UsuarioPremiomax);

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($UsuarioMySqlDAO->getTransaction());
                $PuntoVentaMySqlDAO->insert($PuntoVenta);

                $UsuarioMySqlDAO->getTransaction()->commit();


                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $response["id"] = $consecutivo_usuario;

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Error no puede crearlo";
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * BetShop/SaveCashDesks
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/SaveCashDesks":


            $params = $params;

            $Address = $params->BetshopId;
            $CityId = $params->CurrencyId;
            $CountryId = $params->DepositCupo;
            $CurrencyId = $params->LimitAmount;
            $DocumentLegalID = $params->LivePercentage;
            $MaxBetLive = $params->MaxBetLive;
            $MaxBetPreMatch = $params->MaxBetPreMatch;
            $MinBalance = $params->MinBalance;
            $MinBet = $params->MinBet;
            $Name = $params->Name;
            $PreMatchPercentage = $params->PreMatchPercentage;
            $RecargasPercentage = $params->RecargasPercentage;
            $UseTurnoverLimit = $params->UseTurnoverLimit;
            $BetshopId = $params->FromId;

            $Address = $params->Address;
            $login = $params->UserName;
            $FirstName = $params->FirstName;
            $Id = $params->Id;
            $LastName = $params->LastName;
            $Password = $params->Password;
            $UserName = $params->UserName;

            $login = $login;
            $FirstName = $Name;

            $CanReceipt = $params->CanReceipt;
            $CanDeposit = $params->CanReceipt;
            $CanActivateRegister = $params->CanReceipt;

            if ($CanReceipt == true) {
                $CanReceipt = 'S';
            } else {
                $CanReceipt = 'N';
            }

            if ($CanDeposit == true) {
                $CanDeposit = 'S';
            } else {
                $CanDeposit = 'N';
            }

            if ($CanActivateRegister == true) {
                $CanActivateRegister = 'S';
            } else {
                $CanActivateRegister = 'N';
            }

            if ($BetshopId != "" && is_numeric($BetshopId)) {


                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $UsuarioPV = new Usuario($BetshopId);
                //$PuntoVenta = new PuntoVenta("",$BetshopId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'A';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = '0';

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = 'N';

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';

                $Usuario->paisId = $UsuarioPV->paisId;

                $Usuario->moneda = $UsuarioPV->moneda;

                $Usuario->idioma = $UsuarioPV->idioma;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = $UsuarioPV->usuarioId;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = $Usuario->fechaCrea;
                $Usuario->usuDocvalido = 0;

                $Usuario->estadoValida = 'N';
                $Usuario->usuvalidaId = 0;
                $Usuario->fechaValida = date('Y-m-d H:i:s');
                $Usuario->estadoValida = 'N';
                $Usuario->contingencia = 'I';
                $Usuario->contingenciaDeportes = 'I';
                $Usuario->contingenciaCasino = 'I';
                $Usuario->contingenciaCasvivo = 'I';
                $Usuario->contingenciaVirtuales = 'I';
                $Usuario->contingenciaPoker = 'I';
                $Usuario->restriccionIp = 'I';
                $Usuario->ubicacionLongitud = '';
                $Usuario->ubicacionLatitud = '';
                $Usuario->usuarioIp = 'I';
                $Usuario->tokenGoogle = 'I';
                $Usuario->tokenLocal = 'I';
                $Usuario->saltGoogle = '';


                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = '';
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = 0;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;

                $UsuarioPerfil = new UsuarioPerfil();
                $UsuarioPerfil->usuarioId = $consecutivo_usuario;
                $UsuarioPerfil->perfilId = 'CAJERO';
                $UsuarioPerfil->mandante = 0;
                $UsuarioPerfil->pais = 'S';
                $UsuarioPerfil->global = 'N';

                $UsuarioPremiomax = new UsuarioPremiomax();


                $UsuarioPremiomax->usuarioId = $consecutivo_usuario;

                $UsuarioPremiomax->premioMax = 0;

                $UsuarioPremiomax->usumodifId = 0;

                $UsuarioPremiomax->fechaModif = "";

                $UsuarioPremiomax->cantLineas = 0;

                $UsuarioPremiomax->premioMax1 = 0;

                $UsuarioPremiomax->premioMax2 = 0;

                $UsuarioPremiomax->premioMax3 = 0;

                $UsuarioPremiomax->apuestaMin = $MinBet;

                $UsuarioPremiomax->valorDirecto = 0;

                $UsuarioPremiomax->premioDirecto = 0;

                $UsuarioPremiomax->mandante = 0;

                $UsuarioPremiomax->optimizarParrilla = "N";

                $UsuarioPremiomax->textoOp1 = "";

                $UsuarioPremiomax->textoOp2 = "";

                $UsuarioPremiomax->urlOp2 = "";

                $UsuarioPremiomax->textoOp3 = 0;

                $UsuarioPremiomax->urlOp3 = 0;

                $UsuarioPremiomax->valorEvento = 0;

                $UsuarioPremiomax->valorDiario = 0;


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);


                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPerfilMySqlDAO->insert($UsuarioPerfil);

                $UsuarioPremiomaxMySqlDAO = new UsuarioPremiomaxMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioPremiomaxMySqlDAO->insert($UsuarioPremiomax);

                $UsuarioMySqlDAO->getTransaction()->commit();

                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Error no puede crearlo";
                $response["ModelErrors"] = [];

            }

            break;

        /**
        * BetShop/UpdateCashDesks
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/UpdateCashDesks":
            $FromId = $params->FromId;

            if ($FromId != "" && is_numeric($FromId)) {

                $Usuario = new Usuario($FromId);

                $Name = $params->Name;

                $Usuario->nombre = $Name;

                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $UsuarioMySqlDAO->update($Usuario);
                $UsuarioMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Error no puede editarlo";
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * BetShop/SaveAdvertising
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/SaveAdvertising":

            $params = $params;

            $BetshopId = $params->BetshopId;
            $IsActivate = ($params->IsActivate == "A") ? "A" : "I";
            $Name = $params->Name;
            $Route = $params->Route;
            $Order = ($params->Order == "") ? 0 : $params->Order;
            $Id = $params->Id;
            $FromId = $params->FromId;


            if ($BetShopId == "") {
                $BetShopId = $FromId;
            }

            if (($Id != "" && is_numeric($Id)) && is_numeric($BetShopId)) {
                $UsuarioPublicidad = new UsuarioPublicidad($Id);

                if ($UsuarioPublicidad->getEstado() != $IsActivate) {
                    $UsuarioPublicidad->setEstado($IsActivate);
                }

                if ($UsuarioPublicidad->getDescripcion() != $Name) {
                    $UsuarioPublicidad->setDescripcion($Name);
                }

                if ($UsuarioPublicidad->getValor() != $Route) {
                    $UsuarioPublicidad->setValor($Route);
                }

                if ($UsuarioPublicidad->getOrden() != $Order) {
                    $UsuarioPublicidad->setOrden($Order);
                }

                $UsuarioPublicidadMySqlDAO = new UsuarioPublicidadMySqlDAO();
                $UsuarioPublicidadMySqlDAO->update($UsuarioPublicidad);
                $UsuarioPublicidadMySqlDAO->getTransaction()->commit();


                $UsuarioPublicidad = new UsuarioPublicidad();

                $mensajesRecibidos = [];


                $json2 = '{"rules" : [] ,"groupOp" : "AND"}';

                $usuariopublicidades = $UsuarioPublicidad->getUsuarioPublicidadesCustom("usuario_publicidad.*", "usuario_publicidad.usupublicidad_id", "asc", 0, 100, $json2, true);
                $usuariopublicidades = json_decode($usuariopublicidades);


                foreach ($usuariopublicidades->data as $key => $value) {

                    $array = [];

                    $array["attachment_id"] = $value->{"usuario_publicidad.usupublicidad_id"};
                    $array["url"] = ($value->{"usuario_publicidad.valor"});
                    $array["isYouTubeVideo"] = false;
                    $array["isVideoLocal"] = false;

                    if (strpos($array["url"], "youtube") !== false) {
                        $array["isYouTubeVideo"] = true;

                    }

                    if (strpos($array["url"], "mp4") !== false) {
                        $array["isVideoLocal"] = true;

                    }

                    array_push($mensajesRecibidos, $array);

                }


                $UsuarioMandante = new UsuarioMandante(45340);

                $UsuarioToken2 = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                $data = array(
                    "7040" . $UsuarioToken2->getRequestId() . "6" => array("advertisings" => $mensajesRecibidos)

                );
                print_r($data);

                /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                //$WebsocketUsuario = new WebsocketUsuario($UsuarioToken2->getRequestId(), $data);
                //$WebsocketUsuario->sendWSMessage();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            } elseif ($BetShopId != "" && is_numeric($BetShopId)) {
                $UsuarioPublicidad = new UsuarioPublicidad();

                $UsuarioPublicidad->setUsuarioId($BetShopId);
                $UsuarioPublicidad->setEstado($IsActivate);
                $UsuarioPublicidad->setDescripcion($Name);
                $UsuarioPublicidad->setValor($Route);
                $UsuarioPublicidad->setOrden($Order);

                $UsuarioPublicidadMySqlDAO = new UsuarioPublicidadMySqlDAO();
                $UsuarioPublicidadMySqlDAO->insert($UsuarioPublicidad);
                $UsuarioPublicidadMySqlDAO->getTransaction()->commit();


                $UsuarioPublicidad = new UsuarioPublicidad();

                $mensajesRecibidos = [];


                $json2 = '{"rules" : [{"field" : "usuario_publicidad.usuario_id", "data": "$BetShopId","op":"eq"},{"field" : "usuario_publicidad.estado", "data": "A","op":"eq"}] ,"groupOp" : "AND"}';

                $usuariopublicidades = $UsuarioPublicidad->getUsuarioPublicidadesCustom("usuario_publicidad.*", "usuario_publicidad.usupublicidad_id", "asc", 0, 100, $json2, true);
                $usuariopublicidades = json_decode($usuariopublicidades);


                foreach ($usuariopublicidades->data as $key => $value) {

                    $array = [];

                    $array["attachment_id"] = $value->{"usuario_publicidad.usupublicidad_id"};
                    $array["url"] = ($value->{"usuario_publicidad.valor"});
                    $array["isYouTubeVideo"] = false;
                    $array["isVideoLocal"] = false;

                    if (strpos($array["url"], "youtube") !== false) {
                        $array["isYouTubeVideo"] = true;

                    }

                    if (strpos($array["url"], "mp4") !== false) {
                        $array["isVideoLocal"] = true;

                    }

                    array_push($mensajesRecibidos, $array);

                }


                $UsuarioMandante = new UsuarioMandante(45340);

                $UsuarioToken2 = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                $data = array(
                    "7040" . $UsuarioToken2->getRequestId() . "6" => array("advertisings" => $mensajesRecibidos)

                );

                /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                $WebsocketUsuario = new WebsocketUsuario($UsuarioToken2->getRequestId(), $data);
                $WebsocketUsuario->sendWSMessage();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * Machine/SaveAdvertising
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Machine/SaveAdvertising":

            $params = $params;

            $BetshopId = $params->BetshopId;
            $IsActivate = ($params->IsActivate == "A") ? "A" : "I";
            $Name = $params->Name;
            $Route = $params->Route;
            $Order = ($params->Order == "") ? 0 : $params->Order;
            $Id = $params->Id;
            $FromId = $params->FromId;


            if ($BetShopId == "") {
                $BetShopId = $FromId;
            }

            if (($Id != "" && is_numeric($Id)) && is_numeric($BetShopId)) {
                $UsuarioPublicidad = new UsuarioPublicidad($Id);

                if ($UsuarioPublicidad->getEstado() != $IsActivate) {
                    $UsuarioPublicidad->setEstado($IsActivate);
                }

                if ($UsuarioPublicidad->getDescripcion() != $Name) {
                    $UsuarioPublicidad->setDescripcion($Name);
                }

                if ($UsuarioPublicidad->getValor() != $Route) {
                    $UsuarioPublicidad->setValor($Route);
                }

                if ($UsuarioPublicidad->getOrden() != $Order) {
                    $UsuarioPublicidad->setOrden($Order);
                }

                $UsuarioPublicidadMySqlDAO = new UsuarioPublicidadMySqlDAO();
                $UsuarioPublicidadMySqlDAO->update($UsuarioPublicidad);
                $UsuarioPublicidadMySqlDAO->getTransaction()->commit();


                $UsuarioPublicidad = new UsuarioPublicidad();

                $mensajesRecibidos = [];


                $json2 = '{"rules" : [{"field" : "usuario_publicidad.usuario_id", "data": "' . $BetShopId . '","op":"eq"},{"field" : "usuario_publicidad.estado", "data": "A","op":"eq"}] ,"groupOp" : "AND"}';

                $usuariopublicidades = $UsuarioPublicidad->getUsuarioPublicidadesCustom("usuario_publicidad.*", "usuario_publicidad.usupublicidad_id", "asc", 0, 100, $json2, true);
                $usuariopublicidades = json_decode($usuariopublicidades);


                foreach ($usuariopublicidades->data as $key => $value) {

                    $array = [];

                    $array["attachment_id"] = $value->{"usuario_publicidad.usupublicidad_id"};
                    $array["url"] = ($value->{"usuario_publicidad.valor"});
                    $array["isYouTubeVideo"] = false;
                    $array["isVideoLocal"] = false;

                    if (strpos($array["url"], "youtube") !== false) {
                        $array["isYouTubeVideo"] = true;

                    }

                    if (strpos($array["url"], "mp4") !== false) {
                        $array["isVideoLocal"] = true;

                    }

                    array_push($mensajesRecibidos, $array);

                }


                $UsuarioMandante = new UsuarioMandante("", $BetShopId, "0");

                $UsuarioToken2 = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                $data = array(
                    "7040" . $UsuarioToken2->getRequestId() . "6" => array("advertisings" => $mensajesRecibidos)

                );

                print_r($data);
                /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                //$WebsocketUsuario = new WebsocketUsuario($UsuarioToken2->getRequestId(), $data);
                //$WebsocketUsuario->sendWSMessage();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            } elseif ($BetShopId != "" && is_numeric($BetShopId)) {
                $UsuarioPublicidad = new UsuarioPublicidad();

                $UsuarioPublicidad->setUsuarioId($BetShopId);
                $UsuarioPublicidad->setEstado($IsActivate);
                $UsuarioPublicidad->setDescripcion($Name);
                $UsuarioPublicidad->setValor($Route);
                $UsuarioPublicidad->setOrden($Order);

                $UsuarioPublicidadMySqlDAO = new UsuarioPublicidadMySqlDAO();
                $UsuarioPublicidadMySqlDAO->insert($UsuarioPublicidad);
                $UsuarioPublicidadMySqlDAO->getTransaction()->commit();


                $UsuarioPublicidad = new UsuarioPublicidad();

                $mensajesRecibidos = [];


                $json2 = '{"rules" : [{"field" : "usuario_publicidad.usuario_id", "data": "$BetShopId","op":"eq"},{"field" : "usuario_publicidad.estado", "data": "A","op":"eq"}] ,"groupOp" : "AND"}';

                $usuariopublicidades = $UsuarioPublicidad->getUsuarioPublicidadesCustom("usuario_publicidad.*", "usuario_publicidad.usupublicidad_id", "asc", 0, 100, $json2, true);
                $usuariopublicidades = json_decode($usuariopublicidades);


                foreach ($usuariopublicidades->data as $key => $value) {

                    $array = [];

                    $array["attachment_id"] = $value->{"usuario_publicidad.usupublicidad_id"};
                    $array["url"] = ($value->{"usuario_publicidad.valor"});
                    $array["isYouTubeVideo"] = false;
                    $array["isVideoLocal"] = false;

                    if (strpos($array["url"], "youtube") !== false) {
                        $array["isYouTubeVideo"] = true;

                    }

                    if (strpos($array["url"], "mp4") !== false) {
                        $array["isVideoLocal"] = true;

                    }

                    array_push($mensajesRecibidos, $array);

                }

                $UsuarioMandante = new UsuarioMandante("", $BetShopId, "0");

                $UsuarioToken2 = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                $data = array(
                    "7040" . $UsuarioToken2->getRequestId() . "6" => array("advertisings" => $mensajesRecibidos)

                );

                /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                $WebsocketUsuario = new WebsocketUsuario($UsuarioToken2->getRequestId(), $data);
                $WebsocketUsuario->sendWSMessage();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * BetShop/GetAdvertising
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetAdvertising":

            $id = $params->BetShopId;

            $FromId = $_REQUEST["FromId"];

            if ($FromId != "" || $id != "") {


                $UsuarioPublicidad = new UsuarioPublicidad();

                $MaxRows = $_REQUEST["count"];
                $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 100000;
                }


                $rules = [];

                if ($id != "") {
                    array_push($rules, array("field" => "usuario_publicidad.usuario_id", "data" => "$id", "op" => "eq"));
                }

                if ($FromId != "") {
                    array_push($rules, array("field" => "usuario_publicidad.usuario_id", "data" => "$FromId", "op" => "eq"));
                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $usuariopublicidades = $UsuarioPublicidad->getUsuarioPublicidadesCustom("usuario_publicidad.*", "usuario_publicidad.usupublicidad_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $usuariopublicidades = json_decode($usuariopublicidades);

                $final = [];

                foreach ($usuariopublicidades->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"usuario_publicidad.usupublicidad_id"};
                    $array["Name"] = $value->{"usuario_publicidad.descripcion"};
                    $array["Order"] = $value->{"usuario_publicidad.orden"};
                    $array["Route"] = $value->{"usuario_publicidad.valor"};
                    $array["User"] = $value->{"usuario_publicidad.usuario_id"};
                    $array["IsActivate"] = ($value->{"usuario_publicidad.estado"} == "A") ? "A" : "I";

                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = $final;

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $usuariopublicidades->count[0]->{".count"};
                $response["data"] = $final;


            }

            break;


        /**
        * Machine/GetAdvertising
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Machine/GetAdvertising":

            $id = $params->BetShopId;

            $FromId = $_REQUEST["FromId"];

            if ($FromId != "" || $id != "") {


                $UsuarioPublicidad = new UsuarioPublicidad();

                $MaxRows = $_REQUEST["count"];
                $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 100000;
                }


                $rules = [];

                if ($id != "") {
                    array_push($rules, array("field" => "usuario_publicidad.usuario_id", "data" => "$id", "op" => "eq"));
                }

                if ($FromId != "") {
                    array_push($rules, array("field" => "usuario_publicidad.usuario_id", "data" => "$FromId", "op" => "eq"));
                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $usuariopublicidades = $UsuarioPublicidad->getUsuarioPublicidadesCustom("usuario_publicidad.*", "usuario_publicidad.usupublicidad_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $usuariopublicidades = json_decode($usuariopublicidades);

                $final = [];

                foreach ($usuariopublicidades->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"usuario_publicidad.usupublicidad_id"};
                    $array["Name"] = $value->{"usuario_publicidad.descripcion"};
                    $array["Order"] = $value->{"usuario_publicidad.orden"};
                    $array["Route"] = $value->{"usuario_publicidad.valor"};
                    $array["User"] = $value->{"usuario_publicidad.usuario_id"};
                    $array["IsActivate"] = ($value->{"usuario_publicidad.estado"} == "A") ? "A" : "I";

                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = $final;

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $usuariopublicidades->count[0]->{".count"};
                $response["data"] = $final;


            }

            break;

        /**
        * UserManagement/UpdateUserDetails
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/UpdateUserDetails":
            $CashDeskId = $params->CashDeskId;

            if ($CashDeskId != "") {


                $Address = $params->Address;
                $login = $params->UserName;
                $FirstName = $params->FirstName;
                $Id = $params->Id;
                $LastName = $params->LastName;
                $Password = $params->Password;
                $UserName = $params->UserName;

                $CanReceipt = $params->CanReceipt;
                $CanDeposit = $params->CanReceipt;
                $CanActivateRegister = $params->CanReceipt;

                if ($CanReceipt == true) {
                    $CanReceipt = 'S';
                } else {
                    $CanReceipt = 'N';
                }

                if ($CanDeposit == true) {
                    $CanDeposit = 'S';
                } else {
                    $CanDeposit = 'N';
                }

                if ($CanActivateRegister == true) {
                    $CanActivateRegister = 'S';
                } else {
                    $CanActivateRegister = 'N';
                }

                $Consecutivo = new Consecutivo("", "USU", "");

                $consecutivo_usuario = $Consecutivo->numero;

                $consecutivo_usuario++;

                $ConsecutivoMySqlDAO = new ConsecutivoMySqlDAO();

                $Consecutivo->setNumero($consecutivo_usuario);


                $ConsecutivoMySqlDAO->update($Consecutivo);

                $ConsecutivoMySqlDAO->getTransaction()->commit();

                $PuntoVenta = new PuntoVenta($CashDeskId);


                $Usuario = new Usuario();


                $Usuario->usuarioId = $consecutivo_usuario;

                $Usuario->login = $login;

                $Usuario->nombre = $FirstName;

                $Usuario->estado = 'A';

                $Usuario->fechaUlt = date('Y-m-d H:i:s');

                $Usuario->claveTv = '';

                $Usuario->estadoAnt = 'I';

                $Usuario->intentos = 0;

                $Usuario->estadoEsp = 'I';

                $Usuario->observ = '';

                $Usuario->dirIp = '';

                $Usuario->eliminado = 'N';

                $Usuario->mandante = '0';

                $Usuario->usucreaId = '0';

                $Usuario->usumodifId = '0';

                $Usuario->claveCasino = '';
                $token_itainment = GenerarClaveTicket2(12);

                $Usuario->tokenItainment = $token_itainment;

                $Usuario->fechaClave = '';

                $Usuario->retirado = '';

                $Usuario->fechaRetiro = '';

                $Usuario->horaRetiro = '';

                $Usuario->usuretiroId = '0';

                $Usuario->bloqueoVentas = 'N';

                $Usuario->infoEquipo = '';

                $Usuario->estadoJugador = 'AC';

                $Usuario->tokenCasino = '';

                $Usuario->sponsorId = 0;

                $Usuario->verifCorreo = 'N';

                $Usuario->paisId = '1';

                $Usuario->moneda = $PuntoVenta->moneda;

                $Usuario->idioma = $PuntoVenta->idioma;

                $Usuario->permiteActivareg = $CanActivateRegister;

                $Usuario->test = 'N';

                $Usuario->tiempoLimitedeposito = '0';

                $Usuario->tiempoAutoexclusion = '0';

                $Usuario->cambiosAprobacion = 'S';

                $Usuario->timezone = '-5';

                $Usuario->puntoventaId = $PuntoVenta->usuarioId;

                $Usuario->fechaCrea = date('Y-m-d H:i:s');

                $Usuario->origen = 0;

                $Usuario->fechaActualizacion = $Usuario->fechaCrea;

                $UsuarioConfig = new UsuarioConfig();
                $UsuarioConfig->permiteRecarga = $CanDeposit;
                $UsuarioConfig->pinagent = '';
                $UsuarioConfig->reciboCaja = $CanReceipt;
                $UsuarioConfig->mandante = 0;
                $UsuarioConfig->usuarioId = $consecutivo_usuario;


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->insert($Usuario);

                $UsuarioMySqlDAO->updateClave($Usuario, $Password);

                $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $UsuarioConfigMySqlDAO->insert($UsuarioConfig);

                $UsuarioMySqlDAO->getTransaction()->commit();


            }
            break;

        /**
        * UserManagement/CreateUserAlert
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/CreateUserAlert":

            $Action = $params->Action;
            $Id = $params->Id;
            $State = $params->State;
            $Value = $params->Value;
            $Type = $params->Type;

            if ($State == "true" || $State) {
                $State = "A";
            } else {
                $State = "I";
            }

            if ($Id >= 0) {

                $UsuarioAlerta = new UsuarioAlerta();

                $UsuarioAlerta->setUsuarioId($Id);
                $UsuarioAlerta->setTipo($Type);
                $UsuarioAlerta->setValor(json_encode($Value));
                $UsuarioAlerta->setAccion(json_encode($Action));
                $UsuarioAlerta->setUsucreaId($_SESSION["usuario"]);
                $UsuarioAlerta->setUsumodifId($_SESSION["usuario"]);
                $UsuarioAlerta->setEstado($State);

                $UsuarioAlertaMySqlDAO = new UsuarioAlertaMySqlDAO();

                $UsuarioAlertaMySqlDAO->insert($UsuarioAlerta);

                $UsuarioAlertaMySqlDAO->getTransaction()->commit();


            }
            break;

        /**
        * UserManagement/GetPartnerAdminUsers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPartnerAdminUsers":

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'ADMIN','SA','ADMIN2'", "op" => "in"));

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {

                $Islocked = false;

                if ($value->{"usuario.estado"} == "I") {
                    $Islocked = true;
                }

                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"a.nombre"};
                $array["Adress"] = null;
                $array["AgentId"] = null;
                $array["CashDeskId"] = null;
                $array["CashDeskName"] = null;
                $array["CreatedLocalDate"] = "2018-01-13T17:03:13.024";
                $array["EMail"] = "";
                $array["FirstName"] = $value->{"a.nombre"};
                $array["Hired"] = "0001-01-01T00:00:00";
                $array["IsAgent"] = false;
                $array["IsGiven"] = false;
                $array["IsQRCodeSent"] = false;
                $array["IsSuspended"] = false;
                $array["IsTwoFactorEnabled"] = false;
                $array["LastName"] = "";
                $array["PartnerId"] = 0;
                $array["Password"] = null;
                $array["UserName"] = $value->{"usuario.login"};


                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuariosFinal;

            break;

        /**
        * UserManagement/GetAdminUser
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetAdminUser":


            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'ADMIN','SA','ADMIN2','CONSULTAS'", "op" => "in"));

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,usuario.nombre,usuario.fecha_ult ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {

                $Islocked = false;

                if ($value->{"usuario.estado"} == "I") {
                    $Islocked = true;
                }

                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Adress"] = null;
                $array["AgentId"] = null;
                $array["CashDeskId"] = null;
                $array["CashDeskName"] = null;
                $array["CreatedLocalDate"] = "2018-01-13T17:03:13.024";
                $array["EMail"] = "";
                $array["FirstName"] = $value->{"usuario.nombre"};
                $array["Hired"] = "0001-01-01T00:00:00";
                $array["IsAgent"] = false;
                $array["IsGiven"] = false;
                $array["IsQRCodeSent"] = false;
                $array["IsSuspended"] = false;
                $array["IsTwoFactorEnabled"] = false;
                $array["LastName"] = "";
                $array["PartnerId"] = 0;
                $array["Password"] = null;
                $array["UserName"] = $value->{"usuario.login"};
                $array["Login"] = $value->{"usuario.login"};
                $array["Phone"] = $value->{"usuario.telefono"};
                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};


                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

// $response["Data"] = $usuariosFinal;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $usuariosFinal;

            break;


        /**
        * UserManagement/GetBlockedUser
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetBlockedUser":


            $UsuarioBloqueado = new UsuarioBloqueado();


            $Cedula = $params->Cedula;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            $Cedula = $_REQUEST["Cedula"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            if ($Cedula != "") {
                array_push($rules, array("field" => "usuario_bloqueado.cedula", "data" => "$Cedula", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $UsuarioBloqueado->getUsuariosBloqueadosCustom("  usuario_bloqueado.* ", "usuario_bloqueado.usubloqueado_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {

                $Islocked = false;

                if ($value->{"usuario.estado"} == "I") {
                    $Islocked = true;
                }

                $array = [];

                $array["Id"] = $value->{"usuario_bloqueado.usubloqueado_id"};
                $array["FirstName"] = $value->{"usuario_bloqueado.primer_nombre"};
                $array["SecondName"] = $value->{"usuario_bloqueado.segundo_nombre"};
                $array["FirstLastName"] = $value->{"usuario_bloqueado.primer_apellido"};
                $array["SecondLastName"] = $value->{"usuario_bloqueado.segundo_apellido"};
                $array["Type"] = $value->{"usuario_bloqueado.tipo"};
                $array["State"] = $value->{"usuario_bloqueado.estado"};
                $array["DateCreated"] = $value->{"usuario_bloqueado.fecha_crea"};
                $array["Cedula"] = $value->{"usuario_bloqueado.cedula"};
                $array["TypeDocument"] = $value->{"usuario_bloqueado.tipo_documento"};
                $array["Partner"] = $value->{"usuario_bloqueado.mandante"};


                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            // $response["Data"] = $usuariosFinal;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $usuariosFinal;


            break;


        /**
        * UserManagement/SaveUserBlocked
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/SaveUserBlocked":

            $Cedula = $params->Cedula;
            $FirstName = $params->FirstName;
            $SecondName = $params->SecondName;
            $FirstLastName = $params->FirstLastName;
            $SecondLastName = $params->SecondLastName;
            $Type = ($params->Type == "" || !is_numeric($params->Type)) ? 0 : $params->Type;
            $State = ($params->State != "A" && $params->State != "I") ? "A" : $params->State;
            $Partner = $params->Partner;
            $TypeDocument = ($params->TypeDocument == "" || !is_numeric($params->TypeDocument)) ? 0 : $params->TypeDocument;

            if ($_SESSION["win_perfil"] != "SA" && $_SESSION["win_perfil"] != "ADMIN") {
                $Partner = $_SESSION["mandante"];
            }

            $seguir = true;

            if ($Partner == "" || !is_numeric($Partner)) {
                $seguir = false;
            }

            if ($seguir) {
                $UsuarioBloqueado = new UsuarioBloqueado();

                $UsuarioBloqueado->setCedula($Cedula);
                $UsuarioBloqueado->setMandante($Partner);

                $UsuarioBloqueado->setPrimerNombre($FirstName);
                $UsuarioBloqueado->setSegundoNombre($SecondName);
                $UsuarioBloqueado->setPrimerApellido($FirstLastName);
                $UsuarioBloqueado->setSegundoApellido($SecondLastName);
                $UsuarioBloqueado->setTipo($Type);
                $UsuarioBloqueado->setEstado($State);
                $UsuarioBloqueado->setUsucreaId($_SESSION["usuario"]);
                $UsuarioBloqueado->setUsumodifId($_SESSION["usuario"]);
                $UsuarioBloqueado->setTipoDocumento($TypeDocument);

                $UsuarioBloqueadoMySqlDAO = new UsuarioBloqueadoMySqlDAO();
                $UsuarioBloqueadoMySqlDAO->insert($UsuarioBloqueado);
                $UsuarioBloqueadoMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "error";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }

            break;

        /**
        * UserManagement/GetUsersAffiliates
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetUsersAffiliates":

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;
            $FromId = $_REQUEST["FromId"];

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));
            }

            if ($FromId != "") {
                array_push($rules, array("field" => "registro.afiliador_id", "data" => "$FromId", "op" => "eq"));
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $Usuario->getUsuariosCustom("  DISTINCT (usuario.usuario_id),usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea,usuario.nombre,usuario.fecha_ult ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {

                $Islocked = false;

                if ($value->{"usuario.estado"} == "I") {
                    $Islocked = true;
                }

                $array = [];

                $array["id"] = $value->{"usuario.usuario_id"};
                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["State"] = $value->{"usuario.estado"};
                $array["AgentId"] = null;
                $array["CashDeskId"] = null;
                $array["CashDeskName"] = null;
                $array["CreatedLocalDate"] = "2018-01-13T17:03:13.024";
                $array["EMail"] = "";
                $array["FirstName"] = $value->{"usuario.nombre"};
                $array["Hired"] = "0001-01-01T00:00:00";
                $array["IsAgent"] = false;
                $array["IsGiven"] = false;
                $array["IsQRCodeSent"] = false;
                $array["IsSuspended"] = false;
                $array["IsTwoFactorEnabled"] = false;
                $array["LastName"] = "";
                $array["PartnerId"] = 0;
                $array["Password"] = null;
                $array["UserName"] = $value->{"usuario.login"};
                $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};
                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};


                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            // $response["Data"] = $usuariosFinal;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $usuariosFinal;


            break;

        /**
        * UserManagement/GetContigencia
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetContigencia":


            $Perfil = new Perfil();

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'ADMIN','SA','ADMIN2'", "op" => "in"));

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $perfiles = $Perfil->getPerfilesCustom(" perfil.* ", "perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json, false);
            $perfiles = json_decode($perfiles);

            $perfilesfinal = [];

            foreach ($perfiles->data as $key => $value) {

                $array = [];

                $array["Profile"] = $value->{"perfil.perfil_id"};
                $array["Description"] = $value->{"perfil.descripcion"};

                array_push($perfilesfinal, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $perfilesfinal;


            $response["pos"] = $SkeepRows;
            $response["total_count"] = $perfiles->count[0]->{".count"};
            $response["data"] = $perfilesfinal;


            break;

        /**
        * UserManagement/GetPerfil
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPerfil":


            $Perfil = new Perfil();

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "'ADMIN','SA','ADMIN2'", "op" => "in"));

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $perfiles = $Perfil->getPerfilesCustom(" perfil.* ", "perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json, false);
            $perfiles = json_decode($perfiles);

            $perfilesfinal = [];

            foreach ($perfiles->data as $key => $value) {

                $array = [];

                $array["Profile"] = $value->{"perfil.perfil_id"};
                $array["Description"] = $value->{"perfil.descripcion"};
                $array["MinimumBet"] = 1;

                switch ($value->{"perfil.tipo"}) {
                    case "A":
                        $array["Type"] = "Administrativo";
                        break;

                    case "C":
                        $array["Type"] = "Comercial";
                        break;

                    default:
                        $array["Type"] = "Usuario";
                        break;
                }
                $array["Description"] = $value->{"perfil.descripcion"};
                $array["KeyExpiryDays"] = $value->{"perfil.dias_clave"};

                array_push($perfilesfinal, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $perfilesfinal;


            $response["pos"] = $SkeepRows;
            $response["total_count"] = $perfiles->count[0]->{".count"};
            $response["data"] = $perfilesfinal;


            break;

        /**
        * UserManagement/GetUsuarioPerfil
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetUsuarioPerfil":


            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;
            $User = $_GET["User"];


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));
            }

            if ($User != "") {
                array_push($rules, array("field" => "usuario.login", "data" => $User, "op" => "eq"));

            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $UsuarioPerfil = new UsuarioPerfil();
            $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.login,usuario.usuario_id,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);
            $arrayf = [];

            foreach ($usuarios->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Role"] = $value->{"usuario_perfil.perfil_id"};

                $array["User"] = $value->{"usuario.login"};
                $array["Profile"] = $value->{"usuario_perfil.perfil_id"};

                array_push($arrayf, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $arrayf;


            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $arrayf;


            break;


        /**
        * UserManagement/GetRegisteredDocuments
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetRegisteredDocuments":


            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            if ($Id != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $Descarga = new Descarga();
            $usuarios = $Descarga->getDescargasCustom(" descarga.* ", "descarga.descarga_id", "asc", $SkeepRows, $MaxRows, $json, false);

            $usuarios = json_decode($usuarios);
            $arrayf = [];

            foreach ($usuarios->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"descarga.descarga_id"};
                $array["Name"] = $value->{"descarga.descripcion"};
                $array["Route"] = $value->{"descarga.ruta"};
                $array["Type"] = $value->{"descarga.tipo"};
                $array["Version"] = $value->{"descarga.version"};
                $array["IsActivate"] = $value->{"descarga.estado"};

                array_push($arrayf, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $arrayf;


            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};
            $response["data"] = $arrayf;


            break;

        /**
        * UserManagement/GetPagoPremio
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPagoPremio":


            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $NoTicket = $_REQUEST["NoTicket"];
            $ClaveTicket = $_REQUEST["ClaveTicket"];

            $ItTicketEnc = new ItTicketEnc();

            $ticket = $ItTicketEnc->checkTicket($NoTicket, $ClaveTicket);

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            array_push($rules, array("field" => "it_ticket_enc.ticket_id", "data" => "$NoTicket", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $ItTicketEnc = new ItTicketEnc();
            $tickets = $ItTicketEnc->getTicketsCustom(" it_ticket_enc.vlr_apuesta,it_ticket_enc.vlr_premio,it_ticket_enc.estado,it_ticket_enc.premiado ", "it_ticket_enc.ticket_id", "asc", 0, 1, $json, true);
            $tickets = json_decode($tickets);


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            $response["data"] =
                array(
                    "ValorApostado" => $tickets->data[0]->{"it_ticket_enc.vlr_apuesta"},
                    "ValorPagar" => $tickets->data[0]->{"it_ticket_enc.vlr_premio"},
                    "PremioProyectado" => $tickets->data[0]->{"it_ticket_enc.vlr_premio"},
                    "Estado" => $tickets->data[0]->{"it_ticket_enc.estado"},
                    "Ganador" => $tickets->data[0]->{"it_ticket_enc.premiado"},
                );

            if ($tickets->data[0]->{"it_ticket_enc.premiado"} == "S") {
                $response["data"]["Ganador"] = "SI";

            } else {
                $response["data"]["Ganador"] = "NO";

            }

            break;

        /**
        * UserManagement/GetPagoNotaRetiro
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPagoNotaRetiro":


            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $IdNota = $_REQUEST["IdNota"];
            $Clave = $_REQUEST["Clave"];

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            array_push($rules, array("field" => "cuenta_cobro.cuenta_id", "data" => "$IdNota", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $CuentaCobro = new CuentaCobro();
            $cuentas = $CuentaCobro->getCuentasCobroCustom("cuenta_cobro.cuenta_id,cuenta_cobro.usuario_id,cuenta_cobro.usucambio_id,cuenta_cobro.observacion,cuenta_cobro.mensaje_usuario,usuario.login,cuenta_cobro.fecha_crea,cuenta_cobro.valor,cuenta_cobro.mediopago_id,usuario.moneda,cuenta_cobro.puntoventa_id,punto_venta.descripcion puntoventa,cuenta_cobro.mediopago_id, banco.descripcion banco_nombre,cuenta_cobro.estado,usuario_banco.cuenta", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "cuenta_cobro.cuenta_id");

            $cuentas = json_decode($cuentas);


            $final = array();
            foreach ($cuentas->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"cuenta_cobro.cuenta_id"};
                $array["ClientId"] = $value->{"cuenta_cobro.usuario_id"};
                $array["Email"] = $value->{"usuario.login"};
                $array["ClientName"] = $value->{"usuario.login"};
                $array["CreatedDate"] = $value->{"cuenta_cobro.fecha_crea"};

                $array["Stake"] = $value->{"cuenta_cobro.valor"};

                $nombreMetodoPago = 'Efectivo';
                $idMetodoPago = 0;

                $estado = 'Pendiente de Pago';

                if ($value->{"cuenta_cobro.estado"} == "I") {
                    $estado = 'Pagado';
                } elseif ($value->{"cuenta_cobro.estado"} == "R") {
                    $estado = 'Rechazado';
                }

                if ($value->{"banco.banco_nombre"} != '') {
                    $nombreMetodoPago = $value->{"banco.banco_nombre"} . " - " . $value->{"usuario_banco.cuenta"};
                }

                if ($value->{"cuenta_cobro.metodopago_id"} != '') {
                    $idMetodoPago = $value->{"cuenta_cobro.metodopago_id"};
                }

                $array["PaymentSystemName"] = $nombreMetodoPago;
                $array["PaymentSystemId"] = $idMetodoPago;
                $array["TypeName"] = "Payment";

                $array["ToCurrencyId"] = $value->{"cuenta_cobro.moneda"};
                $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["Cashdesk"] = $value->{"punto_venta.descripcion"};
                $array["BetshopId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["BetShopName"] = $value->{"punto_venta.puntoventa"};
                $array["Cashdesk"] = $value->{"punto_venta.puntoventa"};
                $array["RejectUserName"] = $value->{"cuenta_cobro.usurechaza_id"};
                $array["AllowUserName"] = $value->{"cuenta_cobro.usucambio_id"};
                $array["PaidUserName"] = $value->{"cuenta_cobro.usupago_id"};
                $array["Notes"] = $value->{"cuenta_cobro.mensaje_usuario"};
                $array["RejectReason"] = $value->{"cuenta_cobro.observacion"};
                $array["StateName"] = $estado;
                $array["State"] = $value->{"cuenta_cobro.estado"};
                $array["StateId"] = $value->{"cuenta_cobro.estado"};
                $array["Note"] = "";
                $array["ExternalId"] = "";
                $array["PaymentDocumentId"] = "";


                $array2["PaymentDocumentData"] = $array;
                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            $response["data"] = $final;


            break;

        /**
        * UserManagement/GetUserAlerts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetUserAlerts":

            $UsuarioAlerta = new UsuarioAlerta();

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $UsuarioAlerta->getUsuarioAlertasCustom("  usuario_alerta.* ", "usuario_alerta.usualerta_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {


                $array = [];

                $array["Id"] = $value->{"usuario_alerta.usualerta_id"};
                $array["PlayerId"] = $value->{"usuario_alerta.usuario_id"};
                $array["Type"] = $value->{"usuario_alerta.tipo"};
                $array["Query"] = json_decode($value->{"usuario_alerta.valor"});
                $array["Action"] = json_decode($value->{"usuario_alerta.accion"});
                $array["State"] = $value->{"usuario_alerta.estado"};
                $array["ColumnsQ"] = array();
                $array["OperationsQ"] = ['>', '<', '<=', '>=', '==', '=', 'is'];
                $array["ColumnsA"] = array();
                $array["OperationsA"] = ['>', '<', '<=', '>=', '==', '=', 'is'];

                if ($array["State"] == "A") {
                    $array["State"] = true;
                } else {
                    $array["State"] = false;

                }

                $queries = json_decode($array["Query"]);
                foreach ($queries->operands as $query) {
                    $arrayQ = array(
                        "Id" => $query->colName->Id,
                        "Name" => $query->colName->Name
                    );
                    array_push($array["ColumnsQ"], $arrayQ);
                }

                $queries = json_decode($array["Action"]);
                foreach ($queries->operands as $query) {
                    $arrayQ = array(
                        "Id" => $query->colName->Id,
                        "Name" => $query->colName->Name
                    );
                    array_push($array["ColumnsA"], $arrayQ);
                }


                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuariosFinal;

            break;


        /**
        * UserManagement/GetRecargaCredito
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetRecargaCredito":


            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $Id = $_REQUEST["Id"];
            $Cedula = $_REQUEST["Cedula"];

            $Email = $_REQUEST["Email"];

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            if ($Id != "" && $Id != "undefined") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$Id", "op" => "eq"));

            }
            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $Usuario = new Usuario();
            $tickets = $Usuario->getUsuariosCustom(" usuario.usuario_id,usuario.nombre,usuario.moneda ", "usuario.usuario_id", "asc", 0, 1, $json, true);
            $tickets = json_decode($tickets);


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            $response["data"] =
                array(
                    "Id" => $tickets->data[0]->{"usuario.usuario_id"},
                    "Name" => $tickets->data[0]->{"usuario.nombre"},
                    "Moneda" => $tickets->data[0]->{"usuario.moneda"});

            break;


        /**
        * UserManagement/updateStateUserAlert
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/updateStateUserAlert":
            $Id = $params->Id;

            if ($Id != "") {
                $UsuarioAlerta = new UsuarioAlerta($Id);

                if ($UsuarioAlerta->getEstado() == "A") {
                    $UsuarioAlerta->setEstado('I');
                } elseif ($UsuarioAlerta->getEstado() == "I") {
                    $UsuarioAlerta->setEstado('A');
                }

                $UsuarioAlertaMySqlDAO = new UsuarioAlertaMySqlDAO();
                $UsuarioAlertaMySqlDAO->update($UsuarioAlerta);
                $UsuarioAlertaMySqlDAO->getTransaction()->commit();

            }
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;


        case "PromotionalCodes/GetCodes":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CodigoPromocional = new CodigoPromocional();

            $data = $CodigoPromocional->getCodigoPromocionalsCustom("  codigo_promocional.* ", "codigo_promocional.codpromocional_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"codigo_promocional.codpromocional_id"};
                $array["Code"] = $value->{"codigo_promocional.codigo"};
                $array["Name"] = $value->{"codigo_promocional.descripcion"};
                $array["CreatedLocalDate"] = $value->{"codigo_promocional.fecha_crea"};
                $array["State"] = $value->{"codigo_promocional.estado"};
                $array["UserId"] = $value->{"codigo_promocional.usuario_id"};
                $array["Function"] = $value->{"codigo_promocional.funcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "PromotionalCodes/SaveCode":

            $Name = $params->Name;
            $Code = $params->Code;
            $State = $params->State;
            $User = $params->User;
            $Function = $params->Function;

            try {
                $CodigoPromocional = new CodigoPromocional("", "", $Code, $Function);

                $response["HasError"] = true;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "El codigo ya existe.";
                $response["ModelErrors"] = [];


            } catch (Exception $e) {

                if ($e->getCode() == "85") {
                    $CodigoPromocional = new CodigoPromocional();
                    $CodigoPromocional->setEstado($State);
                    $CodigoPromocional->setDescripcion($Name);
                    $CodigoPromocional->setCodigo($Code);
                    $CodigoPromocional->setUsuarioId($User);
                    $CodigoPromocional->setFuncion($Function);
                    $CodigoPromocional->setUsucreaId(0);
                    $CodigoPromocional->setUsumodifId(0);
                    $CodigoPromocional->setLinkId(0);


                    $CodigoPromocionalMySqlDAO = new CodigoPromocionalMySqlDAO();
                    $CodigoPromocionalMySqlDAO->insert($CodigoPromocional);
                    $CodigoPromocionalMySqlDAO->getTransaction()->commit();


                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];


                } else {
                    throw $e;

                }

            }


            break;


        case "Management/GetManagementContact":

            $State = $_REQUEST["State"];
            $CountrySelect = $_REQUEST["CountrySelect"];
            $Names = $_REQUEST["Names"];
            $Phone = $_REQUEST["Phone"];
            $Skype = $_REQUEST["Skype"];
            $Address = $_REQUEST["Address"];
            $Company = $_REQUEST["Company"];
            $Email = $_REQUEST["Email"];
            $Lastname = $_REQUEST["Lastname"];

            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];

            if ($Names != "") {
                array_push($rules, array("field" => "contacto_comercial.nombre", "data" => "$Names", "op" => "cn"));
            }
            if ($Lastname != "") {
                array_push($rules, array("field" => "contacto_comercial.apellido", "data" => "$Lastname", "op" => "cn"));
            }
            if ($Phone != "") {
                array_push($rules, array("field" => "contacto_comercial.telefono", "data" => "$Phone", "op" => "eq"));
            }
            if ($Skype != "") {
                array_push($rules, array("field" => "contacto_comercial.skype", "data" => "$Skype", "op" => "eq"));
            }
            if ($Address != "") {
                array_push($rules, array("field" => "contacto_comercial.direccion", "data" => "$Address", "op" => "eq"));
            }
            if ($Company != "") {
                array_push($rules, array("field" => "contacto_comercial.empresa", "data" => "$Company", "op" => "eq"));
            }
            if ($Email != "") {
                array_push($rules, array("field" => "contacto_comercial.email", "data" => "$Email", "op" => "eq"));
            }
            if ($CountrySelect != "") {
                array_push($rules, array("field" => "contacto_comercial.pais_id", "data" => "$CountrySelect", "op" => "eq"));
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ContactoComercial = new ContactoComercial();

            $contactos = $ContactoComercial->getContactoComercialesCustom("  contacto_comercial.*,pais.*,departamento.* ", "contacto_comercial.fecha_crea", "desc", $SkeepRows, $MaxRows, $json, true);

            $contactos = json_decode($contactos);
            $final = [];

            foreach ($contactos->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"contacto_comercial.contactocom_id"};
                $array["DateTimeCreation"] = $value->{"contacto_comercial.fecha_crea"};
                $array["Lastname"] = $value->{"contacto_comercial.apellidos"};
                $array["Name"] = $value->{"contacto_comercial.nombres"};
                $array["Company"] = $value->{"contacto_comercial.empresa"};
                $array["Email"] = $value->{"contacto_comercial.email"};
                $array["Phone"] = $value->{"contacto_comercial.telefono"};
                $array["Country"] = $value->{"pais.pais_nom"};
                $array["Depto"] = $value->{"departamento.depto_nom"};
                $array["Address"] = $value->{"contacto_comercial.direccion"};
                $array["Skype"] = $value->{"contacto_comercial.skype"};
                $array["Observation"] = $value->{"contacto_comercial.observacion"};
                $array["DateTimeLastModif"] = $value->{"contacto_comercial.fecha_modif"};
                $array["UserLastModification"] = $value->{"contacto_comercial.usumodif_id"};
                $array["State"] = $value->{"contacto_comercial.estado"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $contactos->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Management/GetManagementContactDetails":

            $Id = $_REQUEST["id"];

            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];


            array_push($rules, array("field" => "contacto_comercial_log.contactocom_id", "data" => "$Id", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ContactoComercialLog = new ContactoComercialLog();

            $contactos = $ContactoComercialLog->getContactoComercialesCustom("  contacto_comercial_log.* ", "contacto_comercial_log.contactocomlog_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $contactos = json_decode($contactos);
            $final = [];

            foreach ($contactos->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"contacto_comercial_log.contactocomlog_id"};
                $array["Date"] = $value->{"contacto_comercial_log.fecha"};
                $array["User"] = $value->{"contacto_comercial_log.usuario_id"};
                $array["Text"] = $value->{"contacto_comercial_log.texto"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $contactos->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "ManagementContact/EndManagement":
            $Id = $params->Id;

            if ($Id != "") {
                $ContactoComercial = new ContactoComercial($Id);

                $ContactoComercial->setEstado('I');


                $ContactoComercialMySqlDAO = new ContactoComercialMySqlDAO();
                $ContactoComercialMySqlDAO->update($ContactoComercial);
                $ContactoComercialMySqlDAO->getTransaction()->commit();
            }
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Management/ResponseManagementContact":

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Id = $params->Id;
            $Response = $params->Response;


            if ($Id != "" && $Response != "") {

                $ContactoComercialLog = new ContactoComercialLog();
                $ContactoComercialLog->setContactocomId($Id);
                $ContactoComercialLog->setUsuarioId($UsuarioMandante->getUsuarioMandante());
                $ContactoComercialLog->setTexto($Response);
                $ContactoComercialLog->setMandante(0);
                $ContactoComercialLog->setFecha(date('Y-m-d H:i:s'));

                $ContactoComercialLogMySqlDAO = new ContactoComercialLogMySqlDAO();
                $ContactoComercialLogMySqlDAO->insert($ContactoComercialLog);
                $ContactoComercialLogMySqlDAO->getTransaction()->commit();


            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/GetTypesCenterPositionSelect":

            $Clasificador = new Clasificador();
            $Type = $params->Type;

            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];

            if ($Type == 0) {
                array_push($rules, array("field" => "clasificador.tipo", "data" => "'CONTCENTRO'", "op" => "in"));

            }
            if ($Type == 1) {
                array_push($rules, array("field" => "clasificador.tipo", "data" => "'CONTCARGO'", "op" => "in"));

            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $clasificadores = $Clasificador->getClasificadoresCustom("  clasificador.* ", "clasificador.clasificador_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $clasificadores = json_decode($clasificadores);
            $final = [];

            foreach ($clasificadores->data as $key => $value) {

                $array = [];


                $array["id"] = $value->{"clasificador.clasificador_id"};
                $array["value"] = $value->{"clasificador.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetEmployeesSelect":

            $Empleado = new Empleado();

            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $data = $Empleado->getEmpleadosCustom("  empleado.* ", "empleado.empleado_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = $value->{"empleado.empleado_i"};
                $array["value"] = $value->{"empleado.nombre"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetAreaSelect":


            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Area = new Area();

            $data = $Area->getAreasCustom("  area.* ", "area.area_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = $value->{"area.area_id"};
                $array["value"] = $value->{"area.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetPositionSelect":


            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Cargo = new Cargo();

            $data = $Cargo->getCargosCustom("  cargo.* ", "cargo.cargo_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = $value->{"cargo.cargo_id"};
                $array["value"] = $value->{"cargo.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetAccountsSelect":


            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CuentaContable = new CuentaContable();

            $data = $CuentaContable->getCuentaContablesCustom("  cuenta_contable.* ", "cuenta_contable.cuentacontable_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = $value->{"cuenta_contable.cuentacontable_id"};
                $array["value"] = $value->{"cuenta_contable.referencia"} . " - " . $value->{"cuenta_contable.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetConceptsSelect":


            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Concepto = new Concepto();

            $data = $Concepto->getConceptosCustom("  concepto.* ", "concepto.concepto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = ($value->{"concepto.concepto_id"});
                $array["Id"] = ($value->{"concepto.concepto_id"});
                $array["value"] = $value->{"concepto.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetConceptsIncomesSelect":


            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];
            array_push($rules, array("field" => "concepto.tipo", "data" => "I", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Concepto = new Concepto();

            $data = $Concepto->getConceptosCustom("  concepto.* ", "concepto.concepto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = ($value->{"concepto.concepto_id"});
                $array["Id"] = ($value->{"concepto.concepto_id"});
                $array["value"] = $value->{"concepto.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetConceptsExpensesSelect":


            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];

            array_push($rules, array("field" => "concepto.tipo", "data" => "E", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Concepto = new Concepto();

            $data = $Concepto->getConceptosCustom("  concepto.* ", "concepto.concepto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = ($value->{"concepto.concepto_id"});
                $array["Id"] = ($value->{"concepto.concepto_id"});
                $array["value"] = $value->{"concepto.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetProvidersSelect":


            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ProveedorTercero = new ProveedorTercero();

            $data = $ProveedorTercero->getProveedorTercerosCustom("  proveedor_tercero.* ", "proveedor_tercero.proveedorterc_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["id"] = $value->{"proveedor_tercero.proveedorterc_id"};
                $array["value"] = $value->{"proveedor_tercero.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetTypesCreditCardsSelect":

            $Clasificador = new Clasificador();
            $Type = $params->Type;

            $OrderedItem = 1;
            $SkeepRows = 0;
            $MaxRows = 10000;


            $rules = [];
            array_push($rules, array("field" => "clasificador.tipo", "data" => "'TARJCRED'", "op" => "in"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $clasificadores = $Clasificador->getClasificadoresCustom("  clasificador.* ", "clasificador.clasificador_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $clasificadores = json_decode($clasificadores);
            $final = [];

            foreach ($clasificadores->data as $key => $value) {

                $array = [];


                $array["id"] = $value->{"clasificador.clasificador_id"};
                $array["value"] = $value->{"clasificador.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetAreas":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Area = new Area();

            $data = $Area->getAreasCustom("  area.* ", "area.area_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"area.area_id"};
                $array["Name"] = $value->{"area.descripcion"};
                $array["State"] = $value->{"area.estado"};
                $array["Employees"] = $value->{"area.empleado_id"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetPositions":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Cargo = new Cargo();

            $data = $Cargo->getCargosCustom("  cargo.* ", "cargo.cargo_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"cargo.cargo_id"};
                $array["Name"] = $value->{"cargo.descripcion"};
                $array["State"] = $value->{"cargo.estado"};
                $array["TypePosition"] = $value->{"clasificador.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        /**
        * Accounting/GetTypes
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Accounting/GetTypes":

            $Clasificador = new Clasificador();


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "clasificador.tipo", "data" => "'CONTCENTRO','CONTCARGO'", "op" => "in"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $clasificadores = $Clasificador->getClasificadoresCustom("  clasificador.* ", "clasificador.clasificador_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $clasificadores = json_decode($clasificadores);
            $final = [];

            foreach ($clasificadores->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"clasificador.clasificador_id"};
                $array["Name"] = $value->{"clasificador.descripcion"};
                switch ($value->{"clasificador.tipo"}) {
                    case "CONTCENTRO":
                        $array["Type"] = 0;
                        break;
                    case "CONTCARGO":
                        $array["Type"] = 1;
                        break;
                }
                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetCostCenter":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CentroCosto = new CentroCosto();

            $data = $CentroCosto->getCentroCostosCustom("  centro_costo.*,clasificador.descripcion ", "centro_costo.centrocosto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"centro_costo.centrocosto_id"};
                $array["Name"] = $value->{"centro_costo.descripcion"};
                $array["Code"] = $value->{"centro_costo.codigo"};
                $array["State"] = $value->{"centro_costo.estado"};
                $array["TypeCenter"] = $value->{"clasificador.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetEmployees":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Empleado = new Empleado();

            $data = $Empleado->getEmpleadosCustom("  empleado.* ", "empleado.empleado_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"empleado.empleado_id"};
                $array["Name"] = $value->{"empleado.nombre"};
                $array["Lastname"] = $value->{"empleado.apellido"};
                $array["TypeDocument"] = $value->{"empleado.tipodoc_id"};
                $array["Document"] = $value->{"empleado.documento"};
                $array["Position"] = $value->{"empleado.cargo_id"};
                $array["Area"] = $value->{"empleado.area_id"};
                $array["Salary"] = $value->{"empleado.salario"};
                $array["State"] = $value->{"empleado.estado"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetProvidersThird":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ProveedorTercero = new ProveedorTercero();

            $data = $ProveedorTercero->getProveedorTercerosCustom("  proveedor_tercero.*,pais.pais_nom,mandante.descripcion ", "proveedor_tercero.proveedorterc_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"proveedor_tercero.proveedorterc_id"};
                $array["Name"] = $value->{"proveedor_tercero.descripcion"};
                $array["State"] = $value->{"proveedor_tercero.estado"};
                $array["Nit"] = $value->{"proveedor_tercero.documento"};
                $array["Country"] = $value->{"pais.pais_nom"};

                $array["Partner"] = $value->{"mandante.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetAccounts":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CuentaContable = new CuentaContable();

            $data = $CuentaContable->getCuentaContablesCustom("  cuenta_contable.* ", "cuenta_contable.cuentacontable_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"cuenta_contable.cuentacontable_id"};
                $array["Name"] = $value->{"cuenta_contable.descripcion"};
                $array["State"] = $value->{"cuenta_contable.estado"};
                $array["Reference"] = $value->{"cuenta_contable.referencia"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetConcepts":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Concepto = new Concepto();

            $data = $Concepto->getConceptosCustom("  concepto.*,cuenta_contable.* ", "concepto.concepto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"concepto.concepto_id"};
                $array["Name"] = $value->{"concepto.descripcion"};
                $array["Reference"] = $value->{"concepto.referencia"};
                $array["Account"] = $value->{"concepto.cuentacontable_id"};
                $array["AccountName"] = $value->{"cuenta_contable.descripcion"};
                $array["Type"] = $value->{"concepto.tipo"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetProductsThird":


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ProductoTercero = new ProductoTercero();

            $data = $ProductoTercero->getProductoTercerosCustom("  producto_tercero.* ", "producto_tercero.productoterc_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"producto_tercero.productoterc_id"};
                $array["Name"] = $value->{"producto_tercero.descripcion"};
                $array["State"] = $value->{"producto_tercero.estado"};
                $array["Provider"] = $value->{"producto_tercero.proveedorterc_id"};
                $array["Account"] = $value->{"producto_tercero.cuentacontable_id"};
                $array["AccountExpenses"] = $value->{"producto_tercero.cuentacontableegreso_id"};
                $array["InternalProducts"] = ($value->{"producto_tercero.interno"} == "S") ? 1 : 2;
                $array["TypeInternal"] = $value->{"producto_tercero.tipo_id"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetInitialMoney":
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $dineroInicial = 0;

            if ($_SESSION["win_perfil2"] == "CAJERO") {
                $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");

                $rules = [];
                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
                array_push($rules, array("field" => "ingreso.tipo_id", "data" => $TipoDineroInicial->getClasificadorId(), "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $Ingreso = new Ingreso();

                $data = $Ingreso->getIngresosCustom("  ingreso.* ", "ingreso.ingreso_id", "asc", 0, 1, $json, true);

                $data = json_decode($data);

                foreach ($data->data as $key => $value) {
                    $dineroInicial = $value->{"ingreso.valor"};
                }


            } else {

                $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

                if ($Usuario->fechaCierrecaja == "") {
                    $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");

                    $rules = [];
                    array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
                    array_push($rules, array("field" => "ingreso.tipo_id", "data" => $TipoDineroInicial->getClasificadorId(), "op" => "eq"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);

                    $Ingreso = new Ingreso();

                    $data = $Ingreso->getIngresosCustom("  ingreso.* ", "ingreso.ingreso_id", "asc", 0, 1, $json, true);

                    $data = json_decode($data);

                    foreach ($data->data as $key => $value) {
                        $dineroInicial = $value->{"ingreso.valor"};
                    }

                } else {

                    $rules = [];
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "usuario_cierrecaja.fecha_crea", "data" => strtotime(date("Y-m-d 00:00:00") . ' - 1 days'), "op" => "ge"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);

                    $UsuarioCierrecaja = new UsuarioCierrecaja();

                    $data = $UsuarioCierrecaja->getUsuarioCierrecajasCustom("  usuario.login,usuario_cierrecaja.* ", "usuario_cierrecaja.usucierrecaja_id", "asc", 0, 10, $json, true);

                    $data = json_decode($data);

                    foreach ($data->data as $key => $value) {

                        $array = [];


                        $array["Id"] = $value->{"usuario_cierrecaja.usucierrecaja_id"};
                        $array["User"] = $value->{"usuario_cierrecaja.usuario_id"};
                        $array["UserName"] = $value->{"usuario.login"};
                        $array["Date"] = date('Y-m-d', strtotime($value->{"usuario_cierrecaja.fecha_cierre"}));
                        $array["AmountBegin"] = $value->{"usuario_cierrecaja.dinero_inicial"};
                        $array["ProperIncomes"] = $value->{"usuario_cierrecaja.ingresos_propios"};
                        $array["ProperExpenses"] = $value->{"usuario_cierrecaja.egresos_propios"};
                        $array["ProductsIncomes"] = $value->{"usuario_cierrecaja.ingresos_productos"};
                        $array["ProductsExpenses"] = $value->{"usuario_cierrecaja.egresos_productos"};
                        $array["OthersIncomes"] = $value->{"usuario_cierrecaja.ingresos_otros"};
                        $array["OthersExpenses"] = $value->{"usuario_cierrecaja.egresos_otros"};
                        $array["Total"] = $array["AmountBegin"] + $array["ProperIncomes"] + $array["ProductsIncomes"] + $array["OthersIncomes"]
                            - $array["ProperExpenses"] - $array["ProductsExpenses"] - $array["OthersExpenses"];

                        $dineroInicial = $array["Total"];

                    }
                }


            }

            $dineroInicial = floatval($dineroInicial);


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $dineroInicial;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = 0;
            $response["data"] = $dineroInicial;

            break;


        case "Accounting/GetProductsByBetShop":


            $BetShopId = $params->BetShopId;
            $State = $params->State;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
            array_push($rules, array("field" => "producto_tercero.interno", "data" => "N", "op" => "eq"));


            if ($BetShopId != "") {
                $Usuario = new Usuario($BetShopId);
                array_push($rules, array("field" => "usuario.usuario_id", "data" => $Usuario->puntoventaId, "op" => "eq"));
            }
            if ($State != "") {
                array_push($rules, array("field" => "productotercero_usuario.estado", "data" => "A", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ProductoTercero = new ProductoTercero();

            $data = $ProductoTercero->getProductoTercerosXUsuarioCustom(" usuario.login,usuario.usuario_id, producto_tercero.*,productotercero_usuario.* ", "producto_tercero.productoterc_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"productotercero_usuario.prodtercusuario_id"};
                $array["BetShop"] = $value->{"usuario.login"};
                $array["Product"] = $value->{"producto_tercero.descripcion"};
                $array["StateSwitch"] = ($value->{"productotercero_usuario.estado"} == "A") ? 1 : 0;
                $array["BetShopId"] = $value->{"usuario.usuario_id"};
                $array["ProductId"] = $value->{"producto_tercero.productoterc_id"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = oldCount($final);
            $response["data"] = $final;

            break;


        case "Accounting/GetIncomes":
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $CreditCards = $_REQUEST["CreditCards"];
            $Nivel = $_REQUEST["Nivel"];
            $Consecutive = $_REQUEST["Consecutive"];


            if ($_REQUEST["dateTo"] != "") {
                $dateTo = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +0 day' . $timezone . ' hour '));
            }

            if ($_REQUEST["dateFrom"] != "") {
                $dateFrom = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }


            if ($dateFrom == "") {
                $dateFrom = date("Y-m-d 00:00:00", strtotime(time() . $timezone . ' hour '));
            }
            if ($dateTo == "") {
                $dateTo = date("Y-m-d 23:59:59", strtotime(time() . ' +0 day' . $timezone . ' hour '));

            }


            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            if ($Nivel != "C") {
                //array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

            }


            if ($Consecutive != "") {
                $base = explode("I", $Consecutive)[1];
                $usuario = explode("-", $base)[0];
                $consecutivo = explode("-", $base)[1];
                array_push($rules, array("field" => "ingreso.consecutivo", "data" => $consecutivo, "op" => "eq"));
                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $usuario, "op" => "eq"));

            }


            if ($dateFrom != "") {
                array_push($rules, array("field" => "ingreso.fecha_crea", "data" => "$dateFrom", "op" => "ge"));

            }
            if ($dateTo != "") {
                array_push($rules, array("field" => "ingreso.fecha_crea", "data" => "$dateTo", "op" => "le"));

            }

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } elseif ($_SESSION["win_perfil2"] == "CAJERO") {
                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }
                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario_punto.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario_punto.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Ingreso = new Ingreso();

            $data = $Ingreso->getIngresosCustom("  ingreso.*,producto_tercero.*,usuario_punto.nombre,usuario_punto.login,usuario_cajero.nombre,usuario_cajero.login,cuenta_producto.*,cuenta_concepto.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"ingreso.ingreso_id"};
                $array["Consecutive"] = "I" . $value->{"ingreso.usuario_id"} . "-" . $value->{"ingreso.consecutivo"};
                $array["BetShop"] = $value->{"usuario_punto.nombre"};
                $array["UserCreated"] = $value->{"usuario_cajero.nombre"};
                $array["Description"] = $value->{"ingreso.descripcion"};


                $array["Concept"] = $value->{"concepto.descripcion"};
                $array["Account"] = "";
                $array["Reference"] = $value->{"ingreso.documento"};

                if ($value->{"ingreso.productoterc_id"} != "" && $value->{"ingreso.productoterc_id"} != "0") {
                    $array["Description"] = $value->{"producto_tercero.descripcion"};
                    $array["Account"] = $value->{"cuenta_producto.referencia"};

                }

                if ($value->{"ingreso.concepto_id"} != "" && $value->{"ingreso.concepto_id"} != "0") {
                    $array["Account"] = $value->{"cuenta_concepto.referencia"};

                }
                $array["Amount"] = $value->{"ingreso.valor"};
                $array["Tax"] = 0;
                $array["Retraction"] = 0;
                $array["CreatedLocalDate"] = $value->{"ingreso.fecha_crea"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetExpenses":
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $CreditCards = $_REQUEST["CreditCards"];
            $Nivel = $_REQUEST["Nivel"];
            $Consecutive = $_REQUEST["Consecutive"];


            if ($_REQUEST["dateTo"] != "") {
                $dateTo = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +0 day' . $timezone . ' hour '));
            }

            if ($_REQUEST["dateFrom"] != "") {
                $dateFrom = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }


            if ($dateFrom == "") {
                $dateFrom = date("Y-m-d 00:00:00", strtotime(time() . $timezone . ' hour '));
            }
            if ($dateTo == "") {
                $dateTo = date("Y-m-d 23:59:59", strtotime(time() . ' +0 day' . $timezone . ' hour '));

            }


            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            if ($Nivel != "C") {
                //array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

            }


            if ($Consecutive != "") {
                $base = explode("E", $Consecutive)[1];
                $usuario = explode("-", $base)[0];
                $consecutivo = explode("-", $base)[1];
                array_push($rules, array("field" => "egreso.consecutivo", "data" => $consecutivo, "op" => "eq"));
                array_push($rules, array("field" => "egreso.usuario_id", "data" => $usuario, "op" => "eq"));

            }


            if ($dateFrom != "") {
                array_push($rules, array("field" => "egreso.fecha_crea", "data" => "$dateFrom", "op" => "ge"));

            }
            if ($dateTo != "") {
                array_push($rules, array("field" => "egreso.fecha_crea", "data" => "$dateTo", "op" => "le"));

            }

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "egreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } elseif ($_SESSION["win_perfil2"] == "CAJERO") {
                array_push($rules, array("field" => "egreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }
                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario_punto.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario_punto.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Egreso = new Egreso();

            $data = $Egreso->getEgresosCustom("  egreso.*,producto_tercero.*,usuario_punto.nombre,usuario_punto.login,usuario_cajero.nombre,usuario_cajero.login,cuenta_producto.*,cuenta_concepto.* ", "egreso.egreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];
                $array = [];


                $array["Id"] = $value->{"egreso.egreso_id"};
                $array["Consecutive"] = "E" . $value->{"egreso.usuario_id"} . "-" . $value->{"egreso.consecutivo"};
                $array["BetShop"] = $value->{"usuario_punto.nombre"};
                $array["UserCreated"] = $value->{"usuario_cajero.nombre"};
                $array["Description"] = $value->{"egreso.descripcion"};


                $array["Concept"] = $value->{"concepto.descripcion"};
                $array["Account"] = "";
                $array["Reference"] = $value->{"egreso.documento"};

                if ($value->{"egreso.productoterc_id"} != "" && $value->{"egreso.productoterc_id"} != "0") {
                    $array["Description"] = $value->{"producto_tercero.descripcion"};
                    $array["Account"] = $value->{"cuenta_producto.referencia"};

                }

                if ($value->{"egreso.concepto_id"} != "" && $value->{"egreso.concepto_id"} != "0") {
                    $array["Account"] = $value->{"cuenta_concepto.referencia"};

                }
                $array["Amount"] = $value->{"egreso.valor"};
                $array["Tax"] = 0;
                $array["Retraction"] = 0;
                $array["CreatedLocalDate"] = $value->{"egreso.fecha_crea"};


                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetExpensesToday":

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "egreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "egreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            }

            array_push($rules, array("field" => "egreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
            array_push($rules, array("field" => "egreso.tipo_id", "data" => "0", "op" => "eq"));
            array_push($rules, array("field" => "egreso.productoterc_id", "data" => "0", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Egreso = new Egreso();

            $data = $Egreso->getEgresosCustom("  egreso.* ", "egreso.egreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"egreso.egreso_id"};
                $array["Description"] = $value->{"egreso.descripcion"};
                $array["Concept"] = $value->{"egreso.concepto_id"};
                $array["Reference"] = $value->{"egreso.documento"};
                $array["Value"] = $value->{"egreso.valor"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetIncomesToday":

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            }
            array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
            array_push($rules, array("field" => "ingreso.tipo_id", "data" => "0", "op" => "eq"));
            array_push($rules, array("field" => "egreso.productoterc_id", "data" => "0", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Ingreso = new Ingreso();

            $data = $Ingreso->getIngresosCustom("  ingreso.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"ingreso.ingreso_id"};
                $array["Description"] = $value->{"ingreso.descripcion"};
                $array["Concept"] = $value->{"ingreso.concepto_id"};
                $array["Reference"] = $value->{"ingreso.documento"};
                $array["Value"] = $value->{"ingreso.valor"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetIncomesCreditCardsToday":

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];


            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            }

            array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
            array_push($rules, array("field" => "clasificador.tipo", "data" => "TARJCRED", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Ingreso = new Ingreso();

            $data = $Ingreso->getIngresosCustom("  ingreso.*,clasificador.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Date"] = $value->{"ingreso.fecha_crea"};
                $array["Id"] = $value->{"ingreso.ingreso_id"};
                $array["Description"] = $value->{"ingreso.descripcion"};
                $array["Concept"] = $value->{"ingreso.concepto_id"};
                $array["Reference"] = $value->{"ingreso.documento"};
                $array["Value"] = $value->{"ingreso.valor"};
                $array["Type"] = $value->{"clasificador.descripcion"};

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetProductsPlatformByBetShopToday":

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
            $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            }
            array_push($rules, array("field" => "it_ticket_enc.fecha_crea", "data" => date("Y-m-d"), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ItTicketEnc = new ItTicketEnc();

            $data = $ItTicketEnc->getTicketsCustom("  SUM(it_ticket_enc.vlr_apuesta) vlr_apuesta, usuario.puntoventa_id ", "usuario.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];
            $array = [];


            $array["Id"] = 0;
            $array["Product"] = "Doradobet Tickets";
            $array["Bets"] = 0;
            $array["Prize"] = 0;

            foreach ($data->data as $key => $value) {
                if ($value->{".vlr_apuesta"} == "") {
                    $value->{".vlr_apuesta"} = 0;
                }
                $array["Bets"] = $value->{".vlr_apuesta"};
            }

            $rules = [];

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

            }
            array_push($rules, array("field" => "it_ticket_enc.fecha_pago", "data" => date("Y-m-d"), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ItTicketEnc = new ItTicketEnc();

            $data = $ItTicketEnc->getTicketsCustom("  SUM(it_ticket_enc.vlr_premio) vlr_premio, usuario.puntoventa_id ", "usuario.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);


            foreach ($data->data as $key => $value) {
                if ($value->{".vlr_premio"} == "") {
                    $value->{".vlr_premio"} = 0;
                }
                $array["Prize"] = $value->{".vlr_premio"};
            }
            array_push($final, $array);

            $rules = [];

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {

                array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            }
            array_push($rules, array("field" => "DATE_FORMAT(cuenta_cobro.fecha_pago,'%Y-%m-%d') ", "data" => date("Y-m-d"), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CuentaCobro = new CuentaCobro();

            $data = $CuentaCobro->getCuentasCobroCustom("  SUM(cuenta_cobro.valor) total, usuario_punto.puntoventa_id ", "usuario_punto.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $data = json_decode($data);

            $array = [];


            $array["Id"] = 0;
            $array["Product"] = "Doradobet Recargas - Pago Notas";
            $array["Bets"] = 0;
            $array["Prize"] = 0;

            foreach ($data->data as $key => $value) {
                if ($value->{".total"} == "") {
                    $value->{".total"} = 0;
                }
                $array["Bets"] = $value->{".total"};
            }

            $rules = [];

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            }
            array_push($rules, array("field" => "DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d') ", "data" => date("Y-m-d"), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsuarioRecarga = new UsuarioRecarga();

            $data = $UsuarioRecarga->getUsuarioRecargasCustom("  SUM(usuario_recarga.valor) total, usuario_punto.puntoventa_id ", "usuario_punto.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);


            foreach ($data->data as $key => $value) {
                if ($value->{".total"} == "") {
                    $value->{".total"} = 0;
                }
                $array["Prize"] = $value->{".total"};
            }

            array_push($final, $array);


            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {


                $rules = [];
                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $Usuario->puntoventaId, "op" => "eq"));
                array_push($rules, array("field" => "producto_tercero.interno", "data" => "N", "op" => "eq"));
                // array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "ne"));
                array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $Ingreso = new Ingreso();

                $data = $Ingreso->getIngresosCustom("  ingreso.*,producto_tercero.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $data = json_decode($data);

                $rules = [];
                array_push($rules, array("field" => "egreso.usuario_id", "data" => $Usuario->puntoventaId, "op" => "eq"));
                array_push($rules, array("field" => "producto_tercero.interno", "data" => "N", "op" => "eq"));
                // array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "ne"));
                array_push($rules, array("field" => "egreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $Egreso = new Egreso();

                $data2 = $Egreso->getEgresosCustom("  egreso.*,producto_tercero.* ", "egreso.egreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $data2 = json_decode($data2);


                foreach ($data->data as $key => $value) {
                    $array = [];


                    $array["Id"] = 0;
                    $array["Product"] = $value->{"producto_tercero.descripcion"};
                    $array["Bets"] = $value->{"ingreso.valor"};
                    $array["Prize"] = 0;

                    foreach ($data2->data as $key2 => $value2) {

                        if ($value->{"producto_tercero.productoterc_id"} == $value2->{"producto_tercero.productoterc_id"} && $value->{"egreso.usucajero_id"} == $value2->{"ingreso.usucajero_id"}) {
                            $array["Prize"] = $value2->{"egreso.valor"};

                        }
                        $value2->ingreso = true;
                    }

                    if ($array["Bets"] != 0 || $array["Prize"] != 0) {
                        array_push($final, $array);
                    }

                }

                foreach ($data2->data as $key2 => $value2) {

                    if (!$value2->ingreso) {

                        $array = [];


                        $array["Id"] = 0;
                        $array["Product"] = $value->{"producto_tercero.descripcion"};
                        $array["Bets"] = 0;
                        $array["Prize"] = $value2->{"egreso.valor"};


                        if ($array["Bets"] != 0 || $array["Prize"] != 0) {
                            array_push($final, $array);
                        }
                    }

                }

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $clasificadores->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetSquareDayReport2":

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Id = $params->Id;

            $Nivel = $_REQUEST["Nivel"];
            $BetShopId = $_REQUEST["BetShopId"];

            if ($_REQUEST["dateTo"] != "") {
                $dateTo = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +0 day' . $timezone . ' hour '));
            }

            if ($_REQUEST["dateFrom"] != "") {
                $dateFrom = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }


            if ($dateFrom == "") {
                $dateFrom = date("Y-m-d 00:00:00", strtotime(time() . $timezone . ' hour '));
            }
            if ($dateTo == "") {
                $dateTo = date("Y-m-d 23:59:59", strtotime(time() . ' +0 day' . $timezone . ' hour '));

            }


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            if ($Nivel != "C") {
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));
            }

            if ($BetShopId != "") {
                array_push($rules, array("field" => "usuario_cierrecaja.usuario_id", "data" => $BetShopId, "op" => "eq"));
            }


            if ($dateFrom != "") {
                array_push($rules, array("field" => "usuario_cierrecaja.fecha_cierre", "data" => "$dateFrom", "op" => "ge"));

            }
            if ($dateTo != "") {
                array_push($rules, array("field" => "usuario_cierrecaja.fecha_cierre", "data" => "$dateTo", "op" => "le"));

            }

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } elseif ($_SESSION["win_perfil2"] == "CAJERO") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }
                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
            }

            // array_push($rules, array("field" => "egreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            //array_push($rules, array("field" => "egreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsuarioCierrecaja = new UsuarioCierrecaja();

            $data = $UsuarioCierrecaja->getUsuarioCierrecajasCustom("  usuario.login,usuario_cierrecaja.* ", "usuario_cierrecaja.usucierrecaja_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"usuario_cierrecaja.usucierrecaja_id"};
                $array["User"] = $value->{"usuario_cierrecaja.usuario_id"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["Date"] = date('Y-m-d', strtotime($value->{"usuario_cierrecaja.fecha_cierre"}));
                $array["AmountBegin"] = $value->{"usuario_cierrecaja.dinero_inicial"};
                $array["ProperIncomes"] = $value->{"usuario_cierrecaja.ingresos_propios"};
                $array["ProperExpenses"] = $value->{"usuario_cierrecaja.egresos_propios"};
                $array["ProductsIncomes"] = $value->{"usuario_cierrecaja.ingresos_productos"};
                $array["ProductsExpenses"] = $value->{"usuario_cierrecaja.egresos_productos"};
                $array["OthersIncomes"] = $value->{"usuario_cierrecaja.ingresos_otros"};
                $array["OthersExpenses"] = $value->{"usuario_cierrecaja.egresos_otros"};
                $array["Total"] = $array["AmountBegin"] + $array["ProperIncomes"] + $array["ProductsIncomes"] + $array["OthersIncomes"]
                    - $array["ProperExpenses"] - $array["ProductsExpenses"] - $array["OthersExpenses"];

                array_push($final, $array);


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetDetailsSquareDay":

            $TipoTickets = new Clasificador("", "ACCBETTICKET");
            $TipoPremios = new Clasificador("", "ACCWINTICKET");
            $TipoNotasRetiros = new Clasificador("", "ACCPAYWD");
            $TipoRecargas = new Clasificador("", "ACCREC");
            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");


            $response["Data"] = array();
            $total = 0;
            $fecha = "";


            $id = $_REQUEST["id"];


            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Id = $params->Id;
            $usuarioId = 0;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            array_push($rules, array("field" => "usuario_cierrecaja.usucierrecaja_id", "data" => $id, "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsuarioCierrecaja = new UsuarioCierrecaja();

            $data = $UsuarioCierrecaja->getUsuarioCierrecajasCustom("  usuario.login,usuario_cierrecaja.* ", "usuario_cierrecaja.usucierrecaja_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"usuario_cierrecaja.usucierrecaja_id"};
                $array["User"] = $value->{"usuario_cierrecaja.usuario_id"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["Date"] = date('Y-m-d', strtotime($value->{"usuario_cierrecaja.fecha_cierre"}));
                $array["AmountBegin"] = $value->{"usuario_cierrecaja.dinero_inicial"};
                $array["ProperIncomes"] = $value->{"usuario_cierrecaja.ingresos_propios"};
                $array["ProperExpenses"] = $value->{"usuario_cierrecaja.egresos_propios"};
                $array["ProductsIncomes"] = $value->{"usuario_cierrecaja.ingresos_productos"};
                $array["ProductsExpenses"] = $value->{"usuario_cierrecaja.egresos_productos"};
                $array["OthersIncomes"] = $value->{"usuario_cierrecaja.ingresos_otros"};
                $array["OthersExpenses"] = $value->{"usuario_cierrecaja.egresos_otros"};
                $array["Total"] = $array["AmountBegin"] + $array["ProperIncomes"] + $array["ProductsIncomes"] + $array["OthersIncomes"]
                    - $array["ProperExpenses"] - $array["ProductsExpenses"] - $array["OthersExpenses"];

                array_push($final, $array);

                $fecha = $array["Date"];
                $usuarioId = $value->{"usuario_cierrecaja.usuario_id"};


            }
            $response["Data"]["SquareDay"] = $final;
            $response["Data"]["Products"] = array();
            $response["Data"]["Incomes"] = array();
            $response["Data"]["Expenses"] = array();
            $response["Data"]["Tickets"] = array();
            $response["Data"]["Deposit"] = array();
            $response["Data"]["Withdraw"] = array();

            $UsuarioPerfil = new UsuarioPerfil($usuarioId);


            $SkeepRows = 0;
            $OrderedItem = 1;
            $MaxRows = 1000;


            $rules = [];
            $grouping = "";


            if ($UsuarioPerfil->getPerfilId() == "PUNTOVENTA") {

                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $usuarioId, "op" => "eq"));
            } else {
                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $usuarioId, "op" => "eq"));
            }

            array_push($rules, array("field" => "DATE_FORMAT(ingreso.fecha_crea,'%Y-%m-%d')", "data" => $fecha, "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Ingreso = new Ingreso();

            $data = $Ingreso->getIngresosCustom("  ingreso.*,producto_tercero.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"ingreso.ingreso_id"};
                $array["Description"] = $value->{"ingreso.descripcion"};

                if ($value->{"producto_tercero.descripcion"} != "") {
                    $array["ProductId"] = $value->{"producto_tercero.productoterc_id"};
                    $array["Description"] = $value->{"producto_tercero.descripcion"};

                }

                $array["Reference"] = $value->{"ingreso.documento"};
                $array["Amount"] = $value->{"ingreso.valor"};

                if ($value->{"producto_tercero.descripcion"} != "") {
                    $total = $total + $array["Amount"];

                    if ($value->{"producto_tercero.interno"} == "S") {

                        $Tipo = new Clasificador($value->{"producto_tercero.tipo_id"});

                        // switch ($Tipo->getAbreviado()) {
                        switch ($value->{"producto_tercero.tipo_id"}) {

                            case $TipoTickets->getClasificadorId():
                                $array["Description"] = "Tickets";
                                $array["AmountWin"] = 0;
                                array_push($response["Data"]["Tickets"], $array);

                                break;

                            case $TipoPremios->getClasificadorId():

                                break;

                            case $TipoNotasRetiros->getClasificadorId():

                                break;

                            case $TipoRecargas->getClasificadorId():
                                $array["Description"] = "Recargas";
                                array_push($response["Data"]["Deposit"], $array);

                                break;

                        }
                    } else {


                        $array["AmountWin"] = 0;

                        $encontroProducto = false;
                        foreach ($response["Data"]["Products"] as $key => $product) {

                            if ($product["ProductId"] == $array["ProductId"]) {
                                $response["Data"]["Products"][$key]["Amount"] = $response["Data"]["Products"][$key]["Amount"] + $array["Amount"];

                                $encontroProducto = true;

                            }
                        }
                        if (!$encontroProducto) {
                            array_push($response["Data"]["Products"], $array);
                        }

                    }

                } else {
                    if ($value->{"ingreso.tipo_id"} != "0") {

                        if ($TipoDineroInicial->getClasificadorId() == $value->{"ingreso.tipo_id"}) {
                            $dineroInicial = $value->{"ingreso.valor"};
                        }


                        $Tipo = new Clasificador($value->{"ingreso.tipo_id"});

                        switch ($Tipo->getTipo()) {
                            case "TARJCRED":
                                $otrosIngresosTarjetasCreditos += $array["Amount"];
                                break;
                        }

                    } else {
                        array_push($response["Data"]["Incomes"], $array);
                        $otrosIngresos += $array["Amount"];
                    }

                }


            }
            $total = $total + $otrosIngresos;

            $rules = [];
            $grouping = "";


            if ($UsuarioPerfil->getPerfilId() == "PUNTOVENTA") {

                array_push($rules, array("field" => "egreso.usuario_id", "data" => $usuarioId, "op" => "eq"));
            } else {
                array_push($rules, array("field" => "egreso.usucajero_id", "data" => $usuarioId, "op" => "eq"));
            }

            array_push($rules, array("field" => "DATE_FORMAT(egreso.fecha_crea,'%Y-%m-%d')", "data" => $fecha, "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Egreso = new Egreso();

            $data = $Egreso->getEgresosCustom("  egreso.*,producto_tercero.* ", "egreso.egreso_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"egreso.ingreso_id"};
                $array["Description"] = $value->{"egreso.descripcion"};

                if ($value->{"producto_tercero.descripcion"} != "") {
                    $array["ProductId"] = $value->{"producto_tercero.productoterc_id"};
                    $array["Description"] = $value->{"producto_tercero.descripcion"};

                }

                $array["Reference"] = $value->{"egreso.documento"};
                $array["Amount"] = $value->{"egreso.valor"};


                if ($value->{"producto_tercero.descripcion"} != "") {

                    $total = $total - $array["Amount"];

                    if ($value->{"producto_tercero.interno"} == "S") {

                        $Tipo = new Clasificador($value->{"producto_tercero.tipo_id"});

                        // switch ($Tipo->getAbreviado()) {
                        switch ($value->{"producto_tercero.tipo_id"}) {

                            case $TipoTickets->getClasificadorId():

                                break;

                            case $TipoPremios->getClasificadorId():
                                $response["Data"]["Tickets"][0]["AmountWin"] = $array["Amount"];

                                break;

                            case $TipoNotasRetiros->getClasificadorId():
                                $array["Description"] = "Pago Notas de Retiro";
                                array_push($response["Data"]["Withdraw"], $array);

                                break;

                            case $TipoRecargas->getClasificadorId():

                                break;
                            case "ACCWINTICKET":
                                $response["Data"]["Tickets"][0]["AmountWin"] = $array["Amount"];

                                break;
                            case "ACCPAYWD":
                                $array["Description"] = "Pago Notas de Retiro";
                                array_push($response["Data"]["Withdraw"], $array);

                                break;
                        }
                    } else {
                        $encontroProducto = false;
                        foreach ($response["Data"]["Products"] as $key => $product) {

                            if ($product["ProductId"] == $array["ProductId"]) {
                                $response["Data"]["Products"][$key]["AmountWin"] = $response["Data"]["Products"][$key]["AmountWin"] + $array["Amount"];

                                $encontroProducto = true;

                            }
                        }
                        if (!$encontroProducto) {
                            $array["AmountWin"] = $array["Amount"];
                            $array["Amount"] = 0;

                            array_push($response["Data"]["Products"], $array);
                        }
                    }


                } else {

                    if ($value->{"egreso.tipo_id"} != "0") {
                        $Tipo = new Clasificador($value->{"egreso.tipo_id"});

                        switch ($Tipo->getAbreviado()) {
                            case "ACCWINTICKET":
                                $response["Data"]["Tickets"][0]["AmountWin"] = $array["Amount"];

                                break;
                            case "ACCPAYWD":
                                $array["Description"] = "Pago Notas de Retiro";
                                array_push($response["Data"]["Withdraw"], $array);

                                break;
                        }

                    } else {
                        array_push($response["Data"]["Expenses"], $array);
                        $otrosEgresos += $value->{"egreso.valor"};

                    }


                }


            }

            $total = $total - $otrosEgresos;

            $total = $total + $dineroInicial;

            $response["Data"]["Total"] = $total;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;

        case "Accounting/GetDetailsSquareDayPDF":

            $TipoTickets = new Clasificador("", "ACCBETTICKET");
            $TipoPremios = new Clasificador("", "ACCWINTICKET");
            $TipoNotasRetiros = new Clasificador("", "ACCPAYWD");
            $TipoRecargas = new Clasificador("", "ACCREC");
            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");


            $response["Data"] = array();
            $total = 0;
            $fecha = "";
            $usuarioId = 0;

            $ingresosProductos = 0;
            $egresosProductos = 0;
            $otrosIngresosTarjetasCreditos = 0;
            $otrosIngresos = 0;
            $otrosEgresos = 0;
            $dineroInicial = 0;

            $id = $_REQUEST["id"];


            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Id = $params->Id;
            $id = $Id;
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            array_push($rules, array("field" => "usuario_cierrecaja.usucierrecaja_id", "data" => $id, "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsuarioCierrecaja = new UsuarioCierrecaja();

            $data = $UsuarioCierrecaja->getUsuarioCierrecajasCustom("  usuario.login,usuario_cierrecaja.* ", "usuario_cierrecaja.usucierrecaja_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"usuario_cierrecaja.usucierrecaja_id"};
                $array["User"] = $value->{"usuario_cierrecaja.usuario_id"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["Date"] = date('Y-m-d', strtotime($value->{"usuario_cierrecaja.fecha_cierre"}));
                $array["AmountBegin"] = $value->{"usuario_cierrecaja.dinero_inicial"};
                $array["ProperIncomes"] = $value->{"usuario_cierrecaja.ingresos_propios"};
                $array["ProperExpenses"] = $value->{"usuario_cierrecaja.egresos_propios"};
                $array["ProductsIncomes"] = $value->{"usuario_cierrecaja.ingresos_productos"};
                $array["ProductsExpenses"] = $value->{"usuario_cierrecaja.egresos_productos"};
                $array["OthersIncomes"] = $value->{"usuario_cierrecaja.ingresos_otros"};
                $array["OthersExpenses"] = $value->{"usuario_cierrecaja.egresos_otros"};
                $array["Total"] = $array["AmountBegin"] + $array["ProperIncomes"] + $array["ProductsIncomes"] + $array["OthersIncomes"]
                    - $array["ProperExpenses"] - $array["ProductsExpenses"] - $array["OthersExpenses"];

                array_push($final, $array);

                $fecha = $array["Date"];
                $usuarioId = $value->{"usuario_cierrecaja.usuario_id"};

                $total = $array["AmountBegin"];


            }
            $response["Data"]["SquareDay"] = $final;
            $response["Data"]["Products"] = array();
            $response["Data"]["Incomes"] = array();
            $response["Data"]["Expenses"] = array();
            $response["Data"]["Tickets"] = array();
            $response["Data"]["Deposit"] = array();
            $response["Data"]["Withdraw"] = array();

            $SkeepRows = 0;
            $OrderedItem = 1;
            $MaxRows = 1000;

            $UsuarioPerfil = new UsuarioPerfil($usuarioId);
            $Usuario = new Usuario($usuarioId);

            $rules = [];
            $grouping = "";


            if ($UsuarioPerfil->getPerfilId() == "PUNTOVENTA") {

                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $usuarioId, "op" => "eq"));
            } else {
                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $usuarioId, "op" => "eq"));
            }

            array_push($rules, array("field" => "DATE_FORMAT(ingreso.fecha_crea,'%Y-%m-%d')", "data" => $fecha, "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Ingreso = new Ingreso();

            $data = $Ingreso->getIngresosCustom("  ingreso.*,producto_tercero.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"ingreso.ingreso_id"};
                $array["Description"] = $value->{"ingreso.descripcion"};

                if ($value->{"producto_tercero.descripcion"} != "") {
                    $array["ProductId"] = $value->{"producto_tercero.productoterc_id"};
                    $array["Description"] = $value->{"producto_tercero.descripcion"};

                }

                $array["Reference"] = $value->{"ingreso.documento"};
                $array["Amount"] = $value->{"ingreso.valor"};

                if ($value->{"producto_tercero.descripcion"} != "") {

                    if ($value->{"producto_tercero.interno"} == "S") {

                        $Tipo = new Clasificador($value->{"producto_tercero.tipo_id"});

                        // switch ($Tipo->getAbreviado()) {
                        switch ($value->{"producto_tercero.tipo_id"}) {

                            case $TipoTickets->getClasificadorId():
                                $array["Description"] = "Tickets";
                                $array["AmountWin"] = 0;
                                array_push($response["Data"]["Tickets"], $array);

                                break;

                            case $TipoPremios->getClasificadorId():

                                break;

                            case $TipoNotasRetiros->getClasificadorId():

                                break;

                            case $TipoRecargas->getClasificadorId():
                                $array["Description"] = "Recargas";
                                array_push($response["Data"]["Deposit"], $array);

                                break;

                        }
                    } else {
                        $array["AmountWin"] = 0;

                        $encontroProducto = false;
                        foreach ($response["Data"]["Products"] as $key => $product) {

                            if ($product["ProductId"] == $array["ProductId"]) {
                                $response["Data"]["Products"][$key]["Amount"] = $response["Data"]["Products"][$key]["Amount"] + $array["Amount"];

                                $encontroProducto = true;

                            }
                        }
                        if (!$encontroProducto) {
                            array_push($response["Data"]["Products"], $array);
                        }
                    }

                } else {
                    if ($value->{"ingreso.tipo_id"} != "0") {

                        if ($TipoDineroInicial->getClasificadorId() == $value->{"ingreso.tipo_id"}) {
                            $dineroInicial = $value->{"ingreso.valor"};
                        }


                        $Tipo = new Clasificador($value->{"ingreso.tipo_id"});

                        switch ($Tipo->getTipo()) {
                            case "TARJCRED":
                                $otrosIngresosTarjetasCreditos += $array["Amount"];
                                break;
                        }

                    } else {
                        array_push($response["Data"]["Incomes"], $array);
                        $otrosIngresos += $array["Amount"];
                    }

                }

                $total = $total + $array["Amount"];

            }

            $rules = [];
            $grouping = "";


            if ($UsuarioPerfil->getPerfilId() == "PUNTOVENTA") {

                array_push($rules, array("field" => "egreso.usuario_id", "data" => $usuarioId, "op" => "eq"));
            } else {
                array_push($rules, array("field" => "egreso.usucajero_id", "data" => $usuarioId, "op" => "eq"));
            }

            array_push($rules, array("field" => "DATE_FORMAT(egreso.fecha_crea,'%Y-%m-%d')", "data" => $fecha, "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Egreso = new Egreso();

            $data = $Egreso->getEgresosCustom("  egreso.*,producto_tercero.* ", "egreso.egreso_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"egreso.ingreso_id"};
                $array["Description"] = $value->{"egreso.descripcion"};

                if ($value->{"producto_tercero.descripcion"} != "") {
                    $array["ProductId"] = $value->{"producto_tercero.productoterc_id"};
                    $array["Description"] = $value->{"producto_tercero.descripcion"};

                }

                $array["Reference"] = $value->{"egreso.documento"};
                $array["Amount"] = $value->{"egreso.valor"};


                $total = $total - $array["Amount"];

                if ($value->{"producto_tercero.descripcion"} != "") {
                    if ($value->{"producto_tercero.interno"} == "S") {

                        $Tipo = new Clasificador($value->{"producto_tercero.tipo_id"});

                        // switch ($Tipo->getAbreviado()) {
                        switch ($value->{"producto_tercero.tipo_id"}) {

                            case $TipoTickets->getClasificadorId():

                                break;

                            case $TipoPremios->getClasificadorId():
                                $response["Data"]["Tickets"][0]["AmountWin"] = $array["Amount"];

                                break;

                            case $TipoNotasRetiros->getClasificadorId():
                                $array["Description"] = "Pago Notas de Retiro";
                                array_push($response["Data"]["Withdraw"], $array);

                                break;

                            case $TipoRecargas->getClasificadorId():

                                break;
                            case "ACCWINTICKET":
                                $response["Data"]["Tickets"][0]["AmountWin"] = $array["Amount"];

                                break;
                            case "ACCPAYWD":
                                $array["Description"] = "Pago Notas de Retiro";
                                array_push($response["Data"]["Withdraw"], $array);

                                break;
                        }
                    } else {
                        $encontroProducto = false;
                        foreach ($response["Data"]["Products"] as $key => $product) {

                            if ($product["ProductId"] == $array["ProductId"]) {
                                $response["Data"]["Products"][$key]["AmountWin"] = $response["Data"]["Products"][$key]["AmountWin"] + $array["Amount"];

                                $encontroProducto = true;

                            }
                        }
                        if (!$encontroProducto) {
                            $array["AmountWin"] = $array["Amount"];
                            $array["Amount"] = 0;

                            array_push($response["Data"]["Products"], $array);
                        }
                    }


                } else {

                    if ($value->{"egreso.tipo_id"} != "0") {
                        $Tipo = new Clasificador($value->{"egreso.tipo_id"});

                        switch ($Tipo->getAbreviado()) {
                            case "ACCWINTICKET":
                                $response["Data"]["Tickets"][0]["AmountWin"] = $array["Amount"];

                                break;
                            case "ACCPAYWD":
                                $array["Description"] = "Pago Notas de Retiro";
                                array_push($response["Data"]["Withdraw"], $array);

                                break;
                        }

                    } else {
                        array_push($response["Data"]["Expenses"], $array);
                        $otrosEgresos += $value->{"egreso.valor"};

                    }


                }


            }

            $htmlProduct = "";
            $htmlProductExpense = "";

            foreach ($response["Data"]["Products"] as $product) {
                $htmlProduct .= '<tr>
                    <td width="70%" align="left">' . $product["Description"] . '</td>
                    <td align="left">S/ ' . $product["Amount"] . '</td>

                </tr>';
                $htmlProductExpense .= '<tr>
                    <td width="70%" align="left">' . $product["Description"] . '</td>
                    <td align="left">S/ ' . $product["AmountWin"] . '</td>

                </tr>';
                $ingresosProductos += $product["Amount"];
                $egresosProductos += $product["AmountWin"];


            }

            $ingresosProductos += $response["Data"]["Tickets"][0]["Amount"];
            $ingresosProductos += $response["Data"]["Deposit"][0]["Amount"];
            $egresosProductos += $response["Data"]["Tickets"][0]["AmountWin"];
            $egresosProductos += $response["Data"]["Withdraw"][0]["AmountWin"];


            $pdf = ' <html> <body>  <style>
 td{
  font-size:12px;
 }
</style><table style="
    width: 1000px;
    margin: 0 auto;
    border-collapse: collapse;
    width: 1000px;
    max-width: 1000px;
    margin: 0 auto;
"><tbody><tr><td align="center"><img src="https://doradobet.com/assets/images/logo.png" style="width:120px;"></td><td><div style="font-weight: bold;border: 0px;font-size: 20px;">CIERRE DIARIO DE
    CAJA</div></td></tr></tbody></table> 
<table style="/* width:430px; */height: 355px;/* border:1px solid black; */border-collapse: collapse;width: 800px;max-width: 800px;margin: 0 auto;padding: 0px 10px;border: 0px;">
    <tbody>
    
    
    <tr>

        <td width="50%" align="left">Local: ' . $Usuario->nombre . '</td>
        <td width="50%" align="left">Fecha: ' . $fecha . '</td>
    </tr>
    <tr style="
    /* border-collapse: collapse; */ 
">
        <td width="50%" align="left"  valign="top" style="
        border: 1px solid;
        padding: 0px 10px;
    "><font style="padding-left:5px;text-align:center;font-size:13px;font-weight:normal;">Ingresos diarios por
            Juegos</font>
            <table >
                <tbody>
                <tr>
                    <td width="70%" align="left">Doradobet Tickets</td>
                    <td align="left">S/ ' . $response["Data"]["Tickets"][0]["Amount"] . '</td>

                </tr>
                <tr>
                    <td width="70%" align="left">Doradobet Recargas</td>
                    <td align="left">S/  ' . $response["Data"]["Deposit"][0]["Amount"] . '</td>

                </tr>
                ' . $htmlProduct . '

                <tr style="
        font-weight: bold;
        /* padding-top: 6px; */
    ">
                    <td width="70%" align="left" style="font-weight: bold;">(1) INGRESO TOTAL DE JUEGOS</td>
                    <td style="
        border: 2px solid;padding:0px 5px;
    " align="left">S/ ' . $ingresosProductos . '
                    </td>

                </tr>
                </tbody>
            </table>
        </td>
        <td align="left" width="50%"  valign="top" style="
        border: 1px solid;
        padding: 0px 10px;
    "><font style="padding-left:5px;text-align:center;font-size:13px;font-weight:normal;">Salidas diarias por premios o
            devoluciones </font>
            <table style="
    ">
                <tbody>
                <tr>
                    <td width="70%" align="left">Pago Doradobet Tickets</td>
                    <td align="left">S/ ' . $response["Data"]["Tickets"][0]["AmountWin"] . '</td>

                </tr>
                <tr>
                    <td width="70%" align="left">Doradobet Retiros</td>
                    <td align="left">S/ ' . $response["Data"]["Withdraw"][0]["AmountWin"] . '</td>

                </tr>
 ' . $htmlProductExpense . '
                <tr style="
        font-weight: bold;
    ">
                    <td width="70%" align="left"  style="font-weight: bold;font-size:12px;">(2) SALIDAS TOTALES DE JUEGOS</td>
                    <td style="
        border: 2px solid;padding:0px 5px;
    " align="left">S/ ' . $egresosProductos . '
                    </td>

                </tr>
                </tbody>
            </table>
        </td>
    </tr>


    <tr>
        <td width="50%" align="left" valign="top">
            <table style="
        width: 100%;
    ">
                <tbody>
                <tr>
                    <td align="left" width="70%"  style="font-size:12px;">IMPORTE TOTAL DE CAJA (1) - (2)</td>
                    <td align="left" style="
        border: 2px solid;padding:0px 5px;
    ">S/ ' . ($ingresosProductos - $egresosProductos) . '
                    </td>

                </tr>
                </tbody>
            </table>
        </td>
        <td align="center" valign="top"></td>
    </tr>
    <tr>
        <td width="50%" align="center" valign="top">
            <table style="
        width: 100%;
    ">
                <tbody>
                <tr style="
    ">
                    <td align="left" width="70%" style="font-weight: bold;font-size:12px;">(4) GASTOS ADICIONALES DEL DÍA</td>


                </tr>

                </tbody>
            </table>
        </td>
        <td align="center" valign="top"></td>
    </tr>
    <tr>
        <td width="50%" align="center" valign="top" style="padding-left: 15px;">
            <table style="8
        width: 100%;
    ">
                <tbody>

                <tr>
                    <td align="left" width="70%" style="font-size:12px;">GASTOS CON FAC</td>
                    <td align="left" >S/ 0</td>

                </tr>

                </tbody>
            </table>
        </td>
        <td align="center" valign="top"></td>
    </tr>
    <tr>
        <td width="50%" align="center" valign="top" style="padding-left: 15px;">
            <table style="
        width: 100%;
    ">
                <tbody>


                <tr>
                    <td align="left" width="70%" style="font-size:12px;">GASTOS CON OTROS COMP</td>
                    <td align="left" >S/ 0</td>

                </tr>

                </tbody> 
            </table>
        </td>
        <td align="center" valign="top"></td>
    </tr>
    <tr>
        <td width="50%" align="center" valign="top" style="padding-left: 15px;">
            <table style="
        width: 100%;
    ">
                <tbody>

                <tr>
                    <td align="left" width="70%" style="font-size:12px;">MOVILIDADES</td>
                    <td align="left" >S/ 0</td>

                </tr>

                </tbody>
            </table>
        </td>
        <td align="center" valign="top"></td>
    </tr>
    <tr>
        <td width="50%" align="center" valign="top" style="padding-left: 15px;">
            <table style="
        width: 100%;
    ">
                <tbody>


                <tr>
                    <td align="left" width="70%" style="font-size:11px;">OTROS GASTOS</td>
                    <td align="left" >S/ ' . $otrosEgresos . '</td>

                </tr>

                </tbody>
            </table>
        </td>
        <td align="center" valign="top"></td>
    </tr>
    <tr>
        <td width="50%" align="center" valign="top">
            <table style="
        width: 100%;
    ">
                <tbody>

                <tr>
                    <td align="left" width="70%"  style="font-size:13px;">CIERRE TOTAL DE CAJA EFECTIVO (3) - (4)</td>
                    <td align="left"   style="
        border: 2px solid;padding:0px 5px;
    ">S/ ' . ($ingresosProductos + $otrosIngresos - $egresosProductos - $otrosEgresos) . '
                    </td>

                </tr>

                </tbody>
            </table>
        </td>
        <td align="center" valign="top"></td>
    </tr>
    <tr>

        <td width="50%" align="center" valign="top">
            <table style="
        width: 100%;
    ">
                <tbody>

                <tr>
                    <td align="left" width="70%"  style="font-size:13px;">CIERRE TOTAL DE CAJA TARJETAS</td>
                    <td align="left"   style="
        border: 2px solid;padding:0px 5px;
    ">S/ ' . $otrosIngresosTarjetasCreditos . '
                    </td>

                </tr>
                </tbody>
            </table>
        </td>
        <td align="center" valign="top">
            <div style="
        width: 100%;
        border-top: 1px solid;
    ">Cajero
            </div>
            <table style="
        width: 100%;
    ">

            </table>
        </td>
    </tr>
    <tr>

        <td width="50%" align="left" valign="top">
            <table style="
        width: 100%;
    ">
                <tbody>

                <tr>
                    <td width="70%"  style="font-size:10px;">SALDO INICIAL</td>
                    <td  style="font-size:11px;" >S/ ' . $dineroInicial . '</td>

                </tr>
                </tbody>
            </table>
        </td>
        <td align="center" valign="top">
            <table style="
        width: 100%;
    ">
                <tbody>

                <tr>
                    <td width="70%"  style="font-size:11px;">SALDO FINAL</td>
                    <td  style="font-size:11px;" >S/ ' . ($dineroInicial + $ingresosProductos + $otrosIngresos - $egresosProductos - $otrosEgresos) . '</td>

                </tr>
                </tbody>
            </table>
        </td>
    </tr>


    </tbody>
</table>';

            $pdf2 = '<table style="/* width:430px; */height: 355px;/* border:1px solid black; */border-collapse: collapse;width: 500px;max-width: 500px;margin: 0 auto;">
    <tbody>
    <tr>

<td width="50%">CIERRE DIARIO DE
            CAJA</td><td>C</td>    </tr>





    </tbody>
</table>
</body> 
</html>';

            require_once "mpdf6.1/mpdf.php";
            $mpdf = new mPDF('c', array(80, 150), 0, 0, 0, 0);
            //$mpdf = new mPDF('c', 'A4-L');

            $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

            $mpdf->SetDisplayMode('fullpage', 'two');

// LOAD a stylesheet
//$stylesheet = file_get_contents('mdpdf/stylemdpdf.css');
//$mpdf->WriteHTML($stylesheet, 1); // The parameter 1 tells that this is css/style only and no body/html/text

            $mpdf->WriteHTML($pdf);

            $mpdf->Output(__DIR__ . "/mpdf.pdf", "F");

            $path = __DIR__ . '/mpdf.pdf';

            $type = pathinfo($path, PATHINFO_EXTENSION);
            $data = file_get_contents($path);
            $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

            $encoded_html = base64_encode($pdf);

            $response["Pdf"] = base64_encode($data);

            $response["Pdf2"] = $pdf;


            $response["Data"]["Total"] = $total;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetDetailsIncomePDF":

            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");

            $Id = $params->Id;

            $Ingreso = new Ingreso($Id);
            $consecutive = "I" . $Ingreso->getUsuarioId() . "-" . $Ingreso->getConsecutivo();
            $descripcion = $Ingreso->getDescripcion();
            $concepto = "";

            if ($Ingreso->getConceptoId() != "" && $Ingreso->getConceptoId() != "0") {
                $Concepto = new Concepto($Ingreso->getConceptoId());
                $concepto = $Concepto->getDescripcion();
            }


            if ($Ingreso->getProductotercId() != "" && $Ingreso->getProductotercId() != "0") {
                $ProductoTercero = new ProductoTercero($Ingreso->getProductotercId());
                $concepto = "";
                $descripcion = "Producto " . $ProductoTercero->getDescripcion();
            }


            if ($Ingreso->getTipoId() != "" && $Ingreso->getTipoId() != "0") {

                $Clasificador = new Clasificador($Ingreso->getTipoId());

                if ($Clasificador->getAbreviado() == "ACCAMOUNTDAY") {
                    $concepto = "";
                    $descripcion = "Dinero Inicial";

                } else {
                    if ($Clasificador->getTipo() == "TARJCRED") {
                        $concepto = "";
                        $descripcion = "Tarjeta de Credito " . $Clasificador->getDescripcion();

                    }

                }

            }

            $pdf = '<table style="width:430px;height: 355px;/* border:1px solid black; */"><tbody>
<tr><td align="center" valign="top"><img src="https://doradobet.com/assets/images/logo.png"></td></tr>
<tr><td align="center" valign="top"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE INGRESO</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:&nbsp;&nbsp;' . $consecutive . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:&nbsp;&nbsp;' . $Ingreso->getFechaCrea() . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto:&nbsp;&nbsp;' . $concepto . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion:&nbsp;&nbsp;' . $descripcion . '</font></td></tr>
<tr><td align="center" valign="top"><div style="height:1px;">&nbsp;</div></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:&nbsp;&nbsp;' . $Ingreso->getValor() . '</font></td></tr>
</tbody></table>';

            $pdf = '<div style="width:330px; border:1px solid grey; padding: 15px;">
	<table style="width:100%;height: 355px;">
		<tbody>
			<tr >
				<td align="center" valign="top"><img style="width: 50px; padding-left: 20px;" src="https://doradobet.com/assets/images/logo.png" alt="logo-doradobet">
				</td>
				<td align="center" valign="top" style="display: block;text-align:center;padding-top:25px;"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE</font>
				</td>
			</tr>
			<tr>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:</font>
				</td>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $consecutive . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:</font>
				</td>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $Ingreso->getFechaCrea() . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $concepto . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $descripcion . ' </font>
				</td>
			</tr>
			<tr>
				<td align="center" valign="top">
					<div style="height:1px;">&nbsp;</div>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:</font></td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">' . $Ingreso->getValor() . '</font></td>
			</tr>



		</tbody>
	</table>
	
</div>';


            require_once "mpdf6.1/mpdf.php";
            $mpdf = new mPDF('c', array(80, 150), 0, 0, 0, 0);
            //$mpdf = new mPDF('c', 'A4-L');

            $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

            $mpdf->SetDisplayMode('fullpage', 'two');

// LOAD a stylesheet
//$stylesheet = file_get_contents('mdpdf/stylemdpdf.css');
//$mpdf->WriteHTML($stylesheet, 1); // The parameter 1 tells that this is css/style only and no body/html/text

            $mpdf->WriteHTML($pdf);

            $mpdf->Output(__DIR__ . "/mpdf.pdf", "F");

            $path = __DIR__ . '/mpdf.pdf';

            $type = pathinfo($path, PATHINFO_EXTENSION);
            $data = file_get_contents($path);
            $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

            $encoded_html = base64_encode($pdf);

            $response["Pdf"] = base64_encode($data);

            $response["Pdf2"] = $pdf;


            $response["Data"]["Total"] = $total;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;


        case "Accounting/GetDetailsExpensePDF":


            $Id = $params->Id;

            $Egreso = new Egreso($Id);
            $consecutive = "E" . $Egreso->getUsuarioId() . "-" . $Egreso->getConsecutivo();
            $descripcion = $Egreso->getDescripcion();
            $concepto = "";

            if ($Egreso->getConceptoId() != "" && $Egreso->getConceptoId() != "0") {
                $Concepto = new Concepto($Egreso->getConceptoId());
                $concepto = $Concepto->getDescripcion();
            }


            if ($Egreso->getProductotercId() != "" && $Egreso->getProductotercId() != "0") {
                $ProductoTercero = new ProductoTercero($Egreso->getProductotercId());
                $concepto = "";
                $descripcion = "Producto " . $ProductoTercero->getDescripcion();
            }


            if ($Egreso->getTipoId() != "" && $Egreso->getTipoId() != "0") {

                $Clasificador = new Clasificador($Egreso->getTipoId());

                if ($Clasificador->getAbreviado() == "ACCAMOUNTDAY") {
                    $concepto = "";
                    $descripcion = "Dinero Inicial";

                } else {
                    if ($Clasificador->getTipo() == "TARJCRED") {
                        $concepto = "";
                        $descripcion = "Tarjeta de Credito " . $Clasificador->getDescripcion();

                    }

                }

            }

            $pdf = '<table style="width:430px;height: 355px;/* border:1px solid black; */"><tbody>
<tr><td align="center" valign="top"><img src="https://doradobet.com/assets/images/logo.png"></td></tr>
<tr><td align="center" valign="top"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE EGRESO</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:&nbsp;&nbsp;' . $consecutive . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:&nbsp;&nbsp;' . $Egreso->getFechaCrea() . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto:&nbsp;&nbsp;' . $concepto . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion:&nbsp;&nbsp;' . $descripcion . '</font></td></tr>
<tr><td align="center" valign="top"><div style="height:1px;">&nbsp;</div></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:&nbsp;&nbsp;' . $Egreso->getValor() . '</font></td></tr>
</tbody></table>';

            $pdf = '<div style="width:330px; border:1px solid grey; padding: 15px;">
	<table style="width:100%;height: 355px;">
		<tbody>
			<tr >
				<td align="center" valign="top"><img style="width: 50px; padding-left: 20px;" src="https://doradobet.com/assets/images/logo.png" alt="logo-doradobet">
				</td>
				<td align="center" valign="top" style="display: block;text-align:center;padding-top:25px;"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE EGRESO</font>
				</td>
			</tr>
			<tr>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:</font>
				</td>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $consecutive . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:</font>
				</td>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $Egreso->getFechaCrea() . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $concepto . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $descripcion . ' </font>
				</td>
			</tr>
			<tr>
				<td align="center" valign="top">
					<div style="height:1px;">&nbsp;</div>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:</font></td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">' . $Egreso->getValor() . '</font></td>
			</tr>



		</tbody>
	</table>
	
</div>';


            require_once "mpdf6.1/mpdf.php";
            $mpdf = new mPDF('c', array(80, 150), 0, 0, 0, 0);
            //$mpdf = new mPDF('c', 'A4-L');

            $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

            $mpdf->SetDisplayMode('fullpage', 'two');

// LOAD a stylesheet
//$stylesheet = file_get_contents('mdpdf/stylemdpdf.css');
//$mpdf->WriteHTML($stylesheet, 1); // The parameter 1 tells that this is css/style only and no body/html/text

            $mpdf->WriteHTML($pdf);

            $mpdf->Output(__DIR__ . "/mpdf.pdf", "F");

            $path = __DIR__ . '/mpdf.pdf';

            $type = pathinfo($path, PATHINFO_EXTENSION);
            $data = file_get_contents($path);
            $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

            $encoded_html = base64_encode($pdf);

            $response["Pdf"] = base64_encode($data);

            $response["Pdf2"] = $pdf;


            $response["Data"]["Total"] = $total;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;

        /**
        * Accounting/SaveType
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Accounting/SaveType":

            $Name = $params->Name;
            $Type = $params->Type;

            $Clasificador = new Clasificador();
            $Clasificador->setEstado("A");
            $Clasificador->setDescripcion($Name);
            $Clasificador->setMandante("0");
            $Clasificador->setAbreviado("");

            switch ($Type) {
                case 0:
                    $Clasificador->setTipo("CONTCENTRO");

                    break;

                case 1:
                    $Clasificador->setTipo("CONTCARGO");

                    break;
            }

            $ClasificadorMySqlDAO = new ClasificadorMySqlDAO();
            $ClasificadorMySqlDAO->insert($Clasificador);
            $ClasificadorMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SavePosition":

            $Name = $params->Name;
            $Type = $params->TypePosition;
            $State = $params->State;

            $Cargo = new Cargo();
            $Cargo->setEstado($State);
            $Cargo->setDescripcion($Name);
            $Cargo->setTipoId($Type);
            $Cargo->setUsucreaId(0);
            $Cargo->setUsumodifId(0);


            $CargoMySqlDAO = new CargoMySqlDAO();
            $CargoMySqlDAO->insert($Cargo);
            $CargoMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SaveArea":

            $Name = $params->Name;
            $Employees = $params->Employees;
            $State = $params->State;

            if ($Employees == "") {
                $Employees = 0;
            }

            $Area = new Area();
            $Area->setEstado($State);
            $Area->setDescripcion($Name);
            $Area->setEmpleadoId($Employees);
            $Area->setUsucreaId(0);
            $Area->setUsumodifId(0);


            $AreaMySqlDAO = new AreaMySqlDAO();
            $AreaMySqlDAO->insert($Area);
            $AreaMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SaveEmployee":

            $Name = $params->Name;
            $Lastname = $params->Lastname;
            $TypeDocument = $params->TypeDocument;
            $Document = $params->Document;
            $Position = $params->Position;
            $Area = $params->Area;
            $Salary = $params->Salary;
            $State = $params->State;


            $Empleado = new Empleado();
            $Empleado->setEstado($State);
            $Empleado->setNombre($Name);
            $Empleado->setApellido($Lastname);
            $Empleado->setTipodocId($TypeDocument);
            $Empleado->setDocumento($Document);
            $Empleado->setCargoId($Position);
            $Empleado->setAreaId($Area);
            $Empleado->setSalario($Salary);
            $Empleado->setMandante(0);

            $Empleado->setUsucreaId(0);
            $Empleado->setUsumodifId(0);


            $EmpleadoMySqlDAO = new EmpleadoMySqlDAO();
            $EmpleadoMySqlDAO->insert($Empleado);
            $EmpleadoMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SaveCostCenter":

            $Code = $params->Code;
            $State = $params->State;
            $TypeCenter = $params->TypeCenter;
            $Name = $params->Name;

            $CentroCosto = new CentroCosto();
            $CentroCosto->setEstado($State);
            $CentroCosto->setCodigo($Code);
            $CentroCosto->setTipoId($TypeCenter);
            $CentroCosto->setDescripcion($Name);
            $CentroCosto->setUsucreaId(0);
            $CentroCosto->setUsumodifId(0);

            $CentroCostoMySqlDAO = new CentroCostoMySqlDAO();
            $CentroCostoMySqlDAO->insert($CentroCosto);
            $CentroCostoMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SaveProvidersThird":

            $Name = $params->Name;
            $State = $params->State;
            $Document = $params->Nit;
            $Partner = $params->Partner;
            $Country = $params->Country;
            $Email = $params->Email;

            $ProveedorTercero = new ProveedorTercero();
            $ProveedorTercero->setEstado($State);
            $ProveedorTercero->setDescripcion($Name);
            $ProveedorTercero->setDocumento($Document);
            $ProveedorTercero->setUsucreaId(0);
            $ProveedorTercero->setUsumodifId(0);

            $ProveedorTercero->setPaisId($Country);
            $ProveedorTercero->setMandante($Partner);
            $ProveedorTercero->setEmail($Email);


            $ProveedorTerceroMySqlDAO = new ProveedorTerceroMySqlDAO();
            $ProveedorTerceroMySqlDAO->insert($ProveedorTercero);
            $ProveedorTerceroMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SaveAccount":

            $Name = $params->Name;
            $State = $params->State;
            $Reference = $params->Reference;

            $CuentaContable = new CuentaContable();
            $CuentaContable->setEstado($State);
            $CuentaContable->setDescripcion($Name);
            $CuentaContable->setUsucreaId(0);
            $CuentaContable->setUsumodifId(0);
            $CuentaContable->setReferencia($Reference);


            $CuentaContableMySqlDAO = new CuentaContableMySqlDAO();
            $CuentaContableMySqlDAO->insert($CuentaContable);
            $CuentaContableMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SaveConcept":

            $Name = $params->Name;
            $Reference = $params->Reference;
            $AccountId = $params->AccountId;
            $Type = ($params->Type == "E") ? "E" : "I";

            $Concepto = new Concepto();
            $Concepto->setDescripcion($Name);
            $Concepto->setReferencia($Reference);
            $Concepto->setCuentacontableId($AccountId);
            $Concepto->setTipo($Type);

            $Concepto->setUsucreaId(0);
            $Concepto->setUsumodifId(0);


            $ConceptoMySqlDAO = new ConceptoMySqlDAO();
            $ConceptoMySqlDAO->insert($Concepto);
            $ConceptoMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;


        case "Accounting/SaveProductsThird":


            $Name = $params->Name;
            $Provider = $params->Provider;
            $Account = $params->Account;
            $AccountExpenses = $params->AccountExpenses;
            $State = $params->State;
            $InternalProducts = ($params->InternalProducts == 2) ? 'N' : 'S';
            $TypeInternal = ($params->TypeInternal == "") ? 0 : $params->TypeInternal;


            $ProductoTercero = new ProductoTercero();
            $ProductoTercero->setEstado($State);
            $ProductoTercero->setDescripcion($Name);
            $ProductoTercero->setProveedortercId($Provider);
            $ProductoTercero->setCuentacontableId($Account);
            $ProductoTercero->setCuentacontableegresoId($AccountExpenses);
            $ProductoTercero->setUsucreaId(0);
            $ProductoTercero->setUsumodifId(0);
            $ProductoTercero->setInterno($InternalProducts);
            $ProductoTercero->setTipoId($TypeInternal);


            $ProductoTerceroMySqlDAO = new ProductoTerceroMySqlDAO();
            $ProductoTerceroMySqlDAO->insert($ProductoTercero);
            $ProductoTerceroMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;


        case "Accounting/SaveProductThirdByBetshop":

            $Id = $params->Id;
            $State = $params->State;
            $Account = $params->Account;
            $AccountExpenses = $params->AccountExpenses;

            $BetShopId = $params->BetShopId;
            $ProductId = $params->ProductId;

            if ($Id != "" && $Id != null) {

                $ProductoterceroUsuario = new ProductoterceroUsuario($Id);

                if ($State != "" && $State != null) {
                    if ($State == 1) {
                        $ProductoterceroUsuario->setEstado('A');
                    }
                    if ($State == 0) {
                        $ProductoterceroUsuario->setEstado('I');
                    }
                }


                if ($Account != "" && $Account != null) {
                    $ProductoterceroUsuario->setCuentacontableId($Account);
                }


                if ($AccountExpenses != "" && $AccountExpenses != null) {
                    $ProductoterceroUsuario->setCuentacontableegresoId($AccountExpenses);
                }
                $ProductoterceroUsuarioMySqlDAO = new ProductoterceroUsuarioMySqlDAO();
                $ProductoterceroUsuarioMySqlDAO->update($ProductoterceroUsuario);
                $ProductoterceroUsuarioMySqlDAO->getTransaction()->commit();


            } else {

                $ProductoterceroUsuario = new ProductoterceroUsuario();

                $ProductoterceroUsuario->setProductoId($ProductId);
                $ProductoterceroUsuario->setUsuarioId($BetShopId);
                $ProductoterceroUsuario->setUsucreaId(0);
                $ProductoterceroUsuario->setUsumodifId(0);
                $ProductoterceroUsuario->setEstado('I');

                if ($State == 1) {
                    $ProductoterceroUsuario->setEstado('A');
                }
                if ($Account == "") {
                    $Account = 0;
                }
                if ($AccountExpenses == "") {
                    $AccountExpenses = 0;
                }
                $ProductoterceroUsuario->setCuentacontableId($Account);
                $ProductoterceroUsuario->setCuentacontableegresoId($AccountExpenses);

                $ProductoterceroUsuarioMySqlDAO = new ProductoterceroUsuarioMySqlDAO();
                $ProductoterceroUsuarioMySqlDAO->insert($ProductoterceroUsuario);
                $ProductoterceroUsuarioMySqlDAO->getTransaction()->commit();


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;

        case "Accounting/SaveExpenses":
            if ($_SESSION['win_perfil2'] == "PUNTOVENTA" || $_SESSION['win_perfil2'] == "CAJERO") {

                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

                $Concept = $params->Concept;
                $Description = $params->Description;
                $Reference = $params->Reference;
                $Value = $params->Value;

                $Egreso = new Egreso();
                $Egreso->setTipoId(0);
                $Egreso->setDescripcion($Description);
                $Egreso->setCentrocostoId(0);
                $Egreso->setDocumento($Reference);
                $Egreso->setEstado("A");
                $Egreso->setValor($Value);
                $Egreso->setImpuesto(0);
                $Egreso->setRetraccion(0);
                $Egreso->setUsuarioId($Usuario->puntoventaId);
                $Egreso->setConceptoId($Concept);
                $Egreso->setProveedortercId(0);
                $Egreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());

                $Egreso->setProductotercId(0);
                $Egreso->setUsucreaId(0);
                $Egreso->setUsumodifId(0);


                $EgresoMySqlDAO = new EgresoMySqlDAO();
                $EgresoMySqlDAO->insert($Egreso);
                $EgresoMySqlDAO->getTransaction()->commit();


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
            } else {
                $BetShops = $params->BetShops;

                if ($BetShops != "") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                    $Usuario = new Usuario($BetShops);

                } else {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                    $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

                }

                $Concept = $params->Concept;
                $Description = $params->Description;
                $Reference = $params->Reference;
                $Value = $params->Value;

                $Egreso = new Egreso();
                $Egreso->setTipoId(0);
                $Egreso->setDescripcion($Description);
                $Egreso->setCentrocostoId(0);
                $Egreso->setDocumento($Reference);
                $Egreso->setEstado("A");
                $Egreso->setValor($Value);
                $Egreso->setImpuesto(0);
                $Egreso->setRetraccion(0);
                $Egreso->setUsuarioId($Usuario->puntoventaId);
                $Egreso->setConceptoId($Concept);
                $Egreso->setProveedortercId(0);
                $Egreso->setUsucajeroId($Usuario->usuarioId);

                $Egreso->setProductotercId(0);
                $Egreso->setUsucreaId($UsuarioMandante->getUsuarioMandante());
                $Egreso->setUsumodifId(0);


                $EgresoMySqlDAO = new EgresoMySqlDAO();
                $EgresoMySqlDAO->insert($Egreso);
                $EgresoMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
            }


            $Egreso = new Egreso($Egreso->getEgresoId());
            $consecutive = "E" . $Egreso->getUsuarioId() . "-" . $Egreso->getConsecutivo();
            $descripcion = $Egreso->getDescripcion();
            $concepto = "";

            if ($Egreso->getConceptoId() != "" && $Egreso->getConceptoId() != "0") {
                $Concepto = new Concepto($Egreso->getConceptoId());
                $concepto = $Concepto->getDescripcion();
            }


            if ($Egreso->getProductotercId() != "" && $Egreso->getProductotercId() != "0") {
                $ProductoTercero = new ProductoTercero($Egreso->getProductotercId());
                $concepto = "";
                $descripcion = "Producto " . $ProductoTercero->getDescripcion();
            }


            if ($Egreso->getTipoId() != "" && $Egreso->getTipoId() != "0") {

                $Clasificador = new Clasificador($Egreso->getTipoId());

                if ($Clasificador->getAbreviado() == "ACCAMOUNTDAY") {
                    $concepto = "";
                    $descripcion = "Dinero Inicial";

                } else {
                    if ($Clasificador->getTipo() == "TARJCRED") {
                        $concepto = "";
                        $descripcion = "Tarjeta de Credito " . $Clasificador->getDescripcion();

                    }

                }

            }


            $pdf = '<div style="width:330px; border:1px solid grey; padding: 15px;">
	<table style="width:100%;height: 355px;">
		<tbody>
			<tr >
				<td align="center" valign="top"><img style="width: 50px; padding-left: 20px;" src="https://doradobet.com/assets/images/logo.png" alt="logo-doradobet">
				</td>
				<td align="center" valign="top" style="display: block;text-align:center;padding-top:25px;"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE EGRESO</font>
				</td>
			</tr>
			<tr>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:</font>
				</td>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $consecutive . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:</font>
				</td>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $Egreso->getFechaCrea() . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $concepto . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $descripcion . ' </font>
				</td>
			</tr>
			<tr>
				<td align="center" valign="top">
					<div style="height:1px;">&nbsp;</div>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:</font></td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">' . $Egreso->getValor() . '</font></td>
			</tr>



		</tbody>
	</table>
	
</div>';


            require_once "mpdf6.1/mpdf.php";
            // $mpdf = new mPDF('c', array(80, 150));
            $mpdf = new mPDF('c', 'A4-L');

            $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

            $mpdf->SetDisplayMode('fullpage', 'two');
            $mpdf->WriteHTML($pdf);

            $mpdf->Output(__DIR__ . "/mpdf.pdf", "F");

            $path = __DIR__ . '/mpdf.pdf';

            $type = pathinfo($path, PATHINFO_EXTENSION);
            $data = file_get_contents($path);
            $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

            $encoded_html = base64_encode($pdf);

            $response["Pdf"] = base64_encode($data);

            break;


        case "Accounting/SaveIncome":

            if ($_SESSION['win_perfil2'] == "PUNTOVENTA" || $_SESSION['win_perfil2'] == "CAJERO") {

                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

                $Concept = $params->Concept;
                $Description = $params->Description;
                $Reference = $params->Reference;
                $Value = $params->Value;

                $Ingreso = new Ingreso();
                $Ingreso->setTipoId(0);
                $Ingreso->setDescripcion($Description);
                $Ingreso->setCentrocostoId(0);
                $Ingreso->setDocumento($Reference);
                $Ingreso->setEstado("A");
                $Ingreso->setValor($Value);
                $Ingreso->setImpuesto(0);
                $Ingreso->setRetraccion(0);
                $Ingreso->setUsuarioId($Usuario->puntoventaId);
                $Ingreso->setConceptoId($Concept);
                $Ingreso->setProductotercId(0);
                $Ingreso->setProveedortercId(0);
                $Ingreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());

                $Ingreso->setProductotercId(0);

                $Ingreso->setUsucreaId(0);
                $Ingreso->setUsumodifId(0);


                $IngresoMySqlDAO = new IngresoMySqlDAO();
                $IngresoMySqlDAO->insert($Ingreso);
                $IngresoMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            } else {
                $BetShops = $params->BetShops;

                if ($BetShops != "") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                    $Usuario = new Usuario($BetShops);

                } else {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
                    $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

                }

                $Concept = $params->Concept;
                $Description = $params->Description;
                $Reference = $params->Reference;
                $Value = $params->Value;


                $Ingreso = new Ingreso();
                $Ingreso->setTipoId(0);
                $Ingreso->setDescripcion($Description);
                $Ingreso->setCentrocostoId(0);
                $Ingreso->setDocumento($Reference);
                $Ingreso->setEstado("A");
                $Ingreso->setValor($Value);
                $Ingreso->setImpuesto(0);
                $Ingreso->setRetraccion(0);
                $Ingreso->setUsuarioId($Usuario->puntoventaId);
                $Ingreso->setConceptoId($Concept);
                $Ingreso->setProductotercId(0);
                $Ingreso->setProveedortercId(0);
                $Ingreso->setUsucajeroId($Usuario->usuarioId);

                $Ingreso->setProductotercId(0);

                $Ingreso->setUsucreaId($UsuarioMandante->getUsuarioMandante());
                $Ingreso->setUsumodifId(0);


                $IngresoMySqlDAO = new IngresoMySqlDAO();
                $IngresoMySqlDAO->insert($Ingreso);
                $IngresoMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
            }


            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");


            $Ingreso = new Ingreso($Ingreso->getIngresoId());
            $consecutive = "I" . $Ingreso->getUsuarioId() . "-" . $Ingreso->getConsecutivo();
            $descripcion = $Ingreso->getDescripcion();
            $concepto = "";

            if ($Ingreso->getConceptoId() != "" && $Ingreso->getConceptoId() != "0") {
                $Concepto = new Concepto($Ingreso->getConceptoId());
                $concepto = $Concepto->getDescripcion();
            }


            if ($Ingreso->getProductotercId() != "" && $Ingreso->getProductotercId() != "0") {
                $ProductoTercero = new ProductoTercero($Ingreso->getProductotercId());
                $concepto = "";
                $descripcion = "Producto " . $ProductoTercero->getDescripcion();
            }


            if ($Ingreso->getTipoId() != "" && $Ingreso->getTipoId() != "0") {

                $Clasificador = new Clasificador($Ingreso->getTipoId());

                if ($Clasificador->getAbreviado() == "ACCAMOUNTDAY") {
                    $concepto = "";
                    $descripcion = "Dinero Inicial";

                } else {
                    if ($Clasificador->getTipo() == "TARJCRED") {
                        $concepto = "";
                        $descripcion = "Tarjeta de Credito " . $Clasificador->getDescripcion();

                    }

                }

            }

            $pdf = '<table style="width:430px;height: 355px;/* border:1px solid black; */"><tbody>
<tr><td align="center" valign="top"><img src="https://doradobet.com/assets/images/logo.png"></td></tr>
<tr><td align="center" valign="top"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE INGRESO</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:&nbsp;&nbsp;' . $consecutive . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:&nbsp;&nbsp;' . $Ingreso->getFechaCrea() . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto:&nbsp;&nbsp;' . $concepto . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion:&nbsp;&nbsp;' . $descripcion . '</font></td></tr>
<tr><td align="center" valign="top"><div style="height:1px;">&nbsp;</div></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:&nbsp;&nbsp;' . $Ingreso->getValor() . '</font></td></tr>
</tbody></table>';

            $pdf = '<div style="width:330px; border:1px solid grey; padding: 15px;">
	<table style="width:100%;height: 355px;">
		<tbody>
			<tr >
				<td align="center" valign="top"><img style="width: 50px; padding-left: 20px;" src="https://doradobet.com/assets/images/logo.png" alt="logo-doradobet">
				</td>
				<td align="center" valign="top" style="display: block;text-align:center;padding-top:25px;"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE</font>
				</td>
			</tr>
			<tr>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:</font>
				</td>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $consecutive . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:</font>
				</td>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $Ingreso->getFechaCrea() . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $concepto . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $descripcion . ' </font>
				</td>
			</tr>
			<tr>
				<td align="center" valign="top">
					<div style="height:1px;">&nbsp;</div>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:</font></td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">' . $Ingreso->getValor() . '</font></td>
			</tr>



		</tbody>
	</table>
	
</div>';


            require_once "mpdf6.1/mpdf.php";
            // $mpdf = new mPDF('c', array(80, 150));
            $mpdf = new mPDF('c', 'A4-L');

            $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

            $mpdf->SetDisplayMode('fullpage', 'two');

// LOAD a stylesheet
//$stylesheet = file_get_contents('mdpdf/stylemdpdf.css');
//$mpdf->WriteHTML($stylesheet, 1); // The parameter 1 tells that this is css/style only and no body/html/text

            $mpdf->WriteHTML($pdf);

            $mpdf->Output(__DIR__ . "/mpdf.pdf", "F");

            $path = __DIR__ . '/mpdf.pdf';

            $type = pathinfo($path, PATHINFO_EXTENSION);
            $data = file_get_contents($path);
            $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

            $encoded_html = base64_encode($pdf);

            $response["Pdf"] = base64_encode($data);

            break;


        case "Accounting/SaveBeginDate":
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");

            $Amount = $params->Amount;

            $Ingreso = new Ingreso();
            $Ingreso->setTipoId($TipoDineroInicial->getClasificadorId());
            $Ingreso->setDescripcion(0);
            $Ingreso->setCentrocostoId(0);
            $Ingreso->setDocumento(0);
            $Ingreso->setEstado("A");
            $Ingreso->setValor($Amount);
            $Ingreso->setImpuesto(0);
            $Ingreso->setRetraccion(0);
            $Ingreso->setUsuarioId($UsuarioMandante->getUsuarioMandante());
            $Ingreso->setConceptoId(0);
            $Ingreso->setProductotercId(0);
            $Ingreso->setProveedortercId(0);
            $Ingreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());

            $Ingreso->setUsucreaId(0);
            $Ingreso->setUsumodifId(0);


            $IngresoMySqlDAO = new IngresoMySqlDAO();
            $IngresoMySqlDAO->insert($Ingreso);
            $IngresoMySqlDAO->getTransaction()->commit();


            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");


            $Ingreso = new Ingreso($Ingreso->getIngresoId());
            $consecutive = "I" . $Ingreso->getUsuarioId() . "-" . $Ingreso->getConsecutivo();
            $descripcion = $Ingreso->getDescripcion();
            $concepto = "";

            if ($Ingreso->getConceptoId() != "" && $Ingreso->getConceptoId() != "0") {
                $Concepto = new Concepto($Ingreso->getConceptoId());
                $concepto = $Concepto->getDescripcion();
            }


            if ($Ingreso->getProductotercId() != "" && $Ingreso->getProductotercId() != "0") {
                $ProductoTercero = new ProductoTercero($Ingreso->getProductotercId());
                $concepto = "";
                $descripcion = "Producto " . $ProductoTercero->getDescripcion();
            }


            if ($Ingreso->getTipoId() != "" && $Ingreso->getTipoId() != "0") {

                $Clasificador = new Clasificador($Ingreso->getTipoId());

                if ($Clasificador->getAbreviado() == "ACCAMOUNTDAY") {
                    $concepto = "";
                    $descripcion = "Dinero Inicial";

                } else {
                    if ($Clasificador->getTipo() == "TARJCRED") {
                        $concepto = "";
                        $descripcion = "Tarjeta de Credito " . $Clasificador->getDescripcion();

                    }

                }

            }

            $pdf = '<table style="width:430px;height: 355px;/* border:1px solid black; */"><tbody>
<tr><td align="center" valign="top"><img src="https://doradobet.com/assets/images/logo.png"></td></tr>
<tr><td align="center" valign="top"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE INGRESO</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:&nbsp;&nbsp;' . $consecutive . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:&nbsp;&nbsp;' . $Ingreso->getFechaCrea() . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto:&nbsp;&nbsp;' . $concepto . '</font></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion:&nbsp;&nbsp;' . $descripcion . '</font></td></tr>
<tr><td align="center" valign="top"><div style="height:1px;">&nbsp;</div></td></tr>
<tr><td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:&nbsp;&nbsp;' . $Ingreso->getValor() . '</font></td></tr>
</tbody></table>';

            $pdf = '<div style="width:330px; border:1px solid grey; padding: 15px;">
	<table style="width:100%;height: 355px;">
		<tbody>
			<tr >
				<td align="center" valign="top"><img style="width: 50px; padding-left: 20px;" src="https://doradobet.com/assets/images/logo.png" alt="logo-doradobet">
				</td>
				<td align="center" valign="top" style="display: block;text-align:center;padding-top:25px;"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE</font>
				</td>
			</tr>
			<tr>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:</font>
				</td>
				<td style="border-top: 2px solid black; padding-top: 10px;" align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $consecutive . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:</font>
				</td>
				<td align="left" valign="top">
					<font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $Ingreso->getFechaCrea() . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Concepto: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $concepto . ' </font>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Descripcion: </font>
				</td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">' . $descripcion . ' </font>
				</td>
			</tr>
			<tr>
				<td align="center" valign="top">
					<div style="height:1px;">&nbsp;</div>
				</td>
			</tr>
			<tr>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:</font></td>
				<td align="left" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">' . $Ingreso->getValor() . '</font></td>
			</tr>



		</tbody>
	</table>
	
</div>';


            require_once "mpdf6.1/mpdf.php";
            $mpdf = new mPDF('c', array(80, 150), 0, 0, 0, 0);
            //$mpdf = new mPDF('c', 'A4-L');

            $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

            $mpdf->SetDisplayMode('fullpage', 'two');

// LOAD a stylesheet
//$stylesheet = file_get_contents('mdpdf/stylemdpdf.css');
//$mpdf->WriteHTML($stylesheet, 1); // The parameter 1 tells that this is css/style only and no body/html/text

            $mpdf->WriteHTML($pdf);

            $mpdf->Output(__DIR__ . "/mpdf.pdf", "F");

            $path = __DIR__ . '/mpdf.pdf';

            $type = pathinfo($path, PATHINFO_EXTENSION);
            $data = file_get_contents($path);
            $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

            $encoded_html = base64_encode($pdf);

            $response["Pdf"] = base64_encode($data);


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;


        case "Accounting/SaveIncomeCreditCards":
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
            $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());
            $Concept = $params->Concept;
            $Description = $params->Description;
            $Reference = $params->Reference;
            $Value = $params->Value;
            $Value = $params->Value;
            $Type = $params->Type;
            $Concept = 0;

            $Ingreso = new Ingreso();
            $Ingreso->setTipoId($Type);
            $Ingreso->setDescripcion($Description);
            $Ingreso->setCentrocostoId(0);
            $Ingreso->setDocumento($Reference);
            $Ingreso->setEstado("A");
            $Ingreso->setValor($Value);
            $Ingreso->setImpuesto(0);
            $Ingreso->setRetraccion(0);
            $Ingreso->setUsuarioId($Usuario->puntoventaId);
            $Ingreso->setConceptoId($Concept);
            $Ingreso->setProductotercId(0);
            $Ingreso->setProveedortercId(0);
            $Ingreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());

            $Ingreso->setUsucreaId(0);
            $Ingreso->setUsumodifId($UsuarioMandante->getUsuarioMandante());


            $IngresoMySqlDAO = new IngresoMySqlDAO();
            $IngresoMySqlDAO->insert($Ingreso);
            $IngresoMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;


        case "Accounting/SaveCloseBoxBetShop":
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);
            $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());

            $TipoTickets = new Clasificador("", "ACCBETTICKET");
            $TipoPremios = new Clasificador("", "ACCWINTICKET");
            $TipoNotasRetiros = new Clasificador("", "ACCPAYWD");
            $TipoRecargas = new Clasificador("", "ACCREC");
            $TipoDineroInicial = new Clasificador("", "ACCAMOUNTDAY");

            $TipoTicketsId = 0;
            $TipoPremiosId = 0;
            $TipoNotasRetirosId = 0;
            $TipoRecargasId = 0;
            $dineroInicial = 0;

            $rules = [];
            array_push($rules, array("field" => "producto_tercero.tipo_id", "data" => $TipoTickets->getClasificadorId() . "," . $TipoPremios->getClasificadorId() . "," . $TipoNotasRetiros->getClasificadorId() . "," . $TipoRecargas->getClasificadorId(), "op" => "in"));
            array_push($rules, array("field" => "proveedor_tercero.pais_id", "data" => $UsuarioMandante->getPaisId(), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ProductoTercero = new ProductoTercero();

            $data = $ProductoTercero->getProductoTercerosCustom("  producto_tercero.* ", "producto_tercero.productoterc_id", "asc", 0, 1000, $json, true);

            $data = json_decode($data);
            $final = [];
            foreach ($data->data as $key => $value) {
                switch ($data->{"producto_tercero.tipo_id"}) {
                    case $TipoTickets->getClasificadorId():
                        $TipoTicketsId = $data->{"producto_tercero.productoterc_id"};

                        break;

                    case $TipoPremios->getClasificadorId():
                        $TipoPremiosId = $data->{"producto_tercero.productoterc_id"};

                        break;

                    case $TipoNotasRetiros->getClasificadorId():
                        $TipoNotasRetirosId = $data->{"producto_tercero.productoterc_id"};

                        break;

                    case $TipoRecargas->getClasificadorId():
                        $TipoRecargasId = $data->{"producto_tercero.productoterc_id"};

                        break;
                }
            }


            $rules = [];
            array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            array_push($rules, array("field" => "usuario_cierrecaja.fecha_crea", "data" => strtotime(date("Y-m-d 00:00:00") . ' - 1 days'), "op" => "ge"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsuarioCierrecaja = new UsuarioCierrecaja();

            $data = $UsuarioCierrecaja->getUsuarioCierrecajasCustom("  usuario.login,usuario_cierrecaja.* ", "usuario_cierrecaja.usucierrecaja_id", "asc", 0, 10, $json, true);

            $data = json_decode($data);

            foreach ($data->data as $key => $value) {

                $array = [];


                $array["Id"] = $value->{"usuario_cierrecaja.usucierrecaja_id"};
                $array["User"] = $value->{"usuario_cierrecaja.usuario_id"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["Date"] = date('Y-m-d', strtotime($value->{"usuario_cierrecaja.fecha_cierre"}));
                $array["AmountBegin"] = $value->{"usuario_cierrecaja.dinero_inicial"};
                $array["ProperIncomes"] = $value->{"usuario_cierrecaja.ingresos_propios"};
                $array["ProperExpenses"] = $value->{"usuario_cierrecaja.egresos_propios"};
                $array["ProductsIncomes"] = $value->{"usuario_cierrecaja.ingresos_productos"};
                $array["ProductsExpenses"] = $value->{"usuario_cierrecaja.egresos_productos"};
                $array["OthersIncomes"] = $value->{"usuario_cierrecaja.ingresos_otros"};
                $array["OthersExpenses"] = $value->{"usuario_cierrecaja.egresos_otros"};
                $array["Total"] = $array["AmountBegin"] + $array["ProperIncomes"] + $array["ProductsIncomes"] + $array["OthersIncomes"]
                    - $array["ProperExpenses"] - $array["ProductsExpenses"] - $array["OthersExpenses"];

                $dineroInicial = $array["Total"];

            }


            $TotalIngresosPropios = 0;
            $TotalEgresosPropios = 0;

            $TotalIngresosProductos = 0;
            $TotalEgresosProductos = 0;

            $TotalIngresosOtros = 0;
            $TotalEgresosOtros = 0;

            $products = $params->products;
            $expenses = $params->expenses;
            $incomes = $params->incomes;
            $IngresoMySqlDAO = new IngresoMySqlDAO();
            $Transaction = $IngresoMySqlDAO->getTransaction();


            foreach ($incomes as $income) {
                $Concept = $income->Concept;
                $Description = $income->Description;
                $Reference = $income->Reference;
                $Value = $income->Value;

                $Ingreso = new Ingreso();
                $Ingreso->setTipoId(0);
                $Ingreso->setDescripcion($Description);
                $Ingreso->setCentrocostoId(0);
                $Ingreso->setDocumento($Reference);
                $Ingreso->setEstado("A");
                $Ingreso->setValor($Value);
                $Ingreso->setImpuesto(0);
                $Ingreso->setRetraccion(0);
                $Ingreso->setUsuarioId($Usuario->puntoventaId);
                $Ingreso->setConceptoId($Concept);
                $Ingreso->setProductotercId(0);
                $Ingreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                $Ingreso->setProveedortercId(0);

                $Ingreso->setUsucreaId(0);
                $Ingreso->setUsumodifId(0);


                $IngresoMySqlDAO->insert($Ingreso);

                $TotalIngresosOtros = $TotalIngresosOtros + $Value;

            }


            foreach ($products as $product) {
                $Concept = 0;
                $Description = '';
                $Reference = '';
                $Value = $product->Bets;

                $Ingreso = new Ingreso();
                $Ingreso->setTipoId(0);
                $Ingreso->setDescripcion($Description);
                $Ingreso->setCentrocostoId(0);
                $Ingreso->setDocumento($Reference);
                $Ingreso->setEstado("A");
                $Ingreso->setValor($Value);
                $Ingreso->setImpuesto(0);
                $Ingreso->setRetraccion(0);
                $Ingreso->setUsuarioId($Usuario->puntoventaId);
                $Ingreso->setConceptoId($Concept);
                $Ingreso->setProductotercId($product->ProductId);
                $Ingreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                $Ingreso->setProveedortercId(0);

                $Ingreso->setUsucreaId(0);
                $Ingreso->setUsumodifId(0);


                $IngresoMySqlDAO->insert($Ingreso);

                $TotalIngresosProductos = $TotalIngresosProductos + $Value;

            }

            $EgresoMySqlDAO = new EgresoMySqlDAO($Transaction);

            foreach ($expenses as $expense) {
                $Concept = $expense->Concept;
                $Description = $expense->Description;
                $Reference = $expense->Reference;
                $Value = $expense->Value;

                $Egreso = new Egreso();
                $Egreso->setTipoId(0);
                $Egreso->setDescripcion($Description);
                $Egreso->setCentrocostoId(0);
                $Egreso->setDocumento($Reference);
                $Egreso->setEstado("A");
                $Egreso->setValor($Value);
                $Egreso->setImpuesto(0);
                $Egreso->setRetraccion(0);
                $Egreso->setUsuarioId($Usuario->puntoventaId);
                $Egreso->setConceptoId($Concept);
                $Egreso->setProductotercId(0);
                $Egreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                $Egreso->setProveedortercId(0);

                $Egreso->setUsucreaId(0);
                $Egreso->setUsumodifId(0);


                $EgresoMySqlDAO->insert($Egreso);
                $TotalEgresosOtros = $TotalEgresosOtros + $Value;

            }

            foreach ($products as $product) {
                $Concept = 0;
                $Description = '';
                $Reference = '';
                $Value = $product->Prize;

                $Egreso = new Egreso();
                $Egreso->setTipoId(0);
                $Egreso->setDescripcion($Description);
                $Egreso->setCentrocostoId(0);
                $Egreso->setDocumento($Reference);
                $Egreso->setEstado("A");
                $Egreso->setValor($Value);
                $Egreso->setImpuesto(0);
                $Egreso->setRetraccion(0);
                $Egreso->setUsuarioId($Usuario->puntoventaId);
                $Egreso->setConceptoId($Concept);
                $Egreso->setProductotercId($product->ProductId);
                $Egreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                $Egreso->setProveedortercId(0);

                $Egreso->setUsucreaId(0);
                $Egreso->setUsumodifId(0);


                $EgresoMySqlDAO->insert($Egreso);
                $TotalEgresosProductos = $TotalEgresosProductos + $Value;

            }

            $SkeepRows = 0;
            $OrderedItem = 1;
            $MaxRows = 1000;


            $rules = [];
            array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            array_push($rules, array("field" => "it_ticket_enc.fecha_crea", "data" => date("Y-m-d"), "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ItTicketEnc = new ItTicketEnc();
            $data = $ItTicketEnc->getTicketsCustom("  SUM(it_ticket_enc.vlr_apuesta) vlr_apuesta, usuario.puntoventa_id ", "usuario.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);


            foreach ($data->data as $key => $value) {
                if ($value->{".vlr_apuesta"} == "") {
                    $value->{".vlr_apuesta"} = 0;
                }

                if ($value->{".vlr_apuesta"} > 0) {
                    $Concept = 0;
                    $Description = '';
                    $Reference = '';
                    $Value = $value->{".vlr_apuesta"};

                    try {
                        $MandanteDetalle = new MandanteDetalle("", $UsuarioMandante->getMandante(), $TipoTickets->getClasificadorId(), $UsuarioMandante->getPaisId(), 'A');
                        $Concept = $MandanteDetalle->getValor();
                    } catch (Exception $e) {

                    }


                    $Ingreso = new Ingreso();
                    $Ingreso->setTipoId($TipoTickets->getClasificadorId());
                    $Ingreso->setDescripcion($Description);
                    $Ingreso->setCentrocostoId(0);
                    $Ingreso->setDocumento($Reference);
                    $Ingreso->setEstado("A");
                    $Ingreso->setValor($Value);
                    $Ingreso->setImpuesto(0);
                    $Ingreso->setRetraccion(0);
                    $Ingreso->setUsuarioId($Usuario->puntoventaId);
                    $Ingreso->setConceptoId($Concept);
                    $Ingreso->setProductotercId($TipoTicketsId);
                    $Ingreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                    $Ingreso->setProveedortercId(0);

                    $Ingreso->setUsucreaId(0);
                    $Ingreso->setUsumodifId(0);


                    $IngresoMySqlDAO->insert($Ingreso);
                    $TotalIngresosPropios = $TotalIngresosPropios + $Value;

                }
            }

            $rules = [];
            array_push($rules, array("field" => "usuario.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            array_push($rules, array("field" => "it_ticket_enc.fecha_pago", "data" => date("Y-m-d"), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ItTicketEnc = new ItTicketEnc();

            $data = $ItTicketEnc->getTicketsCustom("  SUM(it_ticket_enc.vlr_premio) vlr_premio, usuario.puntoventa_id ", "usuario.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);


            foreach ($data->data as $key => $value) {
                if ($value->{".vlr_premio"} == "") {
                    $value->{".vlr_premio"} = 0;
                }


                if ($value->{".vlr_premio"} > 0) {

                    $Concept = 0;
                    $Description = '';
                    $Reference = '';
                    $Value = $value->{".vlr_premio"};
                    try {
                        $MandanteDetalle = new MandanteDetalle("", $UsuarioMandante->getMandante(), $TipoPremios->getClasificadorId(), $UsuarioMandante->getPaisId(), 'A');
                        $Concept = $MandanteDetalle->getValor();
                    } catch (Exception $e) {

                    }

                    $Egreso = new Egreso();
                    $Egreso->setTipoId($TipoPremios->getClasificadorId());
                    $Egreso->setDescripcion($Description);
                    $Egreso->setCentrocostoId(0);
                    $Egreso->setDocumento($Reference);
                    $Egreso->setEstado("A");
                    $Egreso->setValor($Value);
                    $Egreso->setImpuesto(0);
                    $Egreso->setRetraccion(0);
                    $Egreso->setUsuarioId($Usuario->puntoventaId);
                    $Egreso->setConceptoId($Concept);
                    $Egreso->setProductotercId($TipoPremiosId);
                    $Egreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                    $Egreso->setProveedortercId(0);

                    $Egreso->setUsucreaId(0);
                    $Egreso->setUsumodifId(0);


                    $EgresoMySqlDAO->insert($Egreso);

                    $TotalEgresosPropios = $TotalEgresosPropios + $Value;

                }

            }
            array_push($final, $array);

            $rules = [];
            array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            array_push($rules, array("field" => "DATE_FORMAT(cuenta_cobro.fecha_pago,'%Y-%m-%d') ", "data" => date("Y-m-d"), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CuentaCobro = new CuentaCobro();

            $data = $CuentaCobro->getCuentasCobroCustom("  SUM(cuenta_cobro.valor) total, usuario_punto.puntoventa_id ", "usuario_punto.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $data = json_decode($data);

            $array = [];


            $array["Id"] = 0;
            $array["Product"] = "Doradobet Recargas - Pago Notas";
            $array["Bets"] = 0;
            $array["Prize"] = 0;
            foreach ($data->data as $key => $value) {
                if ($value->{".total"} == "") {
                    $value->{".total"} = 0;
                }


                if ($value->{".total"} > 0) {
                    $Concept = 0;
                    $Description = '';
                    $Reference = '';
                    $Value = $value->{".total"};

                    try {
                        $MandanteDetalle = new MandanteDetalle("", $UsuarioMandante->getMandante(), $TipoRecargas->getClasificadorId(), $UsuarioMandante->getPaisId(), 'A');
                        $Concept = $MandanteDetalle->getValor();
                    } catch (Exception $e) {

                    }
                    $Ingreso = new Ingreso();
                    $Ingreso->setTipoId($TipoRecargas->getClasificadorId());
                    $Ingreso->setDescripcion($Description);
                    $Ingreso->setCentrocostoId(0);
                    $Ingreso->setDocumento($Reference);
                    $Ingreso->setEstado("A");
                    $Ingreso->setValor($Value);
                    $Ingreso->setImpuesto(0);
                    $Ingreso->setRetraccion(0);
                    $Ingreso->setUsuarioId($Usuario->puntoventaId);
                    $Ingreso->setConceptoId($Concept);
                    $Ingreso->setProductotercId($TipoRecargasId);
                    $Ingreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                    $Ingreso->setProveedortercId(0);

                    $Ingreso->setUsucreaId(0);
                    $Ingreso->setUsumodifId(0);


                    $IngresoMySqlDAO->insert($Ingreso);

                    $TotalIngresosPropios = $TotalIngresosPropios + $Value;

                }
            }

            $rules = [];
            array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            array_push($rules, array("field" => "DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d') ", "data" => date("Y-m-d"), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsuarioRecarga = new UsuarioRecarga();

            $data = $UsuarioRecarga->getUsuarioRecargasCustom("  SUM(usuario_recarga.valor) total, usuario_punto.puntoventa_id ", "usuario_punto.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);


            foreach ($data->data as $key => $value) {
                if ($value->{".total"} == "") {
                    $value->{".total"} = 0;
                }


                if ($value->{".total"} > 0) {

                    $Concept = 0;
                    $Description = '';
                    $Reference = '';
                    $Value = $value->{".total"};

                    try {
                        $MandanteDetalle = new MandanteDetalle("", $UsuarioMandante->getMandante(), $TipoNotasRetiros->getClasificadorId(), $UsuarioMandante->getPaisId(), 'A');
                        $Concept = $MandanteDetalle->getValor();
                    } catch (Exception $e) {

                    }

                    $Egreso = new Egreso();
                    $Egreso->setTipoId($TipoNotasRetiros->getClasificadorId());
                    $Egreso->setDescripcion($Description);
                    $Egreso->setCentrocostoId(0);
                    $Egreso->setDocumento($Reference);
                    $Egreso->setEstado("A");
                    $Egreso->setValor($Value);
                    $Egreso->setImpuesto(0);
                    $Egreso->setRetraccion(0);
                    $Egreso->setUsuarioId($Usuario->puntoventaId);
                    $Egreso->setConceptoId($Concept);
                    $Egreso->setProductotercId($TipoNotasRetirosId);
                    $Egreso->setUsucajeroId($UsuarioMandante->getUsuarioMandante());
                    $Egreso->setProveedortercId(0);

                    $Egreso->setUsucreaId(0);
                    $Egreso->setUsumodifId(0);


                    $EgresoMySqlDAO->insert($Egreso);

                    $TotalEgresosPropios = $TotalEgresosPropios + $Value;

                }
            }


            $rules = [];

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                array_push($rules, array("field" => "egreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "egreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

            }

            array_push($rules, array("field" => "egreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Egreso = new Egreso();

            $data = $Egreso->getEgresosCustom("  egreso.*,producto_tercero.* ", "egreso.egreso_id", "asc", $SkeepRows, $MaxRows, $json, true);
            $data = json_decode($data);


            foreach ($data->data as $key => $value) {
                if ($value->{"egreso.productoterc_id"} != "0") {
                    if ($value->{"producto_tercero.interno"} == "S") {
                        $TotalEgresosPropios = $TotalEgresosPropios + $value->{"egreso.valor"};

                    } else {
                        $TotalEgresosProductos = $TotalEgresosProductos + $value->{"egreso.valor"};
                    }

                } else {
                    $TotalEgresosOtros = $TotalEgresosOtros + $value->{"egreso.valor"};
                }

            }


            $rules = [];

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                array_push($rules, array("field" => "ingreso.usuario_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            } else {
                array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

            }

            array_push($rules, array("field" => "ingreso.tipo_id", "data" => 0, "op" => "eq"));

            array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Ingreso = new Ingreso();

            $data = $Ingreso->getIngresosCustom("  ingreso.*,producto_tercero.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);

            foreach ($data->data as $key => $value) {
                if ($value->{"egreso.productoterc_id"} != "0") {
                    if ($value->{"producto_tercero.interno"} == "S") {
                        $TotalIngresosPropios = $TotalIngresosPropios + $value->{"ingreso.valor"};

                    } else {
                        $TotalIngresosProductos = $TotalIngresosProductos + $value->{"ingreso.valor"};
                    }

                } else {
                    $TotalIngresosOtros = $TotalIngresosOtros + $value->{"ingreso.valor"};
                }
            }


            $rules = [];
            array_push($rules, array("field" => "ingreso.usucajero_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
            array_push($rules, array("field" => "ingreso.fecha_crea", "data" => date("Y-m-d 00:00:00"), "op" => "ge"));
            array_push($rules, array("field" => "ingreso.tipo_id", "data" => $TipoDineroInicial->getClasificadorId(), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Ingreso = new Ingreso();

            $data = $Ingreso->getIngresosCustom("  ingreso.* ", "ingreso.ingreso_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $data = json_decode($data);

            foreach ($data->data as $key => $value) {
                $dineroInicial = $value->{"ingreso.valor"};
            }

            $UsuarioCierrecaja = new UsuarioCierrecaja();

            $UsuarioCierrecaja->setUsuarioId($UsuarioMandante->getUsuarioMandante());
            $UsuarioCierrecaja->setFechaCierre(date("Y-m-d"));
            $UsuarioCierrecaja->setIngresosPropios($TotalIngresosPropios);
            $UsuarioCierrecaja->setEgresosPropios($TotalEgresosPropios);
            $UsuarioCierrecaja->setIngresosProductos($TotalIngresosProductos);
            $UsuarioCierrecaja->setEgresosProductos($TotalEgresosProductos);
            $UsuarioCierrecaja->setIngresosOtros($TotalIngresosOtros);
            $UsuarioCierrecaja->setEgresosOtros($TotalEgresosOtros);
            $UsuarioCierrecaja->setUsucreaId($UsuarioMandante->getUsuarioMandante());
            $UsuarioCierrecaja->setUsumodifId($UsuarioMandante->getUsuarioMandante());
            $UsuarioCierrecaja->setDineroInicial($dineroInicial);

            $UsuarioCierrecajaMySqlDAO = new UsuarioCierrecajaMySqlDAO($Transaction);
            $UsuarioCierrecajaMySqlDAO->insert($UsuarioCierrecaja);


            $Usuario = new Usuario($UsuarioMandante->getUsuarioMandante());
            $Usuario->fechaCierrecaja = date("Y-m-d H:i:s");

            $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);
            $UsuarioMySqlDAO->update($Usuario);

            $Transaction->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            break;



        /**
        * UserManagement/GetTypesAlert
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetTypesAlert":

            $Clasificador = new Clasificador();


            $Id = $params->Id;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];
            array_push($rules, array("field" => "clasificador.tipo", "data" => "'UAT','UAA'", "op" => "in"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $clasificadores = $Clasificador->getClasificadoresCustom("  clasificador.* ", "clasificador.clasificador_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $clasificadores = json_decode($clasificadores);

            $usuariosFinal = [
                "Types" => array(),
                "Actions" => array()
            ];

            foreach ($clasificadores->data as $key => $value) {

                $array = [];

                if ($value->{"clasificador.tipo"} == "UAT") {

                    $array["name"] = $value->{"clasificador.descripcion"};
                    $array["value"] = $value->{"clasificador.clasificador_id"};
                    $array["columns"] = array();


                    $rules = [];
                    $val = $value->{"clasificador.abreviado"} . "QW";
                    array_push($rules, array("field" => "clasificador.tipo", "data" => $val, "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $clasificadores2 = $Clasificador->getClasificadoresCustom("  clasificador.* ", "clasificador.clasificador_id", "asc", $SkeepRows, $MaxRows, $json, true);

                    $clasificadores2 = json_decode($clasificadores2);
                    foreach ($clasificadores2->data as $key2 => $value2) {
                        array_push($array["columns"], array(
                            "Id" => $value2->{"clasificador.abreviado"},
                            "Name" => $value2->{"clasificador.descripcion"}
                        ));

                    }


                    array_push($usuariosFinal["Types"], $array);

                } elseif ($value->{"clasificador.tipo"} == "UAA") {

                    $array["Name"] = $value->{"clasificador.descripcion"};
                    $array["Id"] = $value->{"clasificador.clasificador_id"};

                    array_push($usuariosFinal["Actions"], $array);

                }


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuariosFinal;

            break;

        /* $response["HasError"] = false;
        $response["AlertType"] = "success";
        $response["AlertMessage"] = "";
        $response["ModelErrors"] = [];


        $array = [];



        array_push($final, $array);


        $response["Data"] = $final;

        break;*/

        /**
        * UserManagement/GetPartnerAdminUserById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPartnerAdminUserById":

            $userId = $_REQUEST["userId"];


            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000;
            }

            $rules = [];

            if ($userId != "") {
                array_push($rules, array("field" => "usuario.usuario_id", "data" => "$userId", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $Usuario->getUsuariosCustom("  usuario.usuario_id,usuario.nombre,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];


            foreach ($usuarios->data as $key => $value) {

                $Islocked = false;

                if ($value->{"usuario.estado"} == "I") {
                    $Islocked = true;
                }

                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Adress"] = null;
                $array["AgentId"] = null;
                $array["CashDeskId"] = null;
                $array["CashDeskName"] = null;
                $array["CreatedLocalDate"] = "2018-01-13T17:03:13.024";
                $array["EMail"] = "";
                $array["FirstName"] = $value->{"usuario.nombre"};
                $array["Hired"] = "0001-01-01T00:00:00";
                $array["IsAgent"] = false;
                $array["IsGiven"] = false;
                $array["IsQRCodeSent"] = false;
                $array["IsSuspended"] = true;
                $array["IsTwoFactorEnabled"] = false;
                $array["LastName"] = "";
                $array["PartnerId"] = 0;
                $array["Password"] = null;
                $array["UserName"] = $value->{"usuario.login"};


                array_push($usuariosFinal, $array);

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $array;

            break;

        /**
        * GetUserChangeHistoryTypes
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetUserChangeHistoryTypes":

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $final = [];

            $array = [];

            $array["Fieldname"] = "FirstName";
            $array["FieldTranslation"] = "_FirstNameLabel_";
            array_push($final, $array);

            $array["Fieldname"] = "LastName";
            $array["FieldTranslation"] = "_FirstNameLabel_";
            array_push($final, $array);

            $array["Fieldname"] = "Address";
            $array["FieldTranslation"] = "_AddressLabel_";
            array_push($final, $array);

            $array["Fieldname"] = "PasswordHash";
            $array["FieldTranslation"] = "_PasswordLabel_";
            array_push($final, $array);

            $array["Fieldname"] = "EMail";
            $array["FieldTranslation"] = "_EmailLabel_";
            array_push($final, $array);

            $array["Fieldname"] = "Phone";
            $array["FieldTranslation"] = "_PhoneLabel_";
            array_push($final, $array);

            $array["Fieldname"] = "IsSuspended";
            $array["FieldTranslation"] = "_IsSuspendedLabel_";
            array_push($final, $array);


            $response["Data"] = $array;

            break;

        /**
        * UserManagement/GetPartnerAdminUsersByFilter
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPartnerAdminUsersByFilter":

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $id = $params->CashDeskId;

            $Usuario = new Usuario();

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }

            $json = '{"rules" : [{"field" : "usuario.usuario_id", "data": ' . $id . ',"op":"eq"}] ,"groupOp" : "AND"}';

            $usuarios = $Usuario->getUsuariosCustom("  usuario.usuario_id,usuario.nombre,usuario.fecha_ult,usuario.moneda,usuario.idioma,usuario.dir_ip,usuario.login,usuario.estado,usuario.estado_esp,usuario.pais_id,usuario.fecha_crea ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $final = [];

            foreach ($usuarios->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["CanReceipt"] = false;
                if ($value->{"usuario_config.recibo_caja"} == "S") {
                    $array["CanReceipt"] = true;
                }
                $array["CanDeposit"] = false;

                if ($value->{"usuario_config.permite_recarga"} == "S") {
                    $array["CanDeposit"] = true;
                }

                $array["CanActivateRegister"] = false;

                if ($value->{"usuario.permite_recargareg"} == "S") {
                    $array["CanActivateRegister"] = true;
                }
                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * UserManagement/GetPartnerAdminUserById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPartnerAdminUserById":

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $id = $_REQUEST["userId"];

            $Usuario = new Usuario($id);

            $final = [];

            $final["Id"] = $Usuario->usuarioId;
            $final["Name"] = $Usuario->nombre;
            $final["UserName"] = $Usuario->login;
            $final["Name"] = $Usuario->nombre;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * BetShop/GetCashDeskById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetCashDeskById";

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $id = $_REQUEST["id"];

            $Usuario = new Usuario($id);

            $final = [];

            $final["Id"] = $Usuario->usuarioId;
            $final["Name"] = $Usuario->nombre;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * BetShop/GetBetShops
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetBetShops":


            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            $Name = $_REQUEST["Name"];
            $Login = $_REQUEST["Login"];
            $CountrySelect = $_REQUEST["CountrySelect"];

            $Mandante = new Mandante();

            if ($SkeepRows == "" || $MaxRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($_SESSION["win_perfil"] == "PUNTOVENTA" || $_SESSION["win_perfil"] == "CAJERO") {
                $seguir = false;

            }

            if ($seguir) {

                $rules = [];

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));


                if ($Name != "") {
                    array_push($rules, array("field" => "usuario.nombre", "data" => $Name, "op" => "cn"));
                }

                if ($Login != "") {
                    array_push($rules, array("field" => "usuario.login", "data" => $Login, "op" => "cn"));
                }
                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $CountrySelect, "op" => "eq"));
                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $PuntoVenta = new PuntoVenta();


                $mandantes = $PuntoVenta->getPuntoVentasCustom("usuario.mandante,usuario.estado_valida,usuario.fecha_crea,usuario.moneda,usuario.fecha_ult,punto_venta.*,pais.*", "punto_venta.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $mandantes = json_decode($mandantes);


                $final = [];

                foreach ($mandantes->data as $key => $value) {

                    $array = [];
                    $array["StateValidate"] = $value->{"usuario.estado_valida"};

                    if ($_SESSION["win_perfil2"] != "CONCESIONARIO" && $_SESSION["win_perfil2"] != "CONCESIONARIO2") {
                        $array["Action"] = $value->{"usuario.estado_valida"};

                    } else {
                        $array["Action"] = '';
                    }
                    $array["id"] = $value->{"punto_venta.usuario_id"};
                    $array["Id"] = $value->{"punto_venta.usuario_id"};
                    $array["Name"] = $value->{"punto_venta.descripcion"};
                    $array["Phone"] = $value->{"punto_venta.telefono"};
                    $array["Email"] = $value->{"usuario.email"};
                    $array["CityName"] = $value->{"ciudad.ciudad_nom"};
                    $array["DepartmentName"] = $value->{"departamento.depto_nom"};
                    $array["RegionName"] = $value->{"pais.pais_nom"};
                    $array["Country"] = $value->{"usuario.mandante"}.'-'.$value->{"pais.pais_nom"};
                    $array["CountryIcon"] = strtolower($value->{"pais.iso"});
                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["Address"] = $value->{"punto_venta.direccion"};
                    $array["CreatedDate"] = $value->{"usuario.fecha_crea"};;
                    $array["LastLoginDateLabel"] = $value->{"usuario.fecha_ult"};;
                    $array["Partner"] = $value->{"usuario.mandante"};

                    $array["Type"] = $value->{"tipo_punto.descripcion"};
                    $array["MinBet"] = $value->{"usuario_premiomax.apuesta_min"};
                    $array["PreMatchPercentage"] = $value->{"punto_venta.porcen_comision"};
                    $array["LivePercentage"] = $value->{"punto_venta.porcen_comision"};
                    $array["RecargasPercentage"] = $value->{"punto_venta.porcen_comision2"};

                    $array["Amount"] = $value->{"punto_venta.cupo_recarga"};
                    $array["AmountBetting"] = $value->{"punto_venta.creditos_base"};

                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array();
                //$response["Data"]["Objects"] = $final;

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $mandantes->count[0]->{".count"};
                $response["data"] = $final;

                //Objects

            } else {
                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * BetShop/GetMachines
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetMachines":


            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            $Mandante = new Mandante();

            if ($SkeepRows == "" || $MaxRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($_SESSION["win_perfil"] == "PUNTOVENTA" || $_SESSION["win_perfil"] == "CAJERO") {
                $seguir = false;

            }

            if ($seguir) {

                $rules = [];

                if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }

                if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                    $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                    array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "MAQUINAANONIMA", "op" => "eq"));


                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $PuntoVenta = new PuntoVenta();


                $mandantes = $PuntoVenta->getPuntoVentasCustom("usuario.estado_valida,usuario.fecha_crea,usuario.moneda,usuario.fecha_ult,punto_venta.*", "punto_venta.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $mandantes = json_decode($mandantes);


                $final = [];

                foreach ($mandantes->data as $key => $value) {

                    $array = [];
                    $array["StateValidate"] = $value->{"usuario.estado_valida"};

                    if ($_SESSION["win_perfil2"] != "CONCESIONARIO" && $_SESSION["win_perfil2"] != "CONCESIONARIO2") {
                        $array["Action"] = $value->{"usuario.estado_valida"};

                    } else {
                        $array["Action"] = '';
                    }
                    $array["id"] = $value->{"punto_venta.usuario_id"};
                    $array["Id"] = $value->{"punto_venta.usuario_id"};
                    $array["Name"] = $value->{"punto_venta.descripcion"};
                    $array["Phone"] = $value->{"punto_venta.telefono"};
                    $array["Email"] = $value->{"usuario.email"};
                    $array["CityName"] = $value->{"ciudad.ciudad_nom"};
                    $array["DepartmentName"] = $value->{"departamento.depto_nom"};
                    $array["RegionName"] = $value->{"pais.pais_nom"};
                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["Address"] = $value->{"punto_venta.direccion"};
                    $array["CreatedDate"] = $value->{"usuario.fecha_crea"};;
                    $array["LastLoginDateLabel"] = $value->{"usuario.fecha_ult"};;

                    $array["Type"] = $value->{"tipo_punto.descripcion"};
                    $array["MinBet"] = $value->{"usuario_premiomax.apuesta_min"};
                    $array["PreMatchPercentage"] = $value->{"punto_venta.porcen_comision"};
                    $array["LivePercentage"] = $value->{"punto_venta.porcen_comision"};
                    $array["RecargasPercentage"] = $value->{"punto_venta.porcen_comision2"};

                    $array["Amount"] = $value->{"punto_venta.cupo_recarga"};
                    $array["AmountBetting"] = $value->{"punto_venta.creditos_base"};

                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array();
                //$response["Data"]["Objects"] = $final;

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $mandantes->count[0]->{".count"};
                $response["data"] = $final;

                //Objects

            } else {
                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * BetShop/GetBetShopsCompetence
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetBetShopsCompetence":


            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            $Mandante = new Mandante();

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }


            $rules = [];

            if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
            }

            if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $CompetenciaPuntos = new CompetenciaPuntos();


            $mandantes = $CompetenciaPuntos->getCompetenciaPuntosCustom("competencia_puntos.*,departamento.*", "competencia_puntos.comppunto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $mandantes = json_decode($mandantes);

            $final = [];

            foreach ($mandantes->data as $key => $value) {

                $array = [];

                $array["id"] = $value->{"competencia_puntos.comppunto_id"};
                $array["Id"] = $value->{"competencia_puntos.comppunto_id"};
                $array["Name"] = $value->{"competencia_puntos.nombre"};
                $array["Description"] = $value->{"competencia_puntos.descripcion"};
                $array["Longitud"] = $value->{"competencia_puntos.longitud"};
                $array["Latitud"] = $value->{"competencia_puntos.latitud"};
                $array["Address"] = $value->{"competencia_puntos.direccion"};
                $array["CreatedDate"] = $value->{"competencia_puntos.fecha_crea"};
                $array["CompetitionId"] = $value->{"competencia_puntos.competencia_id"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array();
            //$response["Data"]["Objects"] = $final;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $mandantes->count[0]->{".count"};
            $response["data"] = $final;

            //Objects

            break;

        /**
        * BetShop/GetBetShopsCompetenceMap
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/GetBetShopsCompetenceMap":


            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            $Mandante = new Mandante();

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }


            $rules = [];

            if ($_SESSION["win_perfil"] == "CONCESIONARIO") {
                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
            }

            if ($_SESSION["win_perfil"] == "CONCESIONARIO2") {
                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "concesionario.prodinterno_id", "data" => "0", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $CompetenciaPuntos = new CompetenciaPuntos();


            $mandantes = $CompetenciaPuntos->getCompetenciaPuntosCustom("competencia_puntos.*,departamento.*", "competencia_puntos.comppunto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $mandantes = json_decode($mandantes);

            $final = [];

            foreach ($mandantes->data as $key => $value) {

                $array = [];

                $array["id"] = $value->{"competencia_puntos.comppunto_id"};
                $array["Id"] = $value->{"competencia_puntos.comppunto_id"};
                $array["Name"] = $value->{"competencia_puntos.nombre"};
                $array["Description"] = $value->{"competencia_puntos.descripcion"};
                $array["Longitud"] = $value->{"competencia_puntos.longitud"};
                $array["Latitud"] = $value->{"competencia_puntos.latitud"};
                $array["Address"] = $value->{"competencia_puntos.direccion"};
                $array["CompetitionId"] = $value->{"competencia_puntos.competencia_id"};

                switch ($array["CompetitionId"]) {
                    case 1:
                        $array["CompetitionName"] = "Inkabet";
                        $array["CompetitionColor"] = "black";
                        break;
                    case 2:
                        $array["CompetitionName"] = "BetCris";
                        $array["CompetitionColor"] = "#1B3459";
                        break;
                    case 3:
                        $array["CompetitionName"] = "ApuestaTotal";
                        $array["CompetitionColor"] = "red";
                        break;
                }

                array_push($final, $array);

            }


            $rules = [];
            array_push($rules, array("field" => "usuario.ubicacion_longitud", "data" => "''", "op" => "nn"));
            array_push($rules, array("field" => "usuario.ubicacion_latitud", "data" => "''", "op" => "nn"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $PuntoVenta = new PuntoVenta();


            $mandantes = $PuntoVenta->getPuntoVentasCustom("usuario.fecha_crea,usuario.nombre,usuario.ubicacion_longitud,usuario.ubicacion_latitud,usuario.moneda,usuario.fecha_ult,punto_venta.*", "punto_venta.puntoventa_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $mandantes = json_decode($mandantes);


            foreach ($mandantes->data as $key => $value) {

                $array = [];

                $array["Name"] = $value->{"usuario.nombre"};
                $array["Description"] = $value->{"usuario.nombre"};
                $array["Longitud"] = $value->{"usuario.ubicacion_longitud"};
                $array["Latitud"] = $value->{"usuario.ubicacion_latitud"};
                $array["Address"] = $value->{"punto_venta.direccion"};
                $array["CompetitionId"] = 0;
                $array["CompetitionName"] = "Doradobet";
                $array["CompetitionColor"] = "#b48303";

                array_push($final, $array);

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array();
            //$response["Data"]["Objects"] = $final;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $mandantes->count[0]->{".count"};
            $response["data"] = $final;

            //Objects

            break;

        case "BetShop/SaveBetshopCompetence2":

            $json = json_decode('{"status":"success","data":{"BAGUA GRANDE":[{"city":"AMAZONAS","district":"BAGUA GRANDE","address":"PUEBLO TRADICIONAL CERCADO DE BAGUA GRANDE - SECTOR PUEBLO NUEVO MZ PN20, LOTE 15A (JR. SAN MARTIN Nro. 321) UCTUBAMBA - AMAZONAS","name":"AD Jr San Martin Bagua","lat":"-5.7550082","lng":"-78.4430682"}],"CHACHAPOYAS":[{"city":"AMAZONAS","district":"CHACHAPOYAS","address":"JR. DOS DE MAYO N\u00b0 638 - CHACHAPOYAS  - AMAZONAS","name":"AD Jr Dos de Mayo Chachapoyas","lat":"-6.230214","lng":"-77.871026"}],"CARAZ":[{"city":"ANCASH","district":"CARAZ","address":"CENTRO POBLADO CARAZ MZ. U1 LOTE 11 BARRIO AREQUIPA (JIRON SAN MARTIN 1008), CARAZ, HUAYLAS, ANCASH","name":"AT Caraz","lat":"-9.048426","lng":"-77.805697"}],"CASMA":[{"city":"ANCASH","district":"CASMA","address":"AV. NEPE\u00d1A MZ C .LOT 6 CASMA-ANCASH","name":"Nepe\u00f1a","lat":"-9.475298","lng":"-78.302934"}],"CHIMBOTE":[{"city":"ANCASH","district":"CHIMBOTE","address":"AV. MANUEL RUIZ 368-382 CASCO URBANO - CHIMBOTE","name":"Sport Bar Miami","lat":"-9.075316","lng":"-78.590937"},{"city":"ANCASH","district":"CHIMBOTE","address":"AV. JOSE PARDO No 472 - 476","name":"Moulin Rouge Chimbote","lat":"-9.075617","lng":"-78.593301"}],"HUARAZ":[{"city":"ANCASH","district":"HUARAZ","address":"JR 27 DE NOV. N\u00aa 414-416-418 ZONA COMERCIAL PROVINCIA DE HUARAZ- ANCASH","name":"27 de Noviembre","lat":"-9.5261661","lng":"-77.548704"}],"HUARMEY":[{"city":"ANCASH","district":"HUARMEY","address":"PROGRAMA MI VIVIENDA P.V.H.U ZONA OESTE, MZ A, LOTE 23, (AV. ALBERTO REYES N\u00b0164) HUARMEY - ANCASH","name":"AD Huarmey Alberto Reyes","lat":"-10.068674","lng":"-78.153411"}],"LA LIBERTAD":[{"city":"ANCASH","district":"LA LIBERTAD","address":"AV. UNIVERSITARIA N\u00aa 991 INDEPENDENCIA-HUARAZ","name":"Universitaria","lat":"-9.516106","lng":"-77.526665"}],"NUEVO CHIMBOTE":[{"city":"ANCASH","district":"NUEVO CHIMBOTE","address":"MZ E LT 44 SECTOR 74-75 NUEVO CHIMBOTE ","name":"Mcdo. Buenos Aires","lat":"-9.128008","lng":"-78.520891"},{"city":"ANCASH","district":"NUEVO CHIMBOTE","address":"AV PACIFICO 754 MZ H LT 8 CHIMBOTE ","name":"Pacifico","lat":"-9.124631","lng":"-78.529176"}],"SANTA":[{"city":"ANCASH","district":"SANTA","address":"PUEBLO TRADICIONAL  SANTA MZ. M LOTE 17. DISTRITO DE SANTA - SANTA - ANCASH","name":"AT Santa Ancash ","lat":"-8.988357","lng":"-78.613491"}],"AREQUIPA":[{"city":"AREQUIPA","district":"AREQUIPA","address":"PUEBLO TRADICIONAL MIRAFLORES-MZNA B4 LOTE 1  MIRAFLORES","name":"Tienda AD Progreso","lat":"-16.393518","lng":"-71.522612"},{"city":"AREQUIPA","district":"AREQUIPA","address":"CALLE GUA\u00d1AMARCA N\u00b0 100 ( REF CALLE AYACUCHO N\u00b0 201 REFERENCIA ESQUINA CALLE RIVERO N\u00b0 500 ) DISTRITO DE CERCADO, PROVINCIA Y DEPARTAMENTO DE AREQUIPA","name":"Tienda AD Rivero","lat":"-16.395036","lng":"-71.532166"}],"CAYMA":[{"city":"AREQUIPA","district":"CAYMA","address":"AV CAYMA N\u00b0600 LOCAL D DISTRITO DE CAYMA PROVINCIA Y DEPARTAMENTO DE AREQUIPA ","name":"Tienda AD Cayma","lat":"-16.387635","lng":"-71.547157"}],"CERRO COLORADO":[{"city":"AREQUIPA","district":"CERRO COLORADO","address":"AV. AVIACION Nro. 2004 - AREQUIPA","name":"AD Repsol Zamacola","lat":"-16.355326","lng":"-71.566432"}],"MIRAFLORES":[{"city":"AREQUIPA","district":"MIRAFLORES","address":"AV. PROGRESO Nro. 401 - ARGENTINA","name":"AD Repsol Progreso","lat":"-16.391987","lng":"-71.523849"},{"city":"LIMA","district":"MIRAFLORES","address":"TIENDA Nro. 3 DE LA AV. ALFREDO BENAVIDES N\u00b0 716 - EDIFICIO SANTA CRISTINA Nro. 712","name":"APT Benavides","lat":"-12.1250915","lng":"-77.0255652"}],"YANAHUARA":[{"city":"AREQUIPA","district":"YANAHUARA","address":"CALLE RICARDO PALMA Nro 504 - 502 URB. LA QUINTA UMACOLLO","name":"AD Repsol Umacollo","lat":"-16.403541","lng":"-71.547475"}],"AYACUCHO":[{"city":"AYACUCHO","district":"AYACUCHO","address":"JR. CALLAO N\u00b0 324 - HUAMANGA - AYACUCHO","name":"AD Jr Callao Ayacucho","lat":"-13.158997","lng":"-74.228901"},{"city":"AYACUCHO","district":"AYACUCHO","address":"JR. CUSCO N\u00b0 07 HUAMANGA - AYACUCHO","name":"AD Jr Cuzco Ayacucho","lat":"-13.160268","lng":"-74.223233"}],"BAMBAMARCA":[{"city":"CAJAMARCA","district":"BAMBAMARCA","address":"MZ 89 SUB LOTE A-2, BAMBAMARCA (av. Bolognesi N\u00b0 693 bambamarca - hualgayoc)","name":"AD Bambamarca","lat":"-6.679931","lng":"-78.519584"}],"CAJAMARCA":[{"city":"CAJAMARCA","district":"CAJAMARCA","address":"JIRON DEL COMERCIO N\u00b0 832 - CAJAMARCA","name":"AD Comercio","lat":"-7.157263","lng":"-78.518251"},{"city":"CAJAMARCA","district":"CAJAMARCA","address":"AV. LOS HEROES N\u00b0 613  - CAJAMARCA ","name":"AD Los H\u00e9roes","lat":"-7.16393","lng":"-78.510565"},{"city":"CAJAMARCA","district":"CAJAMARCA","address":"JR. APURIMAC 991 CAJAMARCA ","name":"AD Apur\u00edmac","lat":"-7.154323","lng":"-78.517355"}],"CELENDIN":[{"city":"CAJAMARCA","district":"CELENDIN","address":"AV. DOS DE MAYO N\u00b0 573 - CELENDIN  - CAJAMARCA ","name":"AD 02 de Mayo Celend\u00edn","lat":"-6.866865","lng":"-78.146094"}],"CHOTA":[{"city":"CAJAMARCA","district":"CHOTA","address":"JR. CAJAMARCA 424 - CHOTA - CAJAMARCA","name":"AD Jr Cajamarca Chota","lat":"-6.562519","lng":"-78.649736"}],"CUTERVO":[{"city":"CAJAMARCA","district":"CUTERVO","address":"JR. RAMON CASTILLA 375 - CUTERVO - CAJAMARCA","name":"AD Jr Ramon Castilla Cutervo","lat":"-6.376587","lng":"-78.818328"}],"JAEN":[{"city":"CAJAMARCA","district":"JAEN","address":"CALLE SIMON BOLIVAR 1442 JAEN - CAJA MARCA","name":"AD Simon Bolivar Jaen","lat":"-5.70885","lng":"-78.808233"}],"CUSCO":[{"city":"CUSCO","district":"CUSCO","address":"CALLE ARCOPUNCO No 631 (ANTES PARTE INTEGRADA DEL INMUEBLE No 30 DE LA PLAZOLETA LIMACPAMPA GRANDE) - CUSCO","name":"AT Arcopunco","lat":"-13.519746","lng":"-71.972622"}],"SANTIAGO":[{"city":"CUSCO","district":"SANTIAGO","address":"CALLE BELEN 553 - DISTRITO DE SANTIAGO - CUSCO ","name":"AT Belen","lat":"-13.522599","lng":"-71.979667"}],"WANCHAQ":[{"city":"CUSCO","district":"WANCHAQ","address":"LOTE # 12 DE LA URBANIZACION HUANCHAC - WANCHAQ - CUSCO","name":"AT Huayna Capac","lat":"-13.522487","lng":"-71.969617"},{"city":"CUSCO","district":"WANCHAQ","address":"908-A DE LA FRACCION DE TERRENO PARTE REINTEGRAN DEL LOTE No DE LA MZ 275 DE LA URB. CHACHACOMAYOC - DISTRITO WANCHAQ - CUSCO","name":"AT Los Incas","lat":"-13.523301","lng":"-71.960302"}],"HUANUCO":[{"city":"HUANUCO","district":"HUANUCO","address":"JR GENERAL PRADO N\u00b0 640-644- HUANUCO ","name":"Huanuco 01","lat":"-9.929328","lng":"-76.240981"}],"NAZCA":[{"city":"ICA","district":"NAZCA","address":"CALLE ARICA 121 NAZCA  - ICA","name":"AD Nazca","lat":"-14.829052","lng":"-74.937414"}],"PISCO":[{"city":"ICA","district":"PISCO","address":"JR. PEREZ FIGUEROA N\u00b0 270 - PISCO - ICA","name":"AD Pisco","lat":"-13.710491","lng":"-76.201972"}],"EL TAMBO":[{"city":"JUNIN","district":"EL TAMBO","address":"AV JOS\u00c9 CARLOS MARIATEGUI NRO 600 EL TAMBO, HUANCAYO, JUNIN","name":"AT Primax Huancayo","lat":"-12.054528","lng":"-75.220306"}],"HUANCAYO":[{"city":"JUNIN","district":"HUANCAYO","address":"AV. 9 DE DICIEMBRE Nro. 517 - CHILCA - HUANCAYO","name":"Metro Chilca Huancayo","lat":"-12.084647","lng":"-75.204877"}],"CHEPEN":[{"city":"LA LIBERTAD","district":"CHEPEN","address":"C.P CHEPEN SECTOR VII Mz. 163, LOTE 7 - CHEPEN - LA LIBERTAD","name":"AD Chep\u00e9n Centro Poblado","lat":"-7.226756","lng":"-79.430245"}],"HUAMACHUCO":[{"city":"LA LIBERTAD","district":"HUAMACHUCO","address":"JIRON RAMON CASTILLA 275 - HUAMACHUCO - SANCHEZ CARRION - LA LIBERTAD","name":"AD Huamachuco Ram\u00f3n Castilla","lat":"-7.816128","lng":"-78.049931"}],"LA ESPERANZA":[{"city":"LA LIBERTAD","district":"LA ESPERANZA","address":"CALLE JOSE CARLOS MARIA DE ALVEAR 845 (PUEBLO JOVEN LA ESPERANZA SECTOR BARRIO 3 MZ 4 LOTE 11C) DISTRITO LA ESPERANZA - TRUJILLO","name":"AT La Esperanza","lat":"-8.083069","lng":"-79.042126"}],"OTUZCO":[{"city":"LA LIBERTAD","district":"OTUZCO","address":"CENTRO POBLADO OTUZCO MZ 98 LOTE 27 (CALLE TACNA 326) OTUZCO-LA LIBERTAD","name":"AT Otuzco","lat":"-7.399547","lng":"-79.567793"}],"PACASMAYO":[{"city":"LA LIBERTAD","district":"PACASMAYO","address":"AV. GONZALO UGAS SALCEDO N\u00b009 TIENDA 01, PACASMAYO, PACASMAYO, LA LIBERTAD","name":"AT Primax Pacasmayo","lat":"-7.39955","lng":"-79.567788"},{"city":"LA LIBERTAD","district":"PACASMAYO","address":"JR. JUNIN Nro. 34 - PACASMAYO - LA LIBERTAD","name":"AD Pacasmayo","lat":"-7.400948","lng":"-79.571749"}],"TRUJILLO":[{"city":"LA LIBERTAD","district":"TRUJILLO","address":"JR. GAMARA No 569 - 575 - TRUJILLO","name":"Casino Gangas","lat":"-8.11099","lng":"-79.02623"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV CESAR VALLEJO MZ 11 LT 14 URB JARDINES DEL GOLF -VICTOR LARCO HERRERA - TRUJILLO ","name":"El Golf","lat":"-8.13391","lng":"-79.035403"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"REPUBLICA DOMINICANA MZ W LT 14 1ER PISO MONSERRATA II ETAPA - TRUJILLO","name":"Tienda Monserrate","lat":"-8.124203","lng":"-79.031306"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV. ESPA\u00f1A 563 - 565 - 567 LOTE 02 DISTRITO TRUJILLO - TRUJILLO","name":"AT Bomberos Espa\u00f1a","lat":"-8.109864","lng":"-79.032301"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV RICARDO PALMA MZ LL LOTE 12 TRUJILLO, TRUJILLO, LA LIBERTAD","name":"AT Pecsa El Bosque","lat":"-8.112658","lng":"-79.006495"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV CESATR VALLEJO N\u00b0219 PALERMO TRUJILLO","name":"Casino Espa\u00f1a","lat":"-8.114227","lng":"-79.024134"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"TEODORO VALCARCEL 287 2DO PISO TIENDA 4 URB PRIMAVERA-TRUJILLO","name":"AD Primavera","lat":"-8.100557","lng":"-79.035271"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"JR. MARISCAL ORBEGOSO No 524-530 - TRUJILLO","name":"Moulin Rouge Trujillo","lat":"-8.112008","lng":"-79.027617"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV CESATR VALLEJO N\u00b0219 PALERMO TRUJILLO","name":"Casino Vallejo 777","lat":"-8.111287","lng":"-79.018516"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV LOS PAUJILES MZ A LT 13 URB LOS PINOS- TRUJILLO ","name":"UCV Los Pinos","lat":"-8.127182","lng":"-79.044006"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"JR. LUIS JOSE DE ORBEGOSO 554-560 ","name":"Casino Star","lat":"-8.112092","lng":"-79.027575"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV. PERU 1550, URB. DANIEL HOYLE, TRUJILLO, TRUJILLO, LA LIBERTAD","name":"AT Repsol Av Peru","lat":"-8.097095","lng":"-79.011304"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV AMERICA NORTE 1085 MZ I LOTE 27 - TRUJILLO ","name":"Grifo Pecsa","lat":"-8.094563","lng":"-79.021684"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"HUSARES DE JUNIN 1133-1137-1139  urb. ARBOLEDA -TRUJILLO ","name":"La Arboleda","lat":"-8.126277","lng":"-79.035698"},{"city":"LA LIBERTAD","district":"TRUJILLO","address":"AV. AMERICA NORTE CON AV. SALVADOR LARA - TRUJILLO","name":"AT Pecsa II","lat":"-8.094565","lng":"-79.021651"}],"VICTOR LARCO HERRERA":[{"city":"LA LIBERTAD","district":"VICTOR LARCO HERRERA","address":"AV. LARCO HERRERA N\u00b0 1533-A, VICTOR LARCO HERRERA, TRUJILLO, LA LIBERTAD.","name":"AT Avenida Larco","lat":"-8.128226","lng":"-79.041722"}],"CHICLAYO":[{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"AV. SAENZ PE\u00d1A N\u00b0 2120 - URB. LATINA - JLO - CHICLAYO","name":"APT Plaza Civica","lat":"-6.760391","lng":"-79.834678"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"CALLE ELIAS AGUIRRE N\u00b0 600 MZ 138 LT 1 - CHICLAYO ","name":"Cix Centro 1","lat":"-6.771757","lng":"-79.839774"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"AV. EL DORADO N\u00b0 1306 - JLO - CHICLAYO","name":"El Dorado","lat":"-6.7586111","lng":"-79.8485718"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"AV. JUAN TOMAS STACK Nro. 250 - CHICLAYO - LAMBAYEQUE","name":"AD Metro Santa Elena","lat":"-6.772438","lng":"-79.863025"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"CALLE LOS FAIQUES 101 URB. SANTA VICTORIA","name":"Casino Las Musas","lat":"-6.779525","lng":"-79.838957"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"AV. FRANCISCO BOLOGNESI N\u00aa 1197 - CHICLAYO-LAMBAYEQUE","name":"AD Real Plaza","lat":"-6.7763396","lng":"-79.841227"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"CALLE AMAPOLAS 110 URB LA PRIMAVERA - CHICLAYO ","name":"Los Pueblos","lat":"-6.7628256","lng":"-79.8454321"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"AV. FRANCISCO BOLOGNESI N\u00aa 772 Y CALLE 7 DE ENERO SECCION 3 - CHICLAYO-LAMBAYEQUE","name":"AD Bolognesi","lat":"-6.679931","lng":"-78.519584"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"Av. FCO.Bolognesi N\u00b0772","name":"La Jugada","lat":"-6.775863","lng":"-79.837508"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"FRANCISCO CUNEO SALAZAR N`~ 110 URB. PATAZCA - CHICLAYO","name":"AD Grifo Romar Chiclayo","lat":"-6.770035","lng":"-79.845854"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"MANUEL PARDO 294 CHICLAYO ","name":"Farma-Cuglievan","lat":"-6.765335","lng":"-79.84019"},{"city":"LAMBAYEQUE","district":"CHICLAYO","address":"CALLE JUDA Nro. 313 MZ. F, LOTE 8 URB. MIRAFLORES 1ER ETAPA CHICLAYO - LAMBAYEQUE","name":"AD Miraflores Chiclayo","lat":"-6.759848","lng":"-79.859106"}],"ETEN":[{"city":"LAMBAYEQUE","district":"ETEN","address":"PUEBLO TRADICIONAL CIUDAD ETEN MZ 36 LOTE 11 - ETEN - CHICLAYO - LAMBAYEQUE","name":"AT Eten","lat":"-6.90832","lng":"-79.863246"}],"FERRE\u00d1AFE":[{"city":"LAMBAYEQUE","district":"FERRE\u00d1AFE","address":"MZ. 131 LT. 21 PUEBLO TRADICIONAL FERRE\u00d1AFE","name":"AD Ferre\u00f1afe","lat":"-6.6391279","lng":"-79.7875009"}],"JOSE LEONARDO ORTIZ":[{"city":"LAMBAYEQUE","district":"JOSE LEONARDO ORTIZ","address":"AV. AGRICULTURA N\u00aa 535 JOSE LEONARDO ORTIZ -CHICLAYO -LAMBAYEQUE","name":"AD Agricultura","lat":"-6.759232","lng":"-79.824414"}],"LA VICTORIA":[{"city":"LAMBAYEQUE","district":"LA VICTORIA","address":"MZ U2, LOTE 14, AAHH \/ PPJJ - LA VICTORIA - CHICLAYO","name":"AD Los Andenes","lat":"-6.795461","lng":"-79.843888"},{"city":"LIMA","district":"LA VICTORIA","address":"JR, HUANUCO # 2389 DISTRITO LA VICTORIA - LIMA","name":"AT Jiron Huanuco La Victoria","lat":"-12.072335","lng":"-77.013991"},{"city":"LIMA","district":"LA VICTORIA","address":"AV. CANADA N\u00b0 965 - LA VICTORIA","name":"AD Repsol Santa Catalina","lat":"-12.0821929","lng":"-77.0164778"},{"city":"LIMA","district":"LA VICTORIA","address":"AV. MANCO CAPAC N\u00ba 528 VICTORIA","name":"AD Manco Capac","lat":"-12.065056","lng":"-77.0291427"},{"city":"LIMA","district":"LA VICTORIA","address":"AV. ISABEL LA CATOLICA # 112, LA VICTORIA, LIMA, LIMA","name":"AT Isabel La Catolica","lat":"-12.070419","lng":"-77.030454"},{"city":"LIMA","district":"LA VICTORIA","address":"AV. DEL AIRE No 746, URB SANTA CATALINA - LA VICTORIA - LIMA","name":"AT Av del Aire","lat":"-12.081762","lng":"-77.005506"},{"city":"LIMA","district":"LA VICTORIA","address":"AV. CANADA Nro. 1110 SANTA CATALINA - LA VICTORIA - LIMA","name":"AD Metro Canada","lat":"-12.0835707","lng":"-77.0137523"}],"LAMBAYEQUE":[{"city":"LAMBAYEQUE","district":"LAMBAYEQUE","address":"AV. RAMON CASTILLA 894- LAMBAYEQUE","name":"Lambayeque 01","lat":"-6.7059391","lng":"-79.9033271"}],"MOCHUMI":[{"city":"LAMBAYEQUE","district":"MOCHUMI","address":"PUEBLO TRADICIONAL MOCHUMI MZ10 LOTE 34, MOCHUMI, LAMBAYEQUE, LAMBAYEQUE","name":"AT Mochumi","lat":"-6.547112","lng":"-79.864174"}],"MONSEFU":[{"city":"LAMBAYEQUE","district":"MONSEFU","address":"PUEBLO TRADICIONAL MONSEFU MZ 32 SUB LOTE 18-A MONSEFU - CHICLAYO- LAMBAYEQUE","name":"AT Monsefu - Lambayeque","lat":"-6.876068","lng":"-79.871528"}],"MORROPE":[{"city":"LAMBAYEQUE","district":"MORROPE","address":"AA.HH RITCHER PRADA MZ. E LOTE 1,DISTRITO DE MORROPE, LAMBAYEQUE","name":"AT Morrope - Lambayeque","lat":"-6.541189","lng":"-80.014361"}],"MOTUPE":[{"city":"LAMBAYEQUE","district":"MOTUPE","address":"PUEBLO TRADICIONAL MOTUPE MZ 3-2 LOTE 10,MOTUPE, LAMBAYEQUE, LAMBAYEQUE (Calle Garcilazo De La Vega # 296)","name":"AT Motupe","lat":"-6.154631","lng":"-79.716876"}],"OLMOS":[{"city":"LAMBAYEQUE","district":"OLMOS","address":"CALLE BOLOGNESI 3 431 - 445, SUB LOTE 15C PUEBLO TRADICIONAL OLMOS, OLMOS, LAMBAYEQUE, LAMBAYEQUE","name":"AT Olmos","lat":"-5.988551","lng":"-79.74747"}],"TUMAN":[{"city":"LAMBAYEQUE","district":"TUMAN","address":"BLOCK 15, MZ 10, LOTE 9, SECTOR No 8 DISTRITO TUMAN - CHICLAYO  - LAMBAYEQUE","name":"AT Tuman","lat":"-6.7491","lng":"-79.703032"}],"ATE":[{"city":"LIMA","district":"ATE","address":"AV LOS QUECHUAS 1184 URB SALAMANCA - ATE ","name":"Salamanca 01","lat":"-12.07498","lng":"-76.979821"},{"city":"LIMA","district":"ATE","address":"MZ A LOTE 1 DE LA LOTIZACION INDUSTRIAL SANTA LUCIA (AV. NICOLAS DE AYLLON 2098), ATE VITARTE, LIMA, LIMA","name":"AT Nicolas de Ayllon","lat":"-12.063358","lng":"-76.982687"},{"city":"LIMA","district":"ATE","address":"UNIDAD CATASTRAL (Carretera Central Km 16.5 Parcela de Predio R\u00fastico), ATE, LIMA, LIMA","name":"AT Repsol Pariachi","lat":"-11.999959","lng":"-76.838446"},{"city":"LIMA","district":"ATE","address":"AV. SANTA ROSA N\u00b0 610, URB. LOS SAUCES - ATE - LIMA ","name":"APT Ate","lat":"-12.0694684","lng":"-76.9808811"}],"BARRANCA":[{"city":"LIMA","district":"BARRANCA","address":"AV RAMON CASTILLA 921- BARRANCA ","name":"Tienda Barranca","lat":"-10.6784931","lng":"-77.8177611"}],"BRE\u00d1A":[{"city":"LIMA","district":"BRE\u00d1A","address":"JR. LORETO # 353-A BRE\u00f1A - LIMA","name":"AT Jr Loreto","lat":"-12.053332","lng":"-77.049242"},{"city":"LIMA","district":"BRE\u00d1A","address":"AV. VENEZUELA # 954 -  CASA - PRIMER PISO EDIF, BRE\u00f1A - LIMA","name":"AT Venezuela","lat":"-12.054912","lng":"-77.047091"}],"CHORRILLOS":[{"city":"LIMA","district":"CHORRILLOS","address":"AV. DEFENSORES DEL MORRO No 595-599, AV. PARAGUAY No 119 CHORRILLOS - LIMA","name":"AT Defensores del Morro Chorrillos","lat":"-12.169433","lng":"-77.023612"},{"city":"LIMA","district":"CHORRILLOS","address":"BARRIO MARGINAL SANTA TERESA DE VILLA - SECTOR I MZ. 4 SUBLOTE 3A UNIDAD INMOBILIARIA, CHORRILLOS, LIMA, LIMA","name":"AT Villa Chorrillos","lat":"-12.185371","lng":"-77.007451"},{"city":"LIMA","district":"CHORRILLOS","address":"MZ E LOTE 14-F,  (C. LAS LILAS 377) URB VALLE SARON - SJM ","name":"San Juan de Miraflores 01","lat":"-12.170231","lng":"-76.968665"},{"city":"LIMA","district":"CHORRILLOS","address":"AV. JOSE LARCO NRO. 1207 LIMA - LIMA - MIRAFLORES","name":"The corner","lat":"-12.130044","lng":"-77.02963"},{"city":"LIMA","district":"CHORRILLOS","address":"AV. PROLONGACION BENAVIDESNo 5205 \/ CALLE ALDANAS No 4750","name":"Casino Mambo Jambo","lat":"-12.129266","lng":"-76.982872"},{"city":"LIMA","district":"CHORRILLOS","address":"MZ D-9 LOTE 34 URB LOS CEDROS - CHORRILLOS","name":"AD Los Cedros Chorrillos","lat":"-12.204206","lng":"-77.0161588"},{"city":"LIMA","district":"CHORRILLOS","address":"AV. DEFENSORES DEL MORRO # 2070 - CHORRILLOS - LIMA","name":"AT Metro Huaylas","lat":"-12.181424","lng":"-77.013078"}],"COMAS":[{"city":"LIMA","district":"COMAS","address":"JR, AREQUIPA 665-667 UNIDAD INMOBILIARIA No 05 ZONA H - COMAS - LIMA","name":"AT Jr. Arequipa Comas","lat":"-11.956616","lng":"-77.048983"},{"city":"LIMA","district":"COMAS","address":"LOTE 10 DE LA MZ A DE LA URB. POPULAR DE INTERES SOCIAL DENOMINADA HUAQUILLAY - COMAS - LIMA","name":"AT Belaunde - Comas","lat":"-11.938305","lng":"-77.052201"},{"city":"LIMA","district":"COMAS","address":"AV. REVOLUCION 1459 MZ. 55 LOTE 17 - COMAS - LIMA","name":"AD Revoluci\u00f3n Comas","lat":"-11.9141174","lng":"-77.0285888"},{"city":"LIMA","district":"COMAS","address":"CALLE LOS MANZANOS 112, MZ Q, LTE. 03 - COMAS - LIMA","name":"AD Los Manzanos Comas","lat":"-11.9415247","lng":"-77.0498475"},{"city":"LIMA","district":"COMAS","address":"LOTE ACUMULADO N\u00b0 5, 6, 7 ,8, 9 y 10 DE LA MZ \u201cA\u201d, CON FRENTE A LA AV. TUPAC AMARU, URB. CHACRA CERRO (Av. Tupac Amaru 5863), COMAS, LIMA, LIMA","name":"AT Ricardo Palma","lat":"-11.943193","lng":"-77.050785"},{"city":"LIMA","district":"COMAS","address":"PUEBLO JOVEN PAMPA DE COMAS MZ.J, LOTE 2, ZONA H (JR. ARNALDO ALVARADO # 688 MZ. J LOTE 02.), COMAS, LIMA, LIMA","name":"AT Mercado Alvarado","lat":"-12.207664","lng":"-76.939758"},{"city":"LIMA","district":"COMAS","address":"AV. TUPAC AMARU 3855 - COMAS - LIMA","name":"Av Tupac Amaru","lat":"-11.934092","lng":"-77.047328"}],"HUACHO":[{"city":"LIMA","district":"HUACHO","address":"CON FRENTE A LA AVENIDA 28 DE JULIO # 227, HUACHO, HUAURA, LIMA","name":"AT Huacho","lat":"-11.107422","lng":"-77.606555"}],"HUARAL":[{"city":"LIMA","district":"HUARAL","address":"AV CHANCAY S\/C ESQUINA CALLE 3 DE OCTUBRE URB ROSARIO - HUARAL - LIMA","name":"Tienda Huaralino","lat":"-11.4972569","lng":"-77.2139368"},{"city":"LIMA","district":"HUARAL","address":"SUB LOTE No 4-A, UBICADO EN BENJAMIN VIZQUERRA No 249 - HUARAL - LIMA","name":"AT Benjamin Vizquerra - Huaral","lat":"-11.495652","lng":"-77.207673"}],"IMPERIAL":[{"city":"LIMA","district":"IMPERIAL","address":"CENTRO POBLADO IMPERIAL MZ K LOTE 11 SECCION INMOB. N1 -CA\u00d1ETE","name":"AD Imperial Ca\u00f1ete","lat":"-13.0606664","lng":"-76.3528188"}],"INDEPENDENCIA":[{"city":"LIMA","district":"INDEPENDENCIA","address":"CC.PLAZA NORTE AV. ALFREDO MENDIOLA #1400 LOCAL # 1108 - INDEPENDENCIA - LIMA","name":"AT Metro Plaza  Norte","lat":"-12.006551","lng":"-77.060285"},{"city":"LIMA","district":"INDEPENDENCIA","address":"AV. GERARDO UNGER No 3835 URB. PANAMERICANA NORTE INDUSTRIAL - INDEPENDENCIA - LIMA","name":"AT Unger","lat":"-11.98833","lng":"-77.057341"},{"city":"LIMA","district":"INDEPENDENCIA","address":"URBANIZACION POPULAR TAHUANTISUYO - PARCELA A - MZ - E LOTE 13A INDEPENDENCIA - LIMA","name":"AD Contisuyo Independencia","lat":"-11.9812914","lng":"-77.0584645"}],"JESUS MARIA":[{"city":"LIMA","district":"JESUS MARIA","address":"AV. GREGORIO ESCOBEDO Nro. 1040 - 1050 - JESUS MARIA - LIMA","name":"AD Metro Pershing","lat":"-12.0891398","lng":"-77.0578009"},{"city":"LIMA","district":"JESUS MARIA","address":"AV. BRASIL, ESQUINA CON REPUBLICA DOMINICANA TIENDA 1295 - 107 - 115 JESUS MARIA - LIMA","name":"AD Scrash","lat":"-12.0722871","lng":"-77.0511441"},{"city":"LIMA","district":"JESUS MARIA","address":"TIENDA 28 PRIMER PISO EN AV. FAUSTINO SANCHEZ CARRION # 1029, JESUS MARIA, LIMA, LIMA","name":"AT Sanchez Carrion","lat":"-12.092063","lng":"-77.054086"},{"city":"LIMA","district":"JESUS MARIA","address":"JR. HUASCAR # 1395, JESUS MARIA, LIMA, LIMA.","name":"AT Jiron Huascar","lat":"-12.076078","lng":"-77.046675"}],"LA MOLINA":[{"city":"LIMA","district":"LA MOLINA","address":"AV. JAVIER PRADO N\u00b0 5272, TIENDA N\u00b0 38 PRIMER PISO 3RA ETAPA, CENTRO COMERCIAL \u201cLA FONTANA\u201d, DISTRITO DE LA MOLINA, PROVINCIA Y DEPARTAMENTO DE LIMA","name":"AT La Fontana","lat":"-12.076583","lng":"-76.964"}],"LIMA":[{"city":"LIMA","district":"LIMA","address":"AV. COLONIAL 1599 - CERCADO DE LIMA - LIMA (Av. Mariscal Benavides)","name":"AD Colonial Cercado","lat":"-12.0484732","lng":"-77.0619953"},{"city":"LIMA","district":"LIMA","address":"AV. REYNALDO SAAVEDRA PINON N\u00b02685 URB. URB ELIO, CERCADO DE LIMA, LIMA, LIMA","name":"AT Reynaldo Saavedra","lat":"-12.054874","lng":"-77.070925"},{"city":"LIMA","district":"LIMA","address":"JR. CUSCO Nro. 245 LIMA - LIMA","name":"AD Metro Emancipacion","lat":"-12.0496689","lng":"-77.0317929"},{"city":"LIMA","district":"LIMA","address":"AV. EMANCIPACION #979, CERCADO DE LIMA, LIMA, LIMA","name":"AT Emancipacion","lat":"-12.043674","lng":"-77.041999"},{"city":"LIMA","district":"LIMA","address":"STAND Nro. 190 PRIMER PISO - AV. REPUBLICA DE ARGENTINA Nno 756 - 772 - 778 - 782 CERCADO DE LIMA","name":"AD El Reloj","lat":"-12.0441853","lng":"-77.0518035"},{"city":"LIMA","district":"LIMA","address":"AV. NICOLAS AYLLON 1912 - ATE VITARTE ","name":"AD Repsol Los Sauces","lat":"-12.063919","lng":"-76.986922"},{"city":"LIMA","district":"LIMA","address":"JR ICA N\u00ba 140 INT 103-104- CERCADO DE LIMA","name":"AD Ica Cercado","lat":"-12.0466969","lng":"-77.0326783"},{"city":"LIMA","district":"LIMA","address":"AV. COLONIAL Nro. 3002 - LIMA","name":"AD Metro Colonial","lat":"-12.0493857","lng":"-77.079546"},{"city":"LIMA","district":"LIMA","address":"AV. JOSE CARLOS MARIATEGUI LOTE 55 DE LA LOTIZACION FUNDO- ATE","name":"Mariategui Ate","lat":"-12.0264147","lng":"-76.9152058"},{"city":"LIMA","district":"LIMA","address":"AV. INCA GARCILAZO DE LA VEGA N\u00aa 1488- A CERCADO DE LIMA - LIMA","name":"AD Garcilaso de la Vega Lima","lat":"-12.0590879","lng":"-77.0070213"},{"city":"LIMA","district":"LIMA","address":"AV. BOLIVIA No 335 CERCADO DE LIMA - LIMA","name":"AT Bolivia","lat":"-12.056141","lng":"-77.039781"},{"city":"LIMA","district":"LIMA","address":"AV. DU PETIT THOURS N\u00ba 249 - 259 - 261 URB SANTA BEATRIZ-LIMA","name":"AD Petit Thouars","lat":"-12.0662019","lng":"-77.0365042"},{"city":"LIMA","district":"LIMA","address":"PRIMER PISO DE LA AV. NICOLAS DE PIEROLA No 644 - 650 URB. DEL FUNDO ORRANTIA  - CERCADO - LIMA","name":"AT Nicolas de Pierola Lima","lat":"-12.049652","lng":"-77.037591"},{"city":"LIMA","district":"LIMA","address":"CALLE JOSE GALVEZ # 900-906, CERCADO DE LIMA, LIMA, LIMA","name":"AT Santa Beatriz","lat":"-12.072678","lng":"-77.031149"}],"LINCE":[{"city":"LIMA","district":"LINCE","address":"AV. ARENALES N\u00b0 1825,LINCE, LIMA, LIMA.","name":"AT Arenales","lat":"-12.082948","lng":"-77.035744"},{"city":"LIMA","district":"LINCE","address":"JR. RICARDO NAVARRETE # 2679, LINCE, LIMA, LIMA","name":"AT Alhambra","lat":"-12.089517","lng":"-77.027138"}],"LOS OLIVOS":[{"city":"LIMA","district":"LOS OLIVOS","address":"AAHH LOS JAZMINES DEL NARANJAL Mz S Lt 9, LOS OLIVOS, LIMA, LIMA.","name":"AT Local Merprolima","lat":"-11.981561","lng":"-77.079391"},{"city":"LIMA","district":"LOS OLIVOS","address":"PASAJE LAS VENTAS N\u00aa107-111 TIENDA 30 MODULO TIPICO 1- SMP- LIMA","name":"AD Alfredo Mendiola Los Olivos","lat":"-12.005367","lng":"-77.062194"},{"city":"LIMA","district":"LOS OLIVOS","address":"CALLE CARLOS ALBERTO EYZAGUIRRE MZ. H LOTE 16 URB. ANGELICA GAMARRA DE LEON VELARDE ( AV. CARLOS EYZAGUIRRE # 1401), LOS OLIVOS, LIMA, LIMA.","name":"AT Eyzaguirre","lat":"-11.991842","lng":"-77.079365"},{"city":"LIMA","district":"LOS OLIVOS","address":"AV, ALFREDO MENDIOLA 6567 - 6569, LOS OLIVOS, LIMA, LIMA.","name":"AT UTP Mendiola","lat":"-11.952829","lng":"-77.07012"},{"city":"LIMA","district":"LOS OLIVOS","address":"AV. PROCERES DE HUANDOY N\u00aa 495 LOS OLIVOS-LIMA","name":"AD Huandoy Los Olivos","lat":"-11.9781112","lng":"-77.0838185"},{"city":"LIMA","district":"LOS OLIVOS","address":"LOTE 1 DE LA Mz. TT5,URB. PRO QUINTO SECTOR, 1ERA ETAPA, LOS OLIVOS, LIMA, LIMA. (Jir\u00f3n Honradez LA TT5 01, Urb. Pro, 5to Sector I Etapa) ","name":"AT Honradez","lat":"-11.937178","lng":"-77.07812"},{"city":"LIMA","district":"LOS OLIVOS","address":"AV. LAS PALMERAS 4988, LOS OLIVOS, LIMA,LIMA","name":"AT Las Palmeras","lat":"-11.978535","lng":"-77.072383"},{"city":"LIMA","district":"LOS OLIVOS","address":"P.J. PMV CONFRATERNIDAD MZ. 70, LOTE 10 PRIMER PISO LOS OLIVOS - LIMA","name":"AD Central Olivos","lat":"-11.9593845","lng":"-77.0753906"}],"PUEBLO LIBRE":[{"city":"LIMA","district":"PUEBLO LIBRE","address":"JR. TUPAC AMARU 399 (Jr Jose Manuel Ugarteche 399), PUEBLO LIBRE, LIMA","name":"AT Ugarteche","lat":"-12.077658","lng":"-77.064873"},{"city":"LIMA","district":"PUEBLO LIBRE","address":"AV.SUCRE N\u00b0 633 TIENDA N\u00b0 7 PRIMER PISO - PUEBLO LIBRE","name":"AD Sucre Pueblo Libre","lat":"-12.0776944","lng":"-77.0668554"}],"PUENTE PIEDRA":[{"city":"LIMA","district":"PUENTE PIEDRA","address":"AV. JUAN LECAROS PUENTE PIEDRA - LOCAL N\u00b0 350","name":"AD Puente Piedra","lat":"-11.8661019","lng":"-77.0770888"}],"RIMAC":[{"city":"LIMA","district":"RIMAC","address":"AV. GERARDO UNGER 313 PRIMERA SECCION VIVIENDA DUPLEX, PRIMER Y SEGUNDO PISO URB. INGENIERIA, SMP, LIMA, LIMA","name":"AT UNI","lat":"-12.023026","lng":"-77.05034"},{"city":"LIMA","district":"RIMAC","address":"CALLE LA COLONIA 113, RIMAC, LIMA, LIMA","name":"AT Av Colonia","lat":"-12.027453","lng":"-77.032171"},{"city":"LIMA","district":"RIMAC","address":"AV. LIBERTAD  MANZANA  39 A LOTE 1 URBANIZACION RIMAC, RIMAC, LIMA, LIMA","name":"AT Caqueta","lat":"-12.034574","lng":"-77.043509"},{"city":"LIMA","district":"RIMAC","address":"AV. TUPAC AMARU CUADRA 16, ESQUINA CALLE 18 DE ENERO - RIMAC - LIMA","name":"AD Metro Uni","lat":"-12.011491","lng":"-77.051923"}],"SAN BORJA":[{"city":"LIMA","district":"SAN BORJA","address":"AV AVIACION 2768 SAN BORJA ","name":"Tienda Aviaci\u00f3n","lat":"-12.0957611","lng":"-77.0028495"},{"city":"LIMA","district":"SAN BORJA","address":"AV. AVIACION N\u00b0 3433, URBANIZACION RESIDENCIAL LAS CAMELIAS,SAN BORJA, LIMA, LIMA","name":"AT Stravinski","lat":"-12.106065","lng":"-77.000754"}],"SAN ISIDRO":[{"city":"LIMA","district":"SAN ISIDRO","address":"AV. MIGUEL DASSO No 160 - SAN ISIDRO ","name":"Sport Lounge King Palace","lat":"-12.106769","lng":"-77.0405341"}],"SAN JUAN DE LURIGANCHO":[{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"PUEBLO JOVEN ENRIQUE MONTENEGRO MZ Z1 LOTE 24 , DISTRITO DE SAN JUAN DE LURIGANCHO, DEPARTAMENTO DE LIMA","name":"AT Montenegro","lat":"-11.933941","lng":"-76.96982"},{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"LOTE 16 MZNA 98 DE AV. LAS FLORES DE PRIMAVERA, URB LAS FLORES-SJL","name":"Tienda AD Las Flores","lat":"-12.006812","lng":"-77.0200048"},{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"JR. ALBERTO FLORES GALINDO NRO 3694 Y 3696 URB.CANTO GRANDE -SJL","name":"AD Flores Galindo","lat":"-11.968297","lng":"-77.0051746"},{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"AV. PROCERES DE LA INDEPENDENCIA Nro.  1632, MZ PAR LT. A-2 URB. LAS FLORES 81 SJL - LIMA","name":"Metro San Juan de Lurigancho","lat":"-12.0070539","lng":"-77.0050452"},{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"SECCION No 2 - PRIMER PISO AV. GRAN CHIMU, No349-A URB, ZARATE. SJL - LIMA","name":"AT Gran Chimu - SJL","lat":"-12.027341","lng":"-77.00817"},{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"LOTE 8 DE LA MANZANA L-3 (AV. PIRAMIDE DEL SOL # 446 MZ. L3 LT 8 ZARATE CDRA 4) SJL, LIMA, LIMA","name":"AT Pir\u00e1mide Del Sol","lat":"-12.025083","lng":"-77.001972"},{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"MARISCAL CACERES, SECTOR II MZ E LOTE 1-C GRUPO RECIDENCIAL E, BARRIO 1 - SJL - LIMA","name":"AT Mariscal Caceres SJL","lat":"-11.965556","lng":"-76.991219"},{"city":"LIMA","district":"SAN JUAN DE LURIGANCHO","address":"PROGRAMA CIUDAD MARISCAL CACERES SECTOR I, 2da ETAPA MZ, F3. LOTE 30 SJL - LIMA","name":"AT Proceres de Independencia - SJL","lat":"-11.965556","lng":"-76.991219"}],"SAN JUAN DE MIRAFLORES":[{"city":"LIMA","district":"SAN JUAN DE MIRAFLORES","address":"URB, SAN JUAN, UNIDAD B JR. JOAQUIN TORRICO No 473 SECCION No 2 SAN JUAN DE MIRAFLORES - LIMA","name":"AT Joaquin Torrico","lat":"-12.166364","lng":"-76.975575"},{"city":"LIMA","district":"SAN JUAN DE MIRAFLORES","address":"AV. PEDRO MIOTTA CON AV. ALIPIO PONCE, ESQ. AUTOPISTA PANAMERICANA SUR - SAN JUAN DE MIRAFLORES - LIMA","name":"AT Metro Miotta","lat":"-12.168262","lng":"-76.978034"},{"city":"LIMA","district":"SAN JUAN DE MIRAFLORES","address":"AV. LOS HEROES N\u00b0 1199 - SJM","name":"San Juan de Miraflores 02","lat":"-12.159079","lng":"-76.958814"},{"city":"LIMA","district":"SAN JUAN DE MIRAFLORES","address":"PARCELA A MZ I LOTE 19 - SAN JUAN DE MIRAFLORES - LIMA","name":"AD Paseo San Juan","lat":"-12.1581944","lng":"-76.9772165"},{"city":"LIMA","district":"SAN JUAN DE MIRAFLORES","address":"AV. LOS HEROES N\u00b0 228-232, Mz T Lt 20 A, Urb. ENTEL PERU, SAN JUAN DE MIRAFLORES, LIMA, LIMA","name":"AT Kapital","lat":"-12.151835","lng":"-76.977932"},{"city":"LIMA","district":"SAN JUAN DE MIRAFLORES","address":"URB. SAN JUAN DE MIRAFLORES PARCELA D JR. JUSTO NAVEDA MZ. XII LOTE 38 #1107, SJM, LIMA, LIMA","name":"AT Justo Naveda","lat":"-12.155966","lng":"-76.972026"},{"city":"LIMA","district":"SAN JUAN DE MIRAFLORES","address":"JR. JUAN CASTILLA 498 - SJM - LIMA","name":"APT San Juan","lat":"-12.154416","lng":"-76.972284"}],"SAN LUIS":[{"city":"LIMA","district":"SAN LUIS","address":"AV. CANADA 4052 - 4056 LOTE 16, SAN LUIS, LIMA, LIMA.","name":"AT San Luis","lat":"-12.078299","lng":"-76.989523"}],"SAN MARTIN DE PORRES":[{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"AV, HONORIO DELGADO LOTE 2 DE LA MZ. J (AV. HONORIO DELGADO 473-B, CUARTA ETAPA) SMP, LIMA, LIMA.","name":"AT Honorio Delgado","lat":"-12.025053","lng":"-77.056475"},{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"AV GERMAN AGUIRRE 653- URB SAN GERMAN - SMP ","name":"San martin de Porres 01","lat":"-12.0152","lng":"-77.0715"},{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"AV. EDUARDO DE HABICH No 544, SMP, LIMA, LIMA","name":"AT Habich","lat":"-12.028045","lng":"-77.056738"},{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"SE\u00f1OR DE LOS MILAGROS - LOS OLIVOS Mz. \u00d1 Lt 15 \u2013 PROG VIV. SE\u00f1OR DE LOS MILAGROS, SMP, LIMA, LIMA","name":"AT Se\u00f1or de los Milagros","lat":"-11.987647","lng":"-77.084026"},{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"AV. PERU 1835 - (AA.HH URB PERU MZ 40 LOTE 10 ZONA 1 ZONA BARRIO LA ESPERANZA) SAN MARTIN DE PORRAS - LIMA","name":"AT Av Peru SMP","lat":"-12.03228","lng":"-77.065369"},{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"AV. TOMAS VALLE ESQUINA CON AV. BETA S\/N FUNDO GARAGAY BAJO - LOS OLIVOS - LIMA","name":"AT Tomas Valle","lat":"-12.009978","lng":"-77.070154"},{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"ESQUINA ANGELICA GAMARRA CON UNIVERSITARIA, SAN MARTIN DE PORRAS, LIMA, LIMA.","name":"AT Pecsa Gamarra","lat":"-12.007039","lng":"-77.082809"},{"city":"LIMA","district":"SAN MARTIN DE PORRES","address":"AV. JULIO FELIPE SECCION INMOBILIARIA  N\u00b0 2 URB PI\u00d1ONATE -SMP","name":"Tienda AD Julio Felipe","lat":"-12.0281333","lng":"-77.0469777"}],"SAN MIGUEL":[{"city":"LIMA","district":"SAN MIGUEL","address":"AV. DE LA MARINA N\u00b0 1353 DEPARTAMENTO A, SAN MIGUEL, LIMA","name":"AT Avenida la Marina","lat":"-12.0766743","lng":"-77.0893189"},{"city":"LIMA","district":"SAN MIGUEL","address":"AV. UNIVERSITARIA N\u00b0 464 URBANIZACION PANDO 7MA ETAPA - SAN MIGUEL ","name":"AD Universitaria San Miguel","lat":"-12.0878834","lng":"-77.0849982"},{"city":"LIMA","district":"SAN MIGUEL","address":"AV. VENEZUELA Nro. 5415 - SAN MIGUEL - LIMA","name":"AT Metro Faucett","lat":"-12.062782","lng":"-77.096576"},{"city":"LIMA","district":"SAN MIGUEL","address":"PRIMER PISO TIENDA N\u00b0 8 EN CALLE NAPO N\u00b0 081, DISTRITO DE SAN MIGUEL, PROVINCIA Y DEPARTAMENTO DE LIMA","name":"AT Napo San Miguel","lat":"-12.075027","lng":"-77.081593"},{"city":"LIMA","district":"SAN MIGUEL","address":"AV. LA MARINA ESQ. CDRA 25 AV. PARQUE DE LAS LEYENDAS SAN MIGUEL - LIMA","name":"AD Metro La Marina","lat":"-12.0766743","lng":"-77.0893189"}],"SANTA ANITA":[{"city":"LIMA","district":"SANTA ANITA","address":"AV, LOS EUCALIPTOS MZ. T2 - LOTE 26 SANTA ANITA, LIMA","name":"AT Eucaliptos","lat":"-12.044231","lng":"-76.9722"},{"city":"LIMA","district":"SANTA ANITA","address":"URB, LOS CEDROS MZ E3 LOTE 1 - SANTA ANITA - LIMA","name":"AT Huarochiri - Santa Anita","lat":"-12.042017","lng":"-76.952042"},{"city":"LIMA","district":"SANTA ANITA","address":"AV LAS ALONDRAS 339 SANTA ANITA ","name":"Santa Anita","lat":"-12.053498","lng":"-76.962224"}],"SANTIAGO DE SURCO":[{"city":"LIMA","district":"SANTIAGO DE SURCO","address":"AV SANTIAGO DE SURCO No 3687 No 2, URBANIZACION LIGURIA - SANTIAGO DE SURCO - LIMA ","name":"Estaci\u00f3n Ayacucho","lat":"-12.135111","lng":"-76.996444"},{"city":"LIMA","district":"SANTIAGO DE SURCO","address":"AV. PRIMAVERA N\u00b02219 LOCAL 107, LIMA POLO HUNT, SANTIAGO DE SURCO, LIMA, LIMA","name":"AT UPC Primavera","lat":"-12.1048","lng":"-76.965037"},{"city":"LIMA","district":"SANTIAGO DE SURCO","address":"MANUEL OLGUIEN 211 INTERIOS 1101","name":"Central Bet Bar","lat":"-11.9931399","lng":"-77.0631918"},{"city":"LIMA","district":"SANTIAGO DE SURCO","address":"TIENDA N\u00b0 12 PASAJE SIN NOMBRE N\u00b0 122 - SURCO - LIMA","name":"El Trigal Surco","lat":"-12.1269323","lng":"-76.9888451"},{"city":"LIMA","district":"SANTIAGO DE SURCO","address":"AV. MANUEL OLGUIN N\u00b0 527  SANTIAGO DE SURCO - LIMA","name":"AD Olgu\u00edn Surco","lat":"-12.09148","lng":"-76.973673"},{"city":"LIMA","district":"SANTIAGO DE SURCO","address":"MANUEL OLGU\u00cdN # 207 URB. EX PARCELACION  SEMIRUSTICA LOS GRANADOS, LOCAL 101 \u2013 PISO 2","name":"Tienda Omega","lat":"-12.085707","lng":"-76.972959"}],"SURQUILLO":[{"city":"LIMA","district":"SURQUILLO","address":"AV. REPUBLICA DE PANAMA # 4101, ESQUINA CON AV. TOMAS MARSANO, SURQUILLO, LIMA, LIMA","name":"AT AVA Republica de Panama","lat":"-12.105804","lng":"-77.018188"},{"city":"LIMA","district":"SURQUILLO","address":"AV. ANGAMOS ESTE SUB LOTE 1100 SURQUILLO - LIMA","name":"AD Angamos Surquillo","lat":"-12.1131517","lng":"-77.0200651"},{"city":"LIMA","district":"SURQUILLO","address":"AV. NUEVA TOMAS MARSANO No 523, SURQUILLO LIMA","name":"Tomas Marsano","lat":"-12.108653","lng":"-77.014958"},{"city":"LIMA","district":"SURQUILLO","address":"TIENDA AV. VILLARAN MANZANA V LOTE 2 LA URB. LOS SAUCES TERCERA ETAPA - SURQUILLO - LIMA","name":"AT Villaran","lat":"-12.119896","lng":"-77.001496"},{"city":"LIMA","district":"SURQUILLO","address":"AV. REPUBLICA DE PANAMA # 5160, SURQUILLO, LIMA, LIMA.","name":"AT Pecsa Gonzales Prada","lat":"-12.116139","lng":"-77.0185"}],"VILLA EL SALVADOR":[{"city":"LIMA","district":"VILLA EL SALVADOR","address":"PUEBLO JOVEN VES MZ J LOTE 17 SECTOR SEGUNDO, GRUPO RESIDENCIAL 5, VES-LIMA","name":"AD Esquina del pueblo joven","lat":"-12.2113261","lng":"-76.9346128"},{"city":"LIMA","district":"VILLA EL SALVADOR","address":"AV. VELASCO ALVARADO 786 DPTO 104 (MZ I LOTE 1 DPTO. 3) SECTOR SEGUNDO, GRUPO RECIDENCIAL 8, VES - LIMA","name":"AT Velasco Alvarado","lat":"-12.207664","lng":"-76.939758"},{"city":"LIMA","district":"VILLA EL SALVADOR","address":"SECTOR 2 GRUPO 8 MZ E LT 13 VILLA EL SALVADOR ","name":"Villa El Salvador","lat":"-12.2068676","lng":"-76.9466437"}],"VILLA MARIA DEL TRIUNFO":[{"city":"LIMA","district":"VILLA MARIA DEL TRIUNFO","address":"AA.HH VMT. AV. VILLA MARIA No 580-582  (MZ H5 LOTE 15 A) VMT","name":"Villa Mar\u00eda 02","lat":"-12.163197","lng":"-76.946773"},{"city":"LIMA","district":"VILLA MARIA DEL TRIUNFO","address":"AAHH VMT MZ H1 LOTE 22 SECTOR VMT LIMA","name":"AD Villa Mar\u00eda 130","lat":"-12.166713","lng":"-76.9512344"},{"city":"LIMA","district":"VILLA MARIA DEL TRIUNFO","address":"P.J. JOSE CARLOS MARIATEGUI MZ G2 - LOTE 8 - ETAPA PRIMERA VMT","name":"AD Mariano Melgar VMT","lat":"-12.1539458","lng":"-76.9551322"}],"IQUITOS":[{"city":"LORETO","district":"IQUITOS","address":"CALLE SARGENTO FERNANDO LORES TENAZOA, IQUITOS, MAYNAS, LORETO ( Jir\u00f3n Sargento Fernando Lores # 179 -181) ","name":"AT Sargento Lores","lat":"-3.751222","lng":"-73.244722"},{"city":"LORETO","district":"IQUITOS","address":"CALLE IQUITOS MZ 2 Lt 3,PUNCHANA,MAYNAS,LORETO","name":"AT Punchana","lat":"-3.727663","lng":"-73.249944"},{"city":"LORETO","district":"IQUITOS","address":"CALLE HUALLAGA 620,IQUITOS,MAYNAS,LORETO","name":"AT Jr Huallaga","lat":"-3.753201","lng":"-73.248342"},{"city":"LORETO","district":"IQUITOS","address":"CALLE PEVAS N\u00ba 534 PRIMER PISO, IQUITOS, MAYNAS,LORETO","name":"AT Pevas","lat":"-3.745763","lng":"-73.245488"}],"YURIMAGUAS":[{"city":"LORETO","district":"YURIMAGUAS","address":"CALLE TENIENTE CESAR LOPEZ N\u00b0207 1ER PISO - YURIMAGUAS- ALTO AMAZONAS - LORETO ","name":"Tienda Yurimaguas","lat":"-5.8945644","lng":"-76.1046431"}],"ILO":[{"city":"MOQUEGUA","district":"ILO","address":"CALLE ILO N\u00b0 419 DISTRITO DE ILO  - MOQUEGUA ","name":"AD Ilo Moquegua","lat":"-17.647618","lng":"-71.3533104"},{"city":"MOQUEGUA","district":"ILO","address":"CALLE OMATE N\u00b0 261  - MOQUEGUA - MARISCAL NIETO","name":"AD Omate Moquegua","lat":"-17.1934433","lng":"-70.9567318"},{"city":"MOQUEGUA","district":"ILO","address":"CALLE TACNA N\u00b0 343 - MARISCAL NIETO - MOQUEGUA","name":"AD Plaza Moquegua","lat":"-17.1938309","lng":"-70.9344477"}],"CHULUCANAS":[{"city":"PIURA","district":"CHULUCANAS","address":"CALLE LIBERTAD # 547-549 -CHULUCANAS - MORROPON - PIURA","name":"AT Chulucanas","lat":"-5.09646","lng":"-80.16196"}],"PARI\u00d1AS":[{"city":"PIURA","district":"PARI\u00d1AS","address":"AV. GRAU A-79 - PARI\u00d1AS - TALARA - PIURA","name":"AD Grau Talara","lat":"-4.578999","lng":"-81.272685"}],"PIURA":[{"city":"PIURA","district":"PIURA","address":"AV. LORETO 779 - PIURA","name":"Pecsa Piura 01","lat":"-5.19611","lng":"-80.629927"},{"city":"PIURA","district":"PIURA","address":"CALLE LIBERTAD N\u00b0444 - PIURA","name":"AD Libertad Piura","lat":"-5.1830767","lng":"-80.6234908"},{"city":"PIURA","district":"PIURA","address":"CALLE SANCHEZ CERRO N\u00b0 1098, TIENDA N\u00b0 01 - PIURA","name":"AD Sanchez Cerro Piura","lat":"-5.191481","lng":"-80.629758"},{"city":"PIURA","district":"PIURA","address":"MALECON MARIA AUXILIADODA LOTE 34 - MIRAFLORES - CASTILLA - PIURA","name":"River Front","lat":"-5.183303","lng":"-80.6242745"}],"SULLANA":[{"city":"PIURA","district":"SULLANA","address":"AV, JOSE DE LAMA No 120 - SULLANA - PIURA","name":"AT Sullana - Piura","lat":"-4.893784","lng":"-80.68628"},{"city":"PIURA","district":"SULLANA","address":"CALLE SAN MARTIN N\u00b0 958 - SULLANA - PIURA","name":"AD San Mart\u00edn Sullana","lat":"-5.196178","lng":"-80.6301305"}],"DESAGUADERO":[{"city":"PUNO","district":"DESAGUADERO","address":"PASAJE GAMARRA 132 - DESAGUADERO - CHUCUITO - PUNO","name":"AT Desaguadero","lat":"-16.56489","lng":"-69.040452"}],"JULIACA":[{"city":"PUNO","district":"JULIACA","address":"JR. LAMPA N\u00b0 120, ZONA SANTA BARBARA, JULIACA, SAN RAMON, PUNO.","name":"AT Santa Barbara","lat":"-15.491252","lng":"-70.137491"}],"PUNO":[{"city":"PUNO","district":"PUNO","address":"AV. EL SOL # 477 B. PORTE\u00f1O, PUNO, PUNO, PUNO.","name":"AT El Sol","lat":"-15.835744","lng":"-70.023078"}],"JUANJUI":[{"city":"SAN MARTIN","district":"JUANJUI","address":"JR TRIUNFO N\u00b0588 JUANJUI - SAN MARTIN ","name":"Tienda Juanju\u00ed","lat":"-7.1796862","lng":"-76.7279325"}],"MOYOBAMBA":[{"city":"SAN MARTIN","district":"MOYOBAMBA","address":"CERCADO DE MOYOBAMBA Mz 5160 LOTE 16 (Jr 25 de mayo Cuadra 4), MOYOBAMBA, MOYOBAMBA, SAN MARTIN","name":"AT 25 de Mayo","lat":"-6.034908","lng":"-76.976606"},{"city":"SAN MARTIN","district":"MOYOBAMBA","address":"JR ALONSO DE ALVARADO N\u00b0 726-MOYOBAMBA ","name":"Moyobamba 01","lat":"-6.033241","lng":"-76.968396"}],"NUEVA CAJAMARCA":[{"city":"SAN MARTIN","district":"NUEVA CAJAMARCA","address":"AV CAJAMARCA N\u00b0700-708 NUEVA CAJAMARCA - RIOJA ","name":"Nueva Cajamarca","lat":"-5.946042","lng":"-77.305106"}],"RIOJA":[{"city":"SAN MARTIN","district":"RIOJA","address":"JR SANTO TORIBIO 1136 - \/30 MTS2) - RIOJA ","name":"Tienda Rioja","lat":"-6.0631985","lng":"-77.1696049"}],"SORITOR":[{"city":"SAN MARTIN","district":"SORITOR","address":"PUEBLO TRADICIONAL DE SORITOR MZ 30 LT 11 (JR. AMARGURA 853) SORITOR - MOYOBAMBA","name":"AT Soritor","lat":"-6.139729","lng":"-77.100176"}],"TARAPOTO":[{"city":"SAN MARTIN","district":"TARAPOTO","address":"JR. MARTINEZ DE COMPAG\u00d1ON NRO. 400 SAN MARTIN - TARAPOTO","name":"Tarapoto 01","lat":"-6.489382","lng":"-76.362543"},{"city":"SAN MARTIN","district":"TARAPOTO","address":"JR TAHUANTINSUYO N\u00aa650 SECTOR PARTIDO ALTO-TARAPOTO SAN MARTIN","name":"AD Tahuantinsuyo Tarapoto","lat":"-6.0631492","lng":"-77.1675615"}],"CAIRANI":[{"city":"TACNA","district":"CAIRANI","address":"AV. SAN MARTIN No 557 - TACNA ","name":"Casino Damasco","lat":"-18.012314","lng":"-70.248829"}],"CORONEL GREGORIO ALBARRACIN L.":[{"city":"TACNA","district":"CORONEL GREGORIO ALBARRACIN L.","address":"ASOC DE VIVIENDA EDUARDO PEREZ GAMBA MZ B LOTE 20 CORONEL GREGORIO -TACNA","name":"Tienda AD Gregorio Albarrac\u00edn","lat":"-18.0374989","lng":"-70.2682874"}],"POCOLLAY":[{"city":"TACNA","district":"POCOLLAY","address":"CALLE GRANADA SUB LOTE B S\/N - POCOLLAY - TACNA","name":"Tienda AD Pocollay","lat":"-18.0043124","lng":"-70.2345048"}],"TACNA":[{"city":"TACNA","district":"TACNA","address":"AA.HH FRANCISCO BOLOGNESI MZ 27 LOTE 3 - TACNA","name":"Tienda AD Basadre y Forero","lat":"-17.9990589","lng":"-70.2368697"},{"city":"TACNA","district":"TACNA","address":"CALLE ALTO LIMA N\u00ba 1494 TACNA","name":"Tienda AD Alto Lima","lat":"-18.0057489","lng":"-70.258204"}],"AGUAS VERDES":[{"city":"TUMBES","district":"AGUAS VERDES","address":"MZ. R2, LOTE 11, ZONA COMERCIAL DE AGUAS VERDES - AGUAS VERDES - ZARUMILLA - TUMBES","name":"AT Aguas Verdes - Tumbes","lat":"-3.480642","lng":"-80.245797"}],"TUMBES":[{"city":"TUMBES","district":"TUMBES","address":"AV. MARISCAL CASTILLA # 365, TUMBES, TUMBES, TUMBES","name":"AT Mariscal Castilla","lat":"-3.57175","lng":"-80.45675"},{"city":"TUMBES","district":"TUMBES","address":"AV. TUMBES NORTE No 272 - TUMBES","name":"Casino La Cascada","lat":"-3.568521","lng":"-80.459081"},{"city":"TUMBES","district":"TUMBES","address":"MZ J LOTE 3 A AA.HH MIGUEL GRAU - TUMBES","name":"AT Puyango - Tumbes","lat":"-3.554806","lng":"-80.428143"}],"ZARUMILLA":[{"city":"TUMBES","district":"ZARUMILLA","address":"CENTRO POBLADO CENTRO URBANO ZARUMILLA MZ. 60 LOTE 8, ZARUMILLA, ZARUMILLA, TUMBES ","name":"AT Zarumilla","lat":"-3.501934","lng":"-80.275416"}],"BELLAVISTA":[{"city":"CALLAO","district":"BELLAVISTA","address":"CALLE LOS CONDORES 123 EN MZ 22 LT 17 URB, SAN JOSE DISTRITO BELLAVISTA - CALLAO ","name":"AT Los Condores Callao","lat":"-12.056295","lng":"-77.096451"},{"city":"CALLAO","district":"BELLAVISTA","address":"AV. JUAN PABLO II # 348-350 (MZ C4 LT 6) CIUDAD DEL PESCADOR, BELLAVISTA, CALLAO.","name":"AT U del Callao","lat":"-12.061253","lng":"-77.116064"},{"city":"CALLAO","district":"BELLAVISTA","address":"AV. OSCAR R. BENAVIDES Nro. 1608 BELLAVISTA - CALLAO","name":"AD Metro Bellavista","lat":"-11.878138","lng":"-77.1282141"},{"city":"CALLAO","district":"BELLAVISTA","address":"AV. ELMER FAUCETT 1706 BELLAVISTA - CALLAO","name":"AD Faucett Callao","lat":"-12.0603613","lng":"-77.0993934"}],"CALLAO":[{"city":"CALLAO","district":"CALLAO","address":"AV. SAENZ PE\u00f1A # 454, CERCADO, PROVINCIA CONSTITUCIONAL DEL CALLAO, CALLAO","name":"AT Saenz Pe\u00f1a","lat":"-12.060678","lng":"-77.142136"}],"VENTANILLA":[{"city":"CALLAO","district":"VENTANILLA","address":"AAHH. LOS LICENCIADOS DE VENTANILLA- MZ O 5 LOTE 20- VENTANILLA CALLAO","name":"AD La Playa Ventanilla","lat":"-11.8782306","lng":"-77.1295729"},{"city":"CALLAO","district":"VENTANILLA","address":"MZ M LOTE 16 SECTOR D-PACHACUTEC, VENTANILLA, LIMA, LIMA","name":"AT Pachacutec","lat":"-11.832134","lng":"-77.146171"},{"city":"CALLAO","district":"VENTANILLA","address":"AGRUPAMIENTO MI PERU MZ. A9, LT29 (AV. AYACUCHO A9-29), VENTANILLA, CALLAO","name":"AT Mi Per\u00fa","lat":"-11.855007","lng":"-77.124901"}],"CALLERIA":[{"city":"UCAYALI","district":"CALLERIA","address":"JR. TARAPACA MZ 86 LOTE10, PUCALLPA, UCAYALI","name":"AT Plaza de armas Pucallpa","lat":"-8.382575","lng":"-74.532019"},{"city":"UCAYALI","district":"CALLERIA","address":"JR. CORONEL PORTILLO # 654, DISTRITO DE CALLER\u00cdA, PROVINCIA DE CORONEL PORTILLO, DEPARTAMENTO DE UCAYALI","name":"AT Coronel Portillo","lat":"-8.386962","lng":"-74.530487"}]}}');

            print_r($json);
            $CompetenciaPuntosMySqlDAO = new CompetenciaPuntosMySqlDAO();

            foreach ($json->data as $datum2) {
                foreach ($datum2 as $datum) {


                    $CompetenciaPuntos = new CompetenciaPuntos();
                    $CompetenciaPuntos->setDireccion($datum->address);
                    $CompetenciaPuntos->setCompetenciaId(3);
                    $CompetenciaPuntos->setDescripcion($datum->city . ' - ' . $datum->district . ' - ' . $datum->name);
                    $CompetenciaPuntos->setLatitud($datum->lat);
                    $CompetenciaPuntos->setLongitud($datum->lng);
                    $CompetenciaPuntos->setNombre($datum->name);
                    $CompetenciaPuntos->setEstado('A');
                    $CompetenciaPuntos->setUsucreaId(0);
                    $CompetenciaPuntos->setUsumodifId(0);
                    $CompetenciaPuntos->setCiudadId(0);


                    $CompetenciaPuntosMySqlDAO->insert($CompetenciaPuntos);
                }
            }
            $CompetenciaPuntosMySqlDAO->getTransaction()->commit();

            break;

        /**
        * BetShop/SaveBetshopCompetence
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "BetShop/SaveBetshopCompetence":

            $Address = $params->Address;
            $Competition = $params->Competition;
            $Description = $params->Description;
            $Latitud = $params->Latitud;
            $Longitud = $params->Longitud;
            $CityId = $params->CityId;
            $Name = $params->Name;
            $Id = $params->Id;

            if ($Id != "" && is_numeric($Id)) {
                $CompetenciaPuntos = new CompetenciaPuntos($Id);
                $CompetenciaPuntos->setDireccion($Address);
                $CompetenciaPuntos->setCompetenciaId($Competition);
                $CompetenciaPuntos->setDescripcion($Description);
                $CompetenciaPuntos->setLatitud($Latitud);
                $CompetenciaPuntos->setLongitud($Longitud);
                $CompetenciaPuntos->setNombre($Name);
                $CompetenciaPuntos->setEstado('A');
                $CompetenciaPuntos->setUsucreaId(0);
                $CompetenciaPuntos->setUsumodifId(0);
                $CompetenciaPuntos->setCiudadId($CityId);

                $CompetenciaPuntosMySqlDAO = new CompetenciaPuntosMySqlDAO();

                $CompetenciaPuntosMySqlDAO->update($CompetenciaPuntos);
                $CompetenciaPuntosMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            } else {
                $CompetenciaPuntos = new CompetenciaPuntos();
                $CompetenciaPuntos->setDireccion($Address);
                $CompetenciaPuntos->setCompetenciaId($Competition);
                $CompetenciaPuntos->setDescripcion($Description);
                $CompetenciaPuntos->setLatitud($Latitud);
                $CompetenciaPuntos->setLongitud($Longitud);
                $CompetenciaPuntos->setNombre($Name);
                $CompetenciaPuntos->setEstado('A');
                $CompetenciaPuntos->setUsucreaId(0);
                $CompetenciaPuntos->setUsumodifId(0);
                $CompetenciaPuntos->setCiudadId($CityId);

                $CompetenciaPuntosMySqlDAO = new CompetenciaPuntosMySqlDAO();

                $CompetenciaPuntosMySqlDAO->insert($CompetenciaPuntos);
                $CompetenciaPuntosMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * Report/GetProducts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetProducts":

            $Producto = new Producto();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "a.usuario_id", "data": "1","op":"eq"}] ,"groupOp" : "AND"}';

            $productos = $Producto->getProductos("producto.producto_id", "asc", $SkeepRows, $MaxRows, $json, false);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto.producto_id"};
                $array["Name"] = $value->{"producto.descripcion"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * Report/GetProductProviders
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetProductProviders":

            $Proveedor = new Proveedor();
            $Proveedor->setTipo("CASINO");

            $proveedores = $Proveedor->getProveedores();

            $final = [];

            foreach ($proveedores as $key => $value) {

                $array = [];

                $array["Id"] = $value->getProveedorId();
                $array["Name"] = $value->getDescripcion();

                array_push($final, $array);

            }

            $Proveedor->setTipo("VIRTUAL");

            $proveedores = $Proveedor->getProveedores();


            foreach ($proveedores as $key => $value) {

                $array = [];

                $array["Id"] = $value->getProveedorId();
                $array["Name"] = $value->getDescripcion();

                array_push($final, $array);

            }


            $Proveedor->setTipo("LIVECASINO");

            $proveedores = $Proveedor->getProveedores();


            foreach ($proveedores as $key => $value) {

                $array = [];

                $array["Id"] = $value->getProveedorId();
                $array["Name"] = $value->getDescripcion();

                array_push($final, $array);

            }
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * Providers/GetProductProviders
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Providers/GetProductProviders":

            $Proveedor = new Proveedor();
            $Proveedor->setTipo("CASINO");

            $proveedores = $Proveedor->getProveedores();

            $final = [];

            foreach ($proveedores as $key => $value) {

                $array = [];

                $array["Id"] = $value->getProveedorId();
                $array["Name"] = $value->getDescripcion();

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * Client/Segments
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Client/Segments':

            $field = $params->field;
            $operator = $params->operator;
            $value = $params->value;

            $data = array();

            switch ($field) {

                case "doradobetData.apiCondSportsBetsToday":


                    $rules = [];
                    $having = "";
                    $withNull = false;


                    switch ($operator) {
                        case 'e':
                        case 'et':
                        default:
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "eq"));
                            $having = " valor = '" . $value . "'";
                            break;
                        case 'dne':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "ne"));
                            $having = " valor != '" . $value . "'";

                            break;
                        case 'c':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "cn"));
                            $having = " valor  LIKE '%" . $value . "%'";

                            break;

                        case 'dnc':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "nc"));
                            $having = " valor NOT LIKE '%" . $value . "%'";
                            break;

                        case 'igt':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "gt"));
                            $having = " valor > '" . $value . "'";
                            break;
                        case 'ilt':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "lt"));
                            $having = " valor < '" . $value . "'";
                            $withNull = true;

                            break;
                        case 'it':
                            //array_push($rules, array("field" => "valor", "data" => "true", "op" => "eq"));
                            $having = " valor = 'true' ";
                            break;
                        case 'if':
                            //  array_push($rules, array("field" => "valor", "data" => "false", "op" => "eq"));
                            $having = " valor = 'false'";
                            break;
                        case 'wlt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "le"));
                            break;

                        case 'wmt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            break;

                        case 'wow':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "ge"));
                            break;

                        case 'woa':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            break;

                        case 'is':
                            // array_push($rules, array("field" => "valor", "data" => '', "op" => "ne"));
                            // array_push($rules, array("field" => "valor", "data" => $value, "op" => "eq"));
                            $having = " valor != ''";
                            $having = " valor = '$value'";
                            break;

                        case 'ins':
                            //array_push($rules, array("field" => "valor", "data" => $value, "op" => "ne"));

                            $having = " valor != '$value'";

                            break;
                    }
                    array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));
                    array_push($rules, array("field" => "it_ticket_enc.fecha_crea", "data" => date('Y-m-d'), "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);

                    $ItTicketEnc = new ItTicketEnc();

                    $tickets = $ItTicketEnc->getTicketsCustom2(" usuario.usuario_id,(CASE WHEN SUM(vlr_apuesta) IS NULL THEN 0 ELSE SUM(vlr_apuesta) END )valor   ", "usuario.usuario_id", "asc", 0, 10000, $json, true, "usuario.usuario_id", $having, $withNull);
                    $tickets = json_decode($tickets);

                    foreach ($tickets->data as $datum) {
                        array_push($data, $datum->{"usuario.usuario_id"});
                    }


                    break;

                case "doradobetData.apiCondSportsGGRToday":


                    $rules = [];
                    $having = "";


                    switch ($operator) {
                        case 'e':
                        case 'et':
                        default:
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "eq"));
                            $having = " valor = '" . $value . "'";
                            break;
                        case 'dne':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "ne"));
                            $having = " valor != '" . $value . "'";

                            break;
                        case 'c':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "cn"));
                            $having = " valor  LIKE '%" . $value . "%'";

                            break;

                        case 'dnc':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "nc"));
                            $having = " valor NOT LIKE '%" . $value . "%'";
                            break;

                        case 'igt':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "gt"));
                            $having = " valor > '" . $value . "'";
                            break;
                        case 'ilt':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "lt"));
                            $having = " valor < '" . $value . "'";
                            break;
                        case 'it':
                            //array_push($rules, array("field" => "valor", "data" => "true", "op" => "eq"));
                            $having = " valor = 'true' ";
                            break;
                        case 'if':
                            //  array_push($rules, array("field" => "valor", "data" => "false", "op" => "eq"));
                            $having = " valor = 'false'";
                            break;
                        case 'wlt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "le"));
                            break;

                        case 'wmt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            break;

                        case 'wow':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "ge"));
                            break;

                        case 'woa':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            break;

                        case 'is':
                            // array_push($rules, array("field" => "valor", "data" => '', "op" => "ne"));
                            // array_push($rules, array("field" => "valor", "data" => $value, "op" => "eq"));
                            $having = " valor != ''";
                            $having = " valor = '$value'";
                            break;

                        case 'ins':
                            //array_push($rules, array("field" => "valor", "data" => $value, "op" => "ne"));

                            $having = " valor != '$value'";

                            break;
                    }
                    array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));
                    array_push($rules, array("field" => "it_ticket_enc.fecha_crea", "data" => date('Y-m-d'), "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);

                    $ItTicketEnc = new ItTicketEnc();

                    $tickets = $ItTicketEnc->getTicketsGGRCustom(" usuario_id,(SUM(apuestas) - SUM(premios)) valor   ", "it_ticket_enc.usuario_id", "asc", 0, 10000, $json, true, "it_ticket_enc.usuario_id", $having);
                    $tickets = json_decode($tickets);

                    foreach ($tickets->data as $datum) {
                        array_push($data, $datum->{"c.usuario_id"});
                    }


                    break;

                case "doradobetData.apiCondCasinoBetsToday":


                    $rules = [];
                    $having = "";


                    switch ($operator) {
                        case 'e':
                        case 'et':
                        default:
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "eq"));
                            $having = " valor = '" . $value . "'";
                            break;
                        case 'dne':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "ne"));
                            $having = " valor != '" . $value . "'";

                            break;
                        case 'c':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "cn"));
                            $having = " valor  LIKE '%" . $value . "%'";

                            break;

                        case 'dnc':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "nc"));
                            $having = " valor NOT LIKE '%" . $value . "%'";
                            break;

                        case 'igt':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "gt"));
                            $having = " valor > '" . $value . "'";
                            break;
                        case 'ilt':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "lt"));
                            $having = " valor < '" . $value . "'";
                            break;
                        case 'it':
                            //array_push($rules, array("field" => "valor", "data" => "true", "op" => "eq"));
                            $having = " valor = 'true' ";
                            break;
                        case 'if':
                            //  array_push($rules, array("field" => "valor", "data" => "false", "op" => "eq"));
                            $having = " valor = 'false'";
                            break;
                        case 'wlt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "le"));
                            break;

                        case 'wmt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            break;

                        case 'wow':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "ge"));
                            break;

                        case 'woa':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            break;

                        case 'is':
                            // array_push($rules, array("field" => "valor", "data" => '', "op" => "ne"));
                            // array_push($rules, array("field" => "valor", "data" => $value, "op" => "eq"));
                            $having = " valor != ''";
                            $having = " valor = '$value'";
                            break;

                        case 'ins':
                            //array_push($rules, array("field" => "valor", "data" => $value, "op" => "ne"));

                            $having = " valor != '$value'";

                            break;
                    }
                    array_push($rules, array("field" => "DATE_FORMAT(transaccion_juego.fecha_crea,'%Y-%m-%d')", "data" => date('Y-m-d'), "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);

                    $TransaccionJuego = new TransaccionJuego();
                    $select = "usuario_mandante.usuario_mandante,usuario_mandante.usumandante_id,(SUM(valor_ticket)) valor";
                    $grouping = "usuario_mandante.usumandante_id";

                    $transacciones = $TransaccionJuego->getTransaccionesCustom($select, "usuario_mandante.usuario_mandante", "desc", 0, 10000, $json, true, $grouping, $having);
                    $transacciones = json_decode($transacciones);

                    foreach ($transacciones->data as $datum) {
                        array_push($data, $datum->{"usuario_mandante.usuario_mandante"});
                    }


                    break;

                case "doradobetData.apiCondCasinoGGRToday":


                    $rules = [];
                    $having = "";


                    switch ($operator) {
                        case 'e':
                        case 'et':
                        default:
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "eq"));
                            $having = " valor = '" . $value . "'";
                            break;
                        case 'dne':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "ne"));
                            $having = " valor != '" . $value . "'";

                            break;
                        case 'c':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "cn"));
                            $having = " valor  LIKE '%" . $value . "%'";

                            break;

                        case 'dnc':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "nc"));
                            $having = " valor NOT LIKE '%" . $value . "%'";
                            break;

                        case 'igt':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "gt"));
                            $having = " valor > '" . $value . "'";
                            break;
                        case 'ilt':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "lt"));
                            $having = " valor < '" . $value . "'";
                            break;
                        case 'it':
                            //array_push($rules, array("field" => "valor", "data" => "true", "op" => "eq"));
                            $having = " valor = 'true' ";
                            break;
                        case 'if':
                            //  array_push($rules, array("field" => "valor", "data" => "false", "op" => "eq"));
                            $having = " valor = 'false'";
                            break;
                        case 'wlt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "le"));
                            break;

                        case 'wmt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            break;

                        case 'wow':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "ge"));
                            break;

                        case 'woa':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            break;

                        case 'is':
                            // array_push($rules, array("field" => "valor", "data" => '', "op" => "ne"));
                            // array_push($rules, array("field" => "valor", "data" => $value, "op" => "eq"));
                            $having = " valor != ''";
                            $having = " valor = '$value'";
                            break;

                        case 'ins':
                            //array_push($rules, array("field" => "valor", "data" => $value, "op" => "ne"));

                            $having = " valor != '$value'";

                            break;
                    }
                    array_push($rules, array("field" => "DATE_FORMAT(transaccion_juego.fecha_crea,'%Y-%m-%d')", "data" => date('Y-m-d'), "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);

                    $TransaccionJuego = new TransaccionJuego();
                    $select = "usuario_mandante.usuario_mandante,usuario_mandante.usumandante_id,(SUM(valor_ticket)-SUM(valor_premio)) valor";
                    $grouping = "usuario_mandante.usumandante_id";

                    $transacciones = $TransaccionJuego->getTransaccionesCustom($select, "usuario_mandante.usuario_mandante", "desc", 0, 10000, $json, true, $grouping, $having);
                    $transacciones = json_decode($transacciones);

                    foreach ($transacciones->data as $datum) {
                        array_push($data, $datum->{"usuario_mandante.usuario_mandante"});
                    }


                    break;

                case "doradobetData.apiCondCasinoBetsMonth":


                    $rules = [];
                    $having = "";


                    switch ($operator) {
                        case 'e':
                        case 'et':
                        default:
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "eq"));
                            $having = " valor = '" . $value . "'";
                            break;
                        case 'dne':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "ne"));
                            $having = " valor != '" . $value . "'";

                            break;
                        case 'c':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "cn"));
                            $having = " valor  LIKE '%" . $value . "%'";

                            break;

                        case 'dnc':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "nc"));
                            $having = " valor NOT LIKE '%" . $value . "%'";
                            break;

                        case 'igt':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "gt"));
                            $having = " valor > '" . $value . "'";
                            break;
                        case 'ilt':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "lt"));
                            $having = " valor < '" . $value . "'";
                            break;
                        case 'it':
                            //array_push($rules, array("field" => "valor", "data" => "true", "op" => "eq"));
                            $having = " valor = 'true' ";
                            break;
                        case 'if':
                            //  array_push($rules, array("field" => "valor", "data" => "false", "op" => "eq"));
                            $having = " valor = 'false'";
                            break;
                        case 'wlt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "le"));
                            break;

                        case 'wmt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            break;

                        case 'wow':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "ge"));
                            break;

                        case 'woa':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            break;

                        case 'is':
                            // array_push($rules, array("field" => "valor", "data" => '', "op" => "ne"));
                            // array_push($rules, array("field" => "valor", "data" => $value, "op" => "eq"));
                            $having = " valor != ''";
                            $having = " valor = '$value'";
                            break;

                        case 'ins':
                            //array_push($rules, array("field" => "valor", "data" => $value, "op" => "ne"));

                            $having = " valor != '$value'";

                            break;
                    }
                    array_push($rules, array("field" => "DATE_FORMAT(transaccion_juego.fecha_crea,'%Y-%m-%d')", "data" => date('Y-m-d', strtotime('-30 days')), "op" => "ge"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);

                    $TransaccionJuego = new TransaccionJuego();
                    $select = "usuario_mandante.usuario_mandante,usuario_mandante.usumandante_id,(SUM(valor_ticket)-SUM(valor_premio)) valor";
                    $grouping = "usuario_mandante.usumandante_id";

                    $transacciones = $TransaccionJuego->getTransaccionesCustom($select, "usuario_mandante.usuario_mandante", "desc", 0, 10000, $json, true, $grouping, $having);
                    $transacciones = json_decode($transacciones);

                    foreach ($transacciones->data as $datum) {
                        array_push($data, $datum->{"usuario_mandante.usuario_mandante"});
                    }


                    break;

                case "doradobetData.apiCondBonusSpecificRedToday":


                    $rules = [];
                    $having = "";


                    switch ($operator) {
                        case 'e':
                        case 'et':
                        default:
                            array_push($rules, array("field" => "usuario_bono.bono_id", "data" => "$value", "op" => "eq"));
                            $having = " valor = '" . $value . "'";
                            break;
                        case 'dne':
                            array_push($rules, array("field" => "usuario_bono.bono_id", "data" => "$value", "op" => "ne"));
                            $having = " valor != '" . $value . "'";

                            break;
                        case 'c':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "cn"));
                            $having = " valor  LIKE '%" . $value . "%'";

                            break;

                        case 'dnc':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "nc"));
                            $having = " valor NOT LIKE '%" . $value . "%'";
                            break;

                        case 'igt':
                            // array_push($rules, array("field" => "valor", "data" => "$value", "op" => "gt"));
                            $having = " valor > '" . $value . "'";
                            break;
                        case 'ilt':
                            //array_push($rules, array("field" => "valor", "data" => "$value", "op" => "lt"));
                            $having = " valor < '" . $value . "'";
                            break;
                        case 'it':
                            //array_push($rules, array("field" => "valor", "data" => "true", "op" => "eq"));
                            $having = " valor = 'true' ";
                            break;
                        case 'if':
                            //  array_push($rules, array("field" => "valor", "data" => "false", "op" => "eq"));
                            $having = " valor = 'false'";
                            break;
                        case 'wlt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "le"));
                            break;

                        case 'wmt':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            break;

                        case 'wow':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "le"));
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s'), "op" => "ge"));
                            break;

                        case 'woa':
                            array_push($rules, array("field" => "valor", "data" => date('Y-m-d H:i:s', $value), "op" => "ge"));
                            break;

                        case 'is':
                            // array_push($rules, array("field" => "valor", "data" => '', "op" => "ne"));
                            // array_push($rules, array("field" => "valor", "data" => $value, "op" => "eq"));
                            $having = " valor != ''";
                            $having = " valor = '$value'";
                            break;

                        case 'ins':
                            //array_push($rules, array("field" => "valor", "data" => $value, "op" => "ne"));

                            $having = " valor != '$value'";

                            break;
                    }
                    array_push($rules, array("field" => "DATE_FORMAT(usuario_bono.fecha_modif,'%Y-%m-%d')", "data" => date('Y-m-d'), "op" => "eq"));
                    array_push($rules, array("field" => "usuario_bono.estado", "data" => "R", "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);

                    $select = " usuario_bono.* ";


                    $UsuarioBono = new UsuarioBono();
                    $databono = $UsuarioBono->getUsuarioBonosCustom($select, "usuario_bono.usubono_id", "asc", 0, 100000, $json, true, $grouping);

                    $databono = json_decode($databono);

                    $final = array();
                    $totalAmount = 0;
                    foreach ($databono->data as $value) {
                        array_push($data, $value->{"usuario_bono.usuario_id"});
                    }


                    break;

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["data"] = $data;

            break;

        case 'BalanceHistory/GetBalanceHistory':
            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $IsDetails = $params->IsDetails;
            $CurrencyId = $params->CurrencyId;
            $IsTest = $params->IsTest;
            $ProductId = $params->ProductId;
            $ProviderId = $params->ProviderId;
            $Region = $params->Region;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;
            $ToDateLocal = $params->dateTo;


            $FromDateLocal = $params->dateFrom;


            if ($_REQUEST["dateFrom"] != "") {
                //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                $FromDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));

            }
            if ($_REQUEST["dateTo"] != "") {
                //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                $ToDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +0 day' . $timezone . ' hour '));

            }

            $PlayerId = $_REQUEST['PlayerId'];
            $UserId = $_REQUEST['UserId'];
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';

            $ProviderId = ($_REQUEST["ProviderId"] > 0 && is_numeric($_REQUEST["ProviderId"]) && $_REQUEST["ProviderId"] != '') ? $_REQUEST["ProviderId"] : '';
            $ProductId = $_REQUEST["ProductId"];
            $IsDetails = $_REQUEST["IsDetails"];
            $Type = $_REQUEST["Type"];

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {

                if ($IsDetails == 1) {
                    $IsDetails = false;

                } else {
                    $IsDetails = true;
                }


                $rules = [];

                if ($FromDateLocal != "") {
                    array_push($rules, array("field" => "usuario_saldo.fecha", "data" => "$FromDateLocal ", "op" => "ge"));

                }

                if ($ToDateLocal != "") {
                    array_push($rules, array("field" => "usuario_saldo.fecha", "data" => "$ToDateLocal", "op" => "le"));
                }

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario_saldo.usuario_id", "data" => "$PlayerId", "op" => "eq"));

                }

                if ($UserId != "") {
                    array_push($rules, array("field" => "usuario_saldo.usuario_id", "data" => "$UserId", "op" => "eq"));

                }


                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$CountrySelect", "op" => "eq"));
                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $select = "usuario_saldo.*,usuario.nombre,pais.iso ";

                if ($Type == 0) {
                    $select = "
                    pais.iso,
                    usuario_saldo.fecha,
                    usuario.mandante,
       SUM(saldo_inicial) saldo_inicial,
       SUM(saldo_recarga) saldo_recarga,
       SUM(saldo_notaret_creadas) saldo_notaret_creadas,
       SUM(saldo_notaret_eliminadas) saldo_notaret_eliminadas,
       SUM(saldo_notaret_pagadas) saldo_notaret_pagadas,
       SUM(saldo_notaret_pend) saldo_notaret_pend,
       SUM(saldo_notaret_pagadas) saldo_notaret_pagadas,
       
       SUM(saldo_apuestas) saldo_apuestas,
       SUM(saldo_premios) saldo_premios,
       SUM(saldo_apuestas_casino) saldo_apuestas_casino,
       SUM(saldo_premios_casino) saldo_premios_casino,
       SUM(saldo_bono) saldo_bono,
       SUM(saldo_bono_free_ganado) saldo_bono_free_ganado,
       SUM(saldo_ajustes_entrada) saldo_ajustes_entrada,
       SUM(saldo_ajustes_salida) saldo_ajustes_salida,
       
       SUM(saldo_final) saldo_final,
       
       SUM(saldo_creditos_base_final) saldo_creditos_base_final,
       
       SUM(saldo_creditos_final) saldo_creditos_final";

                    $grouping = "usuario.mandante,usuario.pais_id,usuario_saldo.fecha";
                }

                $UsuarioSaldo = new UsuarioSaldo();
                $data = $UsuarioSaldo->getUsuarioSaldosCustom($select, "usuario_saldo.fecha", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);
                $data = json_decode($data);


                $final = [];

                $papuestas = 0;
                $ppremios = 0;
                $pcont = 0;

                foreach ($data->data as $key => $value) {

                    if ($Type == 1) {

                        $array["Id"] = $value->{"usuario_saldo.ususaldo_id"};
                        $array["UserId"] = $value->{"usuario_saldo.usuario_id"};
                        $array["Country"] = strtolower($value->{"pais.iso"});
                        $array["UserName"] = $value->{"usuario.nombre"};
                        $array["CreatedLocalDate"] = $value->{"usuario_saldo.fecha"};

                        $array["BalanceInitial"] = round($value->{"usuario_saldo.saldo_inicial"}, 2);
                        $array["AmountDeposits"] = round($value->{"usuario_saldo.saldo_recarga"}, 2);
                        $array["AmountBets"] = round($value->{"usuario_saldo.saldo_apuestas"}, 2);
                        $array["AmountWin"] = round($value->{"usuario_saldo.saldo_premios"}, 2);
                        $array["AmountBetsCasino"] = round($value->{"usuario_saldo.saldo_apuestas_casino"}, 2);
                        $array["AmountWinCasino"] = round($value->{"usuario_saldo.saldo_premios_casino"}, 2);
                        $array["WithdrawCreates"] = round($value->{"usuario_saldo.saldo_notaret_creadas"}, 2);
                        $array["WithdrawPaid"] = round($value->{"usuario_saldo.saldo_notaret_pagadas"}, 2);
                        $array["WithdrawPend"] = round($value->{"usuario_saldo.saldo_notaret_pend"}, 2);
                        $array["AdjustmentE"] = round($value->{"usuario_saldo.saldo_ajustes_entrada"}, 2);
                        $array["AdjustmentS"] = round($value->{"usuario_saldo.saldo_ajustes_salida"}, 2);
                        $array["Bonus"] = round($value->{"usuario_saldo.saldo_bono"}, 2);
                        $array["BalanceEnd"] = round($value->{"usuario_saldo.saldo_final"}, 2);
                        $array["BalanceEnd"] = round($value->{"usuario_saldo.saldo_creditos_base_final"} + $value->{"usuario_saldo.saldo_creditos_final"}, 2);
                        $array["BonusFreeWin"] = round($value->{"usuario_saldo.saldo_bono_free_ganado"}, 2);
                        $array["WithdrawDeletes"] = round($value->{"usuario_saldo.saldo_notaret_eliminadas"}, 2);

                        $array["BalanceEndCalc"] = round($array["BalanceInitial"] + $array["AmountDeposits"] - $array["AmountBets"] + $array["AmountWin"] - $array["AmountBetsCasino"] + $array["AmountWinCasino"] - $array["WithdrawCreates"] + $array["WithdrawDeletes"] + $array["AdjustmentE"] - $array["AdjustmentS"] + $array["Bonus"], 2);

                        array_push($final, $array);

                    } else {
                        $array["Id"] = 0;
                        $array["UserId"] = 0;
                        $array["Country"] = strtolower($value->{"pais.iso"});

                        $array["UserName"] = '';
                        $array["CreatedLocalDate"] = $value->{"usuario_saldo.fecha"};
                        $array["Partner"] = $value->{"usuario.mandante"};

                        $array["BalanceInitial"] = round($value->{".saldo_inicial"}, 2);
                        $array["AmountDeposits"] = round($value->{".saldo_recarga"}, 2);

                        $array["AmountBets"] = round($value->{".saldo_apuestas"}, 2);
                        $array["AmountWin"] = round($value->{".saldo_premios"}, 2);
                        $array["AmountBetsCasino"] = round($value->{".saldo_apuestas_casino"}, 2);
                        $array["AmountWinCasino"] = round($value->{".saldo_premios_casino"}, 2);
                        $array["WithdrawCreates"] = round($value->{".saldo_notaret_creadas"}, 2);
                        $array["WithdrawPaid"] = round($value->{".saldo_notaret_pagadas"}, 2);
                        $array["WithdrawPend"] = round($value->{".saldo_notaret_pend"}, 2);
                        $array["AdjustmentE"] = round($value->{".saldo_ajustes_entrada"}, 2);
                        $array["AdjustmentS"] = round($value->{".saldo_ajustes_salida"}, 2);
                        $array["Bonus"] = round($value->{".saldo_bono"}, 2);
                        $array["BalanceEnd"] = round($value->{".saldo_final"}, 2);
                        $array["BalanceEnd"] = round($value->{".saldo_creditos_base_final"} + $value->{".saldo_creditos_final"}, 2);

                        $array["BonusFreeWin"] = round($value->{".saldo_bono_free_ganado"}, 2);
                        $array["WithdrawDeletes"] = round($value->{".saldo_notaret_eliminadas"}, 2);
                        $array["BalanceEndCalc"] = round($array["BalanceInitial"] + $array["AmountDeposits"] - $array["AmountBets"] + $array["AmountWin"] - $array["AmountBetsCasino"] + $array["AmountWinCasino"] - $array["WithdrawCreates"] + $array["WithdrawDeletes"] + $array["AdjustmentE"] - $array["AdjustmentS"] + $array["Bonus"], 2);

                        array_push($final, $array);

                    }


                }
                /*if (!$IsDetails) {
                    if ($pcont > 0) {
                        $array["Game"] = $prod->{"producto.descripcion"};
                        $array["ProviderName"] = $prod->{"proveedor.descripcion"};
                        $array["Bets"] = $pcont;
                        $array["Stakes"] = $papuestas;
                        $array["Winnings"] = $ppremios;
                        $array["Profit"] = 0;
                        $array["BonusCashBack"] = 0;
                        $array["CurrencyId"] = $prod->{"usuario_mandante.moneda"};

                        array_push($final, $array);
                    }
                }*/


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["pos"] = $SkeepRows;
                $response["total_count"] = oldCount($final);
                $response["data"] = $final;


            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success2";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        case 'BalanceHistory/GetBalanceMovement':

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $IsDetails = $params->IsDetails;
            $CurrencyId = $params->CurrencyId;
            $IsTest = $params->IsTest;
            $ProductId = $params->ProductId;
            $ProviderId = $params->ProviderId;
            $Region = $params->Region;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;
            $ToDateLocal = $params->dateTo;


            $FromDateLocal = $params->dateFrom;


            if ($_REQUEST["dateFrom"] != "") {
                //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));

            }
            if ($_REQUEST["dateTo"] != "") {
                //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +0 day' . $timezone . ' hour '));

            }

            $PlayerId = $_REQUEST['PlayerId'];
            $UserId = $_REQUEST['UserId'];

            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';

            $ProviderId = ($_REQUEST["ProviderId"] > 0 && is_numeric($_REQUEST["ProviderId"]) && $_REQUEST["ProviderId"] != '') ? $_REQUEST["ProviderId"] : '';
            $ProductId = $_REQUEST["ProductId"];
            $IsDetails = $_REQUEST["IsDetails"];
            $Type = $_REQUEST["Type"];

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {

                if ($IsDetails == 1) {
                    $IsDetails = false;

                } else {
                    $IsDetails = true;
                }


                $rules = [];

                if ($FromDateLocal != "") {
                    array_push($rules, array("field" => "usuario_historial.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));

                }

                if ($ToDateLocal != "") {
                    array_push($rules, array("field" => "usuario_historial.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                }

                if ($ProductId != "") {

                    if ($_SESSION['Global'] == "S") {
                        array_push($rules, array("field" => "producto.producto_id", "data" => "$ProductId", "op" => "eq"));
                    } else {
                        array_push($rules, array("field" => "producto_mandante.prodmandante_id", "data" => "$ProductId", "op" => "eq"));
                    }
                }

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario_historial.usuario_id", "data" => "$PlayerId", "op" => "eq"));

                }

                if ($UserId != "") {
                    array_push($rules, array("field" => "usuario_historial.usuario_id", "data" => "$UserId", "op" => "eq"));

                }
                if ($Type != "") {

                    if ($Type == "N") {
                        array_push($rules, array("field" => "transaccion_juego.tipo", "data" => "NORMAL,''", "op" => "in"));
                    }
                    if ($Type == "FS") {
                        array_push($rules, array("field" => "transaccion_juego.tipo", "data" => "FREESPIN", "op" => "eq"));
                    }
                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$CountrySelect", "op" => "eq"));
                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $select = "usuario_historial.*,usuario.nombre ";

                $UsuarioHistorial = new UsuarioHistorial();
                $data = $UsuarioHistorial->getUsuarioHistorialsCustom($select, "usuario_historial.usuhistorial_id", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);
                $data = json_decode($data);


                $final = [];

                $papuestas = 0;
                $ppremios = 0;
                $pcont = 0;

                foreach ($data->data as $key => $value) {


                    $array["Id"] = $value->{"usuario_historial.usuhistorial_id"};
                    $array["UserId"] = $value->{"usuario_historial.usuario_id"};
                    $array["UserName"] = $value->{"usuario.nombre"};
                    $array["Movement"] = ($value->{"usuario_historial.movimiento"} === 'E') ? 0 : $value->{"usuario_historial.movimiento"};

                    if ($array["Movement"] === 'S') {
                        $array["Movement"] = 1;
                    }

                    if ($array["Movement"] === 'C') {
                        $array["Movement"] = 2;
                    }


                    $array["Type"] = $value->{"usuario_historial.tipo"};

                    switch ($value->{"usuario_historial.tipo"}) {
                        case 10:
                            $array["Type"] = 'Recarga';

                            break;
                        case 15:
                            $array["Type"] = 'Ajuste de saldo';

                            break;
                        case 20:
                            $array["Type"] = 'Apuestas Deportivas';

                            break;
                        case 30:
                            $array["Type"] = 'Apuestas Casino';

                            break;
                        case 40:
                            $array["Type"] = 'Nota de retiro Creada';

                            break;
                        case 50:
                            $array["Type"] = 'Bono Redimido';

                            break;

                    }

                    $array["ExternalId"] = $value->{"usuario_historial.externo_id"};
                    $array["CreatedLocalDate"] = $value->{"usuario_historial.fecha_crea"};
                    $array["BalanceDeposit"] = $value->{"usuario_historial.creditos_base"};
                    $array["BalanceWithdrawal"] = $value->{"usuario_historial.creditos"};
                    $array["Amount"] = $value->{"usuario_historial.valor"};

                    array_push($final, $array);


                }
                /*if (!$IsDetails) {
                    if ($pcont > 0) {
                        $array["Game"] = $prod->{"producto.descripcion"};
                        $array["ProviderName"] = $prod->{"proveedor.descripcion"};
                        $array["Bets"] = $pcont;
                        $array["Stakes"] = $papuestas;
                        $array["Winnings"] = $ppremios;
                        $array["Profit"] = 0;
                        $array["BonusCashBack"] = 0;
                        $array["CurrencyId"] = $prod->{"usuario_mandante.moneda"};

                        array_push($final, $array);
                    }
                }*/


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $data->count[0]->{".count"};
                $response["data"] = $final;


            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success2";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * Report/GetCasinoGamesReport
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Report/GetCasinoGamesReport':

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);
            $IsDetails = $params->IsDetails;
            $CurrencyId = $params->CurrencyId;
            $IsTest = $params->IsTest;
            $ProductId = $params->ProductId;
            $ProviderId = $params->ProviderId;
            $Region = $params->Region;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;
            $ToDateLocal = $params->dateTo;


            $FromDateLocal = $params->dateFrom;


            if ($_REQUEST["dateFrom"] != "") {
                //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));

            }
            if ($_REQUEST["dateTo"] != "") {
                //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +0 day' . $timezone . ' hour '));

            }

            $PlayerId = $_REQUEST['PlayerId'];
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';

            $ProviderId = ($_REQUEST["ProviderId"] > 0 && is_numeric($_REQUEST["ProviderId"]) && $_REQUEST["ProviderId"] != '') ? $_REQUEST["ProviderId"] : '';
            $ProductId = $_REQUEST["ProductId"];
            $IsDetails = $_REQUEST["IsDetails"];
            $Type = $_REQUEST["Type"];

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($IsDetails == 1) {
                $MaxRows = 1000000;
            }
            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {

                if ($IsDetails == 1) {
                    $IsDetails = false;

                } else {
                    $IsDetails = true;
                }


                $rules = [];

                if ($FromDateLocal != "") {
                    array_push($rules, array("field" => "transaccion_juego.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));

                }

                if ($ToDateLocal != "") {
                    array_push($rules, array("field" => "transaccion_juego.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                }

                if ($ProductId != "") {

                    if ($_SESSION['Global'] == "S") {
                        array_push($rules, array("field" => "producto.producto_id", "data" => "$ProductId", "op" => "eq"));
                    } else {
                        array_push($rules, array("field" => "producto_mandante.prodmandante_id", "data" => "$ProductId", "op" => "eq"));
                    }
                }

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($ProviderId != "") {
                    array_push($rules, array("field" => "proveedor.proveedor_id", "data" => "$ProviderId", "op" => "eq"));
                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario_mandante.usuario_mandante", "data" => "$PlayerId", "op" => "eq"));

                }
                if ($Type != "") {

                    if ($Type == "N") {
                        array_push($rules, array("field" => "transaccion_juego.tipo", "data" => "NORMAL,''", "op" => "in"));
                    }
                    if ($Type == "FS") {
                        array_push($rules, array("field" => "transaccion_juego.tipo", "data" => "FREESPIN", "op" => "eq"));
                    }
                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => "$CountrySelect", "op" => "eq"));
                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario_mandante.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                if (!$IsDetails) {
                    $grouping = "producto.producto_id,usuario_mandante.moneda";
                    $select = " usuario_mandante.moneda,producto.*, COUNT(transaccion_juego.transjuego_id) count,SUM(CASE WHEN transaccion_juego.tipo != 'FREESPIN' THEN transaccion_juego.valor_ticket ELSE 0 END) apuestas, SUM(CASE WHEN transaccion_juego.tipo != 'FREESPIN' THEN transaccion_juego.valor_premio ELSE 0 END) premios,SUM(CASE WHEN transaccion_juego.tipo = 'FREESPIN' THEN transaccion_juego.valor_ticket ELSE 0 END) apuestasBonus, SUM(CASE WHEN transaccion_juego.tipo = 'FREESPIN' THEN transaccion_juego.valor_premio ELSE 0 END) premiosBonus,proveedor.* ";
                } else {
                    $select = " usuario_mandante.moneda,producto.*, transaccion_juego.tipo,transaccion_juego.fecha_crea,transaccion_juego.transjuego_id,transaccion_juego.usuario_id,usuario_mandante.usuario_mandante, 1 count,CASE WHEN transaccion_juego.tipo != 'FREESPIN' THEN transaccion_juego.valor_ticket ELSE 0 END apuestas,CASE WHEN transaccion_juego.tipo != 'FREESPIN' THEN transaccion_juego.valor_premio ELSE 0 END premios,CASE WHEN transaccion_juego.tipo = 'FREESPIN' THEN transaccion_juego.valor_ticket ELSE 0 END apuestasBonus,CASE WHEN transaccion_juego.tipo = 'FREESPIN' THEN transaccion_juego.valor_premio ELSE 0 END premiosBonus,proveedor.* ";
                }

                $TransaccionJuego = new TransaccionJuego();
                $data = $TransaccionJuego->getTransaccionesCustom($select, "transaccion_juego.transjuego_id", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);
                $data = json_decode($data);



                $final = [];

                $papuestas = 0;
                $ppremios = 0;
                $pcont = 0;

                foreach ($data->data as $key => $value) {

                    $CurrencyId = $value->{"usuario_mandante.moneda"};
                    $array = [];

                    if ($IsDetails) {

                        $array["Id"] = $value->{"transaccion_juego.transjuego_id"};
                        $array["Date"] = $value->{"transaccion_juego.fecha_crea"};
                        $array["Username"] = $value->{"usuario_mandante.usuario_mandante"};
                        $array["Game"] = $value->{"producto.descripcion"};
                        $array["ProviderName"] = $value->{"proveedor.descripcion"};
                        $array["Bets"] = $value->{".count"};
                        $array["Stakes"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                        $array["Winnings"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                        $array["StakesBonus"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestasBonus"}, 2));
                        $array["WinningsBonus"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premiosBonus"}, 2));
                        $array["Profit"] = $array["Stakes"] - $array["Winnings"] - $array["WinningsBonus"];
                        if ($array["Stakes"] == 0) {
                            $array["Profitness"] = 0;
                        } else {
                            $array["Profitness"] = (($array["Stakes"] - $array["Winnings"] - $array["WinningsBonus"]) / $array["Stakes"]) * 100;
                        }
                        $array["BonusCashBack"] = 0;
                        $array["CurrencyId"] = $value->{"usuario_mandante.moneda"};
                        if ($array["CurrencyId"] == "PEN") {
                            $array["CountryIcon"] = "pe";
                        }

                        $array["Type"] = 'N';

                        if ($value->{"transaccion_juego.tipo"} == "FREESPIN") {
                            $array["Type"] = 'FS';
                        }

                        array_push($final, $array);

                    } else {

                        $array["Game"] = $value->{"producto.descripcion"};
                        $array["ProviderName"] = $value->{"proveedor.descripcion"};
                        $array["Bets"] = $value->{".count"};
                        $array["Stakes"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                        $array["Winnings"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                        $array["StakesBonus"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestasBonus"}, 2));
                        $array["WinningsBonus"] = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premiosBonus"}, 2));
                        $array["Profit"] = $array["Stakes"] - $array["Winnings"] - $array["WinningsBonus"];
                        if ($array["Stakes"] == 0) {
                            $array["Profitness"] = 0;
                        } else {
                            $array["Profitness"] = (($array["Stakes"] - $array["Winnings"] - $array["WinningsBonus"]) / $array["Stakes"]) * 100;
                        }
                        $array["BonusCashBack"] = 0;
                        $array["CurrencyId"] = $value->{"usuario_mandante.moneda"};
                        if ($array["CurrencyId"] == "PEN") {
                            $array["CountryIcon"] = "pe";
                        }


                        array_push($final, $array);

                        $papuestas = 0;
                        $ppremios = 0;
                        $pcont = 0;
                        $papuestas = $papuestas + currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                        $ppremios = $ppremios + currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                        $pcont = $pcont + $value->{".count"};

                        $prod = $value;
                        /*if (($prod->{"producto.producto_id"} != $value->{"producto.producto_id"}) && ($prod != null)) {
 $array["ProviderName"] = $prod->{"proveedor.descripcion"};
                            $array["Bets"] = $pcont;
                            $array["Stakes"] = $papuestas;
                            $array["Winnings"] = $ppremios;
                            $array["Profit"] = $papuestas - $ppremios;
                            $array["Profitness"] = (($papuestas - $ppremios) / $papuestas) * 100;
                            $array["BonusCashBack"] = 0;
                            $array["CurrencyId"] = $value->{"usuario_mandante.moneda"};

                            array_push($final, $array);

                            $papuestas = 0;
                            $ppremios = 0;
                            $pcont = 0;
                            $papuestas = $papuestas + currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                            $ppremios = $ppremios + currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                            $pcont = $pcont + $value->{".count"};

                        } else {
                            $papuestas = $papuestas + currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                            $ppremios = $ppremios + currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                            $pcont = $pcont + $value->{".count"};
                            $prod = $value;
                        }*/


                    }


                }
                /*if (!$IsDetails) {
                    if ($pcont > 0) {
                        $array["Game"] = $prod->{"producto.descripcion"};
                        $array["ProviderName"] = $prod->{"proveedor.descripcion"};
                        $array["Bets"] = $pcont;
                        $array["Stakes"] = $papuestas;
                        $array["Winnings"] = $ppremios;
                        $array["Profit"] = 0;
                        $array["BonusCashBack"] = 0;
                        $array["CurrencyId"] = $prod->{"usuario_mandante.moneda"};

                        array_push($final, $array);
                    }
                }*/


                setlocale(LC_ALL, 'czech');

                if (!$IsDetails) {

                    $rules = [];

                    array_push($rules, array("field" => "ApiTransactions.trnFecReg", "data" => "$FromDateLocal ", "op" => "ge"));
                    array_push($rules, array("field" => "ApiTransactions.trnFecReg", "data" => "$ToDateLocal", "op" => "le"));

                    if ($Region != "") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                    }


                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);


                    $ApiTransaction = new ApiTransaction();
                    $casino2 = $ApiTransaction->getTransaccionesCustom(" usuario.moneda,'VivoGaming' ProviderName, COUNT(ApiTransactions.trnID) count,SUM(CASE WHEN ApiTransactions.trnType = 'BET' THEN ApiTransactions.trnMonto ELSE 0 END) apuestas,SUM(CASE WHEN ApiTransactions.trnType = 'WIN' THEN ApiTransactions.trnMonto ELSE 0 END) premios", "ApiTransactions.trnID", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

                    $casino2 = json_decode($casino2);

                    $papuestas = 0;
                    $ppremios = 0;
                    $pcount = 0;

                    $pcont = 0;
                    foreach ($casino2->data as $key => $value) {
                        $papuestas = $papuestas + currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                        $ppremios = $ppremios + currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                        $pcont = $pcont + $value->{".count"};


                    }

                    if ($pcont != 0) {
                        $array = [];

                        $array["Game"] = 'Vivogaming';
                        $array["ProviderName"] = 'Vivogaming';
                        $array["Bets"] = $pcont;
                        $array["Stakes"] = $papuestas;
                        $array["Winnings"] = $ppremios;
                        $array["Profit"] = 0;
                        $array["BonusCashBack"] = 0;


                        array_push($final, $array);
                    }


                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                if (!$IsDetails) {
                    $response["pos"] = 0;
                    $response["data"] = $final;

                } else {
                    $response["pos"] = $SkeepRows;
                    $response["total_count"] = $data->count[0]->{".count"};
                    $response["data"] = $final;
                }

            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success2";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * Report/getRegisteredAutoexclusion
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/getRegisteredAutoexclusion":

            $jsonpname = $_GET["jsonp"];

            $tipo = "EXCCASINOCATEGORY";

            $Tipo = new Clasificador("", $tipo);

            $PlayerId = $_REQUEST["PlayerId"];

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $MaxRows = $_REQUEST["count"];
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            $ToDateLocal = $params->dateTo;

            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +1 day' . $timezone . ' hour '));

            $FromDateLocal = $params->dateFrom;

            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));

            if ($FromDateLocal == "") {
                $FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
            }
            if ($ToDateLocal == "") {
                $ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
            }

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 5;
            }


            $rules = [];

            array_push($rules, array("field" => "usuario_configuracion.valor", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_configuracion.valor", "data" => "$ToDateLocal", "op" => "le"));

            if ($PlayerId != "") {
                array_push($rules, array("field" => "usuario_configuracion.usuario_id", "data" => $PlayerId, "op" => "eq"));

            }

            if ($_SESSION['PaisCond'] == "S") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
            }
            if ($_SESSION['Global'] == "N") {
                array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
            }
            array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


            array_push($rules, array("field" => "usuario_configuracion.tipo", "data" => $Tipo->getClasificadorId(), "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $UsuarioConfiguracion = new UsuarioConfiguracion();
            $configuraciones = $UsuarioConfiguracion->getUsuarioConfiguracionesCustom(" usuario_configuracion.* ", "usuario_configuracion.usuconfig_id", "asc", $SkeepRows, $MaxRows, $json, true);
            $data = json_decode($configuraciones);


            $final = [];

            $papuestas = 0;
            $ppremios = 0;
            $pcont = 0;

            foreach ($data->data as $key => $value) {

                $array = array();
                $array["Id"] = ($value->{"usuario_configuracion.usuconfig_id"});
                $array["PlayerId"] = ($value->{"usuario_configuracion.usuario_id"});
                $array["UserName"] = "";
                $array["State"] = ($value->{"usuario_configuracion.estado"});
                $array["FinalDate"] = $value->{"usuario_configuracion.valor"};
                $array["Category"] = $value->{"usuario_configuracion.producto_id"};

                $array["UserCreation"] = $value->{"usuario_configuracion.usucrea_id"};
                $array["UserModified"] = $value->{"usuario_configuracion.usumodif_id"};

                array_push($final, $array);


            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            if ($jsonpname != "") {

                header('content-type: application/json; charset=utf-8');
                echo $jsonpname . "(" . json_encode($response) . ")";
                exit;

            }

            break;

        /**
        * Report/GetCasinoGamesAggregatorReportDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Report/GetCasinoGamesAggregatorReportDetail':

            $Usuario = new Usuario();

            $Id = intval($_REQUEST["id"]);

            if ($Id != "") {

                $rules = [];
                array_push($rules, array("field" => "transjuego_log.transjuego_id", "data" => $Id, "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $select = "transjuego_log.*,transaccion_api.*";
                $grouping = "transjuego_log.transjuegolog_id";


                $TransjuegoLog = new TransjuegoLog();
                $data = $TransjuegoLog->getTransjuegoLogsCustom($select, "transjuego_log.transjuegolog_id", "asc", 0, 100, $json, true, $grouping);
                $data = json_decode($data);


                $final = [];

                $papuestas = 0;
                $ppremios = 0;
                $pcont = 0;

                foreach ($data->data as $key => $value) {

                    $CurrencyId = $value->{"usuario_mandante.moneda"};
                    $array = [];


                    $array["Id"] = $value->{"transjuego_log.transjuegolog_id"};
                    $array["TransactionId"] = $value->{"transjuego_log.transaccion_id"};
                    $array["Amount"] = $value->{"transjuego_log.valor"};
                    $array["Type"] = $value->{"transjuego_log.tipo"};
                    $array["Value"] = $value->{"transaccion_api.t_value"};

                    array_push($final, $array);


                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = oldCount($final);
                $response["data"] = $final;
            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * Report/GetCasinoGamesReportDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case 'Report/GetCasinoGamesReportDetail':

            $Usuario = new Usuario();

            $Id = intval($_REQUEST["id"]);

            if ($Id != "") {
                $TransaccionJuego = new TransaccionJuego($Id);
                $Mandante = new Mandante ($TransaccionJuego->getMandante());

                if ($Mandante->propio == "S") {
                    $rules = [];
                    array_push($rules, array("field" => "transjuego_log.transjuego_id", "data" => $Id, "op" => "eq"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $select = "transjuego_log.*,transaccion_api.*";
                    $grouping = "transjuego_log.transjuegolog_id";


                    $TransjuegoLog = new TransjuegoLog();
                    $data = $TransjuegoLog->getTransjuegoLogsCustom($select, "transjuego_log.transjuegolog_id", "asc", 0, 100, $json, true, $grouping);
                    $data = json_decode($data);


                    $final = [];

                    $papuestas = 0;
                    $ppremios = 0;
                    $pcont = 0;

                    foreach ($data->data as $key => $value) {

                        $CurrencyId = $value->{"usuario_mandante.moneda"};
                        $array = [];


                        $array["Id"] = $value->{"transjuego_log.transjuegolog_id"};
                        $array["TransactionId"] = $value->{"transjuego_log.transaccion_id"};
                        $array["Amount"] = $value->{"transjuego_log.valor"};
                        $array["Type"] = $value->{"transjuego_log.tipo"};
                        $array["Value"] = $value->{"transaccion_api.t_value"};
                        $array["Response"] = $value->{"transaccion_api.respuesta"};
                        $array["Code"] = $value->{"transaccion_api.respuesta_codigo"};
                        $array["CreateLocalDate"] = $value->{"transaccion_api.fecha_crea"};

                        array_push($final, $array);


                    }
                } else {
                    $rules = [];
                    array_push($rules, array("field" => "transaccion_api.identificador", "data" => $TransaccionJuego->getTicketId(), "op" => "eq"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $select = "transaccion_api_mandante.*,transaccion_api.*,usuario_mandante.*";
                    $grouping = "transaccion_api_mandante.transapimandante_id";


                    $TransaccionApiMandante = new TransaccionApiMandante();
                    $data = $TransaccionApiMandante->getTransaccionesCustom($select, "transaccion_api_mandante.transapimandante_id", "asc", 0, 100, $json, true, $grouping);
                    $data = json_decode($data);


                    $final = [];

                    $papuestas = 0;
                    $ppremios = 0;
                    $pcont = 0;

                    foreach ($data->data as $key => $value) {

                        $CurrencyId = $value->{"usuario_mandante.moneda"};
                        $array = [];


                        $array["Id"] = $value->{"transaccion_api_mandante.transapimandante_id"};
                        $array["TransactionId"] = $value->{"transaccion_api_mandante.transapimandante_id"};
                        $array["Amount"] = $value->{"transaccion_api_mandante.valor"};
                        $array["Type"] = $value->{"transaccion_api_mandante.tipo"};
                        $array["Value"] = $value->{"transaccion_api_mandante.t_value"};
                        $array["Response"] = $value->{"transaccion_api_mandante.respuesta"};
                        $array["Code"] = $value->{"transaccion_api_mandante.respuesta_codigo"};
                        $array["CreateLocalDate"] = $value->{"transaccion_api_mandante.fecha_crea"};

                        array_push($final, $array);


                    }
                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = oldCount($final);
                $response["data"] = $final;
            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * Report/GetPremiosPendientes
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetPremiosPendientes":

            $ItTicketEnc = new ItTicketEnc();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->EndDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->StartDateLocal)));
            $Region = $params->Region;
            $Currency = $params->Currency;
            $ClientId = $params->ClientId;

            $FromId = $_REQUEST["FromId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $Ip = $_REQUEST["Ip"];
            $CountrySelect = intval($_REQUEST["CountrySelect"]);
            $State = ($_REQUEST["State"] != 'A' && $_REQUEST["State"] != 'I') ? '' : $_REQUEST["State"];

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {
                $FromDateLocal = $params->dateFrom;

                if ($FromId != "") {
                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");
                }

                if ($_REQUEST["dateFrom"] != "") {
                    $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
                }

                $ToDateLocal = $params->dateTo;

                if ($_REQUEST["dateTo"] != "") {
                    $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
                }

                $rules = [];

                /* if ($FromDateLocal == "") {
                     $FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                 }
                 if ($ToDateLocal == "") {
                     $ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                 }
                */


                if ($FromDateLocal != "") {
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_crea,' ',it_ticket_enc.hora_crea)", "data" => "$FromDateLocal ", "op" => "ge"));
                }
                if ($ToDateLocal != "") {
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_crea,' ',it_ticket_enc.hora_crea)", "data" => "$ToDateLocal", "op" => "le"));
                }

                array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));
                // array_push($rules, array("field" => "it_ticket_enc.usuario_id", "data" => "$ClientId", "op" => "eq"));

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($Currency != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                }

                if ($FromId != "") {

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario.puntoventa_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario.usuario_id", "data" => "$FromId", "op" => "eq"));
                    }

                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$PlayerId", "op" => "eq"));

                }

                if ($Ip != "") {
                    array_push($rules, array("field" => "it_ticket_enc.dir_ip", "data" => "$Ip", "op" => "cn"));

                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$CountrySelect", "op" => "eq"));
                }

                if ($State != "") {
                    array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "$State", "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION["win_perfil2"] == "CAJERO") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                    array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));
                array_push($rules, array("field" => "it_ticket_enc.premiado", "data" => "S", "op" => "eq"));
                array_push($rules, array("field" => "it_ticket_enc.premio_pagado", "data" => "N", "op" => "eq"));
                array_push($rules, array("field" => "usuario.puntoventa_id", "data" => "0", "op" => "ne"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $ItTicketEnc = new ItTicketEnc();
                $tickets = $ItTicketEnc->getTicketsCustom(" usuario.login,usuario.moneda,it_ticket_enc.ticket_id,it_ticket_enc.usuario_id,it_ticket_enc.it_ticket_id,it_ticket_enc.vlr_apuesta,it_ticket_enc.vlr_premio,it_ticket_enc.estado,it_ticket_enc.fecha_crea,it_ticket_enc.hora_crea,it_ticket_enc.dir_ip,it_ticket_enc.fecha_cierre,it_ticket_enc.hora_cierre  ", "it_ticket_enc.it_ticket_id", "desc", $SkeepRows, $MaxRows, $json, true);
                $tickets = json_decode($tickets);

                $final = [];

                foreach ($tickets->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"it_ticket_enc.it_ticket_id"};
                    $array["Amount"] = $value->{"it_ticket_enc.vlr_apuesta"};
                    $array["Price"] = $value->{"it_ticket_enc.vlr_apuesta"};
                    $array["WinningAmount"] = $value->{"it_ticket_enc.vlr_premio"};
                    $array["StateName"] = $value->{"it_ticket_enc.estado"};
                    $array["CreatedLocal"] = $value->{"it_ticket_enc.fecha_crea"} . " " . $value->{"it_ticket_enc.hora_crea"};
                    $array["ClientLoginIP"] = $value->{"it_ticket_enc.dir_ip"};
                    $array["Currency"] = $value->{"usuario.moneda"};


                    $array["Id"] = $value->{"it_ticket_enc.ticket_id"};
                    $array["UserId"] = $value->{"it_ticket_enc.usuario_id"};

                    $array["UserName"] = $value->{"usuario.login"};
                    $array["State"] = $value->{"it_ticket_enc.estado"};
                    $array["Date"] = $value->{"it_ticket_enc.fecha_crea"} . " " . $value->{"it_ticket_enc.hora_crea"};
                    $array["WinningAmount"] = $value->{"it_ticket_enc.vlr_premio"};
                    $array["Odds"] = 0;
                    $array["UserIP"] = $value->{"it_ticket_enc.dir_ip"};


                    $array["NoTicket"] = $value->{"it_ticket_enc.ticket_id"};
                    $array["ValueBet"] = $value->{"it_ticket_enc.vlr_apuesta"};
                    $array["Price"] = $value->{"it_ticket_enc.vlr_apuesta"};
                    $array["WinningAmount"] = $value->{"it_ticket_enc.vlr_premio"};
                    $array["StateName"] = $value->{"it_ticket_enc.estado"};
                    $array["CreationDate"] = $value->{"it_ticket_enc.fecha_crea"};
                    $array["CreationTime"] =  $value->{"it_ticket_enc.hora_crea"};
                    $array["ClientLoginIP"] = $value->{"it_ticket_enc.dir_ip"};
                    $array["Currency"] = $value->{"usuario.moneda"};


                    $array["Id"] = $value->{"it_ticket_enc.ticket_id"};
                    $array["UserId"] = $value->{"it_ticket_enc.usuario_id"};

                    $array["PointSale"] = $value->{"usuario.login"};
                    $array["State"] = $value->{"it_ticket_enc.estado"};
                    $array["DatePrize"] = $value->{"it_ticket_enc.fecha_cierre"};
                    $array["TimePrize"] = $value->{"it_ticket_enc.hora_cierre"};
                    $array["ValuePrize"] = $value->{"it_ticket_enc.vlr_premio"};
                    $array["Odds"] = 0;
                    $array["ExpiredDate"] = $value->{"it_ticket_enc.fecha_maxpago"};

                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $tickets->count[0]->{".count"};
                $response["data"] = $final;
            } else {

                $response["HasError"] = false;
                $response["AlertType"] = "success2";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Report/GetBetHistory
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetBetHistory":

            $ItTicketEnc = new ItTicketEnc();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->EndDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->StartDateLocal)));
            $Region = $params->Region;
            $Currency = $params->Currency;
            $ClientId = $params->ClientId;

            $FromId = $_REQUEST["FromId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $TicketId = $_REQUEST["TicketId"];
            $Ip = $_REQUEST["Ip"];
            $CountrySelect = intval($_REQUEST["CountrySelect"]);
            $State = ($_REQUEST["State"] != 'A' && $_REQUEST["State"] != 'I') ? '' : $_REQUEST["State"];

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {
                $FromDateLocal = $params->dateFrom;

                if ($FromId != "") {
                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");
                }

                if ($_REQUEST["dateFrom"] != "") {
                    $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
                }

                $ToDateLocal = $params->dateTo;

                if ($_REQUEST["dateTo"] != "") {
                    $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
                }

                $rules = [];

                /* if ($FromDateLocal == "") {
                     $FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                 }
                 if ($ToDateLocal == "") {
                     $ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                 }
                */


                if ($FromDateLocal != "") {
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_crea,' ',it_ticket_enc.hora_crea)", "data" => "$FromDateLocal ", "op" => "ge"));
                }
                if ($ToDateLocal != "") {
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_crea,' ',it_ticket_enc.hora_crea)", "data" => "$ToDateLocal", "op" => "le"));
                }

                array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));
                // array_push($rules, array("field" => "it_ticket_enc.usuario_id", "data" => "$ClientId", "op" => "eq"));

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($Currency != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                }

                if ($FromId != "") {

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario.puntoventa_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario.usuario_id", "data" => "$FromId", "op" => "eq"));
                    }

                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$PlayerId", "op" => "eq"));

                }

                if ($Ip != "") {
                    array_push($rules, array("field" => "it_ticket_enc.dir_ip", "data" => "$Ip", "op" => "cn"));

                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$CountrySelect", "op" => "eq"));
                }

                if ($State != "") {
                    array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "$State", "op" => "eq"));

                }

                if ($TicketId != "") {
                    array_push($rules, array("field" => "it_ticket_enc.ticket_id", "data" => "$TicketId", "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION["win_perfil2"] == "CAJERO") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                    array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $ItTicketEnc = new ItTicketEnc();
                $tickets = $ItTicketEnc->getTicketsCustom(" usuario.login,usuario.moneda,it_ticket_enc.ticket_id,it_ticket_enc.usuario_id,it_ticket_enc.it_ticket_id,it_ticket_enc.vlr_apuesta,it_ticket_enc.vlr_premio,it_ticket_enc.estado,it_ticket_enc.fecha_crea,it_ticket_enc.hora_crea,it_ticket_enc.dir_ip  ", "it_ticket_enc.it_ticket_id", "desc", $SkeepRows, $MaxRows, $json, true);
                $tickets = json_decode($tickets);

                $final = [];

                foreach ($tickets->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"it_ticket_enc.it_ticket_id"};
                    $array["Amount"] = $value->{"it_ticket_enc.vlr_apuesta"};
                    $array["Price"] = $value->{"it_ticket_enc.vlr_apuesta"};
                    $array["WinningAmount"] = $value->{"it_ticket_enc.vlr_premio"};
                    $array["StateName"] = $value->{"it_ticket_enc.estado"};
                    $array["CreatedLocal"] = $value->{"it_ticket_enc.fecha_crea"} . " " . $value->{"it_ticket_enc.hora_crea"};
                    $array["ClientLoginIP"] = $value->{"it_ticket_enc.dir_ip"};
                    $array["Currency"] = $value->{"usuario.moneda"};


                    $array["Id"] = $value->{"it_ticket_enc.ticket_id"};
                    $array["UserId"] = $value->{"it_ticket_enc.usuario_id"};

                    $array["UserName"] = $value->{"usuario.login"};
                    $array["State"] = $value->{"it_ticket_enc.estado"};
                    $array["Date"] = $value->{"it_ticket_enc.fecha_crea"} . " " . $value->{"it_ticket_enc.hora_crea"};
                    $array["WinningAmount"] = $value->{"it_ticket_enc.vlr_premio"};
                    $array["Odds"] = 0;
                    $array["UserIP"] = $value->{"it_ticket_enc.dir_ip"};


                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $tickets->count[0]->{".count"};
                $response["data"] = $final;
            } else {

                $response["HasError"] = false;
                $response["AlertType"] = "success2";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * Report/GetBetHistory2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetBetHistory2":

            $TransaccionSportsbook = new TransaccionSportsbook();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->EndDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->StartDateLocal)));
            $Region = $params->Region;
            $Currency = $params->Currency;
            $ClientId = $params->ClientId;

            $FromId = $_REQUEST["FromId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $Ip = $_REQUEST["Ip"];
            $CountrySelect = intval($_REQUEST["CountrySelect"]);
            $State = ($_REQUEST["State"] != 'A' && $_REQUEST["State"] != 'I') ? '' : $_REQUEST["State"];

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }


            if ($seguir) {
                $FromDateLocal = $params->dateFrom;

                if ($FromId != "") {
                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");
                }

                if ($_REQUEST["dateFrom"] != "") {
                    $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
                }

                $ToDateLocal = $params->dateTo;

                if ($_REQUEST["dateTo"] != "") {
                    $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
                }

                $rules = [];

                /* if ($FromDateLocal == "") {
                     $FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                 }
                 if ($ToDateLocal == "") {
                     $ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                 }
                */


                if ($FromDateLocal != "") {
                    array_push($rules, array("field" => "(transaccion_sportsbook.fecha_crea)", "data" => "$FromDateLocal ", "op" => "ge"));
                }
                if ($ToDateLocal != "") {
                    array_push($rules, array("field" => "(transaccion_sportsbook.fecha_crea)", "data" => "$ToDateLocal", "op" => "le"));
                }

                array_push($rules, array("field" => "transaccion_sportsbook.eliminado", "data" => "N", "op" => "eq"));
                // array_push($rules, array("field" => "it_ticket_enc.usuario_id", "data" => "$ClientId", "op" => "eq"));

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($Currency != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                }

                if ($FromId != "") {

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario.puntoventa_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        //array_push($rules, array("field" => "usuario.usuario_id", "data" => "$FromId", "op" => "eq"));
                        array_push($rules, array("field" => "usuario_mandante.usuario_mandante", "data" => "$FromId", "op" => "eq"));
                    }

                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$PlayerId", "op" => "eq"));

                }

                if ($Ip != "") {
                    array_push($rules, array("field" => "transaccion_sportsbook.dir_ip", "data" => "$Ip", "op" => "cn"));

                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$CountrySelect", "op" => "eq"));
                }

                if ($State != "") {
                    array_push($rules, array("field" => "transaccion_sportsbook.estado", "data" => "$State", "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION["win_perfil2"] == "CAJERO") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                    array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }


                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $tickets = $TransaccionSportsbook->getTransaccionesCustom(" usuario.login,usuario.moneda,transaccion_sportsbook.ticket_id,transaccion_sportsbook.usuario_id,transaccion_sportsbook.vlr_apuesta,transaccion_sportsbook.vlr_premio,transaccion_sportsbook.estado,transaccion_sportsbook.fecha_crea,transaccion_sportsbook.dir_ip  ", "transaccion_sportsbook.transsport_id", "desc", $SkeepRows, $MaxRows, $json, true, "transaccion_sportsbook.transsport_id");
                $tickets = json_decode($tickets);

                $final = [];

                foreach ($tickets->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"transaccion_sportsbook.ticket_id"};
                    $array["Amount"] = $value->{"transaccion_sportsbook.vlr_apuesta"};
                    $array["Price"] = $value->{"transaccion_sportsbook.vlr_apuesta"};
                    $array["WinningAmount"] = $value->{"transaccion_sportsbook.vlr_premio"};
                    $array["StateName"] = $value->{"transaccion_sportsbook.estado"};
                    $array["CreatedLocal"] = $value->{"transaccion_sportsbook.fecha_crea"};
                    $array["ClientLoginIP"] = $value->{"transaccion_sportsbook.dir_ip"};
                    $array["Currency"] = $value->{"usuario.moneda"};


                    $array["Id"] = $value->{"transaccion_sportsbook.ticket_id"};
                    $array["UserId"] = $value->{"transaccion_sportsbook.usuario_id"};

                    $array["UserName"] = $value->{"transaccion_sportsbook.login"};
                    $array["State"] = $value->{"transaccion_sportsbook.estado"};
                    $array["Date"] = $value->{"transaccion_sportsbook.fecha_crea"};
                    $array["WinningAmount"] = $value->{"transaccion_sportsbook.vlr_premio"};
                    $array["Odds"] = 0;
                    $array["UserIP"] = $value->{"transaccion_sportsbook.dir_ip"};


                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $tickets->count[0]->{".count"};
                $response["data"] = $final;
            } else {

                $response["HasError"] = false;
                $response["AlertType"] = "success2";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Report/GetBetHistoryDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetBetHistoryDetail":

            $ItTicketEnc = new ItTicketEnc();

            $Id = $_REQUEST["id"];


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000000;
            }

            if ($Id == "") {
                $seguir = false;
            }

            if ($seguir) {
                $rules = [];
                array_push($rules, array("field" => "it_ticket_det.ticket_id", "data" => "$Id", "op" => "eq"));

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CAJERO") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                    array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $ItTicketEnc = new ItTicketEnc();
                $tickets = $ItTicketEnc->getTicketDetallesCustom(" it_ticket_det.* ", "it_ticket_det.it_ticketdet_id", "asc", $SkeepRows, $MaxRows, $json, true);
                $tickets = json_decode($tickets);

                $final = [];

                foreach ($tickets->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"it_ticket_det.it_ticketdet_id"};
                    $array["TicketId"] = $value->{"it_ticket_det.ticket_id"};
                    $array["Description"] = $value->{"it_ticket_det.apuesta"};
                    $array["Market"] = $value->{"it_ticket_det.agrupador"};
                    $array["Odds"] = $value->{"it_ticket_det.logro"};


                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $tickets->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Report/GetBetHistoryTransactions
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetBetHistoryTransactions":

            $ItTicketEnc = new ItTicketEnc();

            $Id = $_REQUEST["id"];


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100;
            }

            if ($Id == "") {
                $seguir = false;
            }


            if ($seguir) {


                $rules = [];
                array_push($rules, array("field" => "it_transaccion.ticket_id", "data" => "$Id", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $ItTicketEnc = new ItTicketEnc();
                $tickets = $ItTicketEnc->getTicketTransactionsCustom(" it_transaccion.* ", "it_transaccion.it_cuentatrans_id", "asc", $SkeepRows, $MaxRows, $json, true);
                $tickets = json_decode($tickets);

                $final = [];

                foreach ($tickets->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"it_transaccion.it_cuentatrans_id"};
                    $array["Type"] = $value->{"it_transaccion.tipo"};
                    $array["TicketId"] = $value->{"it_transaccion.ticket_id"};
                    $array["Date"] = $value->{"it_transaccion.fecha_crea"} . " " . $value->{"it_transaccion.hora_crea"};
                    $array["TransactionId"] = $value->{"it_transaccion.transaccion_id"};
                    $array["Amount"] = $value->{"it_transaccion.valor"};


                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $tickets->count[0]->{".count"};
                $response["data"] = $final;
            } else {


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                //$response["Data"] = array("Objects" => $final,
                //"Count" => $tickets->count[0]->{".count"});

                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();
            }

            break;

        /**
        * Client/GetClientCasinoGames
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientCasinoGames":


            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->ClientId;
            $Currency = $params->Currency;
            $IsDetails = $params->IsDetails;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }

            $UsuarioMandante = new UsuarioMandante("", $ClientId, "0");


            $rules = [];

            array_push($rules, array("field" => "transaccion_juego.usuario_id", "data" => "$UsuarioMandante->usumandanteId", "op" => "eq"));
            array_push($rules, array("field" => "transaccion_juego.fecha_modif", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "transaccion_juego.fecha_modif", "data" => "$ToDateLocal", "op" => "le"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');

            if (!$IsDetails) {
                $grouping = "producto.producto_id";
                $select = " producto.*, COUNT(transaccion_juego.transjuego_id) count,SUM(transaccion_juego.valor_ticket) apuestas, SUM(transaccion_juego.valor_premio) premios,proveedor.* ";
            } else {
                $select = " producto.*, transaccion_juego.transjuego_id,transaccion_juego.usuario_id, 1 count,transaccion_juego.valor_ticket,transaccion_juego.valor_premio,proveedor.* ";
            }


            $TransaccionJuego = new TransaccionJuego();
            $data = $TransaccionJuego->getTransaccionesCustom($select, "transaccion_juego.transjuego_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];

                if ($IsDetails) {
                    $array["Id"] = $value->{"transaccion_juego.transjuego_id"};
                    $array["Game"] = $value->{"producto.descripcion"};
                    $array["ProviderName"] = $value->{"proveedor.descripcion"};
                    $array["Bets"] = $value->{".count"};
                    $array["Stakes"] = $value->{"transaccion_juego.valor_ticket"};
                    $array["Winnings"] = $value->{"transaccion_juego.valor_premio"};
                    $array["Profitness"] = ($array["Stakes"] - $array["Winnings"]) / ($array["Stakes"]) * 100;
                    $array["Profit"] = 0;
                } else {
                    $array["Game"] = $value->{"producto.descripcion"};
                    $array["ProviderName"] = $value->{"proveedor.descripcion"};
                    $array["Bets"] = $value->{".count"};
                    $array["Stakes"] = $value->{".apuestas"};
                    $array["Winnings"] = $value->{".premios"};
                    $array["Profitness"] = ($array["Stakes"] - $array["Winnings"]) / ($array["Stakes"]) * 100;
                    $array["Profit"] = 0;

                }


                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;


            break;

        /**
        * Client/GetLogins
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetLogins":


            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->ClientId;
            $IsDetails = $params->IsDetails;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $rules = [];

            array_push($rules, array("field" => "usuario_log.usuario_id", "data" => "$ClientId", "op" => "eq"));
            array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
            array_push($rules, array("field" => "usuario_log.tipo", "data" => "LOGIN", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_log.* ";


            $UsuarioLog = new UsuarioLog();
            $data = $UsuarioLog->getUsuarioLogsCustom($select, "usuario_log.usuariolog_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];

                $array["StartTimeLocal"] = $value->{"usuario_log.fecha_crea"};
                $array["LoginIP"] = $value->{"usuario_log.usuario_ip"};
                $array["SourceName"] = "Login";

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            $response["Data"] = array(
                "Objects" => $final,
                "Count" => $data->count[0]->{".count"},

            );

            break;


        /**
        * UserManagement/GetChangeHistory
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetChangeHistory":

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->ExternalId;
            $IsDetails = $params->IsDetails;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $rules = [];

            array_push($rules, array("field" => "usuario_log.usuario_id", "data" => "$ClientId", "op" => "eq"));
            array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
            array_push($rules, array("field" => "usuario_log.estado", "data" => "A", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_log.* ";


            $UsuarioLog = new UsuarioLog();
            $data = $UsuarioLog->getUsuarioLogsCustom($select, "usuario_log.usuariolog_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];

                $array["CreatedLocal"] = $value->{"usuario_log.fecha_crea"};
                $array["UserId"] = $value->{"usuario_log.usuario_id"};
                $array["LoginIP"] = $value->{"usuario_log.usuario_ip"};
                $array["FieldName"] = $value->{"usuario_log.tipo"};
                $array["OldValue"] = $value->{"usuario_log.valor_antes"};
                $array["NewValue"] = $value->{"usuario_log.valor_despues"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;


        /**
        * UserManagement/GetUserLogs
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetUserLogs":

            $params = file_get_contents('php://input');
            $params = json_decode($params);


            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->clientId;
            $IsDetails = $params->IsDetails;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;
            $State = $_REQUEST["State"];

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $rules = [];

            if ($ClientId != "") {
                array_push($rules, array("field" => "usuario_log.usuario_id", "data" => "$ClientId", "op" => "eq"));

            }

            if ($State != "0" && $State != "1") {
                array_push($rules, array("field" => "usuario_log.estado", "data" => "P", "op" => "eq"));
            }

            if ($State == "0") {
                array_push($rules, array("field" => "usuario_log.estado", "data" => "A", "op" => "eq"));
            }

            if ($State == "1") {
                array_push($rules, array("field" => "usuario_log.estado", "data" => "R", "op" => "eq"));
            }


            //array_push($rules, array("field" => "usuario_log.usuario_id", "data" => "$ClientId", "op" => "eq"));
            //array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            //array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
            array_push($rules, array("field" => "usuario_log.tipo", "data" => "LOGIN", "op" => "ne"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_log.* ";


            $UsuarioLog = new UsuarioLog();
            $data = $UsuarioLog->getUsuarioLogsCustom($select, "usuario_log.usuariolog_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);
            $final = [];

            foreach ($data->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"usuario_log.usuariolog_id"};
                $array["Time"] = $value->{"usuario_log.fecha_crea"};
                $array["UserName"] = $value->{"usuario_log.usuario_id"};
                $array["UserNameRequest"] = $value->{"usuario_log.usuariosolicita_id"};
                $array["Field"] = $value->{"usuario_log.tipo"};
                $array["StateId"] = $value->{"usuario_log.estado"};

                $array["State"] = ($value->{"usuario_log.estado"} == "P") ? "Pendiente" : ($value->{"usuario_log.estado"} == "A") ? "Aprobada" : "Rechazada";
                $array["OldValue"] = $value->{"usuario_log.valor_antes"};
                $array["NewValue"] = $value->{"usuario_log.valor_despues"};

                $base642 = 'data:image/;base64,' . ($value->{"usuario_log.imagen"});

                $array["Imagen"] = $base642;

                array_push($final, $array);

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "Objects" => $final,
                "Count" => $data->count[0]->{".count"},

            );

            $response["Data"] = $final;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $data->count[0]->{".count"};
            $response["data"] = $final;

            break;

        /**
        * Security/UpdateLogs
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Security/UpdateLogs":


            $ip = !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
            $ip = explode(",", $ip)[0];


            $Id = $params->Id;
            $State = ($params->State == 0) ? 'A' : 'R';
            $State = $params->State;

            if ($State == 'R') {
                $ip = !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
                $ip = explode(",", $ip)[0];


                //$Id = $_REQUEST["id"];


                $UsuarioLog = new UsuarioLog($Id);

                $UsuarioLog->setEstado("NA");
                $UsuarioLog->setUsuarioaprobarId($_SESSION['usuario2']);
                $UsuarioLog->setUsuarioaprobarIp($ip);

                $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                $tipo = $UsuarioLog->getTipo();

                if (is_numeric($tipo)) {
                    $Clasificador = new Clasificador($tipo);
                    $tipo = $Clasificador->getAbreviado();
                }
                $verifDNI = false;

                $Usuario = new Usuario($UsuarioLog->getUsuarioId());

                switch ($tipo) {


                    case "USUDNIANTERIOR":
                        $Usuario->verifcedulaAnt = 'N';
                        $verifDNI = true;
                        break;


                    case "USUDNIPOSTERIOR":
                        $Usuario->verifcedulaPost = 'N';
                        $verifDNI = true;
                        break;

                }

                if ($verifDNI) {
                    $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);
                    $UsuarioMySqlDAO->update($Usuario);

                }


                $UsuarioLogMySqlDAO->update($UsuarioLog);


                $Transaction->commit();


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = [];
            } else {


                $UsuarioLog = new UsuarioLog($Id);

                if ($UsuarioLog->getUsuarioId() == "") {
                    $response["HasError"] = true;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];


                } else {


                    $Usuario = new Usuario($UsuarioLog->getUsuarioId());
                    $Registro = new Registro("", $UsuarioLog->getUsuarioId());
                    if ($Registro->getCreditosBase() == "") {
                        $Registro->setCreditosBase(0);
                    }
                    if ($Registro->getCreditos() == "") {
                        $Registro->setCreditos(0);
                    }
                    if ($Usuario->intentos == "") {
                        $Usuario->intentos = (0);
                    }
                    if ($Usuario->mandante == "") {
                        $Usuario->mandante = (0);
                    }
                    if ($Usuario->usucreaId == "") {
                        $Usuario->usucreaId = (0);
                    }
                    if ($Usuario->usumodifId == "") {
                        $Usuario->usumodifId = (0);
                    }
                    if ($Usuario->usuretiroId == "") {
                        $Usuario->usuretiroId = (0);
                    }
                    if ($Usuario->sponsorId == "") {
                        $Usuario->sponsorId = (0);
                    }
                    if ($Usuario->tokenItainment == "") {
                        $Usuario->tokenItainment = (0);
                    }

                    $UsuarioLog->setEstado("A");
                    $UsuarioLog->setUsuarioaprobarId($_SESSION['usuario2']);
                    $UsuarioLog->setUsuarioaprobarIp($ip);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    $tipo = $UsuarioLog->getTipo();

                    if (is_numeric($tipo)) {
                        $Clasificador = new Clasificador($tipo);
                        $tipo = $Clasificador->getAbreviado();
                    }

                    $verifDNIA = false;
                    $verifDNIP = false;
                    switch ($tipo) {
                        case "USUDIRECCION":
                            $Registro->setDireccion($UsuarioLog->getValorDespues());

                            break;

                        case "USUTELEFONO":
                            $Registro->setTelefono($UsuarioLog->getValorDespues());


                            break;

                        case "USUCELULAR":
                            $UsuarioMandante = new UsuarioMandante("", $Usuario->usuarioId, "0");

                            $Registro->setCelular($UsuarioLog->getValorDespues());

                            /*

                            $UsuarioToken2 = new UsuarioToken("", '1', $UsuarioMandante->getUsumandanteId());

                            $data = array(
                                "7040" . $UsuarioToken2->getRequestId() . "5" => array(
                                    "notifications" => array(
                                        array(
                                            "type" => "notification",
                                            "title" => "Notificacion",
                                            "content" => "Se ha actualizado el celular correctamente.",
                                            "action" => "slider.userDataConfirm"
                                        )
                                    ),
                                ),

                            );

                            /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                            /* $WebsocketUsuario = new WebsocketUsuario($UsuarioToken2->getRequestId(), $data);
                             $WebsocketUsuario->sendWSMessage();
         */

                            break;


                        case "USUEMAIL":
                            $Usuario->login = $UsuarioLog->getValorDespues();
                            $Registro->setEmail($UsuarioLog->getValorDespues());

                            break;


                        case "LIMITEDEPOSITODIARIO":
                            try {
                                $UsuarioConfiguracion = new UsuarioConfiguracion($UsuarioLog->getUsuarioId(), "A", $Clasificador->getClasificadorId(), "", "");
                                $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                                $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                                $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);

                            } catch (Exception $e) {
                                if ($e->getCode() == "46") {

                                    $UsuarioConfiguracion = new UsuarioConfiguracion();

                                    $UsuarioConfiguracion->setUsuarioId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setEstado("A");
                                    $UsuarioConfiguracion->setTipo($Clasificador->getClasificadorId());
                                    $UsuarioConfiguracion->setUsucreaId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setUsumodifId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setProductoId(0);
                                    $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                                    $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                                    $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion);

                                } else {
                                    throw $e;
                                }
                            }

                            break;


                        case "LIMITEDEPOSITOSEMANA":
                            try {
                                $UsuarioConfiguracion = new UsuarioConfiguracion($UsuarioLog->getUsuarioId(), "A", $Clasificador->getClasificadorId(), "", "");
                                $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                                $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                                $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);

                            } catch (Exception $e) {
                                if ($e->getCode() == "46") {

                                    $UsuarioConfiguracion = new UsuarioConfiguracion();

                                    $UsuarioConfiguracion->setUsuarioId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setEstado("A");
                                    $UsuarioConfiguracion->setTipo($Clasificador->getClasificadorId());
                                    $UsuarioConfiguracion->setUsucreaId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setUsumodifId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setProductoId(0);
                                    $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                                    $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                                    $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion);

                                } else {
                                    throw $e;
                                }
                            }
                            break;


                        case "LIMITEDEPOSITOMENSUAL":
                            try {
                                $UsuarioConfiguracion = new UsuarioConfiguracion($UsuarioLog->getUsuarioId(), "A", $Clasificador->getClasificadorId(), "", "");
                                $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                                $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                                $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);

                            } catch (Exception $e) {
                                if ($e->getCode() == "46") {

                                    $UsuarioConfiguracion = new UsuarioConfiguracion();

                                    $UsuarioConfiguracion->setUsuarioId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setEstado("A");
                                    $UsuarioConfiguracion->setTipo($Clasificador->getClasificadorId());
                                    $UsuarioConfiguracion->setUsucreaId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setUsumodifId($UsuarioLog->getUsuarioId());
                                    $UsuarioConfiguracion->setProductoId(0);
                                    $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                                    $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                                    $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion);

                                } else {
                                    throw $e;
                                }
                            }
                            break;

                        case "TIEMPOLIMITEAUTOEXCLUSION":
                            $Usuario->tiempoAutoexclusion = $UsuarioLog->getValorDespues();

                            break;

                        case "CAMBIOSAPROBACION":
                            $Usuario->cambiosAprobacion = $UsuarioLog->getValorDespues();
                            break;

                        case "ESTADOUSUARIO":
                            $Usuario->estado = $UsuarioLog->getValorDespues();
                            break;


                        case "USUDNIANTERIOR":
                            $Usuario->verifcedulaAnt = 'S';
                            $verifDNIA = true;
                            break;


                        case "USUDNIPOSTERIOR":
                            $Usuario->verifcedulaPost = 'S';
                            $verifDNIP = true;
                            break;

                    }

                    $RegistroMySqlDAO = new RegistroMySqlDAO($Transaction);
                    $RegistroMySqlDAO->update($Registro);

                    $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);
                    $UsuarioMySqlDAO->update($Usuario);


                    $UsuarioLogMySqlDAO->update($UsuarioLog);


                    $Transaction->commit();

                    if ($verifDNIP || $verifDNIA) {

                        $data = $UsuarioLog->imagen;
                        $filename = "c" . $UsuarioLog->usuarioId;

                        if ($verifDNIP) {
                            $filename = $filename . 'P';

                        } else {
                            $filename = $filename . 'A';

                        }
                        $filename = $filename . '.png';

                        $dirsave = '/home/home2/backend/images/c/' . $filename;
                        file_put_contents($dirsave, $data);


                    }

                    if ($verifDNIA) {

                    }


                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                    $response["Data"] = [];

                }

            }


            break;


        /**
        * Security/UpdateDNI
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Security/UpdateDNI":

            $Id = $_POST["Id"];
            $Type = $_POST["Type"];

            if ($Type != "A" || $Type != "P") {

                if ($Type == "A") {
                    $verifDNIP = false;
                }

                if ($Type == "P") {
                    $verifDNIP = true;
                }
                // $UsuarioMandante = new UsuarioMandante($usuario);

                $Usuario = new Usuario($Id);

                $data = $UsuarioLog->imagen;
                $filename = "c" . $Usuario->usuarioId;

                if ($verifDNIP) {
                    $filename = $filename . 'P';

                } else {
                    $filename = $filename . 'A';

                }
                $filename = $filename . '.png';

                $dirsave = '/home/home2/backend/images/c/' . $filename;

                $filetype = $_FILES['upload']['type'];

                if ($filetype == 'image/jpeg' or $filetype == 'image/png' or $filetype == 'image/gif') {
                    if (move_uploaded_file($_FILES['upload']['tmp_name'], $dirsave)) {
                        $response["msj"] = $dirsave;

                    } else {
                        $response["msj"] = "entro2";

                    }
                }


            }
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;

        /**
        * UserManagement/ApproveUserLog
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/ApproveUserLog":

            $ip = !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
            $ip = explode(",", $ip)[0];


            $Id = $_REQUEST["id"];


            $UsuarioLog = new UsuarioLog($Id);

            $Usuario = new Usuario($UsuarioLog->getUsuarioId());
            $Registro = new Registro("", $UsuarioLog->getUsuarioId());
            if ($Registro->getCreditosBase() == "") {
                $Registro->setCreditosBase(0);
            }
            if ($Registro->getCreditos() == "") {
                $Registro->setCreditos(0);
            }
            if ($Usuario->intentos == "") {
                $Usuario->intentos = (0);
            }
            if ($Usuario->mandante == "") {
                $Usuario->mandante = (0);
            }
            if ($Usuario->usucreaId == "") {
                $Usuario->usucreaId = (0);
            }
            if ($Usuario->usumodifId == "") {
                $Usuario->usumodifId = (0);
            }
            if ($Usuario->usuretiroId == "") {
                $Usuario->usuretiroId = (0);
            }
            if ($Usuario->sponsorId == "") {
                $Usuario->sponsorId = (0);
            }
            if ($Usuario->tokenItainment == "") {
                $Usuario->tokenItainment = (0);
            }

            $UsuarioLog->setEstado("A");
            $UsuarioLog->setUsuarioaprobarId($_SESSION['usuario2']);
            $UsuarioLog->setUsuarioaprobarIp($ip);

            $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
            $Transaction = $UsuarioLogMySqlDAO->getTransaction();

            $tipo = $UsuarioLog->getTipo();

            if (is_numeric($tipo)) {
                $Clasificador = new Clasificador($tipo);
                $tipo = $Clasificador->getAbreviado();
            }

            switch ($tipo) {
                case "USUDIRECCION":
                    $Registro->setDireccion($UsuarioLog->getValorDespues());

                    break;

                case "USUTELEFONO":
                    $Registro->setTelefono($UsuarioLog->getValorDespues());


                    break;

                case "USUCELULAR":
                    $UsuarioMandante = new UsuarioMandante("", $Usuario->usuarioId, "0");

                    $Registro->setCelular($UsuarioLog->getValorDespues());

                    /*

                    $UsuarioToken2 = new UsuarioToken("", '1', $UsuarioMandante->getUsumandanteId());

                    $data = array(
                        "7040" . $UsuarioToken2->getRequestId() . "5" => array(
                            "notifications" => array(
                                array(
                                    "type" => "notification",
                                    "title" => "Notificacion",
                                    "content" => "Se ha actualizado el celular correctamente.",
                                    "action" => "slider.userDataConfirm"
                                )
                            ),
                        ),

                    );

                    /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                    /* $WebsocketUsuario = new WebsocketUsuario($UsuarioToken2->getRequestId(), $data);
                     $WebsocketUsuario->sendWSMessage();
 */

                    break;


                case "USUEMAIL":
                    $Usuario->login = $UsuarioLog->getValorDespues();
                    $Registro->setEmail($UsuarioLog->getValorDespues());

                    break;


                case "LIMITEDEPOSITODIARIO":
                    try {
                        $UsuarioConfiguracion = new UsuarioConfiguracion($UsuarioLog->getUsuarioId(), "A", $Clasificador->getClasificadorId(), "", "");
                        $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                        $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                        $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);

                    } catch (Exception $e) {
                        if ($e->getCode() == "46") {

                            $UsuarioConfiguracion = new UsuarioConfiguracion();

                            $UsuarioConfiguracion->setUsuarioId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setEstado("A");
                            $UsuarioConfiguracion->setTipo($Clasificador->getClasificadorId());
                            $UsuarioConfiguracion->setUsucreaId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setUsumodifId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setProductoId(0);
                            $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                            $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                            $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion);

                        } else {
                            throw $e;
                        }
                    }

                    break;


                case "LIMITEDEPOSITOSEMANA":
                    try {
                        $UsuarioConfiguracion = new UsuarioConfiguracion($UsuarioLog->getUsuarioId(), "A", $Clasificador->getClasificadorId(), "", "");
                        $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                        $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                        $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);

                    } catch (Exception $e) {
                        if ($e->getCode() == "46") {

                            $UsuarioConfiguracion = new UsuarioConfiguracion();

                            $UsuarioConfiguracion->setUsuarioId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setEstado("A");
                            $UsuarioConfiguracion->setTipo($Clasificador->getClasificadorId());
                            $UsuarioConfiguracion->setUsucreaId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setUsumodifId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setProductoId(0);
                            $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                            $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                            $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion);

                        } else {
                            throw $e;
                        }
                    }
                    break;


                case "LIMITEDEPOSITOMENSUAL":
                    try {
                        $UsuarioConfiguracion = new UsuarioConfiguracion($UsuarioLog->getUsuarioId(), "A", $Clasificador->getClasificadorId(), "", "");
                        $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                        $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                        $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);

                    } catch (Exception $e) {
                        if ($e->getCode() == "46") {

                            $UsuarioConfiguracion = new UsuarioConfiguracion();

                            $UsuarioConfiguracion->setUsuarioId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setEstado("A");
                            $UsuarioConfiguracion->setTipo($Clasificador->getClasificadorId());
                            $UsuarioConfiguracion->setUsucreaId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setUsumodifId($UsuarioLog->getUsuarioId());
                            $UsuarioConfiguracion->setProductoId(0);
                            $UsuarioConfiguracion->setValor($UsuarioLog->getValorDespues());

                            $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO($Transaction);

                            $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion);

                        } else {
                            throw $e;
                        }
                    }
                    break;

                case "TIEMPOLIMITEAUTOEXCLUSION":
                    $Usuario->tiempoAutoexclusion = $UsuarioLog->getValorDespues();

                    break;

                case "CAMBIOSAPROBACION":
                    $Usuario->cambiosAprobacion = $UsuarioLog->getValorDespues();
                    break;

                case "ESTADOUSUARIO":
                    $Usuario->estado = $UsuarioLog->getValorDespues();
                    break;

            }

            $RegistroMySqlDAO = new RegistroMySqlDAO($Transaction);
            $RegistroMySqlDAO->update($Registro);

            $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);
            $UsuarioMySqlDAO->update($Usuario);


            $UsuarioLogMySqlDAO->update($UsuarioLog);


            $Transaction->commit();


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = [];
            break;

        /**
        * UserManagement/DeclineUserLog
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/DeclineUserLog":

            $ip = !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
            $ip = explode(",", $ip)[0];


            $Id = $_REQUEST["id"];


            $UsuarioLog = new UsuarioLog($Id);

            $UsuarioLog->setEstado("NA");
            $UsuarioLog->setUsuarioaprobarId($_SESSION['usuario2']);
            $UsuarioLog->setUsuarioaprobarIp($ip);

            $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
            $Transaction = $UsuarioLogMySqlDAO->getTransaction();

            $UsuarioLogMySqlDAO->update($UsuarioLog);


            $Transaction->commit();


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = [];
            break;


        /**
        * Agent/GetAgentSystems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentSystems":

            $UsuarioPerfil = new UsuarioPerfil();
            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Perfil_id = $_GET["roleId"];

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000000;
            }

            $mismenus = "0";

            $rules = [];


            if ($_SESSION["win_perfil"] == "") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getChilds(" usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);
            } else {
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            }


            $usuarios = json_decode($usuarios);
            $arrayf = [];

            foreach ($usuarios->data as $key => $value) {
                $array = [];

                $array["UserName"] = $value->{"usuario.login"};
                $array["SystemName"] = 1;
                $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : truee);
                $array["FirstName"] = $value->{"usuario.nombre"};
                $array["LastName"] = "T";
                $array["Phone"] = '';
                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                $array["LastLoginIp"] = $value->{"usuario.dir_ip"};


                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Role"] = $value->{"usuario_perfil.perfil_id"};

                if ($array["Role"] === $Perfil_id) {
                    $array["IsGiven"] = true;

                } else {
                    $array["IsGiven"] = false;

                }

                array_push($arrayf, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $arrayf;

            break;

        /**
        * Agent/GetAgentCountries
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentCountries":

            $arrayf = [];

            $array = [];

            $array["Id"] = 173;
            $array["Name"] = "Peru";
            array_push($arrayf, $array);

            $array = [];

            $array["Id"] = 2;
            $array["Name"] = "Nicaragua";
            array_push($arrayf, $array);

            $Pais = new Pais();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $rules = [];

            array_push($rules, array("field" => "pais.estado", "data" => "A", "op" => "eq"));


            if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "pais.pais_id", "data" => $_SESSION["pais_id"], "op" => "eq"));

            }

            if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "pais.pais_id", "data" => $_SESSION["pais_id"], "op" => "eq"));

            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $paises = $Pais->getPaises("pais_moneda.pais_id,departamento.depto_id,ciudad.ciudad_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $paises = json_decode($paises);

            $final = [

            ];
            $arrayf = [];
            $monedas = [];

            $ciudades = [];
            $departamentos = [];

            /* foreach ($paises->data as $key => $value) {

                 $array = [];

                 $array["Id"] = $value->{"pais.pais_id"};
                 $array["Name"] = $value->{"pais.pais_nom"};

                 $departamento_id = $value->{"departamento.depto_id"};
                 $departamento_texto = $value->{"departamento.depto_nom"};

                 $ciudad_id = $value->{"ciudad.ciudad_id"};
                 $ciudad_texto = $value->{"ciudad.ciudad_nom"};

                 if ($array["Id"] != $arrayf["Id"] && $arrayf["Id"] != "") {


                     $departamento = [];
                     $departamento["Id"] = $departamento_idf;
                     $departamento["Name"] = $departamento_textof;
                     $departamento["cities"] = $ciudades;

                     array_push($departamentos, $departamento);


                     $arrayf["currencies"] = array_unique($monedas);
                     $arrayf["departments"] = $departamentos;

                     array_push($final, $arrayf);


                     $arrayf = [];
                     $monedas = [];
                     $departamentos = [];
                     $ciudades = [];

                 }

                 if ($departamento_idf != $departamento_id && $departamento_idf != "") {

                     if ($array["Id"] == $arrayf["Id"]) {

                         $departamento = [];
                         $departamento["Id"] = $departamento_idf;
                         $departamento["Name"] = $departamento_textof;
                         $departamento["cities"] = $ciudades;

                         array_push($departamentos, $departamento);
                     }

                     $ciudades = [];

                     $ciudad = [];
                     $ciudad["Id"] = $ciudad_id;
                     $ciudad["Name"] = $ciudad_texto;

                     array_push($ciudades, $ciudad);

                 } else {
                     $ciudad = [];
                     $ciudad["Id"] = $ciudad_id;
                     $ciudad["Name"] = $ciudad_texto;

                     array_push($ciudades, $ciudad);
                 }


                 $arrayf["Id"] = $value->{"pais.pais_id"};
                 $arrayf["Name"] = $value->{"pais.pais_nom"};

                 $moneda = [];
                 $moneda["Id"] = $value->{"pais_moneda.moneda"};
                 $moneda["Name"] = $value->{"pais_moneda.moneda"};

                 array_push($monedas, $moneda);


                 $departamento_idf = $value->{"departamento.depto_id"};
                 $departamento_textof = $value->{"departamento.depto_nom"};

             }

             /* foreach ($paises->data as $key => $value) {


                  $searchedValue = $value->{"pais.pais_id"};
                  $Country = reset(array_filter(
                      $final,
                      function ($e) use (&$searchedValue) {
                          return $e["Id"] == $searchedValue;
                      }
                  ));

                  if ($Country == null || $Country["Id"] == null || $Country["Id"] == "") {
                      $arrayff = [];
                      $arrayff["Id"] = $value->{"pais.pais_id"};
                      $arrayff["Name"] = $value->{"pais.pais_nom"};
                      $arrayff["currencies"] = array();
                      $arrayff["departments"] = array();
                      array_push($final, $arrayf);

                      $Country = reset(array_filter(
                          $final,
                          function ($e) use (&$searchedValue) {
                              return $e["Id"] == $searchedValue;
                          }
                      ));

                  }



                  $searchedValue = $value->{"departamento.depto_id"};
                  $Departament = reset(array_filter(
                      $Country["departments"],
                      function ($e) use (&$searchedValue) {
                          return $e["Id"] == $searchedValue;
                      }
                  ));

                  if ($Departament == null || $Departament["Id"] == null || $Departament["Id"] == "") {
                      $arrayff = [];
                      $arrayff["Id"] = $value->{"departamento.depto_id"};
                      $arrayff["Name"] = $value->{"departamento.depto_nom"};
                      $arrayff["cities"] = array();
                      array_push($Country["departments"], $arrayf);

                      $Departament = reset(array_filter(
                          $Country["departments"],
                          function ($e) use (&$searchedValue) {
                              return $e["Id"] == $searchedValue;
                          }
                      ));

                  }
                  $arrayff = [];
                  $arrayff["Id"] = $value->{"ciudad.ciudad_id"};
                  $arrayff["Name"] = $value->{"ciudad.ciudad_nom"};
                  array_push($Departament["cities"], $arrayf);
              }*/
            /*
                        $departamento = [];
                        $departamento["Id"] = $departamento_idf;
                        $departamento["Name"] = $departamento_textof;
                        $departamento["cities"] = $ciudades;

                        array_push($departamentos, $departamento);

                        $ciudades = [];

                        array_push($monedas, $moneda);
                        $arrayf["currencies"] = array_unique($monedas);
                        $arrayf["departments"] = $departamentos;

                        array_push($final, $arrayf);

                        */


            foreach ($paises->data as $key => $value) {

                $arrayf[$value->{"pais.pais_id"}]["Name"] = $value->{"pais.pais_nom"};
                $arrayf[$value->{"pais.pais_id"}]["departments"][$value->{"departamento.depto_id"}]["Name"] = $value->{"departamento.depto_nom"};
                $arrayf[$value->{"pais.pais_id"}]["departments"][$value->{"departamento.depto_id"}]["cities"][$value->{"ciudad.ciudad_id"}]["Name"] = $value->{"ciudad.ciudad_nom"};
                $arrayf[$value->{"pais.pais_id"}]["currencies"][$value->{"pais_moneda.moneda"}] = $value->{"pais_moneda.moneda"};

            }

            foreach ($arrayf as $key => $value) {
                $pais = array(
                    "Id" => $key,
                    "Name" => $arrayf[$key]["Name"],
                    "departments" => array(),
                    "currencies" => array()
                );

                foreach ($arrayf[$key]["currencies"] as $currencyId => $currency) {
                    array_push($pais["currencies"], array(
                        "Id" => $currencyId,
                        "Name" => $currency

                    ));

                }

                foreach ($arrayf[$key]["departments"] as $deptoId => $depto) {
                    $deptoObj = array(
                        "Id" => $deptoId,
                        "Name" => $depto["Name"],
                        "cities" => array()
                    );
                    foreach ($arrayf[$key]["departments"][$deptoId]["cities"] as $cityId => $city) {
                        array_push($deptoObj["cities"], array(
                            "Id" => $cityId,
                            "Name" => $city["Name"]

                        ));
                    }
                    array_push($pais["departments"], $deptoObj);

                }
                array_push($final, $pais);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * Agent/AssignmentQuota
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/AssignmentQuota":


            $id = $_REQUEST["id"];

            if ($id != "") {
                $CupoLog = new CupoLog();

                $rules = [];

                array_push($rules, array("field" => "cupo_log.usuario_id", "data" => "$id", "op" => "eq"));


                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $CupoLog = new CupoLog();


                $mandantes = $CupoLog->getCupoLogsCustom("cupo_log.*,usuario2.nombre,usuario.moneda", "cupo_log.cupolog_id", "asc", 0, 100000, $json, true);

                $mandantes = json_decode($mandantes);

                $final = [];

                foreach ($mandantes->data as $key => $value) {

                    $array = [];

                    $array["Date"] = $value->{"cupo_log.fecha_crea"};
                    $array["TypeQuota"] = $value->{"cupo_log.tipocupo_id"};
                    $array["TypeTransaction"] = $value->{"cupo_log.tipo_id"};
                    $array["Amount"] = $value->{"cupo_log.valor"};
                    $array["Currency"] = $value->{"usuario.moneda"};
                    $array["Assigned"] = $value->{"usuario2.nombre"};

                    array_push($final, $array);

                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = $final;

                $response["pos"] = 0;
                $response["total_count"] = $mandantes->count[0]->{".count"};
                $response["data"] = $final;

            }


            break;

        /**
        * Agent/GetAgentMembers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agent/GetAgentMembers":

            $UsuarioPerfil = new UsuarioPerfil();

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            $Perfil_id = $_GET["roleId"];
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000000;
            }

            $mismenus = "0";

            $rules = [];


            if ($_SESSION['win_perfil'] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO2", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getChilds(" usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            } elseif ($_SESSION['win_perfil'] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $UsuarioMandante->getUsuarioMandante(), "op" => "eq"));
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "PUNTOVENTA", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getChilds(" usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            } else {

                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "CONCESIONARIO", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json2 = json_encode($filtro);

                $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            }


            $usuarios = json_decode($usuarios);
            $arrayf = [];

            foreach ($usuarios->data as $key => $value) {
                $array = [];

                $array["UserName"] = $value->{"usuario.login"};
                $array["SystemName"] = 1;
                $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : truee);
                $array["FirstName"] = $value->{"usuario.nombre"};
                $array["LastName"] = "T";
                $array["Phone"] = '';
                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                $array["LastLoginIp"] = $value->{"usuario.dir_ip"};


                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Role"] = $value->{"usuario_perfil.perfil_id"};

                if ($array["Role"] === $Perfil_id) {
                    $array["IsGiven"] = true;

                } else {
                    $array["IsGiven"] = false;

                }

                array_push($arrayf, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $arrayf;

            break;

        /**
        * Client/GetRegions
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetRegions":

            $SportId = $params->SportId;
            $sportId = $_REQUEST["sportId"];


            if ($SportId != "") {
                $BeginDate = $params->BeginDate;
                $EndDate = $params->EndDate;

                $regions = getRegions($SportId, $BeginDate, $EndDate);

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfuly";
                $response["ModelErrors"] = [];
                $response["Data"] = $regions;

            } elseif ($sportId != "") {

                $json = '{"rules" : [{"field" : "int_region.deporte_id", "data" : "' . $sportId . '","op":"eq"}] ,"groupOp" : "AND"}';


                $IntRegion = new IntRegion();
                $regiones = $IntRegion->getRegionesCustom(" int_deporte.*,int_region.* ", "int_region.region_id", "asc", 0, 10000, $json, true);
                $regiones = json_decode($regiones);


                $final = array();

                foreach ($regiones->data as $region) {

                    $array = array();
                    $array["Id"] = $region->{"int_region.region_id"};
                    $array["Name"] = $region->{"int_region.nombre"};

                    array_push($final, $array);

                }
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfuly";
                $response["ModelErrors"] = [];

                $response["Data"] = $final;


            } else {
                $Pais = new Pais();

                $SkeepRows = 0;
                $MaxRows = 1000000;

                $json = '{"rules" : [{"field" : "pais.estado", "data": "A","op":"eq"}] ,"groupOp" : "AND"}';

                $paises = $Pais->getPaises("pais_moneda.pais_id,ciudad.ciudad_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $paises = json_decode($paises);

                $final = [
                    array(
                        "Id" => "",
                        "Name" => "All",
                        "currencies" => array(
                            "Id" => "",
                            "Name" => "All",
                        ),
                        "departments" => array(
                            "Id" => "",
                            "Name" => "All",
                        )
                    )
                ];
                $arrayf = [];
                $monedas = [];

                $ciudades = [];
                $departamentos = [];

                foreach ($paises->data as $key => $value) {

                    $array = [];

                    $array["Id"] = $value->{"pais.pais_id"};
                    $array["Name"] = $value->{"pais.pais_nom"};

                    $departamento_id = $value->{"departamento.depto_id"};
                    $departamento_texto = $value->{"departamento.depto_nom"};

                    $ciudad_id = $value->{"ciudad.ciudad_id"};
                    $ciudad_texto = $value->{"ciudad.ciudad_nom"};

                    if ($array["Id"] != $arrayf["Id"] && $arrayf["Id"] != "") {

                        $arrayf["currencies"] = array_unique($monedas);
                        $arrayf["departments"] = $departamentos;
                        array_push($final, $arrayf);

                        $arrayf = [];
                        $monedas = [];
                        $departamentos = [];
                        $ciudades = [];

                    }

                    $arrayf["Id"] = $value->{"pais.pais_id"};
                    $arrayf["Name"] = $value->{"pais.pais_nom"};

                    $moneda = [];
                    $moneda["Id"] = $value->{"pais_moneda.moneda"};
                    $moneda["Name"] = $value->{"pais_moneda.moneda"};

                    array_push($monedas, $moneda);

                    if ($departamento_idf != $departamento_id && $departamento_idf != "") {

                        $departamento = [];
                        $departamento["Id"] = $departamento_idf;
                        $departamento["Name"] = $departamento_textof;
                        $departamento["cities"] = $ciudades;

                        array_push($departamentos, $departamento);

                        $ciudades = [];

                        $ciudad = [];
                        $ciudad["Id"] = $ciudad_id;
                        $ciudad["Name"] = $ciudad_texto;

                        array_push($ciudades, $ciudad);

                    } else {
                        $ciudad = [];
                        $ciudad["Id"] = $ciudad_id;
                        $ciudad["Name"] = $ciudad_texto;

                        array_push($ciudades, $ciudad);
                    }

                    $departamento_idf = $value->{"departamento.depto_id"};
                    $departamento_textof = $value->{"departamento.depto_nom"};

                }

                $departamento = [];
                $departamento["Id"] = $departamento_idf;
                $departamento["Name"] = $departamento_textof;
                $departamento["cities"] = $ciudades;

                array_push($departamentos, $departamento);

                $ciudades = [];

                array_push($monedas, $moneda);
                $arrayf["currencies"] = array_unique($monedas);
                $arrayf["departments"] = $departamentos;

                array_push($final, $arrayf);

                $regiones = $final;

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = $regiones;
            }
            break;

        /**
        * Dashboard/GetDateView
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetDateView":

            $ItTicketEnc = new ItTicketEnc();

            $seguir = true;

            if ($params->FromDateLocal != "") {
                $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            } else {
                $seguir = false;
            }

            if ($params->ToDateLocal != "") {
                $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));
                $ToDateLocal = date("Y-m-d H:i:s", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));
            } else {
                $seguir = false;
            }

            if ($seguir) {


                $Region = $params->Region;
                $Region = $params->Country;
                $CurrencyId = $params->CurrencyId;

                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 10;
                }

                $Mandante = new Mandante($_SESSION["mandante"]);

                if ($Mandante->propio == "S") {

                    $rules = [];
                    //array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "I", "op" => "eq"));
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_crea,' ',it_ticket_enc.hora_crea)", "data" => "$FromDateLocal ", "op" => "ge"));
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_crea,' ',it_ticket_enc.hora_crea)", "data" => "$ToDateLocal", "op" => "le"));

                    if ($Region != "") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                    }

                    if ($Currency != "") {
                        array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                    }

                    if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }

                    if ($_SESSION["win_perfil2"] == "CAJERO") {
                        array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }

                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                        array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }


                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                        array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }

                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }

                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }

                    array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));
                    array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $tickets = $ItTicketEnc->getTicketsCustom(" usuario.moneda,COUNT(*) count,SUM(it_ticket_enc.vlr_apuesta) apuestas, SUM(CASE WHEN it_ticket_enc.premiado = 'S' THEN it_ticket_enc.vlr_premio ELSE 0 END) premios  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

                    $tickets = json_decode($tickets);


                    $valor_convertido_apuestas = 0;
                    $valor_convertido_premios = 0;
                    $total = 0;
                    foreach ($tickets->data as $key => $value) {

                        if ($_SESSION["win_perfil2"] == "PUNTOVENTA" || $_SESSION["win_perfil2"] == "CAJERO" || $_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                            $converted_currency = round($value->{".apuestas"}, 2);
                            $valor_convertido_apuestas = $valor_convertido_apuestas + $converted_currency;

                        } else {
                            $converted_currency = currencyConverter($value->{"usuario.moneda"}, $_SESSION["monedaReporte"], round($value->{".apuestas"}, 2));
                            $valor_convertido_apuestas = $valor_convertido_apuestas + $converted_currency;

                        }


                        $total = $total + $value->{".count"};

                    }

                    $rules = [];
                    //array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "I", "op" => "eq"));
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_pago,' ',it_ticket_enc.hora_pago)", "data" => "$FromDateLocal ", "op" => "ge"));
                    array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_pago,' ',it_ticket_enc.hora_pago)", "data" => "$ToDateLocal", "op" => "le"));

                    if ($Region != "") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                    }

                    if ($Currency != "") {
                        array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                    }

                    if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }

                    if ($_SESSION["win_perfil2"] == "CAJERO") {
                        array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }

                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                        array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }


                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                        array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                    }


                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }

                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }

                    array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));
                    array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $tickets = $ItTicketEnc->getTicketsCustom(" usuario.moneda,COUNT(*) count,SUM(it_ticket_enc.vlr_apuesta) apuestas, SUM(CASE WHEN it_ticket_enc.premiado = 'S' THEN it_ticket_enc.vlr_premio ELSE 0 END) premios  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

                    $tickets = json_decode($tickets);

                    $valor_convertido_premios = 0;
                    foreach ($tickets->data as $key => $value) {

                        if ($_SESSION["win_perfil2"] == "PUNTOVENTA" || $_SESSION["win_perfil2"] == "CAJERO" || $_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2") {

                            $converted_currency = round($value->{".premios"}, 2);
                            $valor_convertido_premios = $valor_convertido_premios + $converted_currency;
                        } else {
                            $converted_currency = currencyConverter($value->{"usuario.moneda"}, $_SESSION["monedaReporte"], round($value->{".premios"}, 2));
                            $valor_convertido_premios = $valor_convertido_premios + $converted_currency;

                        }
                    }
                    $response["Data"] = array(
                        "BetAmount" => intval($valor_convertido_apuestas),
                        "WinningAmount" => intval($valor_convertido_premios),
                        "BetCount" => $total,

                    );
                    $response = array(
                        array(
                            "id" => 1,
                            "name" => "APUESTAS",
                            "icon" => "icon-money",
                            "value" => number_format(round($valor_convertido_apuestas, 2))
                        ),
                        array(
                            "id" => 2,
                            "name" => "PREMIOS PAGADOS",
                            "icon" => "icon-money",
                            "value" => number_format(round($valor_convertido_premios, 2))
                        )
                        /*,
                            array(
                                "id" => 3,
                                "name" => "CANTIDAD DE APUESTAS",
                                "icon" => "icon-money",
                                "value" => $total
                            )*/
                    );
                } else {

                    $MaxRows = $params->MaxRows;
                    $OrderedItem = $params->OrderedItem;
                    $SkeepRows = $params->SkeepRows;

                    if ($SkeepRows == "") {
                        $SkeepRows = 0;
                    }

                    if ($OrderedItem == "") {
                        $OrderedItem = 1;
                    }

                    if ($MaxRows == "") {
                        $MaxRows = 10;
                    }

                    $rules = [];
                    array_push($rules, array("field" => "transaccion_juego.fecha_modif", "data" => "$FromDateLocal ", "op" => "ge"));
                    array_push($rules, array("field" => "transaccion_juego.fecha_modif", "data" => "$ToDateLocal", "op" => "le"));


                    if ($_SESSION['PaisCond'] == "S") {
                        array_push($rules, array("field" => "usuario_mandante.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                    }

                    if ($_SESSION['Global'] == "N") {
                        array_push($rules, array("field" => "usuario_mandante.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    }

                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);

                    $TransaccionJuego = new TransaccionJuego();
                    $transacciones = $TransaccionJuego->getTransaccionesCustom(" SUM(transaccion_juego.valor_ticket) apuestas, SUM(CASE WHEN transaccion_juego.premiado = 'S' THEN transaccion_juego.valor_premio ELSE 0 END) premios,usuario_mandante.moneda  ", "transaccion_juego.transjuego_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario_mandante.moneda");

                    $transacciones = json_decode($transacciones);

                    $valor_convertido = 0;
                    $apuestas = 0;
                    $premios = 0;

                    foreach ($transacciones->data as $key => $value) {
                        if ($_SESSION["monedaReporte"] != "") {
                            $converted_currency = currencyConverter($value->{"usuario_mandante.moneda"}, $_SESSION["monedaReporte"], round($value->{".apuestas"}, 2));
                            $apuestas = $apuestas + $converted_currency;

                            $converted_currency = currencyConverter($value->{"usuario_mandante.moneda"}, $_SESSION["monedaReporte"], round($value->{".premios"}, 2));
                            $premios = $premios + $converted_currency;

                        } else {
                            $converted_currency = round($value->{".apuestas"}, 2);
                            $apuestas = $apuestas + $converted_currency;

                            $converted_currency = round($value->{".premios"}, 2);
                            $premios = $premios + $converted_currency;

                        }

                    }


                    $rules = [];

                    array_push($rules, array("field" => "ApiTransactions.trnFecReg", "data" => "$FromDateLocal ", "op" => "ge"));
                    array_push($rules, array("field" => "ApiTransactions.trnFecReg", "data" => "$ToDateLocal", "op" => "le"));

                    $filtro = array("rules" => $rules, "groupOp" => "AND");

                    $json = json_encode($filtro);

                    setlocale(LC_ALL, 'czech');


                    $ApiTransaction = new ApiTransaction();
                    $casino2 = $ApiTransaction->getTransaccionesCustom(" usuario.moneda,SUM(CASE WHEN ApiTransactions.trnType = 'BET' THEN ApiTransactions.trnMonto ELSE 0 END) apuestas, SUM(CASE WHEN ApiTransactions.trnType = 'WIN' THEN ApiTransactions.trnMonto ELSE 0 END) premios ", "ApiTransactions.trnID", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

                    $casino2 = json_decode($casino2);

                    foreach ($casino2->data as $key => $value) {
                        $converted_currency = currencyConverter($value->{"usuario.moneda"}, $_SESSION["monedaReporte"], round($value->{".apuestas"}, 2));
                        $apuestas = $apuestas + $converted_currency;

                        $converted_currency = currencyConverter($value->{"usuario.moneda"}, $_SESSION["monedaReporte"], round($value->{".premios"}, 2));
                        $premios = $premios + $converted_currency;

                    }

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                    $response["Data"] = array(
                        "BetAmount" => $apuestas,
                        "WinningAmount" => $premios,

                    );


                    $response = array(
                        array(
                            "id" => 1,
                            "name" => "APUESTAS",
                            "icon" => "icon-money",
                            "value" => number_format((round($apuestas, 2)))
                        ),
                        array(
                            "id" => 2,
                            "name" => "PREMIOS",
                            "icon" => "icon-money",
                            "value" => number_format(round($premios, 2))
                        )
                        /*,
                            array(
                                "id" => 3,
                                "name" => "CANTIDAD DE APUESTAS",
                                "icon" => "icon-money",
                                "value" => $total
                            )*/
                    );

                }


            } else {
                $response = array();
            }


            break;

        /**
        * Dashboard/GetActiveClients
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetActiveClients":

            $UsuarioRecarga = new UsuarioRecarga();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));
            $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));

            $Region = $params->Region;
            $Region = $params->Country;
            $CurrencyId = $params->CurrencyId;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }


            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }


            if ($_SESSION["win_perfil2"] == "CAJERO") {
                array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }

            if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }

            if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }

            if ($_SESSION['PaisCond'] == "S") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
            }

            if ($_SESSION['Global'] == "N") {
                array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
            }

            array_push($rules, array("field" => "usuario.pais_id", "data" => '1', "op" => "ne"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000000;
            }


            $usuarios = $UsuarioRecarga->getUsuarioRecargasCustom("COUNT(*) count,SUM(usuario_recarga.valor) valor,usuario.moneda", "usuario_recarga.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $usuarios = json_decode($usuarios);
            setlocale(LC_ALL, 'czech');

            $valor_convertido = 0;
            $total = 0;
            foreach ($usuarios->data as $key => $value) {

                if ($_SESSION["win_perfil2"] == "PUNTOVENTA" || $_SESSION["win_perfil2"] == "CAJERO" || $_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    $converted_currency = round($value->{".valor"}, 2);
                    $valor_convertido = $valor_convertido + $converted_currency;
                } else {
                    $converted_currency = currencyConverter($value->{"usuario.moneda"}, $_SESSION["monedaReporte"], round($value->{".valor"}, 2));
                    $valor_convertido = $valor_convertido + $converted_currency;
                }

                $total = $total + $value->{".count"};

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "DepositTotalCount" => $total,
                "DepositTotalAmount" => $valor_convertido,

            );

            $CuentaCobro = new CuentaCobro();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d 23:59:50", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));
            $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            //$Region = $params->Region;
            //$CurrencyId = $params->CurrencyId;
            //$IsNewRegistered = $params->IsNewRegistered;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $rules = [];
            array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));
            array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            if ($IsNewRegistered) {
                array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            }

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }

            if ($_SESSION["win_perfil2"] == "CAJERO") {
                array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }


            if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }

            if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));
            }

            if ($_SESSION['PaisCond'] == "S") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
            }

            if ($_SESSION['Global'] == "N") {
                array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
            }

            array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $cuentas = $CuentaCobro->getCuentasCobroCustom("COUNT(*) count,SUM(cuenta_cobro.valor) valor,usuario.moneda", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $cuentas = json_decode($cuentas);

            $valor_convertidoretiros = 0;
            $totalretiros = 0;
            foreach ($cuentas->data as $key => $value) {

                if ($_SESSION["win_perfil2"] == "PUNTOVENTA" || $_SESSION["win_perfil2"] == "CAJERO" || $_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    $converted_currency = round($value->{".valor"}, 2);
                    $valor_convertidoretiros = $valor_convertidoretiros + $converted_currency;
                } else {
                    $converted_currency = currencyConverter($value->{"usuario.moneda"}, $_SESSION["monedaReporte"], round($value->{".valor"}, 2));
                    $valor_convertidoretiros = $valor_convertidoretiros + $converted_currency;

                }
                $totalretiros = $totalretiros + $value->{".count"};

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "WithDrawalTotalCount" => $totalretiros,
                "WithDrawalTotalAmount" => $valor_convertidoretiros,

            );

            $response = array(
                array(
                    "id" => 1,
                    "mens" => "Depositos",
                    "number" => round($valor_convertido, 2)
                ),
                array(
                    "id" => 2,
                    "mens" => "Retiros",
                    "number" => round($valor_convertidoretiros, 2)
                ),
                array(
                    "id" => 3,
                    "mens" => "Neto",
                    "number" => round(($valor_convertido - $valor_convertidoretiros), 2)
                )
                /*,
                    array(
                        "id" => 3,
                        "name" => "CANTIDAD DE APUESTAS",
                        "icon" => "icon-money",
                        "value" => $total
                    )*/
            );


            break;

        /**
        * Dashboard/GetActiveClients2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetActiveClients2":


            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $Region = $params->Region;
            $Currency = $params->Currency;

            $UsuarioRecargaMySqlDAO = new \Backend\mysql\UsuarioRecargaMySqlDAO();


            $sql = "SELECT usuario.usuario_id FROM usuario_deporte_resumen INNER JOIN usuario ON ( usuario_deporte_resumen.usuario_id = usuario.usuario_id ) INNER JOIN usuario_perfil ON (usuario_perfil.usuario_id = usuario.usuario_id) WHERE  1=1 ";

            $sql = $sql . "AND usuario_deporte_resumen.fecha_crea >='" . $FromDateLocal . "'";
            $sql = $sql . "AND usuario_deporte_resumen.fecha_crea <'" . $ToDateLocal . "'";
            $sql = $sql . "AND usuario_perfil.perfil_id='USUONLINE'";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario.usuario_id";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL("SELECT COUNT(*) cantidad_usuarios
FROM (" . $sql . ") a ");

            $NumeroJugadoresTickets = $depositos[0][".cantidad_usuarios"];

            if (false) {


                $ItTicketEnc = new ItTicketEnc();

                $params = file_get_contents('php://input');
                $params = json_decode($params);


                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 1000000000;
                }

                $rules = [];
                array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "I", "op" => "eq"));
                array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$ToDateLocal", "op" => "le"));

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($Currency != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $ItTicketEnc = new ItTicketEnc();
                $tickets = $ItTicketEnc->getTicketsCustom(" COUNT( DISTINCT (it_ticket_enc.usuario_id) ) count  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true);
                $tickets = json_decode($tickets);

                $NumeroJugadoresTickets = $tickets->data[0]->{".count"};
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $NumeroJugadoresTickets;

            break;

        /**
        * Dashboard/GetNewRegisteredClients
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetNewRegisteredClients":

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $dateTo = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->dateTo) . ' +1 day'));
            $dateFrom = $params->dateFrom;
            $Region = $params->Region;
            $Currency = $params->Currency;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $rules = [];
            array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateFrom ", "op" => "ge"));
            array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$dateTo", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $usuarios = $Usuario->getUsuariosCustom(" COUNT(*) count ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuarios->data[0]->{".count"};

            break;

        /**
        * Dashboard/GetDepositSummary2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetDepositSummary2":

            $Usuario = new Usuario();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $dateTo = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->dateTo) . ' +1 day'));
            $dateFrom = $params->dateFrom;


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $json = '{"rules" : [{"field" : "a.fecha_crea", "data": "' . $dateFrom . '","op":"ge"},{"field" : "a.fecha_crea", "data": "' . $dateTo . '","op":"le"}] ,"groupOp" : "AND"}';

            $usuarios = $Usuario->getUsuarios("A", "", "a.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $usuarios = json_decode($usuarios);

            $usuariosFinal = [];

            foreach ($usuarios->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"a.usuario_id"};
                $array["Ip"] = $value->{"a.dir_ip"};
                $array["Login"] = $value->{"a.login"};
                $array["Estado"] = array($value->{"a.estado"});
                $array["EstadoEspecial"] = $value->{"a.estado_esp"};
                $array["PermiteRecargas"] = $value->{".permite_recarga"};
                $array["ImprimeRecibo"] = $value->{".recibo_caja"};
                $array["Pais"] = $value->{"a.pais_id"};
                $array["Idioma"] = $value->{"a.idioma"};
                $array["Nombre"] = $value->{"a.nombre"};
                $array["FirstName"] = $value->{"a.nombre"};
                $array["TipoUsuario"] = $value->{"e.perfil_id"};
                $array["Intentos"] = $value->{"a.intentos"};
                $array["Observaciones"] = $value->{"a.observ"};
                $array["PinAgent"] = $value->{".pinagent"};
                $array["BloqueoVentas"] = $value->{"a.bloqueo_ventas"};
                $array["Moneda"] = $value->{"a.moneda"};
                $array["ActivarRecarga"] = $value->{"a.permite_activareg"};
                $array["City"] = $value->{"g.ciudad_nom"};
                $array["Phone"] = $value->{"f.telefono"};
                $array["FechaCrea"] = $value->{"a.fecha_crea"};
                $array["LastLoginLocalDate"] = $value->{"a.fecha_crea"};
                $array["FechaCrea"] = $value->{".fecha_ult"};
                $array["IsLocked"] = false;

                array_push($usuariosFinal, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $usuarios->count[0]->{".count"};

            break;

        /**
        * Dashboard/GetDepositSummary
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetDepositSummary":

            $UsuarioRecarga = new UsuarioRecarga();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));

            $Region = $params->Region;
            $CurrencyId = $params->CurrencyId;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000000;
            }


            $usuarios = $UsuarioRecarga->getUsuarioRecargasCustom("COUNT(*) count,SUM(usuario_recarga.valor) valor,usuario.moneda", "usuario_recarga.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $usuarios = json_decode($usuarios);
            setlocale(LC_ALL, 'czech');

            $valor_convertido = 0;
            $total = 0;
            foreach ($usuarios->data as $key => $value) {

                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".valor"}, 2));
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value->{".count"};

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "DepositTotalCount" => $total,
                "DepositTotalAmount" => $valor_convertido,

            );


            break;

        /**
        * Dashboard/GetNewRegisteredClientsDepositSummary
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetNewRegisteredClientsDepositSummary":

            $UsuarioRecarga = new UsuarioRecarga();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $Region = $params->Region;
            $CurrencyId = $params->CurrencyId;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
            array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000000;
            }


            $usuarios = $UsuarioRecarga->getUsuarioRecargasCustom("COUNT(*) count,SUM(usuario_recarga.valor) valor,usuario.moneda", "usuario_recarga.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $usuarios = json_decode($usuarios);
            setlocale(LC_ALL, 'czech');

            $valor_convertido = 0;
            $total = 0;
            foreach ($usuarios->data as $key => $value) {
                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".valor"}, 2));
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value->{".count"};

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "DepositTotalCount" => $total,
                "DepositTotalAmount" => $valor_convertido,

            );


            break;

        /**
        * Dashboard/GetWithDrawalSummary
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetWithDrawalSummary":

            $CuentaCobro = new CuentaCobro();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $Region = $params->Region;
            $CurrencyId = $params->CurrencyId;
            $IsNewRegistered = $params->IsNewRegistered;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $rules = [];
            array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));
            array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            if ($IsNewRegistered) {
                array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "usuario.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $cuentas = $CuentaCobro->getCuentasCobroCustom("COUNT(*) count,SUM(cuenta_cobro.valor) valor,usuario.moneda", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $cuentas = json_decode($cuentas);

            $valor_convertido = 0;
            $total = 0;
            foreach ($cuentas->data as $key => $value) {

                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".valor"}, 2));
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value->{".count"};

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "WithDrawalTotalCount" => $total,
                "WithDrawalTotalAmount" => $valor_convertido,

            );

            break;

        /**
        * Dashboard/GetCasinoBetSummary
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetCasinoBetSummary":

            $TransaccionJuego = new TransaccionJuego();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $Region = $params->Region;
            $CurrencyId = $params->CurrencyId;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $rules = [];
            array_push($rules, array("field" => "transaccion_juego.fecha_modif", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "transaccion_juego.fecha_modif", "data" => "$ToDateLocal", "op" => "le"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $transacciones = $TransaccionJuego->getTransaccionesCustom(" SUM(transaccion_juego.valor_ticket) apuestas, SUM(CASE WHEN transaccion_juego.premiado = 'S' THEN transaccion_juego.valor_premio ELSE 0 END) premios,usuario_mandante.moneda  ", "transaccion_juego.transjuego_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario_mandante.moneda");

            $transacciones = json_decode($transacciones);

            $valor_convertido = 0;
            $apuestas = 0;
            $premios = 0;

            foreach ($transacciones->data as $key => $value) {
                $converted_currency = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                $apuestas = $apuestas + $converted_currency;

                $converted_currency = currencyConverter($value->{"usuario_mandante.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                $premios = $premios + $converted_currency;

            }


            $rules = [];

            array_push($rules, array("field" => "ApiTransactions.trnFecReg", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "ApiTransactions.trnFecReg", "data" => "$ToDateLocal", "op" => "le"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $ApiTransaction = new ApiTransaction();
            $casino2 = $ApiTransaction->getTransaccionesCustom(" usuario.moneda,SUM(CASE WHEN ApiTransactions.trnType = 'BET' THEN ApiTransactions.trnMonto ELSE 0 END) apuestas, SUM(CASE WHEN ApiTransactions.trnType = 'WIN' THEN ApiTransactions.trnMonto ELSE 0 END) premios ", "ApiTransactions.trnID", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $casino2 = json_decode($casino2);

            foreach ($casino2->data as $key => $value) {
                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                $apuestas = $apuestas + $converted_currency;

                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                $premios = $premios + $converted_currency;

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "BetAmount" => $apuestas,
                "WinningAmount" => $premios,

            );

            break;

        /**
        * Dashboard/GetSportBetSummary
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetSportBetSummary":

            $ItTicketEnc = new ItTicketEnc();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $Region = $params->Region;
            $CurrencyId = $params->CurrencyId;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $rules = [];
            array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "I", "op" => "eq"));
            array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $tickets = $ItTicketEnc->getTicketsCustom(" usuario.moneda,COUNT(*) count,SUM(it_ticket_enc.vlr_apuesta) apuestas, SUM(CASE WHEN it_ticket_enc.premiado = 'S' THEN it_ticket_enc.vlr_premio ELSE 0 END) premios  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $tickets = json_decode($tickets);

            $valor_convertido_apuestas = 0;
            $valor_convertido_premios = 0;
            $total = 0;
            foreach ($tickets->data as $key => $value) {

                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                $valor_convertido_apuestas = $valor_convertido_apuestas + $converted_currency;
                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                $valor_convertido_premios = $valor_convertido_premios + $converted_currency;

                $total = $total + $value->{".count"};

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "BetAmount" => intval($valor_convertido_apuestas),
                "WinningAmount" => intval($valor_convertido_premios),
                "BetCount" => $total,

            );

            break;

        /**
        * Dashboard/GetDashboardResume
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetDashboardResume":
            $Region = $params->Region;
            $CurrencyId = $params->CurrencyId;

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));

            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));


            $UsuarioRecargaMySqlDAO = new \Backend\mysql\UsuarioRecargaMySqlDAO();

            $sql = "SELECT usuario.moneda,SUM(usuario_recarga_resumen.valor) valor, SUM(usuario_recarga_resumen.cantidad) cantidad FROM usuario_recarga_resumen INNER JOIN usuario ON ( usuario_recarga_resumen.usuario_id = usuario.usuario_id ) WHERE  1=1 ";

            $sql = $sql . " AND usuario_recarga_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_recarga_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario_recarga_resumen.usuario_id";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL($sql);

            $valor_convertido = 0;
            $total = 0;
            foreach ($depositos as $key => $value) {
                $converted_currency = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".valor"], 2));
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value[".cantidad"];

            }

            // $NumeroJugadoresDepositos = $total;
            $TotalDepositos = $valor_convertido;


            $sql = "SELECT usuario.moneda,SUM(usuario_retiro_resumen.valor) valor, SUM(usuario_retiro_resumen.cantidad) cantidad FROM usuario_retiro_resumen INNER JOIN usuario ON ( usuario_retiro_resumen.usuario_id = usuario.usuario_id ) INNER JOIN usuario_perfil ON (usuario_perfil.usuario_id = usuario.usuario_id) WHERE  1=1 ";

            $sql = $sql . " AND usuario_retiro_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_retiro_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND usuario_perfil.perfil_id='USUONLINE' ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario_retiro_resumen.usuario_id";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL($sql);

            $valor_convertido = 0;
            $total = 0;
            foreach ($depositos as $key => $value) {
                $converted_currency = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".valor"], 2));
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value[".cantidad"];

            }

            // $NumeroJugadoresRetiros = $total;
            $TotalRetiros = $valor_convertido;

            $sql = "SELECT usuario.moneda,usuario_deporte_resumen.tipo,SUM(usuario_deporte_resumen.valor) valor, SUM(usuario_deporte_resumen.cantidad) cantidad FROM usuario_deporte_resumen INNER JOIN usuario ON ( usuario_deporte_resumen.usuario_id = usuario.usuario_id ) INNER JOIN usuario_perfil ON (usuario_perfil.usuario_id = usuario.usuario_id) WHERE  1=1 ";

            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND usuario_perfil.perfil_id='USUONLINE' ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario.moneda,usuario_deporte_resumen.tipo";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL($sql);

            $valor_convertido_premios = 0;
            $valor_convertido_apuestas = 0;
            $total = 0;
            foreach ($depositos as $key => $value) {
                $converted_currency = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".valor"], 2));

                if ($value["usuario_deporte_resumen.tipo"] == '1') {
                    $valor_convertido_apuestas = $valor_convertido_apuestas + $converted_currency;
                }

                if ($value["usuario_deporte_resumen.tipo"] == '2') {
                    $valor_convertido_premios = $valor_convertido_premios + $converted_currency;

                }
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value[".cantidad"];

            }

            //$NumeroJugadoresTickets = $total;
            $ValorTicketsUsuario = $valor_convertido_apuestas;
            $ValorPremiosUsuario = $valor_convertido_premios;


            $sql = "SELECT usuario.moneda,usuario_deporte_resumen.tipo,SUM(usuario_deporte_resumen.valor) valor, SUM(usuario_deporte_resumen.cantidad) cantidad FROM usuario_deporte_resumen INNER JOIN usuario ON ( usuario_deporte_resumen.usuario_id = usuario.usuario_id ) INNER JOIN usuario_perfil ON (usuario_perfil.usuario_id = usuario.usuario_id) WHERE  1=1 ";

            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND usuario_perfil.perfil_id='PUNTOVENTA' ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario.moneda,usuario_deporte_resumen.tipo";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL($sql);

            $valor_convertido_premios = 0;
            $valor_convertido_apuestas = 0;
            $total = 0;
            foreach ($depositos as $key => $value) {
                $converted_currency = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".valor"], 2));

                if ($value["usuario_deporte_resumen.tipo"] == '1') {
                    $valor_convertido_apuestas = $valor_convertido_apuestas + $converted_currency;
                }

                if ($value["usuario_deporte_resumen.tipo"] == '2') {
                    $valor_convertido_premios = $valor_convertido_premios + $converted_currency;

                }
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value[".cantidad"];

            }

            //$NumeroJugadoresTickets = $total;
            $ValorTicketsPuntoVenta = $valor_convertido_apuestas;
            $ValorPremiosPuntoVenta = $valor_convertido_premios;


            $sql = "SELECT usuario.usuario_id FROM usuario_deporte_resumen INNER JOIN usuario ON ( usuario_deporte_resumen.usuario_id = usuario.usuario_id ) INNER JOIN usuario_perfil ON (usuario_perfil.usuario_id = usuario.usuario_id) WHERE  1=1 ";

            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND usuario_perfil.perfil_id='USUONLINE' ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario.usuario_id";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL("SELECT COUNT(*) cantidad_usuarios
FROM (" . $sql . ") a ");

            $valor_convertido_premios = 0;
            $valor_convertido_apuestas = 0;
            $total = 0;
            $NumeroJugadoresTickets = $depositos[0][".cantidad_usuarios"];


            $sql = "SELECT usuario.usuario_id FROM usuario_recarga_resumen INNER JOIN usuario ON ( usuario_recarga_resumen.usuario_id = usuario.usuario_id ) INNER JOIN usuario_perfil ON (usuario_perfil.usuario_id = usuario.usuario_id) WHERE  1=1 ";

            $sql = $sql . " AND usuario_recarga_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_recarga_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND usuario_perfil.perfil_id='USUONLINE' ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario.usuario_id";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL("SELECT COUNT(*) cantidad_usuarios
FROM (" . $sql . ") a ");

            $NumeroJugadoresDepositos = $depositos[0][".cantidad_usuarios"];


            $sql = "SELECT usuario.usuario_id FROM usuario_retiro_resumen INNER JOIN usuario ON ( usuario_retiro_resumen.usuario_id = usuario.usuario_id ) INNER JOIN usuario_perfil ON (usuario_perfil.usuario_id = usuario.usuario_id) WHERE  1=1 ";

            $sql = $sql . " AND usuario_retiro_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_retiro_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND usuario_perfil.perfil_id='USUONLINE'";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario.usuario_id";

            $depositos = $UsuarioRecargaMySqlDAO->querySQL("SELECT COUNT(*) cantidad_usuarios
FROM (" . $sql . ") a ");

            $NumeroJugadoresRetiros = $depositos[0][".cantidad_usuarios"];

            if (false) {
                $UsuarioRecarga = new UsuarioRecarga();

                $params = file_get_contents('php://input');
                $params = json_decode($params);

                // $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
                $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));

                $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
                $Region = $params->Region;
                $CurrencyId = $params->CurrencyId;

                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;

                $rules = [];

                array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "l"));

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($Currency != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 10000000;
                }


                $depositos = $UsuarioRecarga->getUsuarioRecargasCustom("COUNT(DISTINCT (usuario_recarga.usuario_id)) count,SUM(usuario_recarga.valor) valor,usuario.moneda", "usuario_recarga.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

                $depositos = json_decode($depositos);
                setlocale(LC_ALL, 'czech');

                $valor_convertido = 0;
                $total = 0;
                foreach ($depositos->data as $key => $value) {

                    $converted_currency = currencyConverter($value->{"usuario.moneda"}, 'EUR', round($value->{".valor"}, 2));
                    $valor_convertido = $valor_convertido + $converted_currency;
                    $total = $total + $value->{".count"};

                }


                $NumeroJugadoresDepositos = $total;
                $TotalDepositos = $valor_convertido;

                $rules = [];
                array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));
                array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$ToDateLocal", "op" => "le"));

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($Currency != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $CuentaCobro = new CuentaCobro();

                $cuentas = $CuentaCobro->getCuentasCobroCustom("COUNT(*) count,SUM(cuenta_cobro.valor) valor,usuario.moneda", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

                $cuentas = json_decode($cuentas);

                $valor_convertido = 0;
                $total = 0;
                foreach ($cuentas->data as $key => $value) {

                    $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".valor"}, 2));
                    $valor_convertido = $valor_convertido + $converted_currency;
                    $total = $total + $value->{".count"};

                }


                $TotalRetiros = $valor_convertido;

                $rules = [];
                array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "I", "op" => "eq"));
                array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$ToDateLocal", "op" => "le"));

                if ($Region != "") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                }

                if ($Currency != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $ItTicketEnc = new ItTicketEnc();

                $tickets = $ItTicketEnc->getTicketsCustom("  usuario.moneda,COUNT(DISTINCT (it_ticket_enc.usuario_id) ) count,SUM(it_ticket_enc.vlr_apuesta) apuestas, SUM(CASE WHEN it_ticket_enc.premiado = 'S' THEN it_ticket_enc.vlr_premio ELSE 0 END) premios  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

                $tickets = json_decode($tickets);

                $valor_convertido_apuestas = 0;
                $valor_convertido_premios = 0;
                $total = 0;
                foreach ($tickets->data as $key => $value) {

                    $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                    $valor_convertido_apuestas = $valor_convertido_apuestas + $converted_currency;
                    $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                    $valor_convertido_premios = $valor_convertido_premios + $converted_currency;

                    $total = $total + $value->{".count"};

                }

                $NumeroJugadoresTickets = $total;
                $ValorTickets = $valor_convertido_apuestas;
                $ValorPremios = $valor_convertido_premios;

            }


            $ValorTickets = $ValorTicketsUsuario + $ValorTicketsPuntoVenta;
            $ValorPremios = $ValorPremiosUsuario + $ValorPremiosPuntoVenta;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "TotalPlayersByDeposit" => $NumeroJugadoresDepositos,
                "TotalPlayersByBet" => $NumeroJugadoresTickets,
                "TotalPlayersByWithDrawal" => $NumeroJugadoresRetiros,
                "BetPromByPlayer" => ($ValorTickets / $NumeroJugadoresTickets),
                "TotalAmountBets" => $ValorTicketsUsuario + $ValorTicketsPuntoVenta,
                "TotalAmountWin" => $ValorPremiosUsuario + $ValorPremiosPuntoVenta,
                "TotalAmountBetsUser" => $ValorTicketsUsuario,
                "TotalAmountWinUser" => $ValorPremiosUsuario,

                "TotalAmountBetsCashDesk" => $ValorTicketsPuntoVenta,
                "TotalAmountWinCashDesk" => $ValorPremiosPuntoVenta,

                "GGR" => floatval($ValorTickets - $ValorPremios),
                "TotalAmountDeposit" => $TotalDepositos,
                "TotalAmountWithDrawal" => $TotalRetiros,
                "DepositPromByPlayer" => ($TotalDepositos / $NumeroJugadoresDepositos)

            );


            break;

        /**
        * Dashboard/GetTopCasinoPlayers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetTopCasinoPlayers":


            $CurrencyId = $params->CurrencyId;

            $ToDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));

            $FromDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));


            $UsuarioRecargaMySqlDAO = new \Backend\mysql\UsuarioRecargaMySqlDAO();

            $sql = "SELECT usuario.moneda,usuario.usuario_id,usuario.login,usuario.pais_id,SUM(usuario_casino_resumen.valor) total_apuestas,SUM(usuario_casino_resumen.valor_premios) total_premios FROM usuario_casino_resumen INNER JOIN usuario_mandante ON ( usuario_casino_resumen.usuario_id = usuario_mandante.usumandante_id) INNER JOIN usuario ON ( usuario_mandante.usuario_mandante = usuario.usuario_id ) WHERE  1=1 ";

            $sql = $sql . " AND usuario_casino_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_casino_resumen.fecha_crea <'" . $ToDateLocal . "' ";

            $sql = $sql . " AND usuario.pais_id !='1' ";
            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }


            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario_casino_resumen.usuario_id";
            $sql = $sql . " ORDER BY total_apuestas DESC";
            $sql = $sql . " LIMIT 5";


            $depositos = $UsuarioRecargaMySqlDAO->querySQL($sql);

            $return = array();
            $valor_convertido = 0;
            $total = 0;
            foreach ($depositos as $key => $value) {
                $data = array();
                $data['UserName'] = $value["usuario.login"];
                $data['ClientId'] = $value["usuario.usuario_id"];
                $data['CountryId'] = $value["usuario.pais_id"];

                $data['Stakes'] = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".total_apuestas"], 2));
                $data['Winnings'] = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".total_premios"], 2));

                $data['Stakes'] = round($value[".total_apuestas"], 2);
                $data['Winnings'] = round($value[".total_premios"], 2);


                $data['Profitness'] = $data['Stakes'] - $data['Winnings'];

                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value[".cantidad"];

                array_push($return, $data);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $return;


            break;

        /**
        * Dashboard/GetTopSportsbookPlayers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetTopSportsbookPlayers":


            $CurrencyId = $params->CurrencyId;

            $ToDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));

            $FromDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));


            $UsuarioRecargaMySqlDAO = new \Backend\mysql\UsuarioRecargaMySqlDAO();

            $sql = "SELECT usuario.moneda,usuario.usuario_id,usuario.login,usuario.pais_id,SUM(usuario_deporte_resumen.valor) total_apuestas FROM usuario_deporte_resumen INNER JOIN usuario ON ( usuario_deporte_resumen.usuario_id = usuario.usuario_id ) WHERE  1=1 ";

            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usuario_deporte_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND tipo=1 ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario_deporte_resumen.usuario_id";
            $sql = $sql . " ORDER BY total_apuestas DESC";
            $sql = $sql . " LIMIT 5";


            $depositos = $UsuarioRecargaMySqlDAO->querySQL($sql);

            $return = array();
            $valor_convertido = 0;
            $total = 0;
            foreach ($depositos as $key => $value) {
                $data = array();
                $data['UserName'] = $value["usuario.login"];
                $data['Id'] = $value["usuario.usuario_id"];
                $data['CountryId'] = $value["usuario.pais_id"];
                $data['Stakes'] = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".total_apuestas"], 2));

                $data['Stakes'] = round($value[".total_apuestas"], 2);
                $data['Winnings'] = 0;
                $data['Profitness'] = $data['Stakes'] - $data['Winnings'];

                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value[".cantidad"];

                array_push($return, $data);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $return;


            break;

        /**
        * Dashboard/GetTopCasinoGames
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetTopCasinoGames":
            $CurrencyId = $params->CurrencyId;

            $ToDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));

            $FromDateLocal = date("Y-m-d", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));


            $UsuarioRecargaMySqlDAO = new \Backend\mysql\UsuarioRecargaMySqlDAO();

            $sql = "SELECT usuario.moneda,usucasino_detalle_resumen.producto_id,producto.descripcion producto,SUM(usucasino_detalle_resumen.valor) total_apuestas FROM usucasino_detalle_resumen INNER JOIN usuario_mandante ON ( usucasino_detalle_resumen.usuario_id = usuario_mandante.usumandante_id) INNER JOIN usuario ON ( usuario_mandante.usuario_mandante = usuario.usuario_id) 
  INNER JOIN producto_mandante ON (usucasino_detalle_resumen.producto_id = producto_mandante.prodmandante_id)
  INNER JOIN producto ON (producto_mandante.producto_id = producto.producto_id)

WHERE  1=1 ";

            $sql = $sql . " AND usucasino_detalle_resumen.fecha_crea >='" . $FromDateLocal . "' ";
            $sql = $sql . " AND usucasino_detalle_resumen.fecha_crea <'" . $ToDateLocal . "' ";
            $sql = $sql . " AND tipo=1 ";
            $sql = $sql . " AND usuario.pais_id !='1' ";

            if ($Region != "") {
                $sql = $sql . " AND usuario.pais_id='" . $Region . "' ";
            }

            if ($Currency != "") {
                //$sql = $sql. "AND usuario.moneda='".$Currency."'";
            }

            $sql = $sql . " GROUP BY usuario.moneda,usucasino_detalle_resumen.producto_id";
            $sql = $sql . " ORDER BY total_apuestas DESC";
            $sql = $sql . " LIMIT 5";


            $depositos = $UsuarioRecargaMySqlDAO->querySQL($sql);

            $return = array();
            $valor_convertido = 0;
            $total = 0;
            foreach ($depositos as $key => $value) {
                $data = array();

                $data['Game'] = $value["producto.producto"];
                $data['Stakes'] = currencyConverter($value["usuario.moneda"], $CurrencyId, round($value[".total_apuestas"], 2));

                $data['Stakes'] = round($value[".total_apuestas"], 2);
                $data['Winnings'] = 0;
                $data['Profitness'] = $data['Stakes'] - $data['Winnings'];

                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value[".cantidad"];

                array_push($return, $data);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $return;


            break;

        /**
        * Dashboard/GetDashboardResume2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Dashboard/GetDashboardResume2":

            $UsuarioRecarga = new UsuarioRecarga();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            // $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal)));

            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $Region = $params->Region;
            $CurrencyId = $params->CurrencyId;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "l"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000000;
            }


            $depositos = $UsuarioRecarga->getUsuarioRecargasCustom("COUNT(DISTINCT (usuario_recarga.usuario_id)) count,SUM(usuario_recarga.valor) valor,usuario.moneda", "usuario_recarga.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $depositos = json_decode($depositos);
            setlocale(LC_ALL, 'czech');

            $valor_convertido = 0;
            $total = 0;
            foreach ($depositos->data as $key => $value) {

                $converted_currency = currencyConverter($value->{"usuario.moneda"}, 'EUR', round($value->{".valor"}, 2));
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value->{".count"};

            }


            $NumeroJugadoresDepositos = $total;
            $TotalDepositos = $valor_convertido;

            $rules = [];
            array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));
            array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $CuentaCobro = new CuentaCobro();

            $cuentas = $CuentaCobro->getCuentasCobroCustom("COUNT(*) count,SUM(cuenta_cobro.valor) valor,usuario.moneda", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $cuentas = json_decode($cuentas);

            $valor_convertido = 0;
            $total = 0;
            foreach ($cuentas->data as $key => $value) {

                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".valor"}, 2));
                $valor_convertido = $valor_convertido + $converted_currency;
                $total = $total + $value->{".count"};

            }


            $TotalRetiros = $valor_convertido;

            $rules = [];
            array_push($rules, array("field" => "it_ticket_enc.estado", "data" => "I", "op" => "eq"));
            array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "CONCAT(it_ticket_enc.fecha_cierre,' ',it_ticket_enc.hora_cierre)", "data" => "$ToDateLocal", "op" => "le"));

            if ($Region != "") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
            }

            if ($Currency != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $ItTicketEnc = new ItTicketEnc();

            $tickets = $ItTicketEnc->getTicketsCustom("  usuario.moneda,COUNT(DISTINCT (it_ticket_enc.usuario_id) ) count,SUM(it_ticket_enc.vlr_apuesta) apuestas, SUM(CASE WHEN it_ticket_enc.premiado = 'S' THEN it_ticket_enc.vlr_premio ELSE 0 END) premios  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario.moneda");

            $tickets = json_decode($tickets);

            $valor_convertido_apuestas = 0;
            $valor_convertido_premios = 0;
            $total = 0;
            foreach ($tickets->data as $key => $value) {

                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".apuestas"}, 2));
                $valor_convertido_apuestas = $valor_convertido_apuestas + $converted_currency;
                $converted_currency = currencyConverter($value->{"usuario.moneda"}, $CurrencyId, round($value->{".premios"}, 2));
                $valor_convertido_premios = $valor_convertido_premios + $converted_currency;

                $total = $total + $value->{".count"};

            }


            $NumeroJugadoresTickets = $total;
            $ValorTickets = $valor_convertido_apuestas;
            $ValorPremios = $valor_convertido_premios;


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "TotalPlayersByDeposit" => $NumeroJugadoresDepositos,
                "TotalPlayersByBet" => $NumeroJugadoresTickets,
                "BetPromByPlayer" => ($ValorTickets / $NumeroJugadoresTickets),
                "TotalAmountBets" => $ValorTickets,
                "TotalAmountWin" => $ValorPremios,
                "GGR" => floatval($ValorTickets - $ValorPremios),
                "TotalAmountDeposit" => $TotalDepositos,
                "TotalAmountWithDrawal" => $TotalRetiros,
                "DepositPromByPlayer" => ($TotalDepositos / $NumeroJugadoresDepositos)

            );


            break;

        /**
        * UserManagement/GetPartnerRoles
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetPartnerRoles":

            $Perfil = new Perfil();

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }

            $json = '{"rules" : [] ,"groupOp" : "AND"}';

            $perfiles = $Perfil->getPerfilesCustom(" perfil.* ", "perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json, false);
            $perfiles = json_decode($perfiles);

            $perfilesfinal = [];

            foreach ($perfiles->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"perfil.perfil_id"};
                $array["Name"] = $value->{"perfil.descripcion"};

                $json = '{"rules" : [{"field" : "usuario_perfil.perfil_id", "data" : "' . $array["Id"] . '","op":"eq"}] ,"groupOp" : "AND"}';

                $UsuarioPerfil = new UsuarioPerfil();
                $usuarioperfiles = $UsuarioPerfil->getUsuarioPerfilesCustom(" count(*) count ", "usuario_perfil.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);
                $usuarioperfiles = json_decode($usuarioperfiles);
                $array["UserCount"] = $usuarioperfiles->count[0]->{".count"};

                $PerfilSubmenu = new PerfilSubmenu();
                $json = '{"rules" : [{"field" : "menu.version", "data" : "2","op":"eq"},{"field" : "perfil_submenu.perfil_id", "data" : "' . $array["Id"] . '","op":"eq"}] ,"groupOp" : "AND"}';
                $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" COUNT(perfil_submenu.perfil_id) count ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);
                $menus = json_decode($menus);
                $array["PermissionCount"] = $menus->count[0]->{".count"};

                array_push($perfilesfinal, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $perfilesfinal;

            break;

        /**
        * UserManagement/GetGroupPermissions
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetGroupPermissions":

            $PerfilSubmenu = new PerfilSubmenu();

            $Perfil_id = $_GET["roleId"];
            $UserId = $_GET["UserId"];
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000;
            }

            $mismenus = "0";

            if ($UserId != "") {
                $UsuarioPerfil = new UsuarioPerfil($UserId);

                $Perfil_id = $UsuarioPerfil->getPerfilId();

            }


            $rules = [];
            array_push($rules, array("field" => "menu.version", "data" => "2", "op" => "eq"));
            array_push($rules, array("field" => "perfil_submenu.perfil_id", "data" => "$Perfil_id ", "op" => "eq"));
            array_push($rules, array("field" => "menu.menu_id", "data" => "18", "op" => "eq"));

            if ($UserId != "") {
                array_push($rules, array("field" => "perfil_submenu.usuario_id", "data" => "$UserId", "op" => "eq"));
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $menus = json_decode($menus);

            $menus3 = [];
            $arrayf = [];
            $submenus = [];


            foreach ($menus->data as $key => $value) {

                $m = [];
                $m["id"] = $value->{"menu.menu_id"};
                $m["value"] = $value->{"menu.descripcion"};

                $array = [];

                $array["id"] = $value->{"submenu.submenu_id"};
                $array["value"] = $value->{"submenu.descripcion"};

                $mismenus = $mismenus . "," . $array["id"];

                if ($arrayf["id"] != "" && $m["id"] != $arrayf["id"]) {
                    $arrayf["Permissions"] = $submenus;
                    array_push($menus3, $arrayf);
                    // $submenus = [];
                }

                $arrayf["id"] = $value->{"menu.menu_id"};
                $arrayf["value"] = $value->{"menu.descripcion"};

                array_push($submenus, $array);
            }


            if ($Perfil_id != "CUSTOM" && $UserId != "") {
                $rules = [];
                array_push($rules, array("field" => "menu.version", "data" => "2", "op" => "eq"));
                array_push($rules, array("field" => "perfil_submenu.perfil_id", "data" => "$Perfil_id ", "op" => "eq"));
                array_push($rules, array("field" => "menu.menu_id", "data" => "18", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $menus = json_decode($menus);

                $menus3 = [];
                $arrayf = [];


                foreach ($menus->data as $key => $value) {

                    $m = [];
                    $m["id"] = $value->{"menu.menu_id"};
                    $m["value"] = $value->{"menu.descripcion"};

                    $array = [];

                    $array["id"] = $value->{"submenu.submenu_id"};
                    $array["value"] = $value->{"submenu.descripcion"};

                    $mismenus = $mismenus . "," . $array["id"];

                    if ($arrayf["id"] != "" && $m["id"] != $arrayf["id"]) {
                        $arrayf["Permissions"] = $submenus;
                        array_push($menus3, $arrayf);
                        // $submenus = [];
                    }

                    $arrayf["id"] = $value->{"menu.menu_id"};
                    $arrayf["value"] = $value->{"menu.descripcion"};

                    array_push($submenus, $array);
                }

                $rules = [];
                array_push($rules, array("field" => "menu.version", "data" => "2", "op" => "eq"));
                array_push($rules, array("field" => "perfil_submenu.perfil_id", "data" => "CUSTOM ", "op" => "eq"));
                array_push($rules, array("field" => "menu.menu_id", "data" => "18", "op" => "eq"));

                array_push($rules, array("field" => "perfil_submenu.usuario_id", "data" => "$UserId", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $menus = json_decode($menus);

                $arrayf = [];


                foreach ($menus->data as $key => $value) {

                    $m = [];
                    $m["id"] = $value->{"menu.menu_id"};
                    $m["value"] = $value->{"menu.descripcion"};

                    $array = [];

                    $array["id"] = $value->{"submenu.submenu_id"};
                    $array["value"] = $value->{"submenu.descripcion"};

                    $mismenus = $mismenus . "," . $array["id"];

                    if ($arrayf["id"] != "" && $m["id"] != $arrayf["id"]) {
                        $arrayf["Permissions"] = $submenus;
                        array_push($menus3, $arrayf);
                        // $submenus = [];
                    }

                    $arrayf["id"] = $value->{"menu.menu_id"};
                    $arrayf["value"] = $value->{"menu.descripcion"};

                    array_push($submenus, $array);
                }
            }


            $arrayf["Permissions"] = $submenus;
            array_push($menus3, $arrayf);

            $IncludedPermission = $submenus;

            $Submenu = new Submenu();

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }

            $json = '{"rules" : [{"field" : "submenu.version", "data" : "2","op":"eq"},{"field" : "menu.menu_id", "data" : "18","op":"eq"}] ,"groupOp" : "AND"}';

            $menus = $Submenu->getSubMenusCustom(" menu.*,submenu.*, CASE WHEN submenu.submenu_id IN (" . $mismenus . ") THEN false ELSE true END mostrar", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $menus = json_decode($menus);

            $menus2 = [];
            $arrayf = [];
            $submenus = [];
            $children_final = [];
            $children_final2 = [];

            foreach ($menus->data as $key => $value) {

                $m = [];
                $m["id"] = $value->{"menu.menu_id"};
                $m["value"] = $value->{"menu.descripcion"};

                $array = [];
                $children = [];

                if ($arrayf["id"] != "" && $m["id"] != $arrayf["id"]) {
                    $arrayf["Permissions"] = $submenus;
                    $arrayf["Children"] = [];

                    array_push($menus2, $arrayf);
                    $submenus = [];
                    $children_final = [];
                }

                $arrayf["id"] = $value->{"menu.menu_id"};
                $arrayf["value"] = $value->{"menu.descripcion"};

                if ($value->{".mostrar"}) {
                    $array["id"] = $value->{"submenu.submenu_id"};
                    $array["value"] = $value->{"submenu.descripcion"};
                    array_push($submenus, $array);
                }
                $children["id"] = $value->{"submenu.submenu_id"};
                $children["value"] = $value->{"submenu.descripcion"};
                array_push($children_final, $children);
                array_push($children_final2, $children);
            }

            $arrayf["Permissions"] = $submenus;
            $arrayf["Children"] = [];
            $children_final = [];

            array_push($menus2, $arrayf);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array();

            $response["Data"]["IncludedPermission"] = $IncludedPermission;
            $response["Data"]["IncludedPermissionList"] = $mismenus;
            $response["Data"]["ExcludedPermissions"] = array_merge($IncludedPermission, $children_final2);
            $response["Data"]["ExcludedPermissions2"] = $menus2;


            break;

        /**
        * UserManagement/GetRoleById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/GetRoleById":

            $Perfil = new Perfil();

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $Perfil_id = $_GET["id"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000;
            }

            $json = '{"rules" : [{"field" : "perfil.perfil_id", "data" : "' . $Perfil_id . '","op":"eq"}] ,"groupOp" : "AND"}';

            $perfiles = $Perfil->getPerfilesCustom(" perfil.* ", "perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json, true);
            $perfiles = json_decode($perfiles);
            $perfiles = $perfiles->data[0];

            $perfilesfinal = [];

            $perfilesfinal["Id"] = $perfiles->{"perfil.perfil_id"};
            $perfilesfinal["Name"] = $perfiles->{"perfil.descripcion"};

            $json = '{"rules" : [{"field" : "usuario_perfil.perfil_id", "data" : "' . $perfilesfinal["Id"] . '","op":"eq"}] ,"groupOp" : "AND"}';

            $UsuarioPerfil = new UsuarioPerfil();
            $usuarioperfiles = $UsuarioPerfil->getUsuarioPerfilesCustom(" count(*) count ", "usuario_perfil.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);
            $usuarioperfiles = json_decode($usuarioperfiles);
            $perfilesfinal["UserCount"] = $usuarioperfiles->count[0]->{".count"};

            $PerfilSubmenu = new PerfilSubmenu();
            $json = '{"rules" : [{"field" : "menu.version", "data" : "2","op":"eq"},{"field" : "perfil_submenu.perfil_id", "data" : "' . $perfilesfinal["Id"] . '","op":"eq"}] ,"groupOp" : "AND"}';
            $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" COUNT(perfil_submenu.perfil_id) count ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);
            $menus = json_decode($menus);
            $perfilesfinal["PermissionCount"] = $menus->count[0]->{".count"};

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $perfilesfinal;

            break;

        /**
        * GetRolesForEditUser
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetRolesForEditUser":


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "GivenPermissions" => array(),
                "NotGivenPermissions" => array()
            );

            break;

        /**
        * GetGroupUsers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetGroupUsers":

            $UsuarioPerfil = new UsuarioPerfil();

            $Perfil_id = $_GET["roleId"];
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000000;
            }

            $mismenus = "0";

            $json = '{"rules" : [] ,"groupOp" : "AND"}';

            $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json, false);

            $usuarios = json_decode($usuarios);
            $arrayf = [];

            foreach ($usuarios->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Role"] = $value->{"usuario_perfil.perfil_id"};

                if ($array["Role"] === $Perfil_id) {
                    $array["IsGiven"] = true;

                } else {
                    $array["IsGiven"] = false;

                }

                array_push($arrayf, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $arrayf;

            break;

        /**
        * GetClients
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetClients":
            /*
        $Usuario = new Usuario();

        $params = file_get_contents('php://input');
        $params = json_decode($params);

        $MaxRows = $params->MaxRows;
        $OrderedItem = $params->OrderedItem;
        $SkeepRows = $params->SkeepRows;

        if ($SkeepRows == "") {
        $SkeepRows = 0;
        }

        if ($OrderedItem == "") {
        $OrderedItem = 1;
        }

        if ($MaxRows == "") {
        $MaxRows = 10;
        }

        $json = '{"rules" : [] ,"groupOp" : "AND"}';

        $usuarios = $Usuario->getUsuariosCustom( "usuario.","a.usuario_id", "asc", $SkeepRows, $MaxRows,$json,true);

        $usuarios = json_decode($usuarios);

        $usuariosFinal = [];

        foreach ($usuarios->data as $key => $value) {

        $array = [];

        $array["Id"] = $value->{"a.usuario_id"};
        $array["Ip"] = $value->{"a.dir_ip"};
        $array["Login"] = $value->{"a.login"};
        $array["Estado"] = array($value->{"a.estado"});
        $array["EstadoEspecial"] = $value->{"a.estado_esp"};
        $array["PermiteRecargas"] = $value->{".permite_recarga"};
        $array["ImprimeRecibo"] = $value->{".recibo_caja"};
        $array["Pais"] = $value->{"a.pais_id"};
        $array["Idioma"] = $value->{"a.idioma"};
        $array["Nombre"] = $value->{"a.nombre"};
        $array["FirstName"] = $value->{"registro.nombre1"};
        $array["MiddleName"] = $value->{"registro.nombre2"};
        $array["LastName"] = $value->{"registro.apellido1"};
        $array["Email"] = $value->{"registro.email"};
        $array["Address"] = $value->{"registro.direccion"};
        $array["TipoUsuario"] = $value->{"e.perfil_id"};
        $array["Intentos"] = $value->{"a.intentos"};
        $array["Observaciones"] = $value->{"a.observ"};
        $array["PinAgent"] = $value->{".pinagent"};
        $array["BloqueoVentas"] = $value->{"a.bloqueo_ventas"};
        $array["Moneda"] = $value->{"a.moneda"};
        $array["ActivarRecarga"] = $value->{"a.permite_activareg"};
        $array["City"] = $value->{"g.ciudad_nom"};
        $array["Phone"] = $value->{"f.telefono"};
        $array["FechaCrea"] = $value->{"a.fecha_crea"};
        $array["CreatedLocalDate"] = $value->{"a.fecha_crea"};
        $array["FechaCrea"] = $value->{".fecha_ult"};
        $array["IsLocked"] = false;
        $array["BirthCity"] = $value->{"registro.ciudnacim_id"};
        $array["BirthDate"] = $value->{"usuario_otrainfo.fecha_nacim"};

        $array["Birthday"] = $value->{".fecha_ult"};
        $array["BirthDepartment"] = $value->{"registro.ciudnacim_id"};
        $array["BirthRegionCode"] = $value->{".fecha_ult"};
        $array["BirthRegionId"] = $value->{".fecha_ult"};
        $array["CreatedLocalDate"] = $value->{"a.fecha_crea"};
        $array["CurrencyId"] = $value->{"a.moneda"};
        $array["DocNumber"] = $value->{"registro.cedula"};
        $array["Gender"] = $value->{"registro.sexo"};
        $array["Language"] = $value->{"a.idioma"};
        $array["Phone"] = $value->{"registro.telefono"};
        $array["MobilePhone"] = $value->{"registro.celular"};
        $array["LastLoginLocalDate"] = $value->{".fecha_ult"};
        $array["Province"] = $value->{"registro.ciudnacim_id"};
        $array["CountryName"] = $value->{"registro.nacionalidad_id"};
        $array["ZipCode"] = $value->{"registro.codigo_postal"};

        array_push($usuariosFinal, $array);

        }

        $response["HasError"] = false;
        $response["AlertType"] = "success";
        $response["AlertMessage"] = "";
        $response["ModelErrors"] = [];

        $response["Data"] = array(
        "Objects" => $usuariosFinal,
        "Count" => $usuarios->count[0]->{".count"},

        );
         */
            break;

        /**
        * Client/GetClientProducts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientProducts":

            $UsuarioToken = new UsuarioToken();

            $ClientId = $params->ClientId;
            $Usuario = new Usuario($ClientId);
            $UsuarioMandante = new UsuarioMandante('', $ClientId, '0');

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $id = $_GET["id"];
            $ToDateLocal = $params->ToDateLocal;
            $FromDateLocal = $params->FromDateLocal;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000;
            }

            $json = '{"rules" : [{"field" : "usuario_token.usuario_id", "data" : "' . $UsuarioMandante->getUsumandanteId() . '","op":"eq"}] ,"groupOp" : "AND"}';

            $tokens = $UsuarioToken->getUsuariosCustom(" usuario_token.*,proveedor.* ", "usuario_token.proveedor_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $tokens = json_decode($tokens);

            $final = [];

            foreach ($tokens->data as $key => $value) {

                $array = [];
                $array["Id"] = $value->{"usuario_token.usutoken_id"};
                $array["Provider"] = $value->{"proveedor.descripcion"};


                $array["ProviderId"] = $value->{"proveedor.proveedor_id"};

                if ($array["Provider"] == "") {
                    $array["Provider"] = "Sitio Web";
                    $array["ProviderId"] = '0';
                }
                $array["Token"] = $value->{"usuario_token.token"};
                $array["State"] = $value->{"usuario_token.estado"};

                array_push($final, $array);

            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array("Objects" => $final,
                "Count" => $tokens->count[0]->{".count"}
            );
            break;

        /**
        * SaveClientProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "SaveClientProduct":

            $ClientId = $params->ClientId;

            $State = $params->State;
            $Token = $params->Token;
            $ProviderId = $params->ProviderId;


            try {

                if ($ClientId == "" || $State == "" || $ProviderId == "") {
                    throw new Exception("Datos Incorrectos", "22");
                }

                try {
                    $UsuarioMandante = new UsuarioMandante('', $ClientId, '0');
                } catch (Exception $e) {
                    if ($e->getCode() == 22) {
                        $Usuario = new Usuario($ClientId);

                        $UsuarioMandante = new UsuarioMandante();

                        $UsuarioMandante->mandante = $Usuario->mandante;
                        $UsuarioMandante->dirIp = $dir_ip;
                        $UsuarioMandante->nombres = $Usuario->nombre;
                        $UsuarioMandante->apellidos = $Usuario->nombre;
                        $UsuarioMandante->estado = $Usuario->estado;
                        $UsuarioMandante->email = $Usuario->login;
                        $UsuarioMandante->moneda = $Usuario->moneda;
                        $UsuarioMandante->paisId = $Usuario->paisId;
                        $UsuarioMandante->saldo = 0;
                        $UsuarioMandante->usuarioMandante = $Usuario->usuarioId;
                        $UsuarioMandante->usucreaId = 0;
                        $UsuarioMandante->usumodifId = 0;

                        $UsuarioMandanteMySqlDAO = new UsuarioMandanteMySqlDAO();
                        $usuario_id = $UsuarioMandanteMySqlDAO->insert($UsuarioMandante);

                        $UsuarioMandanteMySqlDAO->getTransaction()->getConnection()->commit();

                    }
                }


                try {
                    $UsuarioToken = new UsuarioToken('', $ProviderId, $UsuarioMandante->getUsumandanteId());
                    $UsuarioToken->estado = $State;

                    $UsuarioTokenMySqlDAO = new UsuarioTokenMySqlDAO();
                    $UsuarioTokenMySqlDAO->update($UsuarioToken);
                    $UsuarioTokenMySqlDAO->getTransaction()->commit();


                } catch (Exception $e) {

                    $UsuarioToken = new UsuarioToken();
                    $UsuarioToken->setProveedorId($ProviderId);
                    $UsuarioToken->setCookie('0');
                    $UsuarioToken->setRequestId('0');
                    $UsuarioToken->setUsucreaId(0);
                    $UsuarioToken->setUsumodifId(0);
                    $UsuarioToken->setUsuarioId($UsuarioMandante->getUsumandanteId());
                    $UsuarioToken->setToken($UsuarioToken->createToken());
                    $UsuarioToken->estado = $State;

                    $UsuarioTokenMySqlDAO = new UsuarioTokenMySqlDAO();

                    $UsuarioTokenMySqlDAO->insert($UsuarioToken);

                    $UsuarioTokenMySqlDAO->getTransaction()->commit();
                }

                $response["HasError"] = false;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["Result"] = array();

            } catch (Exception $e) {

                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = $e->getMessage();
                $response["ModelErrors"] = [];

            }
            break;

        /**
        * saveStateProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "saveStateProduct":

            $ClientId = $params->ClientId;
            $UsuProductId = $params->UsuProductId;
            $State = $params->State;
            $ProviderId = $params->ProviderId;

            try {


                $UsuarioMandante = new UsuarioMandante('', $ClientId, '0');

                $UsuarioToken = new UsuarioToken('', $ProviderId, $UsuarioMandante->getUsumandanteId());

                if ($UsuarioToken->getUsutokenId() != $UsuProductId) {
                    throw new Exception("No existe " . $UsuarioToken->getUsutokenId(), "22");
                }

                if ($State != 'A' && $State != 'I' && $State != 'NR') {
                    throw new Exception("No existe ", "22");

                }

                $UsuarioToken->estado = $State;

                $UsuarioTokenMySqlDAO = new UsuarioTokenMySqlDAO();
                $UsuarioTokenMySqlDAO->update($UsuarioToken);
                $UsuarioTokenMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["Result"] = array();

            } catch (Exception $e) {

                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "Invalid Username and/or password ('.$e->getMessage().')";
                $response["ModelErrors"] = [];

            }
            break;

        /**
        * Client/GetClientKpi
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientKpi22":


            $id = $_GET["id"];
            $ToDateLocal = $params->ToDateLocal;
            $FromDateLocal = $params->FromDateLocal;


            $ItTicketEnc = new ItTicketEnc();


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000;
            }

            $rules = [];

            array_push($rules, array("field" => "it_ticket_enc.usuario_id", "data" => "$id", "op" => "eq"));
            array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            $tickets = $ItTicketEnc->getTicketsCustom(" COUNT(*) count,SUM(it_ticket_enc.vlr_apuesta) apuestas,SUM(CASE WHEN it_ticket_enc.premiado = 'S' THEN it_ticket_enc.vlr_premio ELSE 0 END) premios, SUM(CASE WHEN it_ticket_enc.estado = 'A' THEN 1 ELSE 0 END) count_sin,SUM(CASE WHEN it_ticket_enc.estado = 'A' THEN it_ticket_enc.vlr_apuesta ELSE 0 END) apuestas_sin  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $tickets = json_decode($tickets);

            try {

                $UsuarioMandante = new UsuarioMandante("", $id, "0");

            } catch (Exception $e) {

            }

            /*
                        $rules = [];

                        array_push($rules, array("field" => "transaccion_juego.usuario_id", "data" => "$UsuarioMandante->usumandanteId", "op" => "eq"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");

                        $json = json_encode($filtro);

                        setlocale(LC_ALL, 'czech');


                        $TransaccionJuego = new TransaccionJuego();
                        $casino = $TransaccionJuego->getTransaccionesCustom(" COUNT(transaccion_juego.transjuego_id) count,SUM(transaccion_juego.valor_ticket) apuestas, SUM(transaccion_juego.valor_premio) premios ", "transaccion_juego.transjuego_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

                        $casino = json_decode($casino);
            */

            $rules = [];

            array_push($rules, array("field" => "transaccion_api.usuario_id", "data" => "$UsuarioMandante->usumandanteId", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $TransaccionApi = new TransaccionApi();
            $casino = $TransaccionApi->getTransaccionesCustom(" SUM(CASE WHEN tipo = 'DEBIT' THEN valor ELSE 0 END) apuestas,SUM(CASE WHEN tipo = 'CREDIT' THEN valor ELSE 0 END) premios ", "transaccion_api.transapi_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $casino = json_decode($casino);

            $rules = [];

            array_push($rules, array("field" => "ApiTransactions.cliID", "data" => "$id", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $ApiTransaction = new ApiTransaction();
            $casino2 = $ApiTransaction->getTransaccionesCustom(" SUM(CASE WHEN ApiTransactions.trnType = 'BET' THEN ApiTransactions.trnMonto ELSE 0 END) apuestas, SUM(CASE WHEN ApiTransactions.trnType = 'WIN' THEN ApiTransactions.trnMonto ELSE 0 END) premios ", "ApiTransactions.trnID", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $casino2 = json_decode($casino2);


            $rules = [];


            array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$id", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $json = json_encode($filtro);
            $UsuarioRecarga = new UsuarioRecarga();

            $transacciones = $UsuarioRecarga->getUsuarioRecargasCustom(" SUM(usuario_recarga.valor) recargas  ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $transacciones = json_decode($transacciones);

            $rules = [];
            array_push($rules, array("field" => "cuenta_cobro.usuario_id", "data" => "$id", "op" => "eq"));
            array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "'I'", "op" => "in"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CuentaCobro = new CuentaCobro();
            $cuentas = $CuentaCobro->getCuentasCobroCustom("COUNT(*) count,SUM(cuenta_cobro.valor) retiros", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $cuentas = json_decode($cuentas);

            $rules = [];
            array_push($rules, array("field" => "cuenta_cobro.usuario_id", "data" => "$id", "op" => "eq"));
            array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "'A'", "op" => "in"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $CuentaCobro = new CuentaCobro();
            $cuentaspendientes = $CuentaCobro->getCuentasCobroCustom("COUNT(*) count,SUM(cuenta_cobro.valor) retiros", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $cuentaspendientes = json_decode($cuentaspendientes);


            $rules = [];
            array_push($rules, array("field" => "bono_log.usuario_id", "data" => "$id", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $Bono = new BonoLog();
            $bonos = $Bono->getBonoLogsCustom("COUNT(*) count,SUM(bono_log.valor) bonos", "bono_log.bonolog_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $bonos = json_decode($bonos);

            $rules = [];
            array_push($rules, array("field" => "promocional_log.usuario_id", "data" => "$id", "op" => "eq"));


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $PromocionalLog = new PromocionalLog();
            $promocionales = $PromocionalLog->getPromocionalLogsCustom("COUNT(*) count,SUM(promocional_log.valor) bonos", "promocional_log.promolog_id", "asc", $SkeepRows, $MaxRows, $json, true, "");

            $promocionales = json_decode($promocionales);


            $apuestas_casino = $casino->data[0]->{".apuestas"} + $casino2->data[0]->{".apuestas"};
            $premios_casino = $casino->data[0]->{".premios"} + $casino2->data[0]->{".premios"};

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "LastSportBetTimeLocal" => "",
                "TotalSportBets" => ($tickets->data[0]->{".count"}),
                "TotalUnsettledBets" => ($tickets->data[0]->{".count_sin"}),
                "TotalSportStakes" => round(($tickets->data[0]->{".apuestas"}), 2),
                "TotalUnsettledStakes" => ($tickets->data[0]->{".apuestas_sin"}),
                "TotalSportWinnings" => round(($tickets->data[0]->{".premios"}), 2),
                "TotalCasinoWinnings" => round($premios_casino, 2),
                "TotalCasinoStakes" => round($apuestas_casino, 2),
                "SportProfitness" => (($tickets->data[0]->{".apuestas"}) / ($tickets->data[0]->{".premios"})),
                "TotalDeposit" => round(($transacciones->data[0]->{".recargas"}), 2),
                "TotalWithdrawal" => round(($cuentas->data[0]->{".retiros"}), 2),
                "TotalPendingWithdrawal" => round(($cuentaspendientes->data[0]->{".retiros"}), 2),
                "CasinoProfitness" => (($apuestas_casino) / ($premios_casino)),
                "TotalBonus" => round(($bonos->data[0]->{".bonos"}) + ($promocionales->data[0]->{".bonos"}), 2)

            );

            $response = [array(
                "LastSportBetTimeLocal" => "",
                "TotalSportBets" => intval($tickets->data[0]->{".count"}),
                "TotalUnsettledBets" => intval($tickets->data[0]->{".count_sin"}),
                "TotalSportStakes" => round(($tickets->data[0]->{".apuestas"}), 2),
                "TotalUnsettledStakes" => ($tickets->data[0]->{".apuestas_sin"}),
                "TotalSportWinnings" => round(($tickets->data[0]->{".premios"}), 2),
                "TotalCasinoWinnings" => round($premios_casino, 2),
                "TotalCasinoStakes" => round($apuestas_casino, 2),
                "SportProfitness" => round(($tickets->data[0]->{".apuestas"}) / max(($tickets->data[0]->{".premios"}), 1)),
                "TotalDeposit" => round(($transacciones->data[0]->{".recargas"}), 2),
                "TotalWithdrawal" => round(($cuentas->data[0]->{".retiros"}), 2),
                "TotalPendingWithdrawal" => round(($cuentaspendientes->data[0]->{".retiros"}), 2),
                "CasinoProfitness" => (($apuestas_casino) / ($premios_casino)),
                "TotalBonus" => round(($bonos->data[0]->{".bonos"}) + ($promocionales->data[0]->{".bonos"}), 2)

            )];

            break;

        case "Client/GetClientKpi":

            $id = $_GET["id"];
            $ToDateLocal = $params->ToDateLocal;
            $FromDateLocal = $params->FromDateLocal;


            $ItTicketEnc = new ItTicketEnc();


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000;
            }

            $rules = [];

            //array_push($rules, array("field" => "it_ticket_enc.usuario_id", "data" => "$id", "op" => "eq"));
            //array_push($rules, array("field" => "it_ticket_enc.eliminado", "data" => "N", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            $Usuario = new Usuario();

            $data = $Usuario->getUsuariosKPICustom("data.tipo, SUM(data.valor) valor", "data.fecha", "desc", 0, 100, $json, true, "data.tipo", $id);

            $dataT = json_decode($data);

            $TotalSportBets = 0;
            $TotalUnsettledBets = 0;
            $TotalSportStakes = 0;
            $TotalUnsettledStakes = 0;
            $TotalSportWinnings = 0;
            $TotalCasinoWinnings = 0;
            $TotalCasinoStakes = 0;
            $SportProfitness = 0;
            $TotalDeposit = 0;
            $TotalWithdrawal = 0;
            $TotalPendingWithdrawal = 0;
            $CasinoProfitness = 0;
            $AdjustmentE = 0;
            $AdjustmentS = 0;
            $TotalBonus = 0;

            $TotalBonusFreebet = 0;

            $TotalBonusEliminado = 0;

            $TotalBonusGanado = 0;


            foreach ($dataT->data as $data) {

                switch ($data->{"data.tipo"}) {

                    case "Apuesta Deportiva":

                        $TotalSportStakes = $data->{".valor"};

                        break;

                    case "Premio Apuesta Deportiva":

                        $TotalSportWinnings = $data->{".valor"};

                        break;

                    case "Deposito":

                        $TotalDeposit = $data->{".valor"};

                        break;

                    case "Ajuste Entrada":

                        $AdjustmentE = $data->{".valor"};

                        break;

                    case "Ajuste Salida":

                        $AdjustmentS = $data->{".valor"};

                        break;

                    case "Retiro Pendiente":

                        $TotalPendingWithdrawal = $data->{".valor"};

                        break;

                    case "Retiro Pagado":

                        $TotalWithdrawal = $data->{".valor"};

                        break;

                    case "Apuesta Casino":

                        $TotalCasinoStakes = $data->{".valor"};

                        break;

                    case "Premio Casino":

                        $TotalCasinoWinnings = $data->{".valor"};

                        break;


                    case "Bono":

                        $TotalBonus = $data->{".valor"};

                        break;


                    case "Bono Freebet":

                        $TotalBonusFreebet = $data->{".valor"};

                        break;


                    case "Bono Freebet Eliminado":

                        $TotalBonusEliminado = $data->{".valor"};

                        break;


                    case "Bono Free Ganado":

                        $TotalBonusGanado = $data->{".valor"};

                        break;





                }

            }
            $TotalSportBets=$TotalSportBets-$TotalBonusFreebet;
            $TotalSportBets=$TotalSportBets-$TotalBonusFreebet;

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "LastSportBetTimeLocal" => "",
                "TotalSportBets" => ($TotalSportBets),
                "TotalUnsettledBets" => ($TotalUnsettledBets),
                "TotalSportStakes" => round(($TotalSportStakes), 2),
                "TotalUnsettledStakes" => ($TotalUnsettledStakes),
                "TotalSportWinnings" => round(($TotalSportWinnings), 2),
                "TotalCasinoWinnings" => round($TotalCasinoWinnings, 2),
                "TotalCasinoStakes" => round($TotalCasinoStakes, 2),
                "SportProfitness" => (($TotalSportStakes) / ($TotalSportWinnings)),
                "TotalDeposit" => round(($TotalDeposit), 2),
                "TotalWithdrawal" => round(($TotalWithdrawal), 2),
                "TotalPendingWithdrawal" => round(($TotalPendingWithdrawal), 2),
                "CasinoProfitness" => (($TotalCasinoStakes) / ($TotalCasinoWinnings)),
                "AdjustmentE" => round(($AdjustmentE), 2),
                "AdjustmentS" => round(($AdjustmentS), 2),
                "TotalBonus" => round(($TotalBonus), 2),
                "TotalBonusFreebet" => round(($TotalBonusFreebet), 2),
                "TotalBonusDelete" => round(($TotalBonusEliminado), 2),
                "TotalBonusWin" => round(($TotalBonusGanado), 2)


            );
            if ($TotalSportWinnings == 0 && $TotalSportBets > 0) {
                $TotalSportWinnings = 1;
            }
            if ($TotalCasinoWinnings == 0 && $TotalCasinoStakes > 0) {
                $TotalCasinoWinnings = 1;
            }

            $response = [array(
                "LastSportBetTimeLocal" => "",
                "TotalSportBets" => ($TotalSportBets),
                "TotalUnsettledBets" => ($TotalUnsettledBets),
                "TotalSportStakes" => round(($TotalSportStakes), 2),
                "TotalUnsettledStakes" => ($TotalUnsettledStakes),
                "TotalSportWinnings" => round(($TotalSportWinnings), 2),
                "TotalCasinoWinnings" => round($TotalCasinoWinnings, 2),
                "TotalCasinoStakes" => round($TotalCasinoStakes, 2),
                "SportProfitness" => (($TotalSportStakes) / ($TotalSportWinnings)),
                "TotalDeposit" => round(($TotalDeposit), 2),
                "TotalWithdrawal" => round(($TotalWithdrawal), 2),
                "TotalPendingWithdrawal" => round(($TotalPendingWithdrawal), 2),
                "CasinoProfitness" => (($TotalCasinoStakes) / ($TotalCasinoWinnings)),
                "AdjustmentE" => round(($AdjustmentE), 2),
                "AdjustmentS" => round(($AdjustmentS), 2),
                "TotalBonus" => round(($TotalBonus+$TotalBonusFreebet-$TotalBonusEliminado), 2),
                "TotalBonusFreebet" => round(($TotalBonusFreebet), 2),
                "TotalBonusDelete" => round(($TotalBonusEliminado), 2),
                "TotalBonusWin" => round(($TotalBonusGanado), 2)

            )];

            break;

        /**
        * Client/GetClientAccounts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientAccounts":


            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $CurrencyId = $params->CurrencyId;
            $Id = $params->Id;

            $Registro = new Registro("", $Id);


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(array(
                "BalanceTypeName" => "Recargas",
                "Balance" => ($Registro->creditosBase),
                "BalanceTypeId" => "1"
            ),
                array(
                    "BalanceTypeName" => "Retiros",
                    "Balance" => ($Registro->creditos),
                    "BalanceTypeId" => "2"
                ));

            break;

        /**
        * Client/GetClientsWithBalance
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientsWithBalance":

            $UsuarioPerfil = new UsuarioPerfil();

            $Perfil_id = $_GET["roleId"];
            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 100000000;
            }

            $mismenus = "0";

            $rules = [];
            array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json2 = json_encode($filtro);

            $usuarios = $UsuarioPerfil->getUsuarioPerfilesCustom(" usuario.usuario_id,usuario.estado,usuario.login,usuario.fecha_ult,usuario.dir_ip,usuario.nombre,usuario_perfil.perfil_id ", "usuario_perfil.perfil_id", "asc", $SkeepRows, $MaxRows, $json2, true);

            $usuarios = json_decode($usuarios);
            $arrayf = [];

            $balanceAgent = 0;

            foreach ($usuarios->data as $key => $value) {
                $array = [];

                $array["UserName"] = $value->{"usuario.login"};
                $array["SystemName"] = 1;
                $array["IsSuspended"] = ($value->{"usuario.estado"} == 'A' ? false : true);
                //$array["AgentBalance"] = $value->{"punto_venta.creditos_base"};

                $array["FirstName"] = $value->{"usuario.nombre"};
                $array["LastName"] = "T";
                $array["Phone"] = '';
                $array["LastLoginLocalDate"] = $value->{"usuario.fecha_ult"};
                $array["LastLoginIp"] = $value->{"usuario.dir_ip"};


                $array["Id"] = $value->{"usuario.usuario_id"};
                $array["Name"] = $value->{"usuario.nombre"};
                $array["Role"] = $value->{"usuario_perfil.perfil_id"};


                array_push($arrayf, $array);

                $balanceAgent = $balanceAgent + $value->{"punto_venta.creditos_base"};
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] ["Children"] = $arrayf;
            $response["Data"] = array("Objects" => $arrayf,
                "Count" => $usuarios->count[0]->{".count"});

            break;

        /**
        * Reference/GetCurrencies
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/GetCurrencies":
            $Pais = new Pais();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "pais.estado", "data": "A","op":"eq"}] ,"groupOp" : "AND"}';

            $paises = $Pais->getPaises("pais_moneda.pais_id,ciudad.ciudad_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $paises = json_decode($paises);

            $final = [];
            $arrayf = [];
            $monedas = [];

            $ciudades = [];
            $departamentos = [];

            foreach ($paises->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"pais.pais_id"};
                $array["Name"] = $value->{"pais.pais_nom"};

                $departamento_id = $value->{"departamento.depto_id"};
                $departamento_texto = $value->{"departamento.depto_nom"};

                $ciudad_id = $value->{"ciudad.ciudad_id"};
                $ciudad_texto = $value->{"ciudad.ciudad_nom"};

                if ($array["Id"] != $arrayf["Id"] && $arrayf["Id"] != "") {

                    $arrayf["currencies"] = array_unique($monedas);
                    $arrayf["departaments"] = $departamentos;
                    array_push($final, $arrayf);
                    array_push($monedas, $moneda);

                    $arrayf = [];
                    //$monedas = [];
                    $departamentos = [];
                    $ciudades = [];

                }

                $arrayf["Id"] = $value->{"pais.pais_id"};
                $arrayf["Name"] = $value->{"pais.pais_nom"};

                $moneda = [];
                $moneda["Id"] = $value->{"pais_moneda.moneda"};
                $moneda["Name"] = $value->{"pais_moneda.moneda"};


                if ($departamento_idf != $departamento_id && $departamento_idf != "") {

                    $departamento = [];
                    $departamento["Id"] = $departamento_idf;
                    $departamento["Name"] = $departamento_textof;
                    $departamento["cities"] = $ciudades;

                    array_push($departamentos, $departamento);

                    $ciudades = [];

                    $ciudad = [];
                    $ciudad["Id"] = $ciudad_id;
                    $ciudad["Name"] = $ciudad_texto;

                    array_push($ciudades, $ciudad);

                } else {
                    $ciudad = [];
                    $ciudad["Id"] = $ciudad_id;
                    $ciudad["Name"] = $ciudad_texto;

                    array_push($ciudades, $ciudad);
                }

                $departamento_idf = $value->{"departamento.depto_id"};
                $departamento_textof = $value->{"departamento.depto_nom"};

            }

            $departamento = [];
            $departamento["Id"] = $departamento_idf;
            $departamento["Name"] = $departamento_textof;
            $departamento["cities"] = $ciudades;

            array_push($departamentos, $departamento);

            $ciudades = [];

            array_push($monedas, $moneda);
            $arrayf["currencies"] = unique_multidim_array($monedas, "Id");
            $arrayf["departments"] = $departamentos;

            array_push($final, $arrayf);

            $regiones = [];

            $array["Id"] = "1";
            $array["Name"] = "America";
            $array["countries"] = $final;

            array_push($regiones, $array);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = (unique_multidim_array($monedas, "Id"));
            break;

        /**
        * Client/GetCurrencies
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetCurrencies":
            $Pais = new Pais();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "pais.estado", "data": "A","op":"eq"}] ,"groupOp" : "AND"}';

            $paises = $Pais->getPaises("pais_moneda.pais_id,ciudad.ciudad_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $paises = json_decode($paises);

            $final = [];
            $arrayf = [];
            $monedas = [];

            $ciudades = [];
            $departamentos = [];

            foreach ($paises->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"pais.pais_id"};
                $array["Name"] = $value->{"pais.pais_nom"};

                $departamento_id = $value->{"departamento.depto_id"};
                $departamento_texto = $value->{"departamento.depto_nom"};

                $ciudad_id = $value->{"ciudad.ciudad_id"};
                $ciudad_texto = $value->{"ciudad.ciudad_nom"};

                if ($array["Id"] != $arrayf["Id"] && $arrayf["Id"] != "") {

                    $arrayf["currencies"] = array_unique($monedas);
                    $arrayf["departaments"] = $departamentos;
                    array_push($final, $arrayf);
                    array_push($monedas, $moneda);

                    $arrayf = [];
                    //$monedas = [];
                    $departamentos = [];
                    $ciudades = [];

                }

                $arrayf["Id"] = $value->{"pais.pais_id"};
                $arrayf["Name"] = $value->{"pais.pais_nom"};

                $moneda = [];
                $moneda["Id"] = $value->{"pais_moneda.moneda"};
                $moneda["Name"] = $value->{"pais_moneda.moneda"};


                if ($departamento_idf != $departamento_id && $departamento_idf != "") {

                    $departamento = [];
                    $departamento["Id"] = $departamento_idf;
                    $departamento["Name"] = $departamento_textof;
                    $departamento["cities"] = $ciudades;

                    array_push($departamentos, $departamento);

                    $ciudades = [];

                    $ciudad = [];
                    $ciudad["Id"] = $ciudad_id;
                    $ciudad["Name"] = $ciudad_texto;

                    array_push($ciudades, $ciudad);

                } else {
                    $ciudad = [];
                    $ciudad["Id"] = $ciudad_id;
                    $ciudad["Name"] = $ciudad_texto;

                    array_push($ciudades, $ciudad);
                }

                $departamento_idf = $value->{"departamento.depto_id"};
                $departamento_textof = $value->{"departamento.depto_nom"};

            }

            $departamento = [];
            $departamento["Id"] = $departamento_idf;
            $departamento["Name"] = $departamento_textof;
            $departamento["cities"] = $ciudades;

            array_push($departamentos, $departamento);

            $ciudades = [];

            array_push($monedas, $moneda);
            $arrayf["currencies"] = array_unique($monedas);
            $arrayf["departments"] = $departamentos;

            array_push($final, $arrayf);

            $regiones = [];

            $array["Id"] = "1";
            $array["Name"] = "America";
            $array["countries"] = $final;

            array_push($regiones, $array);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = ($monedas);
            break;

        /**
        * UserManagement/SavePermissionsForRole
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/SavePermissionsForRole":

            $roleId = $params->roleId;
            $userId = $params->userId;
            $permAdd = ($params->permAdd != "") ? explode(",", $params->permAdd) : array();
            $permDelete = ($params->permDelete != "") ? explode(",", $params->permDelete) : array();


            foreach ($permAdd as $key => $value) {

                if ($value != 0) {
                    $Id = $value;
                    $role = $roleId;

                    try {
                        $msg = "entro4";

                        $PerfilSubmenu = new PerfilSubmenu($role, $Id, $userId);


                    } catch (Exception $e) {
                        $msg = "entro2";

                        if ($userId == "") {
                            $userId = 0;
                        }

                        $PerfilSubmenu = new PerfilSubmenu();
                        $PerfilSubmenu->perfilId = $roleId;
                        $PerfilSubmenu->submenuId = $Id;
                        $PerfilSubmenu->adicionar = 'true';
                        $PerfilSubmenu->editar = 'true';
                        $PerfilSubmenu->eliminar = 'true';
                        $PerfilSubmenu->pais = 'N';
                        $PerfilSubmenu->usuarioId = $userId;

                        $msg = "entro";
                        $PerfilSubmenuMySqlDAO = new PerfilSubmenuMySqlDAO();
                        $PerfilSubmenuMySqlDAO->insert($PerfilSubmenu);
                        $PerfilSubmenuMySqlDAO->getTransaction()->commit();


                    }
                }

            }


            foreach ($permDelete as $key => $value) {

                if ($value != 0) {

                    $Id = $value;
                    $role = $roleId;

                    try {
                        $msg = "entro4";

                        $PerfilSubmenu = new PerfilSubmenu($role, $Id, $userId);

                        $PerfilSubmenuMySqlDAO = new PerfilSubmenuMySqlDAO();
                        $PerfilSubmenuMySqlDAO->delete($PerfilSubmenu->perfilId, $PerfilSubmenu->submenuId);
                        $PerfilSubmenuMySqlDAO->getTransaction()->commit();
                        $msg = "entro5";

                    } catch (Exception $e) {
                        $msg = "entro2";


                    }
                }
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;

        /**
        * SavePermissionsForRole
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "SavePermissionsForRole":

            foreach ($params as $key => $value) {

                $Id = $value->Id;
                $Name = $value->Name;
                $IsGiven = $value->IsGiven;
                $Action = $value->Action;
                $Selected = $value->Selected;
                $PermissionId = $value->PermissionId;
                $UserId = $value->UserId;
                $role = $_REQUEST["roleId"];

                try {
                    $msg = "entro4";

                    $PerfilSubmenu = new PerfilSubmenu($role, $Id);

                    if (!$IsGiven) {
                        $PerfilSubmenuMySqlDAO = new PerfilSubmenuMySqlDAO();
                        $PerfilSubmenuMySqlDAO->delete($PerfilSubmenu->perfilId, $PerfilSubmenu->submenuId);
                        $PerfilSubmenuMySqlDAO->getTransaction()->commit();
                        $msg = "entro5";

                    }

                } catch (Exception $e) {
                    $msg = "entro2";

                    if ($IsGiven) {
                        $PerfilSubmenu = new PerfilSubmenu();
                        $PerfilSubmenu->perfilId = $UserId;
                        $PerfilSubmenu->submenuId = $PermissionId;
                        $PerfilSubmenu->adicionar = 'true';
                        $PerfilSubmenu->editar = 'true';
                        $PerfilSubmenu->eliminar = 'true';
                        $msg = "entro";
                        $PerfilSubmenuMySqlDAO = new PerfilSubmenuMySqlDAO();
                        $PerfilSubmenuMySqlDAO->insert($PerfilSubmenu);
                        $PerfilSubmenuMySqlDAO->getTransaction()->commit();
                    }
                }
            }
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;


        /**
        * Reference/SaveFreeBetBonus2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/SaveFreeBetBonus2":

            $Description = $params->Description;

            $Prefix = $params->Prefix;
            $MaxplayersCount = $params->MaxplayersCount;

            $LiveOrPreMatch = $params->LiveOrPreMatch;
            $MinSelCount = $params->MinSelCount;
            $MinSelPrice = $params->MinSelPrice;
            $Name = $params->Name;
            $PartnerBonus = $params->PartnerBonus;
            $StartDate = $PartnerBonus->StartDate;
            $EndDate = $PartnerBonus->EndDate;
            $ExpirationDays = $PartnerBonus->ExpirationDays;
            $BonusDetails = $PartnerBonus->BonusDetails;

            $BonoInterno = new BonoInterno();
            $BonoInterno->nombre = $Name;
            $BonoInterno->descripcion = $Description;
            $BonoInterno->fechaInicio = $StartDate;
            $BonoInterno->fechaFin = $EndDate;
            $BonoInterno->tipo = 6;
            $BonoInterno->estado = 'A';
            $BonoInterno->usucreaId = 0;
            $BonoInterno->usumodifId = 0;
            $BonoInterno->mandante = 0;

            $BonoDetalleMySqlDAO = new BonoDetalleMySqlDAO();
            $transaccion = $BonoDetalleMySqlDAO->getTransaction();
            $bonoId = $BonoInterno->insert($transaccion);
            print_r($MaxplayersCount);
            print_r($Prefix);

            if ($MaxplayersCount != "" && $Prefix != "") {

                $codigosarray = array();

                for ($i = 1; $i <= $MaxplayersCount; $i++) {
                    $codigo = GenerarClaveTicket(4);

                    while (in_array($codigo, $codigosarray)) {
                        $codigo = GenerarClaveTicket(4);
                    }

                    $PromocionalLog = new PromocionalLog();

                    $PromocionalLog->$usuarioId = '0';

                    $PromocionalLog->$promocionalId = '12';

                    $PromocionalLog->$valor = '';

                    $PromocionalLog->$valorPromocional = '';

                    $PromocionalLog->$valorBase = '';

                    $PromocionalLog->$estado = 'A';

                    $PromocionalLog->$errorId = '';

                    $PromocionalLog->$idExterno = '';

                    $PromocionalLog->$mandante = '0';

                    $PromocionalLog->$version = '2';

                    $PromocionalLog->$usucreaId = '0';

                    $PromocionalLog->$usumodifId = '0';


                    $PromocionalLog->$apostado = '0';
                    $PromocionalLog->$rollowerRequerido = '0';
                    $PromocionalLog->$codigo = $Prefix . $codigo;

                    $PromocionalLog = new PromocionalLog();
                    $PromocionalLog->insert($PromocionalLog);
                    $PromocionalLog->getTransaction()->commit();

                    array_push($codigosarray, $codigo);

                }
            }


            //Expiracion

            foreach ($BonusDetails as $key => $value) {
                if ($value->MinAmount != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MINAMOUNT";
                    $BonoDetalle->moneda = $value->CurrencyId;
                    $BonoDetalle->valor = $value->MinAmount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);
                }
                if ($value->MaxAmount != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MAXAMOUNT";
                    $BonoDetalle->moneda = $value->CurrencyId;
                    $BonoDetalle->valor = $value->MaxAmount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);
                }
            }

            if ($ExpirationDays != "") {
                $BonoDetalle = new BonoDetalle();
                $BonoDetalle->bonoId = $bonoId;
                $BonoDetalle->tipo = "EXPDIA";
                $BonoDetalle->moneda = '';
                $BonoDetalle->valor = $ExpirationDays;
                $BonoDetalle->usucreaId = 0;
                $BonoDetalle->usumodifId = 0;
                $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                $BonoDetalleMysqlDAO->insert($BonoDetalle);
            }


            if ($LiveOrPreMatch != "") {
                $BonoDetalle = new BonoDetalle();
                $BonoDetalle->bonoId = $bonoId;
                $BonoDetalle->tipo = "LIVEORPREMATCH";
                $BonoDetalle->moneda = '';
                $BonoDetalle->valor = $LiveOrPreMatch;
                $BonoDetalle->usucreaId = 0;
                $BonoDetalle->usumodifId = 0;
                $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                $BonoDetalleMysqlDAO->insert($BonoDetalle);
            }

            if ($MinSelCount != "") {
                $BonoDetalle = new BonoDetalle();
                $BonoDetalle->bonoId = $bonoId;
                $BonoDetalle->tipo = "MINSELCOUNT";
                $BonoDetalle->moneda = '';
                $BonoDetalle->valor = $MinSelCount;
                $BonoDetalle->usucreaId = 0;
                $BonoDetalle->usumodifId = 0;
                $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                $BonoDetalleMysqlDAO->insert($BonoDetalle);
            }

            if ($MinSelPrice != "") {
                $BonoDetalle = new BonoDetalle();
                $BonoDetalle->bonoId = $bonoId;
                $BonoDetalle->tipo = "MINSELPRICE";
                $BonoDetalle->moneda = '';
                $BonoDetalle->valor = $MinSelPrice;
                $BonoDetalle->usucreaId = 0;
                $BonoDetalle->usumodifId = 0;
                $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                $BonoDetalleMysqlDAO->insert($BonoDetalle);
            }

            foreach ($SportBonusRules as $key => $value) {
                $BonoDetalle = new BonoDetalle();
                $BonoDetalle->bonoId = $bonoId;
                $BonoDetalle->tipo = "ITAINMENT" . $value->ObjectTypeId;
                $BonoDetalle->moneda = '';
                $BonoDetalle->valor = $value->ObjectId;
                $BonoDetalle->usucreaId = 0;
                $BonoDetalle->usumodifId = 0;
                $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                $BonoDetalleMysqlDAO->insert($BonoDetalle);
            }
            $transaccion->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "danger";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];
            $response["Result"] = array();


            break;


        case "Bonus/AddBonusBalance":

            $Amount = $params->Value;
            $Description = $params->Reference;
            $TypeBalance = $params->TypeBalance;

            /*
             * 0 es torneo casino
             * 1 es torneo deportivas
             */
            $Type = $params->Type;
            $UserId = $params->UserId;

            $seguir = true;

            if ($TypeBalance != 0 && $TypeBalance != 1) {
                $seguir = false;
            }

            if ($Type != 0 && $Type != 1) {
                $seguir = false;
            }

            if ($Description == "") {
                $seguir = false;
            }

            if (!is_numeric($UserId)) {
                $seguir = false;
            }


            if ($seguir) {

                if ($Type == 0) {
                    $Type = "TC";
                }

                if ($Type == 1) {
                    $Type = "TD";
                }


                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                $tipo = 'E';

                $Usuario = new Usuario($UserId);


                $BonoLog = new BonoLog();
                $BonoLog->setUsuarioId($Usuario->usuarioId);
                $BonoLog->setTipo($Type);
                $BonoLog->setValor($Amount);
                $BonoLog->setFechaCrea(date('Y-m-d H:i:s'));
                $BonoLog->setEstado('L');
                $BonoLog->setErrorId(0);
                $BonoLog->setIdExterno($Description);
                $BonoLog->setMandante($Usuario->mandante);
                $BonoLog->setFechaCierre('');
                $BonoLog->setTransaccionId('');
                $BonoLog->setTipobonoId(4);
                $BonoLog->setTiposaldoId($TypeBalance);


                $BonoLogMySqlDAO = new BonoLogMySqlDAO();

                $Transaction = $BonoLogMySqlDAO->getTransaction();

                $bonologId = $BonoLogMySqlDAO->insert($BonoLog);


                if ($TypeBalance == 0) {

                    $Usuario->credit($Amount, $Transaction);

                } elseif ($TypeBalance == 1) {
                    $Usuario->creditWin($Amount, $Transaction);

                }

                $UsuarioHistorial = new UsuarioHistorial();
                $UsuarioHistorial->setUsuarioId($Usuario->usuarioId);
                $UsuarioHistorial->setDescripcion('');
                $UsuarioHistorial->setMovimiento($tipo);
                $UsuarioHistorial->setUsucreaId(0);
                $UsuarioHistorial->setUsumodifId(0);
                $UsuarioHistorial->setTipo(50);
                $UsuarioHistorial->setValor($Amount);
                $UsuarioHistorial->setExternoId($bonologId);

                $UsuarioHistorialMySqlDAO = new UsuarioHistorialMySqlDAO($Transaction);
                $UsuarioHistorialMySqlDAO->insert($UsuarioHistorial);


                $Transaction->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["Result"] = array();


            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["Result"] = array();

            }

            break;


        case "BalanceAdjustments/Adjustment":

            $Amount = $params->Amount;
            $Description = $params->Description;
            $TypeBalance = $params->TypeBalance;
            $UserId = $params->UserId;

            $seguir = true;

            if ($TypeBalance != 0 && $TypeBalance != 1) {
                $seguir = false;
            }

            if ($Description == "") {
                $seguir = false;
            }

            if (!is_numeric($UserId)) {
                $seguir = false;
            }

            if (!is_numeric($Amount)) {
                $seguir = false;
            }

            if ($seguir) {

                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

                $tipo = 'E';

                $AmountS = $Amount;
                if ($Amount < 0) {
                    $tipo = 'S';
                    $AmountS = -$AmountS;
                }

                $Usuario = new Usuario($UserId);


                $SaldoUsuonlineAjuste = new SaldoUsuonlineAjuste();

                $SaldoUsuonlineAjuste->setTipoId($tipo);
                $SaldoUsuonlineAjuste->setUsuarioId($UserId);
                $SaldoUsuonlineAjuste->setValor($AmountS);
                $SaldoUsuonlineAjuste->setFechaCrea(date('Y-m-d H:i:s'));
                $SaldoUsuonlineAjuste->setUsucreaId($UsuarioMandante->getUsuarioMandante());
                $SaldoUsuonlineAjuste->setSaldoAnt($Usuario->getBalance());
                $SaldoUsuonlineAjuste->setObserv($Description);
                if ($SaldoUsuonlineAjuste->getMotivoId() == "") {
                    $SaldoUsuonlineAjuste->setMotivoId(0);
                }
                $dir_ip = explode(",", $_SERVER["HTTP_X_FORWARDED_FOR"])[0];

                $SaldoUsuonlineAjuste->setDirIp($dir_ip);
                $SaldoUsuonlineAjuste->setMandante($Usuario->mandante);
                $SaldoUsuonlineAjuste->setTipoSaldo($TypeBalance);


                $SaldoUsuonlineAjusteMysql = new SaldoUsuonlineAjusteMySqlDAO();

                $Transaction = $SaldoUsuonlineAjusteMysql->getTransaction();

                $ajusteId = $SaldoUsuonlineAjusteMysql->insert($SaldoUsuonlineAjuste);


                if ($TypeBalance == 0) {

                    $Usuario->credit($Amount, $Transaction);

                } else {
                    $Usuario->creditWin($Amount, $Transaction);

                }

                if ($Amount < 0) {
                    $Amount = -$Amount;
                }


                $UsuarioHistorial = new UsuarioHistorial();
                $UsuarioHistorial->setUsuarioId($Usuario->usuarioId);
                $UsuarioHistorial->setDescripcion('');
                $UsuarioHistorial->setMovimiento($tipo);
                $UsuarioHistorial->setUsucreaId(0);
                $UsuarioHistorial->setUsumodifId(0);
                $UsuarioHistorial->setTipo(15);
                $UsuarioHistorial->setValor($Amount);
                $UsuarioHistorial->setExternoId($ajusteId);

                $UsuarioHistorialMySqlDAO = new UsuarioHistorialMySqlDAO($Transaction);
                $UsuarioHistorialMySqlDAO->insert($UsuarioHistorial);


                $Transaction->commit();

            }

            break;


        case "BalanceAdjustments/GetBalanceAdjustments":

            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->ClientId;
            $IsDetails = $params->IsDetails;
            $PartnerBonusId = $params->PartnerBonusId;


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $UserId = $_REQUEST["UserId"];
            $PlayerId = $_REQUEST["PlayerId"];

            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {

                $ToDateLocal = $params->dateTo;

                if ($_REQUEST["dateFrom"] != "") {
                    $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +1 day' . $timezone . ' hour '));

                }


                $FromDateLocal = $params->dateFrom;

                if ($_REQUEST["dateTo"] != "") {
                    $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));

                }


                if ($FromDateLocal == "") {
                    //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                }
                if ($ToDateLocal == "") {
                    //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                }


                $rules = [];

                if ($FromDateLocal != "") {

                    //array_push($rules, array("field" => "usuario_bono.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));

                }


                if ($UserId != "") {

                    array_push($rules, array("field" => "saldo_usuonline_ajuste.usuario_id", "data" => "$UserId ", "op" => "eq"));

                }


                if ($PlayerId != "") {

                    array_push($rules, array("field" => "saldo_usuonline_ajuste.usuario_id", "data" => "$PlayerId ", "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }

                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                $json = json_encode($filtro);

                setlocale(LC_ALL, 'czech');


                $select = " saldo_usuonline_ajuste.*,usuario.usuario_id,usuario.nombre,usuario_crea.nombre ";


                $SaldoUsuonlineAjuste = new SaldoUsuonlineAjuste();
                $data = $SaldoUsuonlineAjuste->getSaldoUsuonlineAjustesCustom($select, "saldo_usuonline_ajuste.ajuste_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

                $data = json_decode($data);

                $final = array();
                $totalAmount = 0;
                foreach ($data->data as $value) {
                    $array = array();

                    $array["Id"] = $value->{"saldo_usuonline_ajuste.ajuste_id"};
                    $array["UserId"] = $value->{"saldo_usuonline_ajuste.usuario_id"};
                    $array["UserName"] = $value->{"usuario.nombre"};
                    $array["CreatedLocalDate"] = $value->{"saldo_usuonline_ajuste.fecha_crea"};
                    $array["Amount"] = $value->{"saldo_usuonline_ajuste.valor"};
                    $array["Description"] = $value->{"saldo_usuonline_ajuste.observ"};
                    $array["TypeBalance"] = $value->{"saldo_usuonline_ajuste.tipo_saldo"};

                    $array["UserCreated"] = $value->{"usuario_crea.nombre"};

                    array_push($final, $array);
                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfully";
                $response["ModelErrors"] = [];


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $data->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfully";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        case "Report/GetBalanceUsers":

            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->ClientId;
            $IsDetails = $params->IsDetails;
            $PartnerBonusId = $params->PartnerBonusId;


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $UserId = $_REQUEST["UserId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $CountrySelect = $_REQUEST["CountrySelect"];

            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {
                $order = "registro.creditos";
                $orderType = "desc";

                if ($_REQUEST["sort[AmountWithdraw]"] != "") {
                    $order = "registro.creditos";
                    $orderType = ($_REQUEST["sort[Order]"] == "asc") ? "asc" : "desc";

                }


                $rules = [];


                if ($UserId != "") {

                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$UserId ", "op" => "eq"));

                }


                if ($PlayerId != "") {

                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$PlayerId ", "op" => "eq"));

                }
                if ($CountrySelect != "") {

                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$CountrySelect ", "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }

                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE ", "op" => "eq"));

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                $json = json_encode($filtro);

                setlocale(LC_ALL, 'czech');


                $Usuario = new Usuario();

                $data = $Usuario->getUsuariosCustom("  usuario.usuario_id,usuario.moneda,usuario.nombre,usuario.fecha_crea,registro.creditos_base,registro.creditos ", $order, $orderType, $SkeepRows, $MaxRows, $json, true);

                $data = json_decode($data);

                $final = array();
                $totalAmount = 0;
                foreach ($data->data as $value) {
                    $array = array();
                    $array["UserId"] = $value->{"usuario.usuario_id"};
                    $array["UserName"] = $value->{"usuario.nombre"};
                    $array["Currency"] = $value->{"usuario.moneda"};
                    $array["CreatedLocalDate"] = $value->{"usuario.fecha_crea"};
                    $array["AmountDeposit"] = $value->{"registro.creditos_base"};
                    $array["AmountWithdraw"] = $value->{"registro.creditos"};

                    array_push($final, $array);
                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfully";
                $response["ModelErrors"] = [];


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $data->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfully";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Report/GetClientBonusReport
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetClientBonusReport":

            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->ClientId;
            $IsDetails = $params->IsDetails;
            $PartnerBonusId = $params->PartnerBonusId;


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $PlayerId = $_REQUEST["PlayerId"];
            $PartnerBonusId = $_REQUEST["PartnerBonusId"];
            $ClientBonusId = $_REQUEST["ClientBonusId"];
            $BonusType = ($_REQUEST["BonusType"] != 2 && $_REQUEST["BonusType"] != 3 && $_REQUEST["BonusType"] != 6) ? '' : $_REQUEST["BonusType"];
            $CountrySelect = intval($_REQUEST["CountrySelect"]);
            $State = ($_REQUEST["State"] != 'A' && $_REQUEST["State"] != 'I' && $_REQUEST["State"] != 'E' && $_REQUEST["State"] != 'R' && $_REQUEST["State"] != 'L' && $_REQUEST["State"] != 'P') ? '' : $_REQUEST["State"];

            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {

                $ToDateLocal = $params->dateTo;

                if ($_REQUEST["dateFrom"] != "") {
                    $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +1 day' . $timezone . ' hour '));

                }


                $FromDateLocal = $params->dateFrom;

                if ($_REQUEST["dateTo"] != "") {
                    $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));

                }


                if ($FromDateLocal == "") {
                    //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                }
                if ($ToDateLocal == "") {
                    //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                }


                $rules = [];

                if ($FromDateLocal != "") {

                    array_push($rules, array("field" => "usuario_bono.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));

                }

                if ($ToDateLocal != "") {

                    array_push($rules, array("field" => "usuario_bono.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                }

                //  array_push($rules, array("field" => "usuario_log.usuario_id", "data" => "$UserId", "op" => "eq"));
                //  array_push($rules, array("field" => "usuario_log.tipo", "data" => "CODIGOAGENT", "op" => "eq"));

                if ($PartnerBonusId != "") {
                    array_push($rules, array("field" => "usuario_bono.bono_id", "data" => "$PartnerBonusId", "op" => "eq"));

                }

                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_bono.usuario_id", "data" => "$ClientId", "op" => "eq"));

                }

                if ($ClientBonusId != "") {
                    array_push($rules, array("field" => "usuario_bono.usubono_id", "data" => "$ClientBonusId", "op" => "eq"));

                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario_bono.usuario_id", "data" => "$PlayerId", "op" => "eq"));

                }
                if ($BonusType != "") {
                    array_push($rules, array("field" => "bono_interno.tipo", "data" => "$BonusType", "op" => "eq"));

                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => "$CountrySelect", "op" => "eq"));

                }

                if ($State != "") {
                    array_push($rules, array("field" => "usuario_bono.estado", "data" => "$State", "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }

                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                $json = json_encode($filtro);

                setlocale(LC_ALL, 'czech');


                $select = " usuario_bono.*,usuario.moneda,bono_interno.*,bono_log.valor ";


                $UsuarioBono = new UsuarioBono();
                $data = $UsuarioBono->getUsuarioBonosCustom($select, "usuario_bono.usubono_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

                $data = json_decode($data);

                $final = array();
                $totalAmount = 0;
                foreach ($data->data as $value) {
                    $array = array();

                    $array["Id"] = $value->{"usuario_bono.usubono_id"};
                    $array["AcceptanceDateLocal"] = $value->{"usuario_bono.fecha_crea"};
                    $array["ClientId"] = $value->{"usuario_bono.usuario_id"};
                    $array["PartnerBonusId"] = $value->{"usuario_bono.bono_id"};
                    $array["PartnerBonusName"] = $value->{"bono_interno.descripcion"};
                    $array["Name"] = $value->{"bono_interno.descripcion"};
                    if ($value->{"bono_interno.tipo"} == "2") {
                        $array["BonusType"] = "Deposito";
                    } else {
                        if ($value->{"bono_interno.tipo"} == "3") {
                            $array["BonusType"] = "No Deposito";
                        } else if ($value->{"bono_interno.tipo"} == "6") {
                            $array["BonusType"] = "FreeBet";
                        } else {
                            $array["BonusType"] = "";
                        }
                    }
                    if ($value->{"usuario_bono.estado"} == "A") {
                        $array["AcceptanceType"] = "2";
                        $array["ResultType"] = "0";

                    } else {
                        if ($value->{"usuario_bono.estado"} == "R") {
                            $array["AcceptanceType"] = "2";
                            $array["ResultType"] = "1";

                        } else {
                            if ($value->{"usuario_bono.estado"} == "E") {
                                $array["AcceptanceType"] = "4";
                                $array["ResultType"] = "4";

                            } else {
                                $array["AcceptanceType"] = "0";
                                $array["ResultType"] = "0";

                            }
                        }
                    }

                    $array["ClientCurrency"] = $value->{"usuario.moneda"};
                    $array["Amount"] = floatval($value->{"usuario_bono.valor"});
                    $array["AmountConverted"] = floatval($value->{"bono_log.valor"});

                    $array["CreatedLocal"] = $value->{"usuario_bono.fecha_crea"};
                    $array["ClientBonusExpirationDateLocal"] = "";
                    //$array["BonusType"] = $value->{"bono_interno.tipo"};
                    $array["RolloverRequired"] = $value->{"usuario_bono.rollower_requerido"};
                    $array["RolloverWagered"] = $value->{"usuario_bono.apostado"};
                    $array["RolloverRemaining"] = $array["RolloverRequired"] - $array["RolloverWagered"];
                    $array["State"] = $value->{"usuario_bono.estado"};

                    switch ($value->{"usuario_bono.estado"}) {
                        case "A":
                            $array["State"] = "Activo";
                            break;
                        case "I":
                            $array["State"] = "Inactivo";
                            break;
                        case "R":
                            $array["State"] = "Redimido";

                            break;
                        case "L":
                            $array["State"] = "Libre";
                            break;
                        case "E":
                            $array["State"] = "Expirado";
                            break;
                    }


                    $totalAmount = $totalAmount + $array["Amount"];
                    array_push($final, $array);
                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfully";
                $response["ModelErrors"] = [];


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $data->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "Operation has completed successfully";
                $response["ModelErrors"] = [];


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Report/GetClientBonusReportDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetClientBonusReportDetail":

            $Id = $_REQUEST["id"];


            $MaxRows = 1;
            $OrderedItem = 1;
            $SkeepRows = 0;


            $rules = [];
            array_push($rules, array("field" => "usuario_bono.usubono_id", "data" => "$Id", "op" => "eq"));
            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            $select = " usuario_bono.*,usuario.moneda,bono_interno.* ";


            $UsuarioBono = new UsuarioBono();
            $data = $UsuarioBono->getUsuarioBonosCustom($select, "usuario_bono.usubono_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario_bono.usubono_id");

            $data = json_decode($data);

            $final = array();


            $value = $data->data[0];


            if ($value != "") {
                $array = array();

                $array["Id"] = $value->{"usuario_bono.usubono_id"};
                $array["Date"] = $value->{"usuario_bono.fecha_crea"};
                $array["Type"] = "AsignacionBono";
                $array["Amount"] = floatval($value->{"usuario_bono.valor"});
                $array["Description"] = "Asignación del Bono";

                array_push($final, $array);

                $totalcount = $totalcount + $data->count[0]->{".count"};

            }

            $rules = [];
            array_push($rules, array("field" => "bono_log.id_externo", "data" => "$Id", "op" => "eq"));
            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            $select = " bono_log.* ";


            $BonoLog = new BonoLog();
            $data = $BonoLog->getBonoLogsCustom($select, "bono_log.bonolog_id", "asc", $SkeepRows, $MaxRows, $json, true, "bono_log.bonolog_id");

            $data = json_decode($data);

            $value = $data->data[0];


            if ($value != "") {
                $array = array();

                $array["Id"] = $value->{"bono_log.bonolog_id"};
                $array["Date"] = $value->{"bono_log.fecha_crea"};
                $array["Type"] = "RedencionBono";
                $array["Amount"] = floatval($value->{"bono_log.valor"});
                $array["Description"] = "Bono Redimido";

                array_push($final, $array);

                $totalcount = $totalcount + $data->count[0]->{".count"};
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "Operation has completed successfully";
            $response["ModelErrors"] = [];


            $response["pos"] = $SkeepRows;
            $response["total_count"] = $totalcount;
            $response["data"] = $final;

            break;

        /**
        * vapi/GetClientBonusReport
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "vapi/GetClientBonusReport":

            $FromDateLocal = $params->FromDateLocal;
            $ToDateLocal = $params->ToDateLocal;
            $ClientId = $params->clientId;
            $IsDetails = $params->IsDetails;
            $PartnerBonusId = $params->PartnerBonusId;


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $rules = [];

            //  array_push($rules, array("field" => "usuario_log.usuario_id", "data" => "$UserId", "op" => "eq"));
            //array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            // array_push($rules, array("field" => "usuario_log.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
            //  array_push($rules, array("field" => "usuario_log.tipo", "data" => "CODIGOAGENT", "op" => "eq"));

            if ($PartnerBonusId != "") {
                array_push($rules, array("field" => "usuario_bono.bono_id", "data" => "$PartnerBonusId", "op" => "eq"));

            }
            $filtro = array("rules" => $rules, "groupOp" => "AND");

            $json = json_encode($filtro);

            setlocale(LC_ALL, 'czech');


            $select = " usuario_bono.*,usuario.moneda,bono_interno.* ";


            $UsuarioBono = new UsuarioBono();
            $data = $UsuarioBono->getUsuarioBonosCustom($select, "usuario_bono.usubono_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $data = json_decode($data);

            $final = array();
            $totalAmount = 0;
            foreach ($data->data as $value) {
                $array = array();

                $array["id"] = $value->{"usuario_bono.usubono_id"};
                $array["timestamp"] = strtotime($value->{"usuario_bono.fecha_crea"});
                $array["userid"] = $value->{"usuario_bono.usuario_id"};
                $array["bonusid"] = $value->{"usuario_bono.bono_id"};
                $array["rollover"] = $value->{"usuario_bono.rollower_requerido"};
                $array["rolloverWagered"] = $value->{"usuario_bono.apostado"};
                $array["rolloverRemaining"] = $array["RolloverRequired"] - $array["RolloverWagered"];

                $array["bonusname"] = $value->{"bono_interno.descripcion"};
                if ($value->{"bono_interno.tipo"} == "2") {
                    $array["bonustype"] = "deposit";
                } else {
                    if ($value->{"bono_interno.tipo"} == "3") {
                        $array["bonustype"] = "nodeposit";
                    } else {
                        $array["bonustype"] = "freebet";
                    }
                }
                if ($value->{"usuario_bono.estado"} == "A") {
                    $array["status"] = "activated";

                } else {
                    if ($value->{"usuario_bono.estado"} == "R") {
                        $array["status"] = "released";

                    } else {
                        if ($value->{"usuario_bono.estado"} == "E") {
                            $array["status"] = "expired";

                        } else {
                            $array["status"] = "inactive";

                        }
                    }
                }

                $array["ClientCurrency"] = $value->{"usuario.moneda"};
                $array["Amount"] = floatval($value->{"usuario_bono.valor"});

                $array["ClientBonusExpirationDateLocal"] = "";
                $array["BonusType"] = $value->{"bono_interno.tipo"};
                $array["RolloverWagered"] = $value->{"usuario_bono.apostado"};
                $array["RolloverRemaining"] = $array["RolloverRequired"] - $array["RolloverWagered"];

                $totalAmount = $totalAmount + $array["Amount"];
                array_push($final, $array);
            }


            $response["HasError"] = false;


            $response = array(
                "items" => $final,
                "total" => intval($data->count[0]->{".count"})

            );

            break;

        /**
        * Reference/SaveFreeBetBonus
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/SaveFreeBetBonus":

            try {


                $Description = $params->Description; //Descripcion del bono
                $Name = $params->Name; //Nombre del bono

                $PartnerBonus = $params->PartnerBonus;

                $StartDate = $PartnerBonus->StartDate; //Fecha Inicial de la campaña
                $EndDate = $PartnerBonus->EndDate; //Fecha Final de la campaña

                $ExpirationDays = $PartnerBonus->ExpirationDays; // Dias de expiracion del bono

                $LiveOrPreMatch = $params->LiveOrPreMatch;
                $MinSelCount = $params->MinSelCount;
                $MinSelPrice = $params->MinSelPrice;
                $MinSelPriceTotal = $params->MinSelPriceTotal;

                $MinBetPrice = $ForeignRuleJSON->MinBetPrice; // Minimo apuesta cuota total

                $TriggerId = $params->TriggerId;
                $CodePromo = $params->CodePromo;


                $MaxplayersCount = $params->MaxplayersCount; // Maximo jugadores que lo pueden obtener
                $Prefix = $params->Prefix;

                $PlayersChosen = $params->PlayersChosen;
                $ProductTypeId = $params->ProductTypeId;


                $Games = $params->Games;

                $condiciones = [];

                $UserRepeatBonus = $params->UserRepeatBonus;
                $SportBonusRules = $params->SportBonusRules;

                $BonusDetails = $PartnerBonus->BonusDetails;

                $TriggerDetails = $params->TriggerDetails;


                $ConditionProduct = $TriggerDetails->ConditionProduct;
                if ($ConditionProduct != "OR" && $ConditionProduct != "AND") {
                    $ConditionProduct = 'NA';
                }


                $tipobono = 6;
                $Priority = $params->Priority;

                if ($Priority == "" || !is_numeric($Priority)) {
                    $Priority = 0;
                }

                $cupo = 0;
                $cupoMaximo = 0;
                $jugadores = 0;
                $jugadoresMaximo = 0;

                if ($MaximumAmount != "" && $tipobono == 2) {
                    $cupoMaximo = $MaximumAmount[0]->Amount;
                }

                if ($MaxplayersCount != "" && $tipobono == 2) {
                    $jugadoresMaximo = $MaxplayersCount;
                }

                $usucrea_id = $_SESSION['usuario2'];
                $usumodif_id = $_SESSION['usuario2'];

                $BonoInterno = new BonoInterno();
                $BonoInterno->nombre = $Name;
                $BonoInterno->descripcion = $Description;
                $BonoInterno->fechaInicio = $StartDate;
                $BonoInterno->fechaFin = $EndDate;
                $BonoInterno->tipo = $tipobono;
                $BonoInterno->estado = 'A';
                $BonoInterno->usucreaId = 0;
                $BonoInterno->usumodifId = 0;
                $BonoInterno->mandante = 0;
                $BonoInterno->condicional = $ConditionProduct;
                $BonoInterno->orden = $Priority;
                $BonoInterno->cupoActual = $cupo;
                $BonoInterno->cupoMaximo = $cupoMaximo;
                $BonoInterno->cantidadBonos = $jugadores;
                $BonoInterno->maximoBonos = $jugadoresMaximo;


                $BonoDetalleMySqlDAO = new BonoDetalleMySqlDAO();
                $transaccion = $BonoDetalleMySqlDAO->getTransaction();

                $bonoId = $BonoInterno->insert($transaccion);


                if ($MaxplayersCount != "" && $Prefix != "") {

                    $jugadoresAsignar = array();
                    $jugadoresAsignarFinal = array();

                    if ($PlayersChosen != "") {
                        $jugadoresAsignar = explode(",", $PlayersChosen);

                        foreach ($jugadoresAsignar as $item) {

                            array_push($jugadoresAsignarFinal, array("Id" => $item, "Valor" => 0));

                        }
                    }


                    $codigosarray = array();

                    for ($i = 1; $i <= $MaxplayersCount; $i++) {
                        $codigo = GenerarClaveTicket(4);

                        while (in_array($codigo, $codigosarray)) {
                            $codigo = GenerarClaveTicket(4);
                        }

                        if ($jugadoresAsignarFinal[$i]["Id"] != "") {
                            $usuarioId = $jugadoresAsignarFinal[$i]["Id"];

                            $valor = $jugadoresAsignarFinal[$i]["Valor"];

                            $valor_bono = $jugadoresAsignarFinal[$i]["Valor"];

                            $valor_base = $jugadoresAsignarFinal[$i]["Valor"];


                        } else {
                            $usuarioId = '0';
                            $valor = '0';

                            $valor_bono = '0';

                            $valor_base = '0';

                        }


                        $estado = 'L';

                        $errorId = '0';

                        $idExterno = '0';

                        $mandante = '0';


                        $usucreaId = '0';

                        $usumodifId = '0';


                        $apostado = '0';
                        $rollowerRequerido = '0';
                        $codigo = $Prefix . $codigo;

                        $UsuarioBono = new UsuarioBono();

                        $UsuarioBono->setUsuarioId($usuarioId);
                        $UsuarioBono->setBonoId($bonoId);
                        $UsuarioBono->setValor($valor);
                        $UsuarioBono->setValorBono($valor_bono);
                        $UsuarioBono->setValorBase($valor_base);
                        $UsuarioBono->setEstado($estado);
                        $UsuarioBono->setErrorId($errorId);
                        $UsuarioBono->setIdExterno($idExterno);
                        $UsuarioBono->setMandante($mandante);
                        $UsuarioBono->setUsucreaId($usucreaId);
                        $UsuarioBono->setUsumodifId($usumodifId);
                        $UsuarioBono->setApostado($apostado);
                        $UsuarioBono->setRollowerRequerido($rollowerRequerido);
                        $UsuarioBono->setCodigo($codigo);
                        $UsuarioBono->setVersion(2);
                        $UsuarioBono->setExternoId(0);

                        $UsuarioBonoMysqlDAO = new UsuarioBonoMySqlDAO($transaccion);

                        $UsuarioBonoMysqlDAO->insert($UsuarioBono);


                        array_push($codigosarray, $codigo);

                    }
                }


                //Expiracion

                if ($ExpirationDays != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "EXPDIA";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $ExpirationDays;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($UserRepeatBonus != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "REPETIRBONO";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $UserRepeatBonus;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($Prefix != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "PREFIX";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $Prefix;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($UseFrozeWallet != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "FROZEWALLET";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $UseFrozeWallet;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($SuppressWithdrawal != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "SUPPRESSWITHDRAWAL";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $SuppressWithdrawal;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($ScheduleCount != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "SCHEDULECOUNT";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $ScheduleCount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($ScheduleName != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "SCHEDULENAME";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $ScheduleName;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($SchedulePeriod != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "SCHEDULEPERIOD";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $SchedulePeriod;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($SchedulePeriodType != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "SCHEDULEPERIODTYPE";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $SchedulePeriodType;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($ProductTypeId !== "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "TIPOPRODUCTO";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $ProductTypeId;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($Count != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CANTDEPOSITOS";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $Count;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($AreAllowed != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "PAISESPERMITIDOS";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $AreAllowed;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($ExpirationDate != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "EXPFECHA";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $ExpirationDate;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($BonusPercent != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "PORCENTAJE";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $BonusPercent;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($BonusWFactor != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "WFACTORBONO";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $BonusWFactor;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($DepositWFactor != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "WFACTORDEPOSITO";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $DepositWFactor;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }


                if ($DepositNumber != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "NUMERODEPOSITO";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $DepositNumber;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($IsFromCashDesk) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDEFECTIVO";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = 'true';
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                if ($MaxplayersCount != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MAXJUGADORES";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $MaxplayersCount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }


                foreach ($MaxPayout as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MAXPAGO";
                    $BonoDetalle->moneda = $value->CurrencyId;
                    $BonoDetalle->valor = $value->Amount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                foreach ($MaximumDeposit as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MAXDEPOSITO";
                    $BonoDetalle->moneda = $value->CurrencyId;
                    $BonoDetalle->valor = $value->Amount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                foreach ($MinimumDeposit as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MINDEPOSITO";
                    $BonoDetalle->moneda = $value->CurrencyId;
                    $BonoDetalle->valor = $value->Amount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                foreach ($MoneyRequirement as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "VALORBONO";
                    $BonoDetalle->moneda = $value->CurrencyId;
                    $BonoDetalle->valor = $value->Amount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                foreach ($PaymentSystemIds as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDPAYMENT";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                foreach ($Regions as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDPAISPV";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                foreach ($Departments as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDDEPARTAMENTOPV";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                foreach ($Cities as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDCIUDADPV";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }


                foreach ($RegionsUser as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDPAISUSER";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }

                foreach ($DepartmentsUser as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDDEPARTAMENTOUSER";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                foreach ($CitiesUser as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDCIUDADUSER";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                foreach ($CashDesks as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDPUNTOVENTA";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }


                foreach ($Games as $key => $value) {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "CONDGAME" . $value->Id;
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value->WageringPercent;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                foreach ($SportBonusRules as $key => $value) {
                    $dataA = array(
                        "ObjectTypeId" => $value->ObjectTypeId,
                        "Id" => $value->ObjectId,
                        "Name" => $value->Name,
                        "SportName" => $value->SportName,
                        "ObjectTypeId" => $value->Name
                    );
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "ITAINMENT" . $value->ObjectTypeId;
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $value->ObjectId;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($LiveOrPreMatch != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "LIVEORPREMATCH";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $LiveOrPreMatch;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($MinSelCount != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MINSELCOUNT";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $MinSelCount;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($MinSelPrice != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MINSELPRICE";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $MinSelPrice;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }


                if ($MinSelPriceTotal != "") {
                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MINSELPRICETOTAL";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $MinSelPriceTotal;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);

                }

                if ($TriggerId != "") {
                    if ($CodePromo != "") {
                        $BonoDetalle = new BonoDetalle();
                        $BonoDetalle->bonoId = $bonoId;
                        $BonoDetalle->tipo = "CODEPROMO";
                        $BonoDetalle->moneda = '';
                        $BonoDetalle->valor = $CodePromo;
                        $BonoDetalle->usucreaId = 0;
                        $BonoDetalle->usumodifId = 0;
                        $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                        $BonoDetalleMysqlDAO->insert($BonoDetalle);

                    }
                }

                if ($MinBetPrice != "") {

                    $BonoDetalle = new BonoDetalle();
                    $BonoDetalle->bonoId = $bonoId;
                    $BonoDetalle->tipo = "MINBETPRICE";
                    $BonoDetalle->moneda = '';
                    $BonoDetalle->valor = $MinBetPrice;
                    $BonoDetalle->usucreaId = 0;
                    $BonoDetalle->usumodifId = 0;
                    $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                    $BonoDetalleMysqlDAO->insert($BonoDetalle);


                }


                foreach ($BonusDetails as $key => $value) {
                    if ($value->MinAmount != "") {
                        $BonoDetalle = new BonoDetalle();
                        $BonoDetalle->bonoId = $bonoId;
                        $BonoDetalle->tipo = "MINAMOUNT";
                        $BonoDetalle->moneda = $value->CurrencyId;
                        $BonoDetalle->valor = $value->MinAmount;
                        $BonoDetalle->usucreaId = 0;
                        $BonoDetalle->usumodifId = 0;
                        $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                        $BonoDetalleMysqlDAO->insert($BonoDetalle);


                    }
                    if ($value->MaxAmount != "") {
                        $BonoDetalle = new BonoDetalle();
                        $BonoDetalle->bonoId = $bonoId;
                        $BonoDetalle->tipo = "MAXAMOUNT";
                        $BonoDetalle->moneda = $value->CurrencyId;
                        $BonoDetalle->valor = $value->MaxAmount;
                        $BonoDetalle->usucreaId = 0;
                        $BonoDetalle->usumodifId = 0;
                        $BonoDetalleMysqlDAO = new BonoDetalleMySqlDAO($transaccion);
                        $BonoDetalleMysqlDAO->insert($BonoDetalle);

                    }
                }


                $transaccion->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["Result"] = array();

            } catch (Exception $e) {

                print_r($e);
            }
            break;


        case "Report/GetProvidersPaymentSystem":

            $Proveedor = new Proveedor();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "proveedor.tipo", "data": "PAYMENT","op":"eq"}] ,"groupOp" : "AND"}';

            $productos = $Proveedor->getProveedoresCustom("proveedor.proveedor_id,proveedor.descripcion","proveedor.proveedor_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"proveedor.proveedor_id"};
                $array["Name"] = $value->{"proveedor.descripcion"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;



        /**
        * Report/GetPaymentSystems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetPaymentSystems":

            $Producto = new Producto();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "proveedor.tipo", "data": "PAYMENT","op":"eq"}] ,"groupOp" : "AND"}';

            $productos = $Producto->getProductos("producto.producto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto.producto_id"};
                $array["Name"] = $value->{"producto.descripcion"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * Reference/GetPaymentSystems
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/GetPaymentSystems":

            $Producto = new Producto();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "proveedor.tipo", "data": "PAYMENT","op":"eq"}] ,"groupOp" : "AND"}';

            $productos = $Producto->getProductos("producto.producto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto.producto_id"};
                $array["Name"] = $value->{"producto.descripcion"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * Report/GetSuperBets
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetSuperBets":

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array("Objects" => array(array(), array()),
                "Count" => 100
            );

            break;


        /**
        * Report/GetPaymentSystemsTurnovers
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/GetPaymentSystemsTurnovers":

            $TransaccionProducto = new TransaccionProducto();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->EndTimeLocal;
            $FromDateLocal = $params->StartTimeLocal;
            $TypeId = $params->TypeId;

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $ToDateLocal) . " 00:00:00"));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $FromDateLocal) . " 23:59:59"));


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            array_push($rules, array("field" => "transaccion_producto.estado", "data" => "I", "op" => "eq"));
            array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "A", "op" => "eq"));
            array_push($rules, array("field" => "transaccion_producto.fecha_modif", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "transaccion_producto.fecha_modif", "data" => "$ToDateLocal", "op" => "le"));

            if ($TypeId != "") {
                array_push($rules, array("field" => "producto.producto_id", "data" => "$TypeId", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000000;
            }

            $json = json_encode($filtro);

            $transacciones = $TransaccionProducto->getTransaccionesCustom(" transaccion_producto.*,producto.*,usuario.moneda ", "transaccion_producto.transproducto_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $transacciones = json_decode($transacciones);

            $final = [];

            foreach ($transacciones->data as $key => $value) {

                $array = [];

                $array["PaymentTypeName"] = $value->{"producto.descripcion"};
                $array["AccountId"] = $value->{"transaccion_producto.usuario_id"};
                $array["Debit"] = $value->{"transaccion_producto.valor"};
                $array["Credit"] = 0;
                $array["CurrencyId"] = $value->{"usuario.moneda"};
                $array["ReciboId"] = $value->{"transaccion_producto.final_id"};

                array_push($final, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;


        /**
        * GetFreeBetBonusesByFilter
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetFreeBetBonusesByFilter":


            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->StartTimeLocal;
            $FromDateLocal = $params->EndTimeLocal;
            $TypeId = $params->TypeId;

            $FromDateLocal = $params->EndTimeLocal;
            $FromDateLocal = $params->EndTimeLocal;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            /*if ($TypeId != "") {
            array_push($rules, array("field" => "producto.producto_id", "data" => "$TypeId", "op" => "eq"));
        }*/

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000000;
            }

            $json = json_encode($filtro);

            $BonoInterno = new BonoInterno();

            $bonos = $BonoInterno->getBonosCustom(" bono_interno.* ", "bono_interno.bono_id", "asc", $SkeepRows, $MaxRows, $json, false);

            $bonos = json_decode($bonos);

            $final = [];

            foreach ($bonos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"bono_interno.bono_id"};
                $array["Name"] = $value->{"bono_interno.nombre"};
                $array["Description"] = $value->{"bono_interno.descripcion"};
                $array["BeginDate"] = $value->{"bono_interno.fecha_inicio"};
                $array["EndDate"] = $value->{"bono_interno.fecha_fin"};
                $array["ProductTypeId"] = 2;
                $array["TypeId"] = 6;
                $array["Type"] = array(
                    "Id" => 6,
                    "Name" => "FreeBet",
                    "TypeId" => 6
                );
                $array["entity"] = array(
                    "Id" => 6,
                    "Name" => "FreeBet",
                    "TypeId" => 6
                );

                array_push($final, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Result"] = $final;


            break;

        /**
        * GetFreeBetBonusById
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetFreeBetBonusById":

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->StartTimeLocal;
            $FromDateLocal = $params->EndTimeLocal;
            $BonusId = $_REQUEST["id"];

            $FromDateLocal = $params->EndTimeLocal;
            $FromDateLocal = $params->EndTimeLocal;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];


            if ($BonusId != "") {
                array_push($rules, array("field" => "bono_interno.bono_id", "data" => "$BonusId", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 1000000000;
            }

            $json = json_encode($filtro);

            $BonoInterno = new BonoInterno();

            $bonos = $BonoInterno->getBonosCustom(" bono_interno.* ", "bono_interno.bono_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $bonos = json_decode($bonos);

            $final = [];

            foreach ($bonos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"bono_interno.bono_id"};
                $array["Name"] = $value->{"bono_interno.nombre"};
                $array["Description"] = $value->{"bono_interno.descripcion"};
                $array["BeginDate"] = $value->{"bono_interno.fecha_inicio"};
                $array["EndDate"] = $value->{"bono_interno.fecha_fin"};
                $array["ProductTypeId"] = 2;
                $array["TypeId"] = 6;
                $array["Type"] = array(
                    "Id" => 6,
                    "Name" => "FreeBet",
                    "TypeId" => 6
                );
                $array["PartnerBonus"] = array(
                    "StartDate" => "2018-02-09T00:00:00",
                    "EndDate" => "2018-02-09T00:00:00",
                    "ExpirationDays" => 6,
                    "BonusDetails" => array(
                        array(
                            "CurrencyId" => "USD"

                        )
                    )
                );


                array_push($final, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Result"] = $array;


            break;

        /**
        * GetSportBetSummary
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetSportBetSummary":

            $ItTicketEnc = new ItTicketEnc();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToDateLocal;
            $FromDateLocal = $params->FromDateLocal;

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $json = '{"rules" : [{"field" : "it_ticket_enc.estado", "data" : "I","op":"eq"},{"field" : " CONCAT(it_ticket_enc.fecha_cierre,\' - \',it_ticket_enc.hora_cierre) ", "data": "' . $FromDateLocal . '","op":"ge"},{"field" : "CONCAT(it_ticket_enc.fecha_cierre,\' - \',it_ticket_enc.hora_cierre)", "data": "' . $ToDateLocal . '","op":"le"}] ,"groupOp" : "AND"}';

            $tickets = $ItTicketEnc->getTicketsCustom(" COUNT(*) count,SUM(it_ticket_enc.vlr_apuesta) apuestas, SUM(CASE WHEN it_ticket_enc.premiado = 'S' THEN it_ticket_enc.vlr_premio ELSE 0 END) premios  ", "it_ticket_enc.it_ticket_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $tickets = json_decode($tickets);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                "BetAmount" => intval($tickets->data[0]->{".apuestas"}),
                "WinningAmount" => intval($tickets->data[0]->{".premios"}),
                "BetCount" => intval($tickets->data[0]->{".count"}),

            );

            break;


        /**
        * Financial/GetHistoricalCashFlow
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetHistoricalCashFlow":


            $Flujocajafact = new Flujocajafact();
            /*
                        $params = file_get_contents('php://input');
                        $params = json_decode($params);

                        $ToDateLocal = $params->ToCreatedDateLocal;

                        $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToCreatedDateLocal) . ' +1 day' . $timezone . ' hour '));

                        $FromDateLocal = $params->FromCreatedDateLocal;

                        $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromCreatedDateLocal) . $timezone . ' hour '));


                        $PaymentSystemId = $params->PaymentSystemId;
                        $CashDeskId = $params->CashDeskId;
                        $ClientId = $params->ClientId;
                        $AmountFrom = $params->AmountFrom;
                        $AmountTo = $params->AmountTo;
                        $CurrencyId = $params->CurrencyId;
                        $ExternalId = $params->ExternalId;
                        $Id = $params->Id;
                        $IsDetails = ($params->IsDetails == true) ? true : false;


                        $MaxRows = $_REQUEST["count"];
                        $OrderedItem = $params->OrderedItem;
                        $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

                        if ($FromDateLocal == "") {


                            $FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));

                        }
                        if ($ToDateLocal == "") {

                            $ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));


                        }

                        $rules = [];

                        //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                        //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

                        if ($PaymentSystemId != "") {
                            array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                        }

                        if ($CashDeskId != "") {
                            array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
                        }
                        if ($ClientId != "") {
                            array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                        }

                        if ($AmountFrom != "") {
                            array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                        }
                        if ($AmountTo != "") {
                            array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                        }

                        if ($CurrencyId != "") {
                            array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                        }
                        if ($ExternalId != "") {
                            array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                        }
                        if ($Id != "") {
                            array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                        }

                        $grouping = "";
                        $select = "";
                        if ($IsDetails) {

                        } else {
                            $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                            $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                            //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

                        }

                        $filtro = array("rules" => $rules, "groupOp" => "AND");

                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 5;
                        }

                        $json = json_encode($filtro);

                        $transacciones = $UsuarioRecarga->getUsuarioRecargasCustom($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

                        $transacciones = json_decode($transacciones);

                        $final = [];
                        $totalm = 0;
                        foreach ($transacciones->data as $key => $value) {
                            $array = [];
                            if ($IsDetails) {
                                $totalm = $totalm + $value->{"transaccion_producto.valor"};

                            } else {
                                $totalm = $totalm + $value->{".valoru"};
                            }
                            if ($value->{"producto.descripcion"} == "") {

                                $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                                $array["ClientId"] = $value->{"usuario_recarga.usuario_id"};
                                $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                                $array["ModifiedLocal"] = $value->{"usuario_recarga.fecha_crea"};

                                if ($IsDetails) {
                                    $array["Amount"] = $value->{"usuario_recarga.valor"};

                                } else {
                                    $array["Amount"] = $value->{".valoru"};

                                }
                                $array["PaymentSystemName"] = "Efectivo";
                                $array["TypeName"] = "Payment";

                                $array["CurrencyId"] = $value->{"usuario.moneda"};
                                $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                                $array["State"] = "A";
                                $array["Note"] = "T";
                                $array["ExternalId"] = "";

                            } else {

                                $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                                $array["ClientId"] = $value->{"transaccion_producto.usuario_id"};
                                $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                                $array["ModifiedLocal"] = $value->{"transaccion_producto.fecha_modif"};

                                if ($IsDetails) {
                                    $array["Amount"] = $value->{"transaccion_producto.valor"};
                                    $array["ExternalId"] = $value->{"transaccion_producto.externo_id"};

                                } else {
                                    $array["Amount"] = $value->{".valor"};
                                    $array["ExternalId"] = "";
                                    $array["Amount"] = $value->{"transaccion_producto.valor"};
                                    $array["ExternalId"] = $value->{"transaccion_producto.externo_id"};

                                }

                                $array["PaymentSystemName"] = $value->{"producto.descripcion"};
                                $array["TypeName"] = "Payment";

                                $array["CurrencyId"] = $value->{"usuario.moneda"};
                                $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                                $array["State"] = $value->{"transaccion_producto.estado_producto"};
                                $array["Note"] = "";
                            }
                            array_push($final, $array);
                        }

                        // $response["HasError"] = false;
                        // $response["AlertType"] = "success";
                        // $response["AlertMessage"] = "";
                        // $response["ModelErrors"] = [];

                        // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                        $response["pos"] = $SkeepRows;
                        $response["total_count"] = $transacciones->count[0]->{".count"};
                        $response["data"] = $final;
            */
            break;

        /**
        * Financial/GetFlujoCajaResumido
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetFlujoCajaResumido":


            $PuntoVenta = new PuntoVenta();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->dateTo;

            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . '' . $timezone . ' hour '));

            $FromDateLocal = $params->dateFrom;

            $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));


            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;

            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';
            $BetShopId = (is_numeric($_REQUEST["BetShopId"])) ? $_REQUEST["BetShopId"] : '';
            $TypeDetail = ($_REQUEST["TypeDetail"] == "0") ? 0 : 1;
            $TypeTotal = ($_REQUEST["Type"] == "1") ? 0 : 1;

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($SkeepRows == "" || $MaxRows == "") {
                $seguir = false;

            }

            if ($seguir) {
                if ($FromDateLocal == "") {


                    $FromDateLocal = date("Y-m-d 00:00:00", strtotime(time() . $timezone . ' hour '));

                }
                if ($ToDateLocal == "") {

                    $ToDateLocal = date("Y-m-d 23:59:59", strtotime(time() . '' . $timezone . ' hour '));


                }

                $rules = [];

                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));


                $grouping = "";
                $select = "";
                if ($IsDetails) {

                } else {
                    if($TypeTotal == 0){
                        $grouping = 0;

                    }else{
                        $grouping = 1;

                    }

                    $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

                }


                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 1000000;
                }
                $MaxRows = 1000000;


                if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                    $transacciones = $PuntoVenta->getFlujoCajaResumidoConCajero($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, $_SESSION['usuario']);

                } elseif ($_SESSION["win_perfil2"] == "CAJERO") {

                    $transacciones = $PuntoVenta->getFlujoCajaResumidoConCajero($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, "", $_SESSION['usuario']);

                } elseif ($_SESSION["win_perfil2"] == "CONCESIONARIO") {


                    $transacciones = $PuntoVenta->getFlujoCajaResumido($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, $_SESSION['usuario'], "", "", "", "", $BetShopId);

                } elseif ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {


                    $transacciones = $PuntoVenta->getFlujoCajaResumido($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, "", $_SESSION['usuario'], "", "", "", $BetShopId);

                } else {

                    $Pais = "";

                    if ($CountrySelect != "" && $CountrySelect != "0") {
                        $Pais = $CountrySelect;
                    }

                    if ($_SESSION['PaisCond'] == "S") {
                        $Pais = $_SESSION['pais_id'];
                    }

                    $Mandante = "";
                    if ($_SESSION['Global'] == "N") {
                        $Mandante = $_SESSION["mandante"];
                    }

                    array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                    $transacciones = $PuntoVenta->getFlujoCajaResumido($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, "", "", "", $Pais, $Mandante, $BetShopId);

                }


                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];
                    $array["Punto"] = "PUNTO";

                    if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                        $array["Punto"] = $value->{"y.login"};

                    } elseif ($_SESSION["win_perfil2"] == "CAJERO") {
                        $array["Punto"] = $value->{"y.login"};

                    } else {
                        $array["Punto"] = $value->{"y.punto_venta"};

                    }

                    $array["Fecha"] = $value->{"y.fecha_crea"};
                    $array["Moneda"] = $value->{"y.moneda"};
                    $array["CountryId"] = $value->{"y.pais_nom"};
                    $array["CountryIcon"] = strtolower($value->{"y.pais_iso"});
                    $array["Agent"] = $value->{"uu.agente"};
                    $array["CantidadTickets"] = $value->{".cant_tickets"};
                    $array["ValorEntradasEfectivo"] = $value->{".valor_entrada_efectivo"};
                    $array["ValorEntradasBonoTC"] = $value->{".valor_entrada_bono"};
                    $array["ValorEntradasRecargas"] = $value->{".valor_entrada_recarga"};

                    $array["ValorEntradasTraslados"] = $value->{".valor_entrada_traslado"};
                    $array["ValorSalidasEfectivo"] = $value->{".valor_salida_efectivo"};
                    $array["ValorSalidasTraslados"] = $value->{".valor_salida_traslado"};
                    $array["ValorSalidasNotasRetiro"] = $value->{".valor_salida_notaret"};
                    $array["Saldo"] = $array["ValorEntradasEfectivo"] + $array["ValorEntradasBonoTC"] + $array["ValorEntradasRecargas"] + $array["ValorEntradasTraslados"] - $array["ValorSalidasEfectivo"] - $array["ValorSalidasTraslados"] - $array["ValorSalidasNotasRetiro"];
                    $array["MMoneda"] = $value->{"y.punto_venta"};


                    array_push($final, $array);
                }


                if ($BetShopId == "") {


                    $UsuarioRecarga = new UsuarioRecarga();

                    $params = file_get_contents('php://input');
                    $params = json_decode($params);

                    $ToDateLocal = $params->ToCreatedDateLocal;

                    if ($_REQUEST["dateTo"] != "") {
                        $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
                    }


                    $FromDateLocal = $params->FromCreatedDateLocal;


                    if ($_REQUEST["dateFrom"] != "") {
                        $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
                    }

                    $PaymentSystemId = $params->PaymentSystemId;
                    $CashDeskId = $params->CashDeskId;
                    $ClientId = $params->ClientId;
                    $AmountFrom = $params->AmountFrom;
                    $AmountTo = $params->AmountTo;
                    $CurrencyId = $params->CurrencyId;
                    $ExternalId = $params->ExternalId;
                    $Id = $params->Id;
                    $IsDetails = ($params->IsDetails == true) ? true : false;

                    //Fijamos para obtener siempre detalles
                    $IsDetails = true;

                    $FromId = $_REQUEST["FromId"];
                    $PlayerId = $_REQUEST["PlayerId"];
                    $Ip = $_REQUEST["Ip"];
                    $IsDetails = 1;
                    $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';


                    $MaxRows = $_REQUEST["count"];
                    $OrderedItem = $params->OrderedItem;
                    $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
                    $seguir = true;

                    if ($MaxRows == "") {
                        $seguir = false;
                    }

                    if ($SkeepRows == "") {
                        $seguir = false;
                    }

                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2" || $_SESSION["win_perfil2"] == "PUNTOVENTA" || $_SESSION["win_perfil2"] == "CAJERO") {
                        $seguir = false;
                    }

                    if ($seguir) {


                        $rules = [];

                        if ($FromDateLocal != "") {
                            //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                        }
                        if ($ToDateLocal != "") {
                            //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                        }


                        if ($PaymentSystemId != "") {
                            array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                        }

                        if ($CashDeskId != "") {
                            array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
                        }
                        if ($ClientId != "") {
                            array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                        }

                        if ($AmountFrom != "") {
                            array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                        }
                        if ($AmountTo != "") {
                            array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                        }

                        if ($CurrencyId != "") {
                            array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                        }
                        if ($ExternalId != "") {
                            array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                        }
                        if ($Id != "") {
                            array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                        }
                        if ($CountrySelect != '') {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $CountrySelect, "op" => "eq"));
                        }


                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                            array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                        }

                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                            array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                        }

                        if ($_SESSION['PaisCond'] == "S") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                        }

                        if ($_SESSION['Global'] == "N") {
                            array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                        }

                        array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                        if ($FromId != "") {

                            $UsuarioPerfil = new UsuarioPerfil($FromId, "");

                            if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                                array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => "$FromId", "op" => "eq"));

                            } else {
                                array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => "$FromId", "op" => "eq"));
                            }
                            //array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$FromIdGetBetHistory", "op" => "eq"));
                        }


                        if ($PlayerId != "") {
                            array_push($rules, array("field" => "usuario.usuario_id", "data" => "$PlayerId", "op" => "eq"));
                        }

                        if ($Ip != "") {
                            array_push($rules, array("field" => "usuario_recarga.dir_ip", "data" => "$Ip", "op" => "cn"));

                        }

                        $grouping = "";
                        $select = "";
                        if ($IsDetails == 1) {
                            $MaxRows = 10000;
                            $grouping = "usuario.pais_id,DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d'),proveedor.proveedor_id ";
                            $select = "pais.*,DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d') fecha_crea,SUM(usuario_recarga.valor) valoru,usuario.moneda,SUM(transaccion_producto.valor) valor,producto.descripcion,proveedor.descripcion ";
                            //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));
                            array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "A", "op" => "eq"));

                        } else {
                            $select = " pais.*,usuario_punto.login,usuario_punto.nombre,transaccion_producto.*,producto.*,proveedor.*,usuario.moneda,usuario_recarga.* ";

                        }
                        array_push($rules, array("field" => "usuario_recarga.puntoventa_id", "data" => "0", "op" => "eq"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");

                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 5;
                        }


                        $json = json_encode($filtro);

                        $transacciones2 = $UsuarioRecarga->getUsuarioRecargasCustom($select, "usuario_recarga.recarga_id", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);

                        $transacciones2 = json_decode($transacciones2);

                        $totalm = 0;
                        foreach ($transacciones2->data as $key => $value) {
                            $array = [];
                            if ($IsDetails == 1) {
                                $totalm = $totalm + $value->{".valoru"};


                            } else {
                                $totalm = $totalm + $value->{"transaccion_producto.valor"};

                            }


                            $array = [];


                            $array["Punto"] = $value->{"proveedor.descripcion"} . ' - ' . $value->{"usuario.moneda"};

                            $array["Fecha"] = $value->{".fecha_crea"};
                            $array["Moneda"] = $value->{"usuario.moneda"};
                            $array["CountryId"] = $value->{"pais.pais_nom"};
                            $array["CountryIcon"] = strtolower($value->{"pais.iso"});
                            $array["Agent"] = "Pasarelas de Pago - " . $value->{"usuario.moneda"};
                            $array["CantidadTickets"] = 0;
                            $array["ValorEntradasEfectivo"] = 0;
                            $array["ValorEntradasBonoTC"] = 0;
                            $array["ValorEntradasRecargas"] = $value->{".valoru"};

                            $array["ValorEntradasTraslados"] = 0;
                            $array["ValorSalidasEfectivo"] = 0;
                            $array["ValorSalidasTraslados"] = 0;
                            $array["ValorSalidasNotasRetiro"] = 0;
                            $array["Saldo"] = $array["ValorEntradasRecargas"];
                            $array["MMoneda"] = 0;


                            array_push($final, $array);
                        }


                        $CuentaCobro = new CuentaCobro();

                        $params = file_get_contents('php://input');
                        $params = json_decode($params);

                        $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $ToDateLocal)));
                        $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $FromDateLocal)));
                        //$Region = $params->Region;
                        //$CurrencyId = $params->CurrencyId;
                        //$IsNewRegistered = $params->IsNewRegistered;


                        $ToDateLocal = $params->ToCreatedDateLocal;

                        if ($_REQUEST["dateTo"] != "") {
                            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
                        }


                        $FromDateLocal = $params->FromCreatedDateLocal;


                        if ($_REQUEST["dateFrom"] != "") {
                            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
                        }


                        $MaxRows = $params->MaxRows;
                        $OrderedItem = $params->OrderedItem;
                        $SkeepRows = $params->SkeepRows;

                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 1000;
                        }

                        $rules = [];
                        array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));
                        array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "0", "op" => "ne"));
                        array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$FromDateLocal ", "op" => "ge"));
                        array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$ToDateLocal", "op" => "le"));

                        if ($Region != "") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                        }

                        if ($Currency != "") {
                            array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                        }


                        if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                            array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil2"] == "CAJERO") {
                            array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }


                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                            array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                            array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }

                        if ($_SESSION['PaisCond'] == "S") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                        }

                        if ($_SESSION['Global'] == "N") {
                            array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                        }

                        array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $json = json_encode($filtro);


                        $cuentas = $CuentaCobro->getCuentasCobroCustom("COUNT(*) count,SUM(cuenta_cobro.valor) valor,DATE_FORMAT(cuenta_cobro.fecha_pago,'%Y-%m-%d') fecha_crea,producto.descripcion,usuario.moneda", "cuenta_cobro.fecha_pago", "desc", $SkeepRows, $MaxRows, $json, true, "transaccion_producto.producto_id,DATE_FORMAT(cuenta_cobro.fecha_pago,'%Y-%m-%d'),usuario.moneda");

                        $cuentas = json_decode($cuentas);

                        $valor_convertidoretiros = 0;
                        $totalretiros = 0;
                        foreach ($cuentas->data as $key => $value) {

                            $array = [];

                            if($value->{"producto.descripcion"} == ""){
                                $value->{"producto.descripcion"}="Fisicamente";
                            }

                            $array["Punto"] = "Cuentas - Giros - " . $value->{"producto.descripcion"} . '-' . $value->{"usuario.moneda"}  ;

                            $array["Fecha"] = $value->{".fecha_crea"};
                            $array["Moneda"] = $value->{"usuario.moneda"};
                            $array["CountryId"] = 'Perú';
                            $array["CountryIcon"] = strtolower('pe');
                            $array["Agent"] = "Cuentas Bancarias y Giros - " . $value->{"usuario.moneda"};
                            $array["CantidadTickets"] = 0;
                            $array["ValorEntradasEfectivo"] = 0;
                            $array["ValorEntradasBonoTC"] = 0;
                            $array["ValorEntradasRecargas"] = 0;

                            $array["ValorEntradasTraslados"] = 0;
                            $array["ValorSalidasEfectivo"] = 0;
                            $array["ValorSalidasTraslados"] = 0;
                            $array["ValorSalidasNotasRetiro"] = $value->{".valor"};
                            $array["Saldo"] = $array["ValorEntradasEfectivo"] + $array["ValorEntradasBonoTC"] + $array["ValorEntradasRecargas"] + $array["ValorEntradasTraslados"] - $array["ValorSalidasEfectivo"] - $array["ValorSalidasTraslados"] - $array["ValorSalidasNotasRetiro"];
                            $array["MMoneda"] = 0;


                            array_push($final, $array);


                        }


                    } else {

                    }
                }


                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $transacciones->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = [];

            }

            break;


        case "Financial/GetFlujoCajaResumido22":


            $PuntoVenta = new PuntoVenta();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->dateTo;

            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . '' . $timezone . ' hour '));

            $FromDateLocal = $params->dateFrom;

            $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));


            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;

            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';
            $BetShopId = (is_numeric($_REQUEST["BetShopId"])) ? $_REQUEST["BetShopId"] : '';
            $TypeDetail = ($_REQUEST["TypeDetail"] == "0") ? 0 : 1;

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($SkeepRows == "" || $MaxRows == "") {
                $seguir = false;

            }

            if ($seguir) {
                if ($FromDateLocal == "") {


                    $FromDateLocal = date("Y-m-d 00:00:00", strtotime(time() . $timezone . ' hour '));

                }
                if ($ToDateLocal == "") {

                    $ToDateLocal = date("Y-m-d 23:59:59", strtotime(time() . '' . $timezone . ' hour '));


                }

                $rules = [];

                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));


                $grouping = "";
                $select = "";
                if ($IsDetails) {

                } else {
                    $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

                }


                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 1000000;
                }
                $MaxRows = 1000000;


                if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {

                    $transacciones = $PuntoVenta->getFlujoCajaResumidoConCajero($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, $_SESSION['usuario']);

                } elseif ($_SESSION["win_perfil2"] == "CAJERO") {

                    $transacciones = $PuntoVenta->getFlujoCajaResumidoConCajero($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, "", $_SESSION['usuario']);

                } elseif ($_SESSION["win_perfil2"] == "CONCESIONARIO") {


                    $transacciones = $PuntoVenta->getFlujoCajaResumido($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, $_SESSION['usuario'], "", "", "", "", $BetShopId);

                } elseif ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {


                    $transacciones = $PuntoVenta->getFlujoCajaResumido($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, "", $_SESSION['usuario'], "", "", "", $BetShopId);

                } else {

                    $Pais = "";

                    if ($CountrySelect != "" && $CountrySelect != "0") {
                        $Pais = $CountrySelect;
                    }

                    if ($_SESSION['PaisCond'] == "S") {
                        $Pais = $_SESSION['pais_id'];
                    }

                    $Mandante = "";
                    if ($_SESSION['Global'] == "N") {
                        $Mandante = $_SESSION["mandante"];
                    }

                    array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                    $transacciones = $PuntoVenta->getFlujoCajaResumido($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, "", "", "", $Pais, $Mandante, $BetShopId);

                }


                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];
                    $array["Punto"] = "PUNTO";

                    if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                        $array["Punto"] = $value->{"y.login"};

                    } elseif ($_SESSION["win_perfil2"] == "CAJERO") {
                        $array["Punto"] = $value->{"y.login"};

                    } else {
                        $array["Punto"] = $value->{"y.punto_venta"};

                    }

                    $array["Fecha"] = $value->{"y.fecha_crea"};
                    $array["Moneda"] = $value->{"y.moneda"};
                    $array["CountryId"] = $value->{"y.pais_nom"};
                    $array["CountryIcon"] = strtolower($value->{"y.pais_iso"});
                    $array["Agent"] = $value->{"uu.agente"};
                    $array["CantidadTickets"] = $value->{".cant_tickets"};
                    $array["ValorEntradasEfectivo"] = $value->{".valor_entrada_efectivo"};
                    $array["ValorEntradasBonoTC"] = $value->{".valor_entrada_bono"};
                    $array["ValorEntradasRecargas"] = $value->{".valor_entrada_recarga"};

                    $array["ValorEntradasTraslados"] = $value->{".valor_entrada_traslado"};
                    $array["ValorSalidasEfectivo"] = $value->{".valor_salida_efectivo"};
                    $array["ValorSalidasTraslados"] = $value->{".valor_salida_traslado"};
                    $array["ValorSalidasNotasRetiro"] = $value->{".valor_salida_notaret"};
                    $array["Saldo"] = $array["ValorEntradasEfectivo"] + $array["ValorEntradasBonoTC"] + $array["ValorEntradasRecargas"] + $array["ValorEntradasTraslados"] - $array["ValorSalidasEfectivo"] - $array["ValorSalidasTraslados"] - $array["ValorSalidasNotasRetiro"];
                    $array["MMoneda"] = $value->{"y.punto_venta"};


                    array_push($final, $array);
                }


                if ($BetShopId == "") {


                    $UsuarioRecarga = new UsuarioRecarga();

                    $params = file_get_contents('php://input');
                    $params = json_decode($params);

                    $ToDateLocal = $params->ToCreatedDateLocal;

                    if ($_REQUEST["dateTo"] != "") {
                        $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
                    }


                    $FromDateLocal = $params->FromCreatedDateLocal;


                    if ($_REQUEST["dateFrom"] != "") {
                        $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
                    }

                    $PaymentSystemId = $params->PaymentSystemId;
                    $CashDeskId = $params->CashDeskId;
                    $ClientId = $params->ClientId;
                    $AmountFrom = $params->AmountFrom;
                    $AmountTo = $params->AmountTo;
                    $CurrencyId = $params->CurrencyId;
                    $ExternalId = $params->ExternalId;
                    $Id = $params->Id;
                    $IsDetails = ($params->IsDetails == true) ? true : false;

                    //Fijamos para obtener siempre detalles
                    $IsDetails = true;

                    $FromId = $_REQUEST["FromId"];
                    $PlayerId = $_REQUEST["PlayerId"];
                    $Ip = $_REQUEST["Ip"];
                    $IsDetails = 1;
                    $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';


                    $MaxRows = $_REQUEST["count"];
                    $OrderedItem = $params->OrderedItem;
                    $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
                    $seguir = true;

                    if ($MaxRows == "") {
                        $seguir = false;
                    }

                    if ($SkeepRows == "") {
                        $seguir = false;
                    }

                    if ($_SESSION["win_perfil2"] == "CONCESIONARIO" || $_SESSION["win_perfil2"] == "CONCESIONARIO2" || $_SESSION["win_perfil2"] == "PUNTOVENTA" || $_SESSION["win_perfil2"] == "CAJERO") {
                        $seguir = false;
                    }

                    if ($seguir) {


                        $rules = [];

                        if ($FromDateLocal != "") {
                            //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                            array_push($rules, array("field" => "usuario_recarga_resumen.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                        }
                        if ($ToDateLocal != "") {
                            //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                            array_push($rules, array("field" => "usuario_recarga_resumen.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                        }


                        if ($PaymentSystemId != "") {
                            array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                        }

                        if ($CashDeskId != "") {
                            array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
                        }
                        if ($ClientId != "") {
                            array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                        }

                        if ($AmountFrom != "") {
                            array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                        }
                        if ($AmountTo != "") {
                            array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                        }

                        if ($CurrencyId != "") {
                            array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                        }
                        if ($ExternalId != "") {
                            array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                        }
                        if ($Id != "") {
                            array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                        }
                        if ($CountrySelect != '') {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $CountrySelect, "op" => "eq"));
                        }

                        $innerProducto = false;
                        $innerConcesionario = false;

                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                            $innerConcesionario = true;

                            array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                        }

                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                            $innerConcesionario = true;

                            array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                        }

                        if ($_SESSION['PaisCond'] == "S") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                        }

                        if ($_SESSION['Global'] == "N") {
                            array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                        }

                        array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                        array_push($rules, array("field" => "usuario_perfil.perfil_id", "data" => "USUONLINE", "op" => "eq"));


                        $grouping = "";
                        $select = "";

                        $select = "pais.*,SUM(usuario_recarga_resumen.cantidad) cantidad,DATE_FORMAT(usuario_recarga_resumen.fecha_crea,'%Y-%m-%d') fecha_crea,SUM(usuario_recarga_resumen.valor) valoru,usuario.moneda,SUM(usuario_recarga_resumen.valor) valor,producto.descripcion,proveedor.descripcion ";
                        $grouping = "usuario.pais_id,DATE_FORMAT(usuario_recarga_resumen.fecha_crea,'%Y-%m-%d'),proveedor.proveedor_id ";

                        array_push($rules, array("field" => "usuario_recarga_resumen.puntoventa_id", "data" => "0", "op" => "eq"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");

                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 5;
                        }

                        $innerProducto = true;


                        $json = json_encode($filtro);

                        $UsuarioRecargaResumen = new UsuarioRecargaResumen();
                        $transacciones2 = $UsuarioRecargaResumen->getUsuarioRecargaResumenCustom($select, "usuario.moneda", "desc", $SkeepRows, $MaxRows, $json, true, $grouping, $innerProducto, $innerConcesionario);

                        $transacciones2 = json_decode($transacciones2);

                        $totalm = 0;
                        foreach ($transacciones2->data as $key => $value) {
                            $array = [];
                            if ($IsDetails == 1) {
                                $totalm = $totalm + $value->{".valoru"};


                            } else {
                                $totalm = $totalm + $value->{"usuario_recarga_resumen.valor"};

                            }


                            $array = [];


                            $array["Punto"] = $value->{"proveedor.descripcion"} . ' - ' . $value->{"usuario.moneda"};

                            $array["Fecha"] = $value->{".fecha_crea"};
                            $array["Moneda"] = $value->{"usuario.moneda"};
                            $array["CountryId"] = $value->{"pais.pais_nom"};
                            $array["CountryIcon"] = strtolower($value->{"pais.iso"});
                            $array["Agent"] = "Pasarelas de Pago - " . $value->{"usuario.moneda"};
                            $array["CantidadTickets"] = $value->{".cantidad"};
                            $array["ValorEntradasEfectivo"] = 0;
                            $array["ValorEntradasBonoTC"] = 0;
                            $array["ValorEntradasRecargas"] = $value->{".valoru"};

                            $array["ValorEntradasTraslados"] = 0;
                            $array["ValorSalidasEfectivo"] = 0;
                            $array["ValorSalidasTraslados"] = 0;
                            $array["ValorSalidasNotasRetiro"] = 0;
                            $array["Saldo"] = $array["ValorEntradasRecargas"];
                            $array["MMoneda"] = 0;


                            array_push($final, $array);
                        }


                        $CuentaCobro = new CuentaCobro();

                        $params = file_get_contents('php://input');
                        $params = json_decode($params);

                        $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $ToDateLocal)));
                        $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $FromDateLocal)));
                        //$Region = $params->Region;
                        //$CurrencyId = $params->CurrencyId;
                        //$IsNewRegistered = $params->IsNewRegistered;


                        $ToDateLocal = $params->ToCreatedDateLocal;

                        if ($_REQUEST["dateTo"] != "") {
                            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
                        }


                        $FromDateLocal = $params->FromCreatedDateLocal;


                        if ($_REQUEST["dateFrom"] != "") {
                            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
                        }


                        $MaxRows = $params->MaxRows;
                        $OrderedItem = $params->OrderedItem;
                        $SkeepRows = $params->SkeepRows;

                        if ($SkeepRows == "") {
                            $SkeepRows = 0;
                        }

                        if ($OrderedItem == "") {
                            $OrderedItem = 1;
                        }

                        if ($MaxRows == "") {
                            $MaxRows = 1000;
                        }

                        $rules = [];
                        array_push($rules, array("field" => "usuario_retiro_resumen.producto_id", "data" => "0", "op" => "ne"));
                        array_push($rules, array("field" => "usuario_retiro_resumen.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                        array_push($rules, array("field" => "usuario_retiro_resumen.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

                        if ($Region != "") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => "$Region", "op" => "eq"));
                        }

                        if ($Currency != "") {
                            array_push($rules, array("field" => "usuario.moneda", "data" => "$Currency", "op" => "eq"));
                        }


                        if ($_SESSION["win_perfil2"] == "PUNTOVENTA") {
                            array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil2"] == "CAJERO") {
                            array_push($rules, array("field" => "usuario.usuario_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }
                        $innerProducto = false;
                        $innerConcesionario = false;


                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                            $innerConcesionario = true;
                            array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }

                        if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                            $innerConcesionario = true;
                            array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION["usuario"], "op" => "eq"));
                        }

                        if ($_SESSION['PaisCond'] == "S") {
                            array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                        }

                        if ($_SESSION['Global'] == "N") {
                            array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                        }

                        $innerProducto = true;

                        array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                        $filtro = array("rules" => $rules, "groupOp" => "AND");
                        $json = json_encode($filtro);

                        $UsuarioRetiroResumen = new UsuarioRetiroResumen();

                        $cuentas = $UsuarioRetiroResumen->getUsuarioRetiroResumenCustom("SUM(usuario_retiro_resumen.cantidad) cantidad,SUM(usuario_retiro_resumen.valor) valor,DATE_FORMAT(usuario_retiro_resumen.fecha_crea,'%Y-%m-%d') fecha_crea", "usuario_retiro_resumen.fecha_crea", "desc", $SkeepRows, $MaxRows, $json, true, "DATE_FORMAT(usuario_retiro_resumen.fecha_crea,'%Y-%m-%d'),usuario.moneda", $innerProducto, $innerConcesionario);

                        $cuentas = json_decode($cuentas);

                        $valor_convertidoretiros = 0;
                        $totalretiros = 0;
                        foreach ($cuentas->data as $key => $value) {

                            $array = [];


                            $array["Punto"] = "Cuentas - Giros - " . $value->{"usuario.moneda"};

                            $array["Fecha"] = $value->{".fecha_crea"};
                            $array["Moneda"] = $value->{"usuario.moneda"};
                            $array["CountryId"] = 'Perú';
                            $array["CountryIcon"] = strtolower('pe');
                            $array["Agent"] = "Cuentas Bancarias y Giros - " . $value->{"usuario.moneda"};
                            $array["CantidadTickets"] = 0;
                            $array["ValorEntradasEfectivo"] = 0;
                            $array["ValorEntradasBonoTC"] = 0;
                            $array["ValorEntradasRecargas"] = 0;

                            $array["ValorEntradasTraslados"] = 0;
                            $array["ValorSalidasEfectivo"] = 0;
                            $array["ValorSalidasTraslados"] = 0;
                            $array["ValorSalidasNotasRetiro"] = $value->{".valor"};
                            $array["Saldo"] = $array["ValorEntradasEfectivo"] + $array["ValorEntradasBonoTC"] + $array["ValorEntradasRecargas"] + $array["ValorEntradasTraslados"] - $array["ValorSalidasEfectivo"] - $array["ValorSalidasTraslados"] - $array["ValorSalidasNotasRetiro"];
                            $array["MMoneda"] = 0;


                            array_push($final, $array);


                        }


                    } else {

                    }
                }


                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $transacciones->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = [];

            }

            break;


        /**
        * Financial/GetInformeGerencial
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetInformeGerencial":


            $PuntoVenta = new PuntoVenta();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->dateTo;

            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));

            $FromDateLocal = $params->dateFrom;

            $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));


            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;


            if ($_REQUEST["TypeUser"] == 2) {
                $TypeUser = 2;
            } else {
                if ($_REQUEST["TypeUser"] == 1) {
                    $TypeUser = 1;
                } else {
                    $TypeUser = '';

                }
            }
            $TypeBet = ($_REQUEST["TypeBet"] == 2) ? 2 : 1;
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            $seguir = true;

            if ($_REQUEST["dateFrom"] == "" || $_REQUEST["dateTo"] == "") {
                $seguir = false;

            }

            if ($FromDateLocal == "") {
                $seguir = false;


                $FromDateLocal = date("Y-m-d", strtotime(time() . $timezone . ' hour '));

            }
            if ($ToDateLocal == "") {
                $seguir = false;

                $ToDateLocal = date("Y-m-d", strtotime(time() . ' +1 day' . $timezone . ' hour '));


            }

            if ($seguir) {
                $rules = [];

                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

                if ($PaymentSystemId != "") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                }

                if ($CashDeskId != "") {
                    array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
                }
                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($AmountFrom != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                }
                if ($AmountTo != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                }

                if ($CurrencyId != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                }
                if ($ExternalId != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                }
                if ($Id != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    $Pais = $CountrySelect;

                }

                $grouping = "";
                $select = "";
                if ($IsDetails) {

                } else {
                    $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 5;
                }

                $json = json_encode($filtro);

                if ($_SESSION['PaisCond'] == "S") {
                    $Pais = $_SESSION['pais_id'];
                }

                if ($_SESSION['Global'] == "N") {
                    $Mandante = $_SESSION['mandante'];
                }

                $transacciones = $PuntoVenta->getInformeGerencial($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, $TypeBet, $Pais, $Mandante, $TypeUser);


                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];

                    $array["Pais"] = quitar_tildes($value->{"x.pais_nom"});
                    $array["CountryIcon"] = strtolower($value->{"x.pais_iso"});

                    if ($TypeBet == 2) {
                        $array["Fecha"] = $value->{"x.fecha_cierre"};

                    } else {
                        $array["Fecha"] = $value->{"x.fecha_crea"};

                    }
                    $array["Moneda"] = $value->{"x.moneda"};
                    $array["CantidadTickets"] = $value->{"x.cant_tickets"};
                    $array["Stake"] = $value->{"x.valor_apostado"};
                    $array["StakePromedio"] = $value->{"x.valor_ticket_prom"};
                    $array["Payout"] = $value->{"x.valor_premios"};
                    $array["UsersRegistered"] = $value->{"pl3.registros"};
                    $array["FirstDeposits"] = $value->{"pl4.primerdepositos"};

                    $array["Bonos"] = ($value->{"pl2.bonos"} == "") ? 0 : $value->{"pl2.bonos"};
                    $array["BonosCasino"] = ($value->{"pl4.bonoscasino"} == "") ? 0 : $value->{"pl4.bonoscasino"};
                    $array["Ggr"] = $array["Stake"] - $array["Payout"] - $array["Bonos"];
                    $array["GgrPorc"] = ($array["Ggr"] / $array["Stake"]) * 100;


                    array_push($final, $array);
                }

                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $transacciones->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = [];

            }

            break;


        /**
        * Financial/GetUsuarioOnlineResumido
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetUsuarioOnlineResumido":


            $PuntoVenta = new PuntoVenta();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->dateTo;

            $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));

            $FromDateLocal = $params->dateFrom;

            $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));


            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;


            $TypeBet = ($_REQUEST["TypeBet"] == 2) ? 2 : 1;
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            $seguir = true;

            if ($_REQUEST["dateFrom"] == "" || $_REQUEST["dateTo"] == "") {
                $seguir = false;

            }

            if ($FromDateLocal == "") {
                $seguir = false;


                $FromDateLocal = date("Y-m-d 00:00:00", strtotime(time() . $timezone . ' hour '));

            }
            if ($ToDateLocal == "") {
                $seguir = false;

                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(time() . ' +0 day' . $timezone . ' hour '));


            }

            if ($seguir) {
                $rules = [];

                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

                if ($PaymentSystemId != "") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                }

                if ($CashDeskId != "") {
                    array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
                }
                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($AmountFrom != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                }
                if ($AmountTo != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                }

                if ($CurrencyId != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                }
                if ($ExternalId != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                }
                if ($Id != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                }

                if ($CountrySelect != "" && $CountrySelect != "0") {
                    $Pais = $CountrySelect;

                }

                $grouping = "";
                $select = "";
                if ($IsDetails) {

                } else {
                    $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 5;
                }

                $json = json_encode($filtro);

                if ($_SESSION['PaisCond'] == "S") {
                    $Pais = $_SESSION['pais_id'];
                }

                if ($_SESSION['Global'] == "N") {
                    $Mandante = $_SESSION['mandante'];
                }

                $transacciones = $PuntoVenta->getUsuarioResumen($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, $TypeBet, $Pais, $Mandante);


                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];

                    $array["Pais"] = quitar_tildes($value->{"x.pais_nom"});

                    $array["Fecha"] = $value->{"x.fecha"};
                    $array["Moneda"] = $value->{"x.moneda"};
                    $array["CantidadTickets"] = $value->{"x.cant_tickets"};
                    $array["CantidadTicketsCasino"] = $value->{"x.cant_tickets_casino"};
                    $array["CantidadTicketsCasinoVivo"] = $value->{"x.cant_tickets_casinovivo"};
                    $array["TotalTickets"] = $array["CantidadTickets"] + $array["CantidadTicketsCasino"] + $array["CantidadTicketsCasinoVivo"];
                    $array["Stake"] = $value->{"x.valor_apostado"};
                    $array["StakeCasino"] = $value->{"x.valor_apostado_casino"};
                    $array["StakeLiveCasino"] = $value->{"x.valor_apostado_casinovivo"};
                    $array["TotalStake"] = $array["StakeLiveCasino"] + $array["StakeCasino"] + $array["Stake"];
                    $array["StakePromedio"] = $value->{"x.valor_ticket_prom"};
                    $array["Payout"] = $value->{"x.valor_premios"};
                    $array["PayoutCasino"] = $value->{"x.valor_premios_casino"};
                    $array["PayoutLiveCasino"] = $value->{"x.valor_premios_casinovivo"};
                    $array["TotalPayout"] = $array["Payout"] + $array["PayoutCasino"] + $array["PayoutLiveCasino"];
                    $array["Paid"] = $value->{"x.valor_pagado"};
                    $array["WithdrawPending"] = $value->{"x.nota_retiro_pend"};
                    $array["ValTicketOpen"] = $value->{"x.valor_tickets_abiertos"};
                    $array["Deposits"] = $value->{"x.valor_recargas"};
                    $array["AmountWinnings"] = $value->{"x.disp_retiro"};
                    $array["AmountDeposits"] = $value->{"x.saldo_recarga"};

                    $array["Bonos"] = ($value->{"pl2.bonos"} == "") ? 0 : $value->{"pl2.bonos"};
                    $array["Ggr"] = $array["Stake"] - $array["Payout"] - $array["Bonos"];
                    $array["GgrPorc"] = ($array["Ggr"] / $array["Stake"]) * 100;


                    array_push($final, $array);
                }

                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $transacciones->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = [];

            }

            break;

        /**
        * Agent/GetInformeGerencial
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Agents/GetInformeGerencial":


            $PuntoVenta = new PuntoVenta();

            $seguir = true;

            if ($_SESSION["win_perfil2"] == "PUNTOVENTA" || $_SESSION["win_perfil2"] == "CAJERO") {
                $seguir = false;
            }

            if ($seguir) {


                $ToDateLocal = $params->dateTo;

                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . ' +1 day' . $timezone . ' hour '));

                $FromDateLocal = $params->dateFrom;

                $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));


                $PaymentSystemId = $params->PaymentSystemId;
                $CashDeskId = $params->CashDeskId;
                $ClientId = $params->ClientId;
                $AmountFrom = $params->AmountFrom;
                $AmountTo = $params->AmountTo;
                $CurrencyId = $params->CurrencyId;
                $ExternalId = $params->ExternalId;
                $Id = $params->Id;
                $IsDetails = ($params->IsDetails == true) ? true : false;

                $FromId = $_REQUEST["FromId"];
                $TypeBet = ($_REQUEST["TypeBet"] == 2) ? 2 : 1;

                $MaxRows = $_REQUEST["count"];
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

                if ($FromDateLocal == "") {


                    $FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));

                }
                if ($ToDateLocal == "") {

                    $ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));


                }

                $rules = [];

                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                //array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

                if ($PaymentSystemId != "") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                }

                if ($CashDeskId != "") {
                    array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
                }
                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($AmountFrom != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                }
                if ($AmountTo != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                }

                if ($CurrencyId != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                }
                if ($ExternalId != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                }
                if ($Id != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                }

                if ($_SESSION['PaisCond'] == "S") {
                    $Pais = $_SESSION['pais_id'];
                }
                if ($_SESSION['Global'] == "N") {
                    $Mandante = $_SESSION['mandante'];
                }

                $ConcesionarioId = "";

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    $ConcesionarioId = $_SESSION['usuario'];

                }

                $grouping = "";
                $select = "";
                if ($IsDetails) {

                } else {
                    $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 5;
                }

                $json = json_encode($filtro);


                $transacciones = $PuntoVenta->getInformeGerencialByUser($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping, $FromDateLocal, $ToDateLocal, $FromId, '', $TypeBet, $ConcesionarioId, $Pais, $Mandante);


                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];

                    $array["Pais"] = quitar_tildes($value->{"x.pais_nom"});

                    $array["Afiliator"] = "Afiliador" . $value->{"afiliador.usuario_id"};
                    $array["User"] = "Usuario" . $value->{"x.usuario_id"};
                    $array["Date"] = $value->{"x.fecha_crea"};
                    $array["Moneda"] = $value->{"x.moneda"};
                    $array["CantidadTickets"] = $value->{"x.cant_tickets"};
                    $array["Stake"] = $value->{"x.valor_apostado"};
                    $array["StakePromedio"] = $value->{"x.valor_ticket_prom"};
                    $array["Payout"] = $value->{"x.valor_premios"};

                    $array["Bonos"] = ($value->{"pl2.bonos"} == "") ? 0 : $value->{"pl2.bonos"};
                    $array["Ggr"] = $array["Stake"] - $array["Payout"] - $array["Bonos"];
                    $array["GgrPorc"] = ($array["Ggr"] / $array["Stake"]) * 100;


                    array_push($final, $array);
                }

                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = $SkeepRows;
                $response["total_count"] = $transacciones->count[0]->{".count"};
                $response["data"] = $final;
            } else {
                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * Financial/GetComissions
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetComissions":

            $UsuarioComision = new UsuarioComision();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToCreatedDateLocal;

            if ($_REQUEST["dateTo"] != "") {
                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
            }


            $FromDateLocal = $params->FromCreatedDateLocal;


            if ($_REQUEST["dateFrom"] != "") {
                $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }

            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;

            //Fijamos para obtener siempre detalles
            $IsDetails = true;

            $FromId = $_REQUEST["FromId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $Ip = $_REQUEST["Ip"];
            $IsDetails = $_REQUEST["IsDetails"];
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($seguir) {


                $rules = [];

                if ($FromDateLocal != "") {
                    //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                    array_push($rules, array("field" => "usuario_comision.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                }
                if ($ToDateLocal != "") {
                    //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                    array_push($rules, array("field" => "usuario_comision.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                }


                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_comision.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($AmountFrom != "") {
                    array_push($rules, array("field" => "usuario_comision.comision", "data" => "$AmountFrom", "op" => "ge"));
                }
                if ($AmountTo != "") {
                    array_push($rules, array("field" => "usuario_comision.comision", "data" => "$AmountTo", "op" => "le"));
                }

                if ($CurrencyId != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                }

                if ($CountrySelect != '') {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $CountrySelect, "op" => "eq"));
                }


                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }

                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                if ($FromId != "") {

                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario_comision.usuario_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_comision.usuario_id", "data" => "$FromId", "op" => "eq"));
                    }
                    //array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$FromIdGetBetHistory", "op" => "eq"));
                }


                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario_comision.usuarioref_id", "data" => "$PlayerId", "op" => "eq"));
                }


                $grouping = "";
                $select = "";
                if ($IsDetails == 1) {
                    $MaxRows = 10000;
                    $grouping = " DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d'),usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d') fecha_crea,SUM(usuario_recarga.valor) valoru,usuario.moneda,SUM(transaccion_producto.valor) valor,producto.descripcion,proveedor.descripcion ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));
                    array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "A", "op" => "eq"));

                } else {
                    $select = " usuario_comision.*,clasificador.descripcion ,usuarioref.moneda";
                    $grouping = "usuario_comision.usucomision_id";

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 5;
                }

                $json = json_encode($filtro);

                $transacciones = $UsuarioComision->getUsuarioComisionCustom($select, "usuario_comision.usucomision_id", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);

                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];

                    $array["Id"] = $value->{"usuario_comision.usucomision_id"};
                    $array["UserId"] = $value->{"usuario_comision.usuario_id"};
                    $array["ClientId"] = $value->{"usuario_comision.usuarioref_id"};
                    $array["UserName"] = $value->{"usuario_comision.usuarioref_id"};
                    $array["CreatedLocal"] = $value->{"usuario_comision.fecha_crea"};
                    $array["ModifiedLocal"] = $value->{"usuario_comision.fecha_crea"};

                    if ($IsDetails == 1) {
                        $array["Amount"] = $value->{".valoru"};
                        $array["CreatedLocal"] = $value->{".fecha_crea"};
                        $array["ExternalId"] = "";

                    } else {
                        $array["AmountBase"] = $value->{"usuario_comision.valor"};
                        $array["Amount"] = $value->{"usuario_comision.comision"};

                    }
                    $array["TypeName"] = $value->{"clasificador.descripcion"};

                    $array["CurrencyId"] = $value->{"usuarioref.moneda"};
                    $array["CashDeskId"] = $value->{"usuario_comision.usuario_id"};
                    $array["State"] = $value->{"usuario_comision.estado"};
                    $array["ExternalId"] = $value->{"usuario_comision.externo_id"};

                    array_push($final, $array);
                }

                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);

                if ($IsDetails == 1) {
                    $response["pos"] = 0;
                    $response["data"] = $final;

                } else {
                    $response["pos"] = $SkeepRows;
                    $response["total_count"] = $transacciones->count[0]->{".count"};
                    $response["data"] = $final;

                }


            } else {
                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Commisions/ApproveComission
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Commisions/ApproveComission":

            $Id = $params->Id;

            $UsucomisionResumen = new UsucomisionResumen($Id);
            if ($UsucomisionResumen->getEstado() == "A") {
                $UsucomisionResumen->setEstado('P');
                $UsucomisionResumen->setUsucambioId($_SESSION['usuario2']);

                $UsucomisionResumenMySqlDAO = new UsucomisionResumenMySqlDAO();
                $UsucomisionResumenMySqlDAO->update($UsucomisionResumen);

                $UsucomisionResumenMySqlDAO->getTransaction()->commit();

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;


        /**
        * Commisions/PayCommisions
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Commisions/PayCommisions":

            $Id = $params->Id;

            $UsucomisionResumen = new UsucomisionResumen($Id);
            if ($UsucomisionResumen->getEstado() == "P") {

                $valorPagado = $UsucomisionResumen->getComision();
                $UsucomisionResumen->setEstado('I');
                $UsucomisionResumen->setValorPagado($valorPagado);

                $UsucomisionResumenMySqlDAO = new UsucomisionResumenMySqlDAO();
                $UsucomisionResumenMySqlDAO->update($UsucomisionResumen);

                $Usuario = new Usuario($UsucomisionResumen->getUsuarioId());
                $Usuario->creditosAfiliacion = $Usuario->creditosAfiliacion + $UsucomisionResumen->getValorPagado();

                $UsuarioMySqlDAO = new UsuarioMySqlDAO($UsucomisionResumenMySqlDAO->getTransaction());
                $UsuarioMySqlDAO->update($Usuario);

                $UsucomisionResumenMySqlDAO->getTransaction()->commit();


                $pdf = '<table style="width:430px;height: 355px;/* border:1px solid black; */"><tbody>
<tr><td align="center" valign="top"><font style="text-align:center;font-size:20px;font-weight:bold;">SOPORTE</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Soporte No.:&nbsp;&nbsp;' . $Id . '</font></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:16px;font-weight:normal;">Fecha:&nbsp;&nbsp;' . date("Y-m-d H:i:s") . '</font></td></tr>
<tr><td align="center" valign="top"><div style="height:1px;">&nbsp;</div></td></tr>
<tr><td align="center" valign="top"><font style="padding-left:5px;text-align:left;font-size:18px;font-weight:bold;">Valor:&nbsp;&nbsp;' . $UsucomisionResumen->getValorPagado() . '</font></td></tr>
</tbody></table>';


                require_once "mdpdf/mpdf.php";
                $mpdf = new mPDF('c', array(80, 150));

                $mpdf->mirrorMargins = 1; // Use different Odd/Even headers and footers and mirror margins (1 or 0)

                $mpdf->SetDisplayMode('fullpage', 'two');

// LOAD a stylesheet
//$stylesheet = file_get_contents('mdpdf/stylemdpdf.css');
//$mpdf->WriteHTML($stylesheet, 1); // The parameter 1 tells that this is css/style only and no body/html/text

                $mpdf->WriteHTML($pdf);

                $mpdf->Output(__DIR__ . "mpdf.pdf", "F");

                $path = __DIR__ . 'mpdf.pdf';

                $type = pathinfo($path, PATHINFO_EXTENSION);
                $data = file_get_contents($path);
                $base64 = 'data:application/' . $type . ';base64,' . base64_encode($data);

                $encoded_html = base64_encode($pdf);

                $response["Pdf"] = base64_encode($data);

            }
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;

        /**
        * Financial/GetComissionsResume
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetComissionsResume":

            $UsucomisionResumen = new UsucomisionResumen();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToCreatedDateLocal;

            if ($_REQUEST["dateTo"] != "") {
                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
            }


            $FromDateLocal = $params->FromCreatedDateLocal;


            if ($_REQUEST["dateFrom"] != "") {
                $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }

            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;

            //Fijamos para obtener siempre detalles
            $IsDetails = true;

            $FromId = $_REQUEST["FromId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $Ip = $_REQUEST["Ip"];
            $IsDetails = $_REQUEST["IsDetails"];
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';
            $Type = $_REQUEST["Type"];


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($seguir) {


                $rules = [];

                if ($FromDateLocal != "") {
                    //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                    array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                }
                if ($ToDateLocal != "") {
                    //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                    array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                }


                if ($ClientId != "") {
                    array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($AmountFrom != "") {
                    array_push($rules, array("field" => "usucomision_resumen.comision", "data" => "$AmountFrom", "op" => "ge"));
                }
                if ($AmountTo != "") {
                    array_push($rules, array("field" => "usucomision_resumen.comision", "data" => "$AmountTo", "op" => "le"));
                }

                if ($CurrencyId != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                }

                if ($CountrySelect != '') {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $CountrySelect, "op" => "eq"));
                }


                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }

                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                if ($FromId != "") {

                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => "$FromId", "op" => "eq"));
                    }
                    //array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$FromIdGetBetHistory", "op" => "eq"));
                }


                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usucomision_resumen.usuarioref_id", "data" => "$PlayerId", "op" => "eq"));
                }


                $grouping = "";
                $select = "";
                if ($IsDetails == 1) {
                    $MaxRows = 10000;
                    $grouping = " DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d'),usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d') fecha_crea,SUM(usuario_recarga.valor) valoru,usuario.moneda,SUM(transaccion_producto.valor) valor,producto.descripcion,proveedor.descripcion ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));
                    array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "A", "op" => "eq"));

                } else {
                    $select = "usucomision_resumen.estado, usucomision_resumen.usuario_id,usucomision_resumen.usuarioref_id,DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m') fecha,SUM(usucomision_resumen.valor) valor,SUM(usucomision_resumen.comision) comision,SUM(usucomision_resumen.valor_pagado) valor_pagado,clasificador.*,usuarioref.moneda ";
                    $grouping = "usucomision_resumen.tipo,DATE_FORMAT(usucomision_resumen.fecha_crea,'%Y-%m'),usucomision_resumen.usuarioref_id,usucomision_resumen.usuario_id";
                    $select = "usucomision_resumen.usucomresumen_id,usucomision_resumen.estado, usucomision_resumen.usuario_id,usucomision_resumen.usuarioref_id,usucomision_resumen.fecha_crea,usucomision_resumen.valor valor,usucomision_resumen.comision comision,usucomision_resumen.valor_pagado valor_pagado,clasificador.*,usuarioref.moneda ";
                    $grouping = "usucomision_resumen.usucomresumen_id";


                    if ($Type == "1") {
                        $select = " usucomision_resumen.*,clasificador.*,usuarioref.moneda ";
                        $grouping = "usucomision_resumen.usucomresumen_id";

                    }
                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 5;
                }

                $json = json_encode($filtro);

                $transacciones = $UsucomisionResumen->getUsucomisionResumenCustom($select, "usucomision_resumen.usucomresumen_id", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);

                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];

                    if ($Type == "1") {
                        $array["Id"] = $value->{"usucomision_resumen.usucomresumen_id"};
                        $array["UserId"] = $value->{"usucomision_resumen.usuario_id"};
                        $array["ClientId"] = $value->{"usucomision_resumen.usuarioref_id"};
                        $array["UserName"] = $value->{"usucomision_resumen.usuarioref_id"};
                        $array["CreatedLocal"] = $value->{"usucomision_resumen.fecha_crea"};
                        $array["ModifiedLocal"] = $value->{"usucomision_resumen.fecha_crea"};

                        if ($IsDetails == 1) {
                            $array["Amount"] = $value->{".valoru"};
                            $array["CreatedLocal"] = $value->{".fecha_crea"};
                            $array["ExternalId"] = "";

                        } else {
                            $array["AmountBase"] = $value->{"usucomision_resumen.valor"};
                            $array["Amount"] = $value->{"usucomision_resumen.comision"};
                            $array["AmountPaid"] = $value->{"usucomision_resumen.valor_pagado"};


                        }
                        $array["TypeName"] = $value->{"clasificador.descripcion"};

                        $array["CurrencyId"] = $value->{"usuarioref.moneda"};
                        $array["CashDeskId"] = $value->{"usucomision_resumen.usuario_id"};
                        $array["State"] = $value->{"usucomision_resumen.estado"};

                    } else {
                        $array["Id"] = $value->{'usucomision_resumen.usucomresumen_id'};
                        $array["UserId"] = $value->{"usucomision_resumen.usuario_id"};
                        $array["ClientId"] = $value->{"usucomision_resumen.usuario_id"};
                        $array["ClientRef"] = $value->{"usucomision_resumen.usuarioref_id"};
                        $array["UserName"] = $value->{"usucomision_resumen.usuarioref_id"};
                        $array["CreatedLocal"] = $value->{"usucomision_resumen.fecha_crea"};
                        $array["ModifiedLocal"] = $value->{"usucomision_resumen.fecha_modif"};

                        $array["AmountBase"] = $value->{"usucomision_resumen.valor"};
                        $array["Amount"] = $value->{"usucomision_resumen.comision"};
                        $array["AmountPaid"] = $value->{"usucomision_resumen.valor_pagado"};


                        $array["TypeName"] = $value->{"clasificador.descripcion"};

                        $array["CurrencyId"] = $value->{"usuarioref.moneda"};
                        $array["CashDeskId"] = $value->{"usucomision_resumen.usuario_id"};
                        $array["State"] = $value->{"usucomision_resumen.estado"};

                    }


                    array_push($final, $array);
                }

                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);

                if ($IsDetails == 1) {
                    $response["pos"] = 0;
                    $response["data"] = $final;

                } else {
                    $response["pos"] = $SkeepRows;
                    $response["total_count"] = $transacciones->count[0]->{".count"};
                    $response["data"] = $final;

                }


            } else {
                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;


        /**
        * Financial/GetDepositsWithdrawalsWithPaging2
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetDepositsWithdrawalsWithPaging2":


            $UsuarioRecarga = new UsuarioRecarga();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToCreatedDateLocal;

            if ($_REQUEST["dateTo"] != "") {
                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
            }


            $FromDateLocal = $params->FromCreatedDateLocal;


            if ($_REQUEST["dateFrom"] != "") {
                $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }

            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;

            //Fijamos para obtener siempre detalles
            $IsDetails = true;

            $FromId = $_REQUEST["FromId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $Ip = $_REQUEST["Ip"];
            $IsDetails = $_REQUEST["IsDetails"];
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';
            $PaymentSystemId = $_REQUEST["PaymentSystemId"];
            $ProviderId = $_REQUEST["ProviderId"];

            $BetShopId = $_REQUEST["BetShopId"];


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($seguir) {


                $rules = [];

                if ($FromDateLocal != "") {
                    //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                    array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                }
                if ($ToDateLocal != "") {
                    //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                    array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                }


                if ($PaymentSystemId != "") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                }

                if ($CashDeskId != "") {
                    array_push($rules, array("field" => "punto_venta.usuario_id", "data" => "$CashDeskId", "op" => "eq"));
                }

                if ($BetShopId != "") {
                    array_push($rules, array("field" => "usuario_recarga.puntoventa_id", "data" => "$BetShopId", "op" => "eq"));
                }
                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($AmountFrom != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                }
                if ($AmountTo != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                }

                if ($CurrencyId != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                }
                if ($ExternalId != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                }
                if ($Id != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                }
                if ($CountrySelect != '') {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $CountrySelect, "op" => "eq"));
                }

                if ($ProviderId != '') {
                    array_push($rules, array("field" => "producto.proveedor_id", "data" => "$ProviderId", "op" => "eq"));
                }



                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }

                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                if ($FromId != "") {

                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => "$FromId", "op" => "eq"));
                    }
                    //array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$FromIdGetBetHistory", "op" => "eq"));
                }


                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$PlayerId", "op" => "eq"));
                }

                if ($Ip != "") {
                    array_push($rules, array("field" => "usuario_recarga.dir_ip", "data" => "$Ip", "op" => "cn"));

                }

                $grouping = "";
                $select = "";
                if ($IsDetails == 1) {
                    $MaxRows = 10000;
                    $grouping = " DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d'),usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "DATE_FORMAT(usuario_recarga.fecha_crea,'%Y-%m-%d') fecha_crea,SUM(usuario_recarga.valor) valoru,usuario.moneda,SUM(transaccion_producto.valor) valor,producto.descripcion,proveedor.descripcion ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));
                    array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "A", "op" => "eq"));

                } else {
                    $select = " usuario_punto.login,usuario_punto.nombre,transaccion_producto.*,producto.*,proveedor.*,usuario.moneda,usuario_recarga.* ";

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 5;
                }

                $json = json_encode($filtro);

                $transacciones = $UsuarioRecarga->getUsuarioRecargasCustom($select, "usuario_recarga.recarga_id", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);

                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];
                    if ($IsDetails == 1) {
                        $totalm = $totalm + $value->{".valoru"};


                    } else {
                        $totalm = $totalm + $value->{"transaccion_producto.valor"};

                    }
                    if ($value->{"producto.descripcion"} == "") {
                        $array["Provider"] = "Punto Venta";

                        $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                        $array["ClientId"] = $value->{"usuario_recarga.usuario_id"};
                        $array["UserName"] = $value->{"usuario_punto.login"};
                        $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                        $array["ModifiedLocal"] = $value->{"usuario_recarga.fecha_crea"};

                        if ($IsDetails == 1) {
                            $array["Amount"] = $value->{".valoru"};
                            $array["CreatedLocal"] = $value->{".fecha_crea"};
                            $array["ExternalId"] = "";

                        } else {
                            $array["Amount"] = $value->{"usuario_recarga.valor"};


                        }
                        $array["PaymentSystemName"] = "Efectivo - P.V." . $value->{"usuario_punto.nombre"};
                        $array["TypeName"] = "Payment";

                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                        $array["State"] = $value->{"usuario_recarga.estado"};
                        $array["Note"] = "T";
                        $array["ExternalId"] = "";

                    } else {
                        $array["Provider"] = $value->{"proveedor.descripcion"};

                        $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                        $array["ClientId"] = $value->{"transaccion_producto.usuario_id"};
                        $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                        $array["ModifiedLocal"] = $value->{"transaccion_producto.fecha_modif"};

                        if ($IsDetails == 1) {
                            $array["Amount"] = $value->{".valoru"};
                            $array["ExternalId"] = "";
                            $array["CreatedLocal"] = $value->{".fecha_crea"};

                        } else {

                            $array["Amount"] = $value->{"transaccion_producto.valor"};
                            $array["ExternalId"] = $value->{"transaccion_producto.externo_id"};


                        }

                        $array["PaymentSystemName"] = $value->{"producto.descripcion"};
                        $array["TypeName"] = "Payment";

                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                        $array["Ip"] = $value->{"usuario_recarga.dir_ip"};
                        $array["State"] = $value->{"transaccion_producto.estado_producto"};
                        $array["Note"] = "";
                    }
                    array_push($final, $array);
                }

                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);

                if ($IsDetails == 1) {
                    $response["pos"] = 0;
                    $response["data"] = $final;

                } else {
                    $response["pos"] = $SkeepRows;
                    $response["total_count"] = $transacciones->count[0]->{".count"};
                    $response["data"] = $final;

                }


            } else {
                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        case "Financial/ActionDepositUser":

            $Id = $params->Id;
            $State = $params->State;

            if ($State == "1") {
                $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


                $UsuarioRecarga = new UsuarioRecarga($Id);


                if ($UsuarioRecarga->getMediopagoId() == 0 || $UsuarioRecarga->getMediopagoId() == "") {

                    if ($UsuarioRecarga->getEstado() == "A") {

                        $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                        $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();

                        $valor = $UsuarioRecarga->getValor();

                        $puntoventa_id = $UsuarioRecarga->getPuntoventaId();
                        $Usuario = new Usuario($UsuarioRecarga->getUsuarioId());

                        $UsuarioRecarga->setEstado('I');
                        $UsuarioRecargaMySqlDAO->update($UsuarioRecarga);

                        $FlujoCaja = new FlujoCaja();
                        $FlujoCaja->setFechaCrea(date('Y-m-d'));
                        $FlujoCaja->setHoraCrea(date('H:i'));
                        $FlujoCaja->setUsucreaId($UsuarioRecarga->getPuntoventaId());
                        $FlujoCaja->setTipomovId('S');
                        $FlujoCaja->setValor($valor);
                        $FlujoCaja->setRecargaId($UsuarioRecarga->getRecargaId());
                        $FlujoCaja->setMandante($UsuarioRecarga->getMandante());

                        if ($FlujoCaja->getFormapago1Id() == "") {
                            $FlujoCaja->setFormapago1Id(0);
                        }

                        if ($FlujoCaja->getFormapago2Id() == "") {
                            $FlujoCaja->setFormapago2Id(0);
                        }

                        if ($FlujoCaja->getValorForma1() == "") {
                            $FlujoCaja->setValorForma1(0);
                        }

                        if ($FlujoCaja->getValorForma2() == "") {
                            $FlujoCaja->setValorForma2(0);
                        }

                        if ($FlujoCaja->getCuentaId() == "") {
                            $FlujoCaja->setCuentaId(0);
                        }

                        if ($FlujoCaja->getPorcenIva() == "") {
                            $FlujoCaja->setPorcenIva(0);
                        }

                        if ($FlujoCaja->getValorIva() == "") {
                            $FlujoCaja->setValorIva(0);
                        }
                        $FlujoCaja->setDevolucion('S');

                        $FlujoCajaMySqlDAO = new FlujoCajaMySqlDAO($Transaction);
                        $FlujoCajaMySqlDAO->insert($FlujoCaja);


                        $PuntoVenta = new PuntoVenta("", $puntoventa_id);

                        $PuntoVenta->setBalanceCupoRecarga($valor);


                        $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                        $PuntoVentaMySqlDAO->update($PuntoVenta);


                        $SaldoUsuonlineAjuste = new SaldoUsuonlineAjuste();

                        $SaldoUsuonlineAjuste->setTipoId('S');
                        $SaldoUsuonlineAjuste->setUsuarioId($UsuarioRecarga->getUsuarioId());
                        $SaldoUsuonlineAjuste->setValor($valor);
                        $SaldoUsuonlineAjuste->setFechaCrea(date('Y-m-d H:i:s'));
                        $SaldoUsuonlineAjuste->setUsucreaId($UsuarioMandante->getUsuarioMandante());
                        $SaldoUsuonlineAjuste->setSaldoAnt($Usuario->getBalance());
                        $SaldoUsuonlineAjuste->setObserv("Reversion recarga " . $UsuarioRecarga->getRecargaId());
                        if ($SaldoUsuonlineAjuste->getMotivoId() == "") {
                            $SaldoUsuonlineAjuste->setMotivoId(0);
                        }
                        $dir_ip = explode(",", $_SERVER["HTTP_X_FORWARDED_FOR"])[0];

                        $SaldoUsuonlineAjuste->setDirIp($dir_ip);
                        $SaldoUsuonlineAjuste->setMandante($UsuarioRecarga->getMandante());


                        $SaldoUsuonlineAjusteMysql = new SaldoUsuonlineAjusteMySqlDAO($Transaction);

                        $SaldoUsuonlineAjusteMysql->insert($SaldoUsuonlineAjuste);


                        $Usuario->debit($valor, $Transaction);

                        $Transaction->commit();

                        $response["HasError"] = false;
                        $response["AlertType"] = "success";
                        $response["AlertMessage"] = "";
                        $response["ModelErrors"] = [];


                    }
                }


            }

            break;

        case "Financial/DepositRequests":

            $Id = $params->Id;
            $State = $params->State;

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);


            $TransaccionProducto = new TransaccionProducto($Id);
            $Producto = new Producto ($TransaccionProducto->getProductoId());
            $Proveedor = new Proveedor($Producto->getProveedorId());

            if ($Proveedor->getTipo() == "PAYMENT") {
                switch ($State) {
                    case "0":
                        // Aprobar Deposito

                        $comentario = "Aprobado manualmente por " . $UsuarioMandante->getUsuarioMandante();

                        if ($TransaccionProducto->getEstadoProducto() == "E" || $TransaccionProducto->getEstadoProducto() == "R" || ($TransaccionProducto->getEstadoProducto() == "A" && ($TransaccionProducto->getFinalId() == "" || $TransaccionProducto->getFinalId() == "0"))) {
                            $respuesta = $TransaccionProducto->setAprobada($TransaccionProducto->transproductoId, "M", "A", $comentario, "{}", "");
                        }

                        break;

                    case "1":
                        // Rechazar Deposito


                        $comentario = "Rechazado manualmente por " . $UsuarioMandante->getUsuarioMandante();

                        if ($TransaccionProducto->getEstadoProducto() == "E" || $TransaccionProducto->getEstadoProducto() == "A") {
                            $respuesta = $TransaccionProducto->setRechazada($TransaccionProducto->transproductoId, "M", "A", $comentario, "{}", "");
                        }


                        break;
                }
            }


            break;

        /**
        * Financial/GetDepositRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetDepositRequests":


            $TransaccionProducto = new TransaccionProducto();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToCreatedDateLocal;

            if ($_REQUEST["dateTo"] != "") {
                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"]) . $timezone . ' hour '));
            }


            $FromDateLocal = $params->FromCreatedDateLocal;


            if ($_REQUEST["dateFrom"] != "") {
                $FromDateLocal = date("Y-m-d 00:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"]) . $timezone . ' hour '));
            }

            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;

            //Fijamos para obtener siempre detalles
            $IsDetails = true;

            $FromId = $_REQUEST["FromId"];
            $PlayerId = $_REQUEST["PlayerId"];
            $Ip = $_REQUEST["Ip"];
            $IsDetails = $_REQUEST["IsDetails"];
            $CountrySelect = (is_numeric($_REQUEST["CountrySelect"])) ? $_REQUEST["CountrySelect"] : '';
            $PaymentSystemId = $_REQUEST["PaymentSystemId"];


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $seguir = true;

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($seguir) {


                $rules = [];

                if ($FromDateLocal != "") {
                    //$FromDateLocal = date("Y-m-d H:00:00", strtotime(time() . $timezone . ' hour '));
                    array_push($rules, array("field" => "transaccion_producto.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                }
                if ($ToDateLocal != "") {
                    //$ToDateLocal = date("Y-m-d H:00:00", strtotime(time() . ' +1 day' . $timezone . ' hour '));
                    array_push($rules, array("field" => "transaccion_producto.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                }


                if ($PaymentSystemId != "") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
                }

                if ($CashDeskId != "") {
                    array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
                }
                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($AmountFrom != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
                }
                if ($AmountTo != "") {
                    array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
                }

                if ($CurrencyId != "") {
                    array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
                }
                if ($ExternalId != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
                }
                if ($Id != "") {
                    array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
                }
                if ($CountrySelect != '') {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $CountrySelect, "op" => "eq"));
                }


                if ($_SESSION["win_perfil2"] == "CONCESIONARIO") {
                    array_push($rules, array("field" => "concesionario.usupadre_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION["win_perfil2"] == "CONCESIONARIO2") {
                    array_push($rules, array("field" => "concesionario.usupadre2_id", "data" => $_SESSION['usuario'], "op" => "eq"));

                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }

                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                if ($FromId != "") {

                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "usuario_punto.usuario_id", "data" => "$FromId", "op" => "eq"));
                    }
                    //array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$FromIdGetBetHistory", "op" => "eq"));
                }


                if ($PlayerId != "") {
                    array_push($rules, array("field" => "usuario.usuario_id", "data" => "$PlayerId", "op" => "eq"));
                }

                if ($Ip != "") {
                    array_push($rules, array("field" => "usuario_recarga.dir_ip", "data" => "$Ip", "op" => "cn"));

                }

                $grouping = "";
                $select = "";
                // $select = " usuario_punto.login,usuario_punto.nombre,transaccion_producto.*,producto.*,proveedor.*,usuario.moneda,usuario_recarga.* ";


                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 5;
                }

                $json = json_encode($filtro);

                $transacciones = $TransaccionProducto->getTransaccionesCustom(" transaccion_producto.*,producto.*,proveedor.*,usuario.moneda,usuario.nombre ", "transaccion_producto.transproducto_id", "asc", $SkeepRows, $MaxRows, $json, true);


                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];
                    if ($IsDetails == 1) {
                        $totalm = $totalm + $value->{".valoru"};


                    } else {
                        $totalm = $totalm + $value->{"transaccion_producto.valor"};

                    }
                    if ($value->{"producto.descripcion"} == "") {
                        $array["Provider"] = "Punto Venta";

                        $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                        $array["ClientId"] = $value->{"usuario_recarga.usuario_id"};
                        $array["UserName"] = $value->{"usuario_punto.login"};
                        $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                        $array["ModifiedLocal"] = $value->{"usuario_recarga.fecha_crea"};

                        if ($IsDetails == 1) {
                            $array["Amount"] = $value->{".valoru"};
                            $array["CreatedLocal"] = $value->{".fecha_crea"};
                            $array["ExternalId"] = "";

                        } else {
                            $array["Amount"] = $value->{"usuario_recarga.valor"};


                        }
                        $array["PaymentSystemName"] = "Efectivo - P.V." . $value->{"usuario_punto.nombre"};
                        $array["TypeName"] = "Payment";

                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                        $array["State"] = "A";
                        $array["Note"] = "T";
                        $array["ExternalId"] = "";

                    } else {
                        $array["Provider"] = $value->{"proveedor.descripcion"};

                        $array["Id"] = $value->{"transaccion_producto.transproducto_id"};
                        $array["ClientId"] = $value->{"transaccion_producto.usuario_id"};
                        $array["CreatedLocal"] = $value->{"transaccion_producto.fecha_crea"};
                        $array["ModifiedLocal"] = $value->{"transaccion_producto.fecha_modif"};

                        if ($IsDetails == 1) {
                            $array["Amount"] = $value->{".valoru"};
                            $array["ExternalId"] = "";
                            $array["CreatedLocal"] = $value->{".fecha_crea"};

                        } else {

                            $array["Amount"] = $value->{"transaccion_producto.valor"};
                            $array["ExternalId"] = $value->{"transaccion_producto.externo_id"};


                        }

                        $array["PaymentSystemName"] = $value->{"producto.descripcion"};
                        $array["TypeName"] = "Payment";

                        $array["CurrencyId"] = $value->{"usuario.moneda"};
                        $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                        $array["Ip"] = $value->{"usuario_recarga.dir_ip"};
                        $array["State"] = $value->{"transaccion_producto.estado_producto"};
                        $array["Note"] = "";
                    }
                    array_push($final, $array);
                }

                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);

                if ($IsDetails == 1) {
                    $response["pos"] = 0;
                    $response["data"] = $final;

                } else {
                    $response["pos"] = $SkeepRows;
                    $response["total_count"] = $transacciones->count[0]->{".count"};
                    $response["data"] = $final;

                }


            } else {
                // $response["HasError"] = false;
                // $response["AlertType"] = "success";
                // $response["AlertMessage"] = "";
                // $response["ModelErrors"] = [];

                // $response["Data"] = array("Documents" => array("Objects" => $final,"Count" => $transacciones->count[0]->{".count"}),"TotalAmount" => $totalm,);


                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Financial/GetDepositsDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetDepositsDetail":
            $Id = $_REQUEST["id"];

            if (is_numeric($Id)) {
                $UsuarioRecarga = new UsuarioRecarga();

                $rules = [];

                array_push($rules, array("field" => "usuario_recarga.recarga_id", "data" => "$Id", "op" => "eq"));


                $IsDetails = true;

                if ($IsDetails) {

                } else {
                    $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                    $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                    //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 100;
                }

                $json = json_encode($filtro);

                $transacciones = $UsuarioRecarga->getUsuarioRecargasCustom($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

                $transacciones = json_decode($transacciones);

                $final = [];
                $totalm = 0;
                $cont = 0;
                foreach ($transacciones->data as $key => $value) {
                    $array = [];
                    if ($IsDetails) {
                        $totalm = $totalm + $value->{"transaccion_producto.valor"};

                    } else {
                        $totalm = $totalm + $value->{".valoru"};
                    }
                    if ($value->{"producto.descripcion"} == "") {

                        $array["Date"] = $value->{"usuario_recarga.fecha_crea"};
                        $array["UserId"] = $value->{"usuario_recarga.usuario_id"};
                        $array["TransactionId"] = $value->{"usuario_recarga.recarga_id"};
                        $array["Description"] = "Recarga por medio Efectivo";

                        array_push($final, $array);
                        $cont++;
                    } else {

                        $TransprodLogMySqlDAO = new TransprodLogMySqlDAO();

                        $objects = $TransprodLogMySqlDAO->queryByTransproductoId($value->{"transaccion_producto.transproducto_id"});

                        foreach ($objects as $object) {
                            $array = [];

                            $array["Date"] = $object->fechaCrea;
                            $array["UserId"] = $object->usucreaId;
                            $array["TransactionId"] = $object->transprodlogId;
                            $array["Description"] = $object->comentario;

                            array_push($final, $array);
                            $cont++;

                        }

                    }
                }


                $response["pos"] = 0;
                $response["total_count"] = $cont;
                $response["data"] = $final;


            }

            break;

        /**
        * Financial/GetDepositsRequestsDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetDepositsRequestsDetail":
            $Id = $_REQUEST["id"];

            if (is_numeric($Id)) {


                $final = [];
                $totalm = 0;
                $cont = 0;
                $TransprodLogMySqlDAO = new TransprodLogMySqlDAO();

                $objects = $TransprodLogMySqlDAO->queryByTransproductoId($Id);

                foreach ($objects as $object) {
                    $array = [];

                    $array["Date"] = $object->fechaCrea;
                    $array["UserId"] = $object->usucreaId;
                    $array["TransactionId"] = $object->transprodlogId;
                    $array["Description"] = $object->comentario;

                    array_push($final, $array);
                    $cont++;

                }


                $response["pos"] = 0;
                $response["total_count"] = $cont;
                $response["data"] = $final;


            }

            break;


        /**
        * Financial/GetDepositsWithdrawalsWithPaging
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetDepositsWithdrawalsWithPaging":


            $UsuarioRecarga = new UsuarioRecarga();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToCreatedDateLocal;

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToCreatedDateLocal) . ' +1 day' . $timezone . ' hour '));

            $FromDateLocal = $params->FromCreatedDateLocal;

            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromCreatedDateLocal) . $timezone . ' hour '));


            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            if ($PaymentSystemId != "") {
                array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
            }

            if ($CashDeskId != "") {
                array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
            }
            if ($ClientId != "") {
                array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
            }

            if ($AmountFrom != "") {
                array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
            }
            if ($AmountTo != "") {
                array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
            }

            if ($CurrencyId != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
            }
            if ($ExternalId != "") {
                array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
            }
            if ($Id != "") {
                array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
            }

            if ($Ip != "") {
                array_push($rules, array("field" => "cuenta_cobro.dir_ip", "data" => "$Ip", "op" => "cn"));

            }


            $grouping = "";
            $select = "";
            if ($IsDetails) {

            } else {
                $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";
                //array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "'A',''", "op" => "in"));

            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $json = json_encode($filtro);

            $transacciones = $UsuarioRecarga->getUsuarioRecargasCustom($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $transacciones = json_decode($transacciones);

            $final = [];
            $totalm = 0;
            foreach ($transacciones->data as $key => $value) {
                $array = [];
                if ($IsDetails) {
                    $totalm = $totalm + $value->{"transaccion_producto.valor"};

                } else {
                    $totalm = $totalm + $value->{".valoru"};
                }
                if ($value->{"producto.descripcion"} == "") {

                    $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                    $array["ClientId"] = $value->{"usuario_recarga.usuario_id"};
                    $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                    $array["ModifiedLocal"] = $value->{"usuario_recarga.fecha_crea"};

                    if ($IsDetails) {
                        $array["Amount"] = $value->{"usuario_recarga.valor"};

                    } else {
                        $array["Amount"] = $value->{".valoru"};

                    }
                    $array["PaymentSystemName"] = "Efectivo";
                    $array["TypeName"] = "Payment";

                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                    $array["State"] = "A";
                    $array["Note"] = "";
                    $array["ExternalId"] = "";

                } else {

                    $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                    $array["ClientId"] = $value->{"transaccion_producto.usuario_id"};
                    $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                    $array["ModifiedLocal"] = $value->{"transaccion_producto.fecha_modif"};

                    if ($IsDetails) {
                        $array["Amount"] = $value->{"transaccion_producto.valor"};
                        $array["ExternalId"] = $value->{"transaccion_producto.externo_id"};

                    } else {
                        $array["Amount"] = $value->{".valor"};
                        $array["ExternalId"] = "";

                    }

                    $array["PaymentSystemName"] = $value->{"producto.descripcion"};
                    $array["TypeName"] = "Payment";

                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                    $array["State"] = $value->{"transaccion_producto.estado_producto"};
                    $array["Note"] = "";
                }
                array_push($final, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array("Documents" => array("Objects" => $final,
                "Count" => $transacciones->count[0]->{".count"}),
                "TotalAmount" => $totalm,
            );

            break;

        /**
        * Report/getDeposits
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/getDeposits":

            $UsuarioRecarga = new UsuarioRecarga();

            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToCreatedDateLocal;

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->EndDateLocal) . ' +1 day' . $timezone . ' hour '));

            $FromDateLocal = $params->FromCreatedDateLocal;

            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->StartDateLocal) . $timezone . ' hour '));


            $PaymentSystemId = $params->PaymentSystemId;
            $CashDeskId = $params->CashDeskId;
            $ClientId = $params->ClientId;
            $AmountFrom = $params->AmountFrom;
            $AmountTo = $params->AmountTo;
            $CurrencyId = $params->CurrencyId;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $IsDetails = ($params->IsDetails == true) ? true : false;


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            $rules = [];

            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
            array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            if ($PaymentSystemId != "") {
                array_push($rules, array("field" => "producto.producto_id", "data" => "$PaymentSystemId", "op" => "eq"));
            }

            if ($CashDeskId != "") {
                array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$CashDeskId", "op" => "eq"));
            }
            if ($ClientId != "") {
                array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
            }

            if ($AmountFrom != "") {
                array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountFrom", "op" => "ge"));
            }
            if ($AmountTo != "") {
                array_push($rules, array("field" => "usuario_recarga.valor", "data" => "$AmountTo", "op" => "le"));
            }

            if ($CurrencyId != "") {
                array_push($rules, array("field" => "usuario.moneda", "data" => "$CurrencyId", "op" => "eq"));
            }
            if ($ExternalId != "") {
                array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
            }
            if ($Id != "") {
                array_push($rules, array("field" => "transaccion_producto.externo_id", "data" => "$Id", "op" => "eq"));
            }

            $grouping = "";
            $select = "";
            if ($IsDetails) {

            } else {
                $grouping = " usuario_recarga.puntoventa_id,producto.producto_id ";
                $select = "SUM(usuario_recarga.valor) valoru,SUM(transaccion_producto.valor) valor, ";

            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $json = json_encode($filtro);

            $transacciones = $UsuarioRecarga->getUsuarioRecargasCustom($select . " transaccion_producto.*,producto.*,usuario.moneda,usuario_recarga.* ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, $grouping);

            $transacciones = json_decode($transacciones);

            $final = [];
            $totalm = 0;
            foreach ($transacciones->data as $key => $value) {
                $array = [];
                if ($IsDetails) {
                    $totalm = $totalm + $value->{"transaccion_producto.valor"};

                } else {
                    $totalm = $totalm + $value->{".valoru"};
                }
                if ($value->{"producto.descripcion"} == "") {

                    $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                    $array["ClientId"] = $value->{"usuario_recarga.usuario_id"};
                    $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                    $array["ModifiedLocal"] = $value->{"usuario_recarga.fecha_crea"};

                    if ($IsDetails) {
                        $array["Stake"] = $value->{"usuario_recarga.valor"};

                    } else {
                        $array["Stake"] = $value->{".valoru"};

                    }
                    $array["PaymentSystemName"] = "Efectivo";
                    $array["TypeName"] = "Payment";

                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                    $array["CashDesk"] = $value->{"punto_venta.descripcion"};
                    $array["State"] = "A";
                    $array["Note"] = "";
                    $array["ExternalId"] = "";

                } else {

                    $array["Id"] = $value->{"usuario_recarga.recarga_id"};
                    $array["ClientId"] = $value->{"transaccion_producto.usuario_id"};
                    $array["CreatedLocal"] = $value->{"usuario_recarga.fecha_crea"};
                    $array["ModifiedLocal"] = $value->{"transaccion_producto.fecha_modif"};

                    if ($IsDetails) {
                        $array["Stake"] = $value->{"transaccion_producto.valor"};

                    } else {
                        $array["Stake"] = $value->{".valor"};

                    }

                    $array["PaymentSystemName"] = $value->{"producto.descripcion"};
                    $array["TypeName"] = "Payment";

                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["CashDeskId"] = $value->{"usuario_recarga.puntoventa_id"};
                    $array["State"] = $value->{"transaccion_producto.estado_producto"};
                    $array["Note"] = "";
                    $array["ExternalId"] = $value->{"transaccion_producto.externo_id"};
                }
                array_push($final, $array);
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array("Objects" => $final,
                "Count" => $transacciones->count[0]->{".count"},
                "TotalAmount" => $totalm,
            );


            break;

        /**
        * Report/getWithdrawals
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Report/getWithdrawals":

            $CuentaCobro = new CuentaCobro();

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $BetShopId = $params->BetShopId;
            $ClientId = $params->ClientId;
            $PaymentTypeId = $params->PaymentTypeId;
            $State = $params->State;
            $WithDrawTypeId = $params->WithDrawTypeId;
            $ByAllowDate = $params->ByAllowDate;

            $ByAllowDate = (bool)($ByAllowDate);

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }

            $rules = [];
            //array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));

            if (!$ByAllowDate || $ByAllowDate == "false") {
                array_push($rules, array("field" => "cuenta_cobro.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "cuenta_cobro.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            } else {
                array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$ToDateLocal", "op" => "le"));

            }

            if ($BetShopId != "") {
                array_push($rules, array("field" => "cuenta_cobro.puntoventa_id", "data" => "$BetShopId", "op" => "eq"));
            }

            if ($ClientId != "") {
                array_push($rules, array("field" => "cuenta_cobro.usuario_id", "data" => "$ClientId", "op" => "eq"));
            }


            if ($State != "") {
                array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "$State", "op" => "eq"));
            }

            if ($WithDrawTypeId == "1") {
                array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "0", "op" => "eq"));

            } elseif ($WithDrawTypeId == "2") {

                array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "0", "op" => "ne"));

            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $cuentas = $CuentaCobro->getCuentasCobroCustom("cuenta_cobro.cuenta_id,cuenta_cobro.usuario_id,cuenta_cobro.usucambio_id,cuenta_cobro.observacion,cuenta_cobro.mensaje_usuario,usuario.login,cuenta_cobro.fecha_crea,cuenta_cobro.valor,cuenta_cobro.mediopago_id,usuario.moneda,cuenta_cobro.puntoventa_id,punto_venta.descripcion puntoventa,cuenta_cobro.mediopago_id, banco.descripcion banco_nombre,cuenta_cobro.estado,usuario_banco.cuenta", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "cuenta_cobro.cuenta_id");

            $cuentas = json_decode($cuentas);


            $final = array();
            foreach ($cuentas->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"cuenta_cobro.cuenta_id"};
                $array["ClientId"] = $value->{"cuenta_cobro.usuario_id"};
                $array["Email"] = $value->{"usuario.login"};
                $array["ClientName"] = $value->{"usuario.login"};
                $array["CreatedDate"] = $value->{"cuenta_cobro.fecha_crea"};

                $array["Stake"] = $value->{"cuenta_cobro.valor"};

                $nombreMetodoPago = 'Efectivo';
                $idMetodoPago = 0;

                $estado = 'Pendiente de Pago';

                if ($value->{"cuenta_cobro.estado"} == "I") {
                    $estado = 'Pagado';
                } elseif ($value->{"cuenta_cobro.estado"} == "R") {
                    $estado = 'Rechazado';
                }

                if ($value->{"banco.banco_nombre"} != '') {
                    $nombreMetodoPago = $value->{"banco.banco_nombre"} . " - " . $value->{"usuario_banco.cuenta"};
                }

                if ($value->{"cuenta_cobro.metodopago_id"} != '') {
                    $idMetodoPago = $value->{"cuenta_cobro.metodopago_id"};
                }

                $array["PaymentSystemName"] = $nombreMetodoPago;
                $array["PaymentSystemId"] = $idMetodoPago;
                $array["TypeName"] = "Payment";

                $array["ToCurrencyId"] = $value->{"cuenta_cobro.moneda"};
                $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["Cashdesk"] = $value->{"punto_venta.descripcion"};
                $array["BetshopId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["BetShopName"] = $value->{"punto_venta.puntoventa"};
                $array["Cashdesk"] = $value->{"punto_venta.puntoventa"};
                $array["RejectUserName"] = $value->{"cuenta_cobro.usurechaza_id"};
                $array["AllowUserName"] = $value->{"cuenta_cobro.usucambio_id"};
                $array["PaidUserName"] = $value->{"cuenta_cobro.usupago_id"};
                $array["Notes"] = $value->{"cuenta_cobro.mensaje_usuario"};
                $array["RejectReason"] = $value->{"cuenta_cobro.observacion"};
                $array["StateName"] = $estado;
                $array["State"] = $value->{"cuenta_cobro.estado"};
                $array["StateId"] = $value->{"cuenta_cobro.estado"};
                $array["Note"] = "";
                $array["ExternalId"] = "";
                $array["PaymentDocumentId"] = "";


                $array2["PaymentDocumentData"] = $array;
                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array("Objects" => $final);

            break;


        /**
        * Client/GetClientDepositRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientDepositRequests":


            $params = file_get_contents('php://input');
            $params = json_decode($params);

            $ToDateLocal = $params->ToDateLocal;
            $FromDateLocal = $params->FromDateLocal;
            $TypeId = $params->TypeId;

            $ClientId = $params->ClientId;
            $IsCashDeskPaid = $params->IsCashDeskPaid;


            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $ToDateLocal) . " 00:00:00"));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $FromDateLocal) . " 23:59:59"));


            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if (!$IsCashDeskPaid) {

                $TransaccionProducto = new TransaccionProducto();


                $rules = [];

                //  array_push($rules, array("field" => "transaccion_producto.estado", "data" => "I", "op" => "eq"));
                //  array_push($rules, array("field" => "transaccion_producto.estado_producto", "data" => "A", "op" => "eq"));
                array_push($rules, array("field" => "transaccion_producto.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "transaccion_producto.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

                if ($TypeId != "") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$TypeId", "op" => "eq"));
                }

                if ($ClientId != "") {
                    array_push($rules, array("field" => "transaccion_producto.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }

                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 1000000000;
                }

                $json = json_encode($filtro);

                $transacciones = $TransaccionProducto->getTransaccionesCustom(" transaccion_producto.*,producto.*,usuario.moneda,usuario.nombre ", "transaccion_producto.transproducto_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $transacciones = json_decode($transacciones);

                $final = [];

                foreach ($transacciones->data as $key => $value) {

                    $array = [];

                    $array["PaymentSystemId"] = $value->{"producto.proveedor_id"};
                    $array["RequestTimeLocal"] = $value->{"transaccion_producto.fecha_crea"};
                    $array["ClientId"] = $value->{"transaccion_producto.usuario_id"};
                    $array["ClientName"] = $value->{"usuario.nombre"};
                    $array["Amount"] = $value->{"transaccion_producto.valor"};
                    $array["Id"] = $value->{"transaccion_producto.transproducto_id"};;
                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["State"] = $value->{"transaccion_producto.estado_producto"};
                    $array["FromCashDesk"] = false;
                    if ($array["State"] == "A") {
                        $array["State"] = 3;
                    } elseif ($array["State"] == "E") {
                        $array["State"] = 2;

                    } elseif ($array["State"] == "R") {
                        $array["State"] = -2;
                    }
                    $array["IsBonus"] = false;


                    array_push($final, $array);
                }


            } else {

                $rules = [];

                array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "usuario_recarga.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));
                array_push($rules, array("field" => "usuario_recarga.puntoventa_id", "data" => "0", "op" => "ne"));


                if ($ClientId != "") {
                    array_push($rules, array("field" => "usuario_recarga.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 1000000000;
                }

                $json = json_encode($filtro);

                $UsuarioRecarga = new UsuarioRecarga();

                $transacciones = $UsuarioRecarga->getUsuarioRecargasCustom(" usuario_recarga.*,usuario.moneda,usuario.nombre ", "usuario_recarga.recarga_id", "asc", $SkeepRows, $MaxRows, $json, true, "usuario_recarga.recarga_id");

                $transacciones = json_decode($transacciones);

                $final = [];

                foreach ($transacciones->data as $key => $value) {

                    $array = [];

                    $array["PaymentSystemId"] = $value->{"usuario_recarga.puntoventa_id"};
                    $array["RequestTimeLocal"] = $value->{"usuario_recarga.fecha_crea"};
                    $array["ClientId"] = $value->{"usuario_recarga.usuario_id"};
                    $array["ClientName"] = $value->{"usuario.nombre"};
                    $array["Amount"] = $value->{"usuario_recarga.valor"};
                    $array["Id"] = $value->{"usuario_recarga.recarga_id"};;
                    $array["CurrencyId"] = $value->{"usuario.moneda"};
                    $array["State"] = $value->{"usuario_recarga.estado"};
                    $array["FromCashDesk"] = true;
                    if ($array["State"] == "A") {
                        $array["State"] = 3;
                    } elseif ($array["State"] == "E") {
                        $array["State"] = 2;

                    } elseif ($array["State"] == "R") {
                        $array["State"] = -2;
                    }
                    $array["IsBonus"] = false;


                    array_push($final, $array);
                }


            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;


            break;


        /**
        * Client/GetClientKoreanDepositRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientKoreanDepositRequests":
            $final = [];

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;
            break;

        /**
        * Client/SaveClientBankAccount
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/SaveClientBankAccount":

            $Id = intval($params->Id);
            $State = $params->State;


            if (($State == "A" || $State == "I") && $Id > 0) {

                $UsuarioBanco = new UsuarioBanco($Id);

                if ($UsuarioBanco->getEstado() != $State) {
                    $UsuarioBanco->setEstado($State);

                    $UsuarioBancoMySqlDAO = new UsuarioBancoMySqlDAO();

                    $UsuarioBancoMySqlDAO->update($UsuarioBanco);
                    $UsuarioBancoMySqlDAO->getTransaction()->commit();

                    $response["HasError"] = false;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = '';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];

                } else {
                    $response["HasError"] = false;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = '';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];

                }

            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'Error.';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            }


            break;

        /**
        * Client/GetClientBankAccounts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientBankAccounts":

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = 0;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $ClientId = $params->Id;

            $ClientId = $_REQUEST["PlayerId"];
            $AcceptanceType = ($_REQUEST["AcceptanceType"] == 'I' || $_REQUEST["AcceptanceType"] == 'A') ? $_REQUEST["AcceptanceType"] : "";

            $rules = [];
            //array_push($rules, array("field" => "usuario_banco.estado", "data" => "A", "op" => "eq"));
            array_push($rules, array("field" => "usuario_banco.usuario_id", "data" => "$ClientId", "op" => "eq"));

            if ($AcceptanceType != "") {
                array_push($rules, array("field" => "usuario_banco.estado", "data" => "$AcceptanceType", "op" => "eq"));
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $UsuarioBanco = new UsuarioBanco();

            $bancos = $UsuarioBanco->getUsuarioBancosCustom("usuario_banco.*,banco.*", "usuario_banco.usubanco_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $bancos = json_decode($bancos);


            $final = array();
            foreach ($bancos->data as $key => $value) {
                $array = array();

                $array["Id"] = $value->{"usuario_banco.usubanco_id"};
                $array["Bank"] = $value->{"banco.descripcion"};
                $array["BankAccountNumber"] = $value->{"usuario_banco.cuenta"};
                $array["BankCodeInterbank"] = $value->{"usuario_banco.codigo"};
                $array["BankType"] = $value->{"usuario_banco.tipo_cuenta"};
                if ($array["BankType"] == "Ahorros") {
                    $array["BankType"] = 1;
                } else {
                    $array["BankType"] = 2;
                }

                $array["State"] = $value->{"usuario_banco.estado"};

                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = $final;
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $bancos->count[0]->{".count"};
            $response["data"] = $final;


            break;

        /**
        * Client/UpdateStateDocument
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/UpdateStateDocument":

            $Id = $params->Id;

            $DocumentoUsuario = new DocumentoUsuario("", "", $Id);

            $state = "A";

            if ($DocumentoUsuario->getEstadoAprobacion() == "A") {
                $state = "I";
            }

            $DocumentoUsuario->setEstadoAprobacion($state);

            $DocumentoUsuarioMySqlDAO = new DocumentoUsuarioMySqlDAO();
            $DocumentoUsuarioMySqlDAO->update($DocumentoUsuario);
            $DocumentoUsuarioMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;

        /**
        * Client/GetClientDocuments
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientDocuments":


            $MaxRows = 10;
            $OrderedItem = 0;
            $SkeepRows = 0;
            $ClientId = $params->ClientId;

            $rules = [];
            array_push($rules, array("field" => "documento_usuario.usuario_id", "data" => "$ClientId", "op" => "eq"));

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);

            $DocumentoUsuario = new DocumentoUsuario();

            $bancos = $DocumentoUsuario->getDocumentosUsuarioCustom("usuario.login,documento_usuario.*,descarga.*", "documento_usuario.docusuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

            $bancos = json_decode($bancos);


            $final = array();
            foreach ($bancos->data as $key => $value) {
                $array = array();

                $array["Id"] = $value->{"documento_usuario.docusuario_id"};
                $array["CreatedDate"] = $value->{"documento_usuario.fecha_crea"};
                $array["UserName"] = $value->{"usuario.login"};
                $array["Document"] = $value->{"descarga.descripcion"};
                $array["Version"] = $value->{"descarga.version"};
                $array["StateA"] = ($value->{"documento_usuario.estado_aprobacion"} == "A") ? true : false;
                $array["State"] = $value->{"documento_usuario.estado_aprobacion"};


                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;

            break;

        /**
        * Client/GetClientWithdrawalRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientWithdrawalRequests":


            $CuentaCobro = new CuentaCobro();


            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $BetShopId = $params->BetShopId;
            $ClientId = $params->ClientId;
            $PaymentTypeId = $params->PaymentTypeId;
            $State = $params->State;
            $WithDrawTypeId = $params->WithDrawTypeId;
            $ByAllowDate = $params->ByAllowDate;

            $ByAllowDate = (bool)($ByAllowDate);

            $ToDateLocal = "";
            $FromDateLocal = "";
            if ($_REQUEST["dateFrom"] != "") {
                $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $_REQUEST["dateFrom"])));

            }

            if ($_REQUEST["dateTo"] != "") {
                $ToDateLocal = date("Y-m-d 23:59:59", strtotime(str_replace(" - ", " ", $_REQUEST["dateTo"])));

            }

            $PlayerId = $_REQUEST["PlayerId"];
            $Ip = $_REQUEST["Ip"];
            $FromId = $_REQUEST["FromId"];
            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];
            $State = ($_REQUEST["State"] != 'A' && $_REQUEST["State"] != 'I' && $_REQUEST["State"] != 'E' && $_REQUEST["State"] != 'R' && $_REQUEST["State"] != 'P') ? '' : $_REQUEST["State"];
            $PaymentMethods = $_REQUEST["PaymentMethods"];
            $PaymentMethodBankAccounts = $_REQUEST["PaymentMethodBankAccounts"];
            $TypeTotal = $_REQUEST["Type"];

            $seguir = true;

            if ($SkeepRows == "") {
                $seguir = false;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $seguir = false;
            }

            if ($seguir) {


                $rules = [];
                //array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));

                if ($FromDateLocal != "") {
                    if (!$ByAllowDate || $ByAllowDate == "false") {
                        array_push($rules, array("field" => "cuenta_cobro.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                        array_push($rules, array("field" => "cuenta_cobro.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

                    } else {
                        array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$FromDateLocal ", "op" => "ge"));
                        array_push($rules, array("field" => "cuenta_cobro.fecha_pago", "data" => "$ToDateLocal", "op" => "le"));

                    }
                }


                if ($BetShopId != "") {
                    array_push($rules, array("field" => "cuenta_cobro.puntoventa_id", "data" => "$BetShopId", "op" => "eq"));
                }

                if ($ClientId != "") {
                    array_push($rules, array("field" => "cuenta_cobro.usuario_id", "data" => "$ClientId", "op" => "eq"));
                }


                if ($State != "") {
                    array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "$State", "op" => "eq"));
                }

                if ($WithDrawTypeId == "1") {
                    array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "0", "op" => "eq"));

                } elseif ($WithDrawTypeId == "2") {

                    array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "0", "op" => "ne"));

                }

                if ($PlayerId != "") {
                    array_push($rules, array("field" => "cuenta_cobro.usuario_id", "data" => "$PlayerId", "op" => "eq"));

                }

                if ($Ip != "") {
                    array_push($rules, array("field" => "cuenta_cobro.dir_ip", "data" => "$Ip", "op" => "cn"));

                }

                if ($PaymentMethods != "" && $PaymentMethods != 0) {
                    switch ($PaymentMethods) {
                        case 1:
                            array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "0", "op" => "eq"));

                            break;

                        case 2:

                            array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "0", "op" => "ne"));
                            array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "47", "op" => "ne"));

                            break;

                        case 3:

                            array_push($rules, array("field" => "cuenta_cobro.mediopago_id", "data" => "47", "op" => "eq"));

                            break;
                    }
                }

                if($PaymentMethodBankAccounts == "1"){
                    array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));
                    array_push($rules, array("field" => "cuenta_cobro.puntoventa_id", "data" => "0", "op" => "eq"));
                    array_push($rules, array("field" => "cuenta_cobro.transproducto_id", "data" => "0", "op" => "eq"));

                }

                if($PaymentMethodBankAccounts == "2"){
                    array_push($rules, array("field" => "cuenta_cobro.transproducto_id", "data" => "0", "op" => "ne"));
                }


                $select="ciudad.*,departamento.*,usuario_banco.cuenta,usuario_banco.codigo,usuario_punto.login,cuenta_cobro.cuenta_id,cuenta_cobro.usuario_id,cuenta_cobro.usucambio_id,cuenta_cobro.observacion,cuenta_cobro.mensaje_usuario,usuario.login,cuenta_cobro.fecha_crea,cuenta_cobro.valor,cuenta_cobro.mediopago_id,usuario.moneda,usuario.verifcedula_ant,usuario.verifcedula_post,cuenta_cobro.puntoventa_id,punto_venta.descripcion puntoventa,cuenta_cobro.mediopago_id, banco.descripcion banco_nombre,cuenta_cobro.estado,usuario_banco.cuenta,cuenta_cobro.dir_ip,cuenta_cobro.transproducto_id";
                $grouping="cuenta_cobro.cuenta_id";

                if($TypeTotal == 1){
                    $select="SUM(cuenta_cobro.valor) valor,pais.iso,cuenta_cobro.estado";

                    $grouping = "cuenta_cobro.estado,pais.pais_id";
                }


                if ($_SESSION['PaisCond'] == "S") {
                    array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
                }
                if ($_SESSION['Global'] == "N") {
                    array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                }
                array_push($rules, array("field" => "usuario.pais_id", "data" => "1", "op" => "ne"));


                if ($FromId != "") {

                    $UsuarioPerfil = new UsuarioPerfil($FromId, "");

                    if ($UsuarioPerfil->perfilId == "PUNTOVENTA") {
                        array_push($rules, array("field" => "usuario_punto.puntoventa_id", "data" => "$FromId", "op" => "eq"));

                    } else {
                        array_push($rules, array("field" => "cuenta_cobro.puntoventa_id", "data" => "$FromId", "op" => "eq"));
                    }
                    //array_push($rules, array("field" => "punto_venta.puntoventa_id", "data" => "$FromIdGetBetHistory", "op" => "eq"));
                }


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $cuentas = $CuentaCobro->getCuentasCobroCustom($select, "cuenta_cobro.cuenta_id", "desc", $SkeepRows, $MaxRows, $json, true, $grouping);

                $cuentas = json_decode($cuentas);


                $final = array();
                foreach ($cuentas->data as $key => $value) {

                    $array = [];
                    if($TypeTotal == 0) {

                        $array["Id"] = $value->{"cuenta_cobro.cuenta_id"};
                        $array["ClientId"] = $value->{"cuenta_cobro.usuario_id"};
                        $array["ClientLogin"] = $value->{"usuario.login"};
                        $array["ClientName"] = $value->{"usuario.login"};
                        $array["RequestTime"] = $value->{"cuenta_cobro.fecha_crea"};
                        $array["CreatedLocal"] = $value->{"cuenta_cobro.fecha_crea"};
                        $array["ModifiedLocal"] = $value->{"cuenta_cobro.fecha_crea"};
                        $array["City"] = $value->{"ciudad.ciudad_nom"};
                        $array["Department"] = $value->{"departamento.depto_nom"};
                        $array["WayPay"] = "Cuenta Bancaria";
                        $array["AccountBank"] = $value->{"usuario_banco.cuenta"};
                        $array["CodeInterbank"] = $value->{"usuario_banco.codigo"};
                        $array["VerifdniPost"] = $value->{"usuario.verifcedula_ant"};
                        $array["VerifdniAnt"] = $value->{"usuario.verifcedula_post"};
                        $array["DNI"] = ($value->{"usuario.verifcedula_post"} == 'S' && $value->{"usuario.verifcedula_post"} == 'S') ? 'S' : 'N';

                        if ($value->{"cuenta_cobro.estado"} != "A") {

                            $array["PaymentMethod"] = "Punto de venta";

                            if ($value->{"cuenta_cobro.transproducto_id"} == "0" && $value->{"cuenta_cobro.mediopago_id"} != "0") {
                                $array["PaymentMethod"] = "Fisicamente";
                            }


                            if ($value->{"cuenta_cobro.transproducto_id"} != "0") {
                                $array["PaymentMethod"] = "Sistema";
                            }

                        }

                        $array["Amount"] = $value->{"cuenta_cobro.valor"};

                        $nombreMetodoPago = 'Efectivo';
                        $idMetodoPago = 0;

                        $estado = 'Pendiente de Pago';
                        $array["Action"] = "None";

                        if ($value->{"cuenta_cobro.estado"} == "I") {
                            $estado = 'Pagado';
                            //$array["Action"] = "";

                        } elseif ($value->{"cuenta_cobro.estado"} == "R") {
                            $estado = 'Rechazado';
                            //$array["Action"] = "";

                        } elseif ($value->{"cuenta_cobro.estado"} == "A") {
                            $estado = 'Activo';

                            //$array["Action"] = "";
                        } elseif ($value->{"cuenta_cobro.estado"} == "P") {
                            $estado = 'Pendiente';

                            $array["Action"] = "Aprobar";
                        } elseif ($value->{"cuenta_cobro.estado"} == "E") {
                            $estado = 'Eliminado';

                            $array["Action"] = "None";
                        }

                        if ($value->{"banco.banco_nombre"} != '') {

                            $nombreMetodoPago = $value->{"banco.banco_nombre"} . " - " . $value->{"usuario_banco.cuenta"};

                            if ($array["AccountBank"] == "") {
                                $array["AccountBank"] = "Giro Bancario";
                            }
                        }

                        $array["WayPay"] = $nombreMetodoPago;


                        if ($value->{"cuenta_cobro.metodopago_id"} != '') {
                            $idMetodoPago = $value->{"cuenta_cobro.metodopago_id"};
                        }

                        $array["PaymentSystemName"] = $nombreMetodoPago;
                        $array["PaymentSystemId"] = $idMetodoPago;
                        $array["TypeName"] = "Payment";

                        $array["CurrencyId"] = $value->{"cuenta_cobro.moneda"};
                        $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                        $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                        $array["BetshopId"] = $value->{"cuenta_cobro.puntoventa_id"};
                        $array["BetShopName"] = $value->{"usuario_punto.login"};
                        $array["BetShop"] = $value->{"usuario_punto.login"};

                        $array["RejectUserName"] = $value->{"cuenta_cobro.usurechaza_id"};
                        $array["AllowUserName"] = $value->{"cuenta_cobro.usucambio_id"};
                        $array["PaidUserName"] = $value->{"cuenta_cobro.usupago_id"};
                        $array["Notes"] = $value->{"cuenta_cobro.mensaje_usuario"};
                        $array["RejectReason"] = $value->{"cuenta_cobro.observacion"};
                        $array["StateName"] = $estado;
                        $array["State"] = $value->{"cuenta_cobro.estado"};
                        $array["StateId"] = $value->{"cuenta_cobro.estado"};
                        $array["Note"] = "";
                        $array["ExternalId"] = "";
                        $array["PaymentDocumentId"] = "";
                        $array["Ip"] = $value->{"cuenta_cobro.dir_ip"};


                        $array2["PaymentDocumentData"] = $array;

                    }else{
                        $array["Amount"] = $value->{".valor"};
                        $array["Country"] = strtolower($value->{"pais.iso"});
                        $array["State"] = $value->{"cuenta_cobro.estado"};

                    }
                    array_push($final, $array);
                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = $final;

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $cuentas->count[0]->{".count"};
                $response["data"] = $final;

            } else {

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();

                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();
            }


            break;

        /**
        * Client/GetClientWithdrawalRequestsDetail
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientWithdrawalRequestsDetail":


            $CuentaCobro = new CuentaCobro();

            $Id = $_REQUEST["id"];


            $MaxRows = 1;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = 0;
            $totalcount = 0;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }

            if ($Id != "") {


                $rules = [];
                array_push($rules, array("field" => "cuenta_cobro.cuenta_id", "data" => "$Id", "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);


                $cuentas = $CuentaCobro->getCuentasCobroCustom("cuenta_cobro.cuenta_id,cuenta_cobro.fecha_pago,cuenta_cobro.fecha_cambio,cuenta_cobro.fecha_accion,cuenta_cobro.usucambio_id,cuenta_cobro.usupago_id,cuenta_cobro.usurechaza_id,cuenta_cobro.usuario_id,cuenta_cobro.usucambio_id,cuenta_cobro.observacion,cuenta_cobro.mensaje_usuario,usuario.login,cuenta_cobro.fecha_crea,cuenta_cobro.valor,cuenta_cobro.mediopago_id,usuario.moneda,cuenta_cobro.puntoventa_id,punto_venta.descripcion puntoventa,cuenta_cobro.mediopago_id, banco.descripcion banco_nombre,cuenta_cobro.estado,usuario_banco.cuenta", "cuenta_cobro.cuenta_id", "asc", $SkeepRows, $MaxRows, $json, true, "cuenta_cobro.cuenta_id");

                $cuentas = json_decode($cuentas);

                $value = $cuentas->data[0];


                $final = array();

                $array = [];

                $array["Id"] = $value->{"cuenta_cobro.cuenta_id"};
                $array["ClientId"] = $value->{"cuenta_cobro.usuario_id"};
                $array["Date"] = $value->{"cuenta_cobro.fecha_crea"};
                $array["Type"] = "Creacion";
                $array["Amount"] = $value->{"cuenta_cobro.valor"};
                $array["Description"] = "Creacion de Solicitud de retiro";
                $array["UserModifId"] = $value->{"cuenta_cobro.usuario_id"};


                $nombreMetodoPago = 'Efectivo';
                $idMetodoPago = 0;

                $estado = 'Pendiente de Pago';
                $array["Action"] = "None";


                if ($value->{"banco.banco_nombre"} != '') {
                    $nombreMetodoPago = $value->{"banco.banco_nombre"} . " - " . $value->{"usuario_banco.cuenta"};
                }

                if ($value->{"cuenta_cobro.metodopago_id"} != '') {
                    $idMetodoPago = $value->{"cuenta_cobro.metodopago_id"};
                }

                $array["PaymentSystemName"] = $nombreMetodoPago;
                $array["PaymentSystemId"] = $idMetodoPago;
                $array["TypeName"] = "Payment";

                $array["CurrencyId"] = $value->{"cuenta_cobro.moneda"};
                $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["CashDeskId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["BetshopId"] = $value->{"cuenta_cobro.puntoventa_id"};
                $array["BetShopName"] = $value->{"punto_venta.puntoventa"};
                $array["RejectUserName"] = $value->{"cuenta_cobro.usurechaza_id"};
                $array["AllowUserName"] = $value->{"cuenta_cobro.usucambio_id"};
                $array["PaidUserName"] = $value->{"cuenta_cobro.usupago_id"};
                $array["Notes"] = $value->{"cuenta_cobro.mensaje_usuario"};
                $array["RejectReason"] = $value->{"cuenta_cobro.observacion"};
                $array["StateName"] = $estado;
                $array["State"] = $value->{"cuenta_cobro.estado"};
                $array["StateId"] = $value->{"cuenta_cobro.estado"};
                $array["Note"] = "";
                $array["ExternalId"] = "";
                $array["PaymentDocumentId"] = "";


                $array2["PaymentDocumentData"] = $array;

                array_push($final, $array);
                $totalcount++;

                if ($value->{"cuenta_cobro.puntoventa_id"} != "" && $value->{"cuenta_cobro.puntoventa_id"} != 0) {
                    $estado = 'Pagado';

                    $array["Date"] = $value->{"cuenta_cobro.fecha_modif"};
                    $array["Type"] = "Pagada";
                    $array["Amount"] = $value->{"cuenta_cobro.valor"};
                    $array["Description"] = "Paga la Solicitud de retiro";
                    $array["UserModifId"] = $value->{"cuenta_cobro.puntoventa_id"};

                    if ($array["UserModifId"] == 0) {
                        $array["UserModifId"] = $value->{"cuenta_cobro.usupago_id"};
                    }

                    array_push($final, $array);
                    $totalcount++;

                }


                if ($value->{"cuenta_cobro.usucambio_id"} != "0") {
                    $array["Date"] = $value->{"cuenta_cobro.fecha_cambio"};
                    $array["Type"] = "Aprobado";
                    $array["Amount"] = $value->{"cuenta_cobro.valor"};
                    $array["Description"] = "Aprobada la Solicitud de retiro";
                    $array["UserModifId"] = $value->{"cuenta_cobro.usucambio_id"};

                    array_push($final, $array);
                    $totalcount++;

                }

                if ($value->{"cuenta_cobro.usupago_id"} != "0") {


                    $estado = 'Pagado';


                    $array["Date"] = $value->{"cuenta_cobro.fecha_pago"};
                    $array["Type"] = "Pagada";
                    $array["Amount"] = $value->{"cuenta_cobro.valor"};
                    $array["Description"] = "Paga la Solicitud de retiro";
                    $array["UserModifId"] = $value->{"cuenta_cobro.puntoventa_id"};

                    if ($array["UserModifId"] == 0) {
                        $array["UserModifId"] = $value->{"cuenta_cobro.usupago_id"};
                    }

                    array_push($final, $array);
                    $totalcount++;

                }

                if ($value->{"cuenta_cobro.usurechaza_id"} != "0" || $value->{"cuenta_cobro.estado"} == "R") {
                    $estado = 'Rechazado';

                    $array["Date"] = $value->{"cuenta_cobro.fecha_accion"};
                    $array["Type"] = "Recahazado";
                    $array["Amount"] = $value->{"cuenta_cobro.valor"};
                    $array["Description"] = "Rechazada la Solicitud de retiro";
                    $array["UserModifId"] = $value->{"cuenta_cobro.usurechaza_id"};

                    array_push($final, $array);
                    $totalcount++;


                }


                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = $final;

                $response["pos"] = $SkeepRows;
                $response["total_count"] = $totalcount;
                $response["data"] = $final;

            } else {
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

                $response["Data"] = array();

                $response["pos"] = 0;
                $response["total_count"] = 0;
                $response["data"] = array();

            }

            break;

        /**
        * Client/GetClientLiquidationRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientLiquidationRequests":


            $UsucomisionResumen = new UsucomisionResumen();

            $ToDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->ToDateLocal) . ' +1 day'));
            $FromDateLocal = date("Y-m-d H:00:00", strtotime(str_replace(" - ", " ", $params->FromDateLocal)));
            $BetShopId = $params->BetShopId;
            $ClientId = $params->ClientId;
            $PaymentTypeId = $params->PaymentTypeId;
            $State = $params->State;
            $WithDrawTypeId = $params->WithDrawTypeId;
            $ByAllowDate = $params->ByAllowDate;

            $ByAllowDate = (bool)($ByAllowDate);

            $MaxRows = $params->MaxRows;
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = $params->SkeepRows;

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }

            $rules = [];
            //array_push($rules, array("field" => "cuenta_cobro.estado", "data" => "I", "op" => "eq"));

            if (!$ByAllowDate || $ByAllowDate == "false") {
                array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            } else {
                array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => "$FromDateLocal ", "op" => "ge"));
                array_push($rules, array("field" => "usucomision_resumen.fecha_crea", "data" => "$ToDateLocal", "op" => "le"));

            }

            if ($ClientId != "") {
                array_push($rules, array("field" => "usucomision_resumen.usuario_id", "data" => "$ClientId", "op" => "eq"));
            }


            if ($State != "") {
                array_push($rules, array("field" => "usucomision_resumen.estado", "data" => "$State", "op" => "eq"));
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $json = json_encode($filtro);


            $UsucomisionResumens = $UsucomisionResumen->getUsucomisionResumenGroupCustom(" usucomision_resumen.*,usuario.login,usuario.nombre ", "usucomision_resumen.tipo", "asc ", $SkeepRows, $MaxRows, $json, true, "usucomision_resumen.usucomresumen_id");
            $UsucomisionResumens = json_decode($UsucomisionResumens);


            $final = array();
            foreach ($UsucomisionResumens->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"usucomision_resumen.usucomresumen_id"};
                $array["ClientId"] = $value->{"usucomision_resumen.usuario_id"};
                $array["ClientLogin"] = $value->{"usuario.login"};
                $array["ClientName"] = $value->{"usuario.nombre"};
                $array["RequestTime"] = $value->{"usucomision_resumen.fecha_crea"};
                $array["CreatedLocal"] = $value->{"usucomision_resumen.fecha_crea"};
                $array["ModifiedLocal"] = $value->{"usucomision_resumen.fecha_crea"};

                $array["Amount"] = $value->{"usucomision_resumen.comision"};

                $nombreMetodoPago = '';
                $idMetodoPago = 0;

                $estado = 'Pendiente de Pago';

                if ($value->{"usucomision_resumen.estado"} == "P") {
                    $estado = 'Pagado';
                } elseif ($value->{"cuenta_cobro.estado"} == "R") {
                    $estado = 'Rechazado';
                }


                $array["PaymentSystemName"] = 'test';
                $array["PaymentSystemId"] = 'test';
                $array["TypeName"] = "";

                $array["CurrencyId"] = 'test';
                $array["CashDeskId"] = 'test';
                $array["BetshopId"] = 'test';
                $array["BetShopName"] = 'test';
                $array["RejectUserName"] = $value->{"usucomision_resumen.usurechaza_id"};
                $array["AllowUserName"] = $value->{"usucomision_resumen.usucambio_id"};
                $array["PaidUserName"] = $value->{"usucomision_resumen.usupago_id"};
                $array["Notes"] = $value->{"usucomision_resumen.mensaje_usuario"};
                $array["RejectReason"] = $value->{"usucomision_resumen.observacion"};
                $array["StateName"] = $estado;
                $array["State"] = $value->{"usucomision_resumen.estado"};
                $array["StateId"] = $value->{"usucomision_resumen.estado"};
                $array["Note"] = "";
                $array["ExternalId"] = "";
                $array["PaymentDocumentId"] = "";


                $array2["PaymentDocumentData"] = $array;
                array_push($final, $array);
            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = $final;


            break;

        /**
        * Financial/GetDocumentStates
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetDocumentStates":

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                array("NumId" => "A", "Name" => "Aprobado"),
                array("NumId" => "R", "Name" => "Rechazado"),
                array("NumId" => "E", "Name" => "Enviado"),
            );

            break;

        /**
        * Financial/GetClientRequestStates
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Financial/GetClientRequestStates":
            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response["Data"] = array(
                array("NumId" => "A", "Name" => "Pendiente"),
                array("NumId" => "R", "Name" => "Rechazado"),
                array("NumId" => "I", "Name" => "Aprobado"),
            );

            break;

        /**
        * ClientAPI/SaveClientMessages
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "ClientAPI/SaveClientMessages":
            $UsuarioMensajeSuperior = new UsuarioMensaje();
            $numerosString = "##";
            $cont = 0;
            $value = $params;

            //foreach ($params as $key => $value) {
            if (true) {

                $ClientId = $value->ClientId;
                $Message = $value->content;
                $Title = $value->subject;
                $isSMS = $value->isSms;

                try {
                    $UsuarioMandante = new UsuarioMandante("", $ClientId, '0');

                    $Usuario = new Usuario($UsuarioMandante->usuarioMandante);


                    $UsuarioMensaje = new UsuarioMensaje();
                    $UsuarioMensaje->usufromId = 0;
                    $UsuarioMensaje->usutoId = $UsuarioMandante->usumandanteId;
                    $UsuarioMensaje->isRead = 0;
                    $UsuarioMensaje->body = $Message;
                    $UsuarioMensaje->msubject = $Title;
                    $UsuarioMensaje->tipo = "MENSAJE";
                    $UsuarioMensaje->parentId = 0;
                    $UsuarioMensaje->proveedorId = 0;

                    if ($isSMS) {
                        $UsuarioMensaje->tipo = "SMS";
                        $Registro = new Registro('', $UsuarioMandante->usuarioMandante);
                        $Pais = new Pais($Usuario->paisId);

                        $numerosString = $numerosString . "," . $Pais->prefijoCelular . $Registro->celular;
                    }
                    if ($cont == 0) {
                        $UsuarioMensajeSuperior = $UsuarioMensaje;
                        $cont = $cont + 1;
                    } else {
                        $UsuarioMensaje->setExternoId($UsuarioMensajeSuperior->usumensajeId);
                    }

                    $msg = "entro5";

                    $UsuarioMensajeMySqlDAO = new UsuarioMensajeMySqlDAO();
                    $UsuarioMensajeMySqlDAO->insert($UsuarioMensaje);
                    $UsuarioMensajeMySqlDAO->getTransaction()->commit();


                    if ($isSMS) {

                    } else {

                        /*  Consultamos de nuevo el usuario Token para obtener el RequestId actual para el WebSocket  */
                        $UsuarioToken = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                        /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                        $data = $Usuario->getWSMessage($UsuarioToken->getRequestId());
                        $WebsocketUsuario = new WebsocketUsuario($UsuarioToken->getRequestId(), $data);
                        $WebsocketUsuario->sendWSMessage();

                    }


                    $msg = "entro6";

                } catch (Exception $e) {
                    $msg = $e->getMessage();

                }

            }

            if ($isSMS) {
                try {
                    $Okroute = new Okroute();

                    $numerosString = str_replace("##,", "", $numerosString);


                    #'%0a -> new line'

                    $Message = trim(preg_replace('/\s\s+/', '%0a', $Message));


                    $Okroute->sendMessageWithNumbers($numerosString, $Message, $UsuarioMensajeSuperior);
                    $UsuarioMensajeMySqlDAO = new UsuarioMensajeMySqlDAO();
                    $UsuarioMensajeMySqlDAO->update($UsuarioMensajeSuperior);
                    $UsuarioMensajeMySqlDAO->getTransaction()->commit();
                } catch (Exception $e) {
                    $msg = $e->getMessage();

                }
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;

        /**
        * Client/SaveClientMessages
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/SaveClientMessages":
            $UsuarioMensajeSuperior = new UsuarioMensaje();
            $numerosString = "##";
            $cont = 0;

            foreach ($params as $key => $value) {

                $ClientId = $value->ClientId;
                $Message = $value->Message;
                $Title = $value->Title;
                $isSMS = $value->isSms;

                try {
                    $UsuarioMandante = new UsuarioMandante("", $ClientId, '0');

                    $Usuario = new Usuario($UsuarioMandante->usuarioMandante);


                    $UsuarioMensaje = new UsuarioMensaje();
                    $UsuarioMensaje->usufromId = 0;
                    $UsuarioMensaje->usutoId = $UsuarioMandante->usumandanteId;
                    $UsuarioMensaje->isRead = 0;
                    $UsuarioMensaje->body = $Message;
                    $UsuarioMensaje->msubject = $Title;
                    $UsuarioMensaje->tipo = "MENSAJE";
                    $UsuarioMensaje->parentId = 0;
                    $UsuarioMensaje->proveedorId = 0;

                    if ($isSMS) {
                        $UsuarioMensaje->tipo = "SMS";
                        $Registro = new Registro('', $UsuarioMandante->usuarioMandante);
                        $Pais = new Pais($Usuario->paisId);

                        $numerosString = $numerosString . "," . $Pais->prefijoCelular . $Registro->celular;
                    }
                    if ($cont == 0) {
                        $UsuarioMensajeSuperior = $UsuarioMensaje;
                        $cont = $cont + 1;
                    } else {
                        $UsuarioMensaje->setExternoId($UsuarioMensajeSuperior->usumensajeId);
                    }

                    $msg = "entro5";

                    $UsuarioMensajeMySqlDAO = new UsuarioMensajeMySqlDAO();
                    $UsuarioMensajeMySqlDAO->insert($UsuarioMensaje);
                    $UsuarioMensajeMySqlDAO->getTransaction()->commit();


                    if ($isSMS) {

                    } else {

                        /*  Consultamos de nuevo el usuario Token para obtener el RequestId actual para el WebSocket  */
                        $UsuarioToken = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                        /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                        $data = $Usuario->getWSMessage($UsuarioToken->getRequestId());
                        $WebsocketUsuario = new WebsocketUsuario($UsuarioToken->getRequestId(), $data);
                        $WebsocketUsuario->sendWSMessage();

                    }


                    $msg = "entro6";

                } catch (Exception $e) {
                    $msg = $e->getMessage();

                }

            }

            if ($isSMS) {
                try {
                    $Okroute = new Okroute();

                    $numerosString = str_replace("##,", "", $numerosString);


                    #'%0a -> new line'

                    $Message = trim(preg_replace('/\s\s+/', '%0a', $Message));


                    $Okroute->sendMessageWithNumbers($numerosString, $Message, $UsuarioMensajeSuperior);
                    $UsuarioMensajeMySqlDAO = new UsuarioMensajeMySqlDAO();
                    $UsuarioMensajeMySqlDAO->update($UsuarioMensajeSuperior);
                    $UsuarioMensajeMySqlDAO->getTransaction()->commit();
                } catch (Exception $e) {
                    $msg = $e->getMessage();

                }
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;

        /**
        * Client/GetClientMessages
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientMessages":

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $mensajesRecibidos = [];


            $json2 = '{"rules" : [] ,"groupOp" : "AND"}';

            $UsuarioMensaje = new UsuarioMensaje();
            $usuarios = $UsuarioMensaje->getUsuarioMensajesCustom(" usuario_mensaje.*,usufrom.*,usuto.* ", "usuario_mensaje.usumensaje_id", "asc", $SkeepRows, $MaxRows, $json2, true);
            $usuarios = json_decode($usuarios);

            foreach ($usuarios->data as $key => $value) {

                $array = [];
                $array["Id"] = $value->{"usuario_mensaje.usumensaje_id"};
                if ($value->{"usufrom.usuario_mandante"} == "") {
                    $value->{"usufrom.usuario_mandante"} = 0;
                }
                $array["ClientIdFrom"] = $value->{"usufrom.usuario_mandante"};
                $array["ClientIdTo"] = $value->{"usuto.usuario_mandante"};
                $array["Login"] = $value->{"usuario_mensaje.usufrom_id"};
                $array["FirstName"] = $value->{"usufrom.nombres"};
                $array["LastName"] = $value->{"usufrom.apellidos"};
                if ($value->{"usuario_mensaje.is_read"} == 1) {
                    $array["State"] = 1;

                } else {
                    $array["State"] = 0;

                }
                $array["Title"] = $value->{"usuario_mensaje.msubject"};
                $array["Message"] = $value->{"usuario_mensaje.body"};

                array_push($mensajesRecibidos, $array);

            }

            $response = array();


            $response["data"] = array(
                "messages" => array()
            );

            $response["Data"] = $mensajesRecibidos;
            $response["data"] = $mensajesRecibidos;

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $usuarios->count[0]->{".count"};

            break;

        /**
        * Client/SaveClientMessage
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/SaveClientMessage":

            $ClientId = $params->ClientId;
            $Message = $params->Message;
            $Title = $params->Title;
            $ParentId = $params->ParentId;

            $clients = explode(",", $ClientId);
            foreach ($clients as $key => $ClientId) {


                if ($ClientId != "") {
                    try {
                        $usutoId = 0;
                        if ($ClientId != 0) {
                            $UsuarioMandante = new UsuarioMandante("", $ClientId, "0");
                            $msg = "entro4";

                            $UsuarioMensaje2 = new UsuarioMensaje($ParentId);
                            $usutoId = $UsuarioMandante->usumandanteId;
                        }

                        if ($ParentId == "") {
                            $ParentId = 0;
                        }
                        $UsuarioMensaje2->isRead = 0;

                        $UsuarioMensaje = new UsuarioMensaje();
                        $UsuarioMensaje->usufromId = 0;
                        $UsuarioMensaje->usutoId = $usutoId;
                        $UsuarioMensaje->isRead = 0;
                        $UsuarioMensaje->body = $Message;
                        $UsuarioMensaje->msubject = $Title;
                        $UsuarioMensaje->parentId = $ParentId;
                        $UsuarioMensaje->proveedorId = 0;
                        $UsuarioMensaje->tipo = "MENSAJE";
                        $msg = "entro5";

                        $UsuarioMensajeMySqlDAO = new UsuarioMensajeMySqlDAO();
                        $UsuarioMensajeMySqlDAO->insert($UsuarioMensaje);
                        if ($UsuarioMensaje2->usumensaje_id != null) {
                            $UsuarioMensajeMySqlDAO->update($UsuarioMensaje2);
                        }
                        $UsuarioMensajeMySqlDAO->getTransaction()->commit();

                        $Usuario = new Usuario($UsuarioMandante->usuarioMandante);

                        /*  Consultamos de nuevo el usuario Token para obtener el RequestId actual para el WebSocket  */
                        //$UsuarioToken = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                        /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                        //$data = $Usuario->getWSMessage($UsuarioToken->getRequestId());
                        //$WebsocketUsuario = new WebsocketUsuario($UsuarioToken->getRequestId(), $data);
                        //$WebsocketUsuario->sendWSMessage();

                        $msg = "entro6";

                    } catch (Exception $e) {
                        $msg = $e->getMessage();

                    }
                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = $msg . " - " . $ClientId;
                    $response["ModelErrors"] = [];

                    $response["Data"] = [];

                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "error";
                    $response["AlertMessage"] = "Datos incorrectos";
                    $response["ModelErrors"] = [];

                    $response["Data"] = [];
                }
            }
            break;


        /**
        * Client/ResetPassword
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/ResetPassword":
            $ClientId = $params->ClientId;
            $Password = $params->Password;

            $Usuario = new Usuario($ClientId);

            $Usuario->changeClave($Password);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;

        /**
        * UserManagement/ResetUserPassword
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/ResetUserPassword":
            $ClientId = $params->ClientId;
            $Password = $params->Password;

            $Usuario = new Usuario($ClientId);

            $Usuario->changeClave($Password);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;

        /**
        * ResetUserPassword
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "ResetUserPassword":
            $ClientId = $params->ClientId;
            $Password = $params->Password;

            $Usuario = new Usuario($ClientId);

            $Usuario->changeClave($Password);

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;

        /**
        * UserManagement/isNotUsedUserName
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UserManagement/isNotUsedUserName":
            $UsernameReq = $_REQUEST["userName"];
            try {


                $SkeepRows = 0;
                $OrderedItem = 1;
                $MaxRows = 5000;

                $rules = [];

                array_push($rules, array("field" => "usuario.login", "data" => $UsernameReq, "op" => "eq"));


                $filtro = array("rules" => $rules, "groupOp" => "AND");
                $json = json_encode($filtro);

                $Usuario = new Usuario();

                $usuarios = $Usuario->getUsuariosCustom("  usuario.usuario_id ", "usuario.usuario_id", "asc", $SkeepRows, $MaxRows, $json, true);

                $usuarios = json_decode($usuarios);


                if ($usuarios->count[0]->{".count"} > 0) {
                    $response["HasError"] = true;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = $msg . " - " . $ClientId;
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];

                } else {
                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = $msg . " - " . $ClientId;
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];

                }


            } catch (Exception $e) {

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            }

            break;


        /**
        * Client/PayDepositRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/PayDepositRequests":
            error_reporting(E_ALL);
            ini_set('display_errors', 'ON');

            $UsuarioMandante = new UsuarioMandante($_SESSION['usuario2']);

            foreach ($params as $param) {
                $Id = $param->Id;

                $TransaccionProducto = new TransaccionProducto($Id);

                if ($TransaccionProducto->getEstadoProducto() == "R") {
                    $comentario = "Aprobada por el usuario " . $UsuarioMandante->getUsuarioMandante;
                    $tipo_genera = "M";
                    $estado = "A";
                    $t_value = "{}";
                    $documento_id = $TransaccionProducto->transproductoId;
                    $transaccion_id = $TransaccionProducto->transproductoId;


                    $TransaccionProducto->setAprobada($transaccion_id, $tipo_genera, $estado, $comentario, $t_value, $documento_id);

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = '';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];
                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];

                }

            }


            break;

        /**
        * Client/AllowWithdrawalRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/AllowWithdrawalRequests":

            $Id = $params->Id;

            $CuentaCobro = new CuentaCobro($Id);

            if ($CuentaCobro->getEstado() == "A") {

                $CuentaCobro->setEstado('P');
                $CuentaCobro->setUsucambioId($_SESSION['usuario2']);
                //$CuentaCobro->setFechaPago(date('Y-m-d H:i:s'));

                if ($CuentaCobro->usucambioId == "" || $CuentaCobro->usucambioId == "null" || $CuentaCobro->usucambioId == null) {
                    $CuentaCobro->usucambioId = 0;
                }
                if ($CuentaCobro->usupagoId == "" || $CuentaCobro->usupagoId == "null" || $CuentaCobro->usupagoId == null) {
                    $CuentaCobro->usupagoId = 0;
                }
                if ($CuentaCobro->usurechazaId == "" || $CuentaCobro->usurechazaId == "null" || $CuentaCobro->usurechazaId == null) {
                    $CuentaCobro->usurechazaId = 0;
                }
                if ($CuentaCobro->fechaCambio == "" || $CuentaCobro->fechaCambio == "0000-00-00 00:00:00" || $CuentaCobro->fechaCambio == null) {
                    $CuentaCobro->fechaCambio = date("Y-m-d H:i:s");
                }

                if ($CuentaCobro->fechaAccion == "" || $CuentaCobro->fechaAccion == "0000-00-00 00:00:00" || $CuentaCobro->fechaAccion == null) {
                    $CuentaCobro->fechaAccion = date("Y-m-d H:i:s");
                }


                $CuentaCobroMySqlDAO = new CuentaCobroMySqlDAO();
                $CuentaCobroMySqlDAO->update($CuentaCobro);
                $CuentaCobroMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = '';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            }

            break;

        /**
        * Reference/SaveTranslationEntries
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/SaveTranslationEntries":

            $LenguajeMandanteMySqlDAO = new LenguajeMandanteMySqlDAO();
            foreach ($params as $param) {
                if ($param->TranslationId) {
                    try {
                        $LenguajeMandante = new LenguajeMandante("", $param->LanguageId, $param->TranslationId);

                        $LenguajeMandante->setTraducido($param->Text);
                        $LenguajeMandante->setUsumodifId($_SESSION['usuario2']);

                        $LenguajeMandanteMySqlDAO->update($LenguajeMandante);

                    } catch (Exception $e) {
                        if ($e->getCode() == 47) {
                            $LenguajeMandante = new LenguajeMandante();

                            $LenguajeMandante->setLenguaje($param->LanguageId);
                            $LenguajeMandante->setMandante(0);
                            $LenguajeMandante->setEstado('A');
                            $LenguajeMandante->setValor($param->TranslationId);
                            $LenguajeMandante->setTraducido($param->Text);
                            $LenguajeMandante->setUsucreaId($_SESSION['usuario2']);
                            $LenguajeMandante->setUsumodifId($_SESSION['usuario2']);

                            $LenguajeMandanteMySqlDAO->insert($LenguajeMandante);

                        } else {
                            throw $e;
                        }
                    }


                }

            }

            $LenguajeMandanteMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = '';
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            break;

        /**
        * Reference/GetTranslations
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/GetTranslations":

            $FromLangId = $params->FromLangId;

            if ($FromLangId == "") {
                $FromLangId = 'en';
            }

            if ($FromLangId != "") {

                $MaxRows = $params->MaxRows;
                $OrderedItem = $params->OrderedItem;
                $SkeepRows = $params->SkeepRows;


                $MaxRows = $_REQUEST["count"];
                $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];


                if ($SkeepRows == "") {
                    $SkeepRows = 0;
                }

                if ($OrderedItem == "") {
                    $OrderedItem = 1;
                }

                if ($MaxRows == "") {
                    $MaxRows = 10000;
                }


                $rules = [];

//                array_push($rules, array("field" => "lenguaje_mandante.lenguaje", "data" => "$FromLangId", "op" => "eq"));

                $filtro = array("rules" => $rules, "groupOp" => "AND");

                $json = json_encode($filtro);


                $LenguajeMandante = new LenguajeMandante();
                $data = $LenguajeMandante->getLenguajeMandantesFromPalabraCustom(" lenguaje_palabra.*,lenguaje_mandante.* ", "lenguaje_palabra.lengpalabra_id", "asc", $SkeepRows, $MaxRows, $json, true, $FromLangId);

                $data = json_decode($data);

                $final = array();
                foreach ($data->data as $value) {

                    $array = array();

                    $array["Id"] = $value->{'lenguaje_palabra.lengpalabra_id'};
                    $array["LangTo"] = $FromLangId;
                    $array["Text"] = $value->{'lenguaje_palabra.valor'};
                    $array["ToText"] = $value->{'lenguaje_mandante.traducido'};
                    $array["ModifiedLocal"] = $value->{'lenguaje_mandante.fecha_modif'};

                    array_push($final, $array);

                }

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = '';
                $response["ModelErrors"] = [];
                $response["Data"] = $final;
                $response["pos"] = $SkeepRows;
                $response["total_count"] = $data->count[0]->{".count"};
                $response["data"] = $final;


            }

            break;

        /**
        * Reference/GetTranslationTypes
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/GetTranslationTypes":

            print_r('{"HasError":false,"AlertType":"success","AlertMessage":"Operation has completed successfully","ModelErrors":[],"Data":[{"Id":25,"NumId":-1,"NameId":422716,"Name":"All","GroupId":"TranslationType","ParentId":null},{"Id":26,"NumId":1,"NameId":422717,"Name":"Sport","GroupId":"TranslationType","ParentId":null},{"Id":27,"NumId":2,"NameId":422718,"Name":"Regions","GroupId":"TranslationType","ParentId":null},{"Id":28,"NumId":3,"NameId":422719,"Name":"Competitions","GroupId":"TranslationType","ParentId":null},{"Id":30,"NumId":5,"NameId":422720,"Name":"MarketTypes","GroupId":"TranslationType","ParentId":null},{"Id":32,"NumId":23,"NameId":422721,"Name":"SelectionTypes","GroupId":"TranslationType","ParentId":null},{"Id":36,"NumId":24,"NameId":422722,"Name":"DocumentTypes","GroupId":"TranslationType","ParentId":null},{"Id":37,"NumId":25,"NameId":422723,"Name":"BetShopGroups","GroupId":"TranslationType","ParentId":null},{"Id":38,"NumId":19,"NameId":422724,"Name":"BetShops","GroupId":"TranslationType","ParentId":null},{"Id":39,"NumId":26,"NameId":422725,"Name":"Errors","GroupId":"TranslationType","ParentId":null},{"Id":40,"NumId":27,"NameId":422726,"Name":"Classifiers","GroupId":"TranslationType","ParentId":null},{"Id":6080,"NumId":17,"NameId":422727,"Name":"Teams","GroupId":"TranslationType","ParentId":null},{"Id":6082,"NumId":4,"NameId":422728,"Name":"Match","GroupId":"TranslationType","ParentId":null},{"Id":6084,"NumId":41,"NameId":422729,"Name":"Reports","GroupId":"TranslationType","ParentId":null},{"Id":6090,"NumId":40,"NameId":422730,"Name":"ReportXml","GroupId":"TranslationType","ParentId":null},{"Id":8240,"NumId":50,"NameId":495072,"Name":"Season Group","GroupId":"TranslationType","ParentId":null},{"Id":9268,"NumId":12,"NameId":548791,"Name":"Language","GroupId":"TranslationType","ParentId":null},{"Id":9269,"NumId":13,"NameId":548792,"Name":"Market","GroupId":"TranslationType","ParentId":null},{"Id":9270,"NumId":16,"NameId":548793,"Name":"Selection","GroupId":"TranslationType","ParentId":null},{"Id":9271,"NumId":30,"NameId":548794,"Name":"MatchResultType","GroupId":"TranslationType","ParentId":null},{"Id":9272,"NumId":31,"NameId":548795,"Name":"MatchResult","GroupId":"TranslationType","ParentId":null},{"Id":9273,"NumId":48,"NameId":548796,"Name":"Game","GroupId":"TranslationType","ParentId":null},{"Id":9274,"NumId":77,"NameId":548797,"Name":"Bonus","GroupId":"TranslationType","ParentId":null},{"Id":9339,"NumId":92,"NameId":1630033,"Name":"Market Type Display Group","GroupId":"TranslationType","ParentId":null},{"Id":9345,"NumId":103,"NameId":1881055,"Name":"Region Alpha2 Code","GroupId":"TranslationType","ParentId":null},{"Id":9586,"NumId":120,"NameId":2318412,"Name":"Claim","GroupId":"TranslationType","ParentId":null}]}');

            exit();

            break;

        /**
        * Reference/GetCurrentPartnerLanguage
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/GetCurrentPartnerLanguage":
            print_r('{"HasError":false,"AlertType":"success","AlertMessage":"Operation has completed successfully","ModelErrors":[],"Data":"en"}');

            exit();


        /**
        * Reference/GetLanguages
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/GetLanguages":

            print_r('{"HasError":false,"AlertType":"success","AlertMessage":"Operation has completed successfully","ModelErrors":[],"Data":[{"Id":"ap","Name":"Persian AZ","DisplayName":null},{"Id":"ar","Name":"Arabic ","DisplayName":null},{"Id":"az","Name":"Azerbaijani","DisplayName":null},{"Id":"bg","Name":"Bulgarian","DisplayName":null},{"Id":"bn","Name":"Bengali","DisplayName":null},{"Id":"cn","Name":"Canadian English","DisplayName":null},{"Id":"cs","Name":"Czech","DisplayName":null},{"Id":"da","Name":"Danish","DisplayName":null},{"Id":"de","Name":"German","DisplayName":null},{"Id":"el","Name":"Greek","DisplayName":null},{"Id":"en","Name":"English","DisplayName":null},{"Id":"es","Name":"Spanish","DisplayName":null},{"Id":"et","Name":"Estonian","DisplayName":null},{"Id":"fa","Name":"Persian","DisplayName":null},{"Id":"fi","Name":"Finnish","DisplayName":null},{"Id":"fr","Name":"French","DisplayName":null},{"Id":"he","Name":"Hebrew","DisplayName":null},{"Id":"hy","Name":"Armenian","DisplayName":null},{"Id":"id","Name":"Bahasa Indonesia","DisplayName":null},{"Id":"it","Name":"Italian","DisplayName":null},{"Id":"ja","Name":"Japanese","DisplayName":null},{"Id":"ka","Name":"Georgian","DisplayName":null},{"Id":"kk","Name":"Kazakh","DisplayName":null},{"Id":"ko","Name":"Korean","DisplayName":null},{"Id":"ku","Name":"Kurdish","DisplayName":null},{"Id":"lt","Name":"Lithuanian","DisplayName":null},{"Id":"lv","Name":"Latvian","DisplayName":null},{"Id":"mk","Name":"Macedonian","DisplayName":null},{"Id":"ms","Name":"Malay","DisplayName":null},{"Id":"nl","Name":"Dutch","DisplayName":null},{"Id":"no","Name":"Norwegian","DisplayName":null},{"Id":"pb","Name":"Brazilian Portuguese","DisplayName":null},{"Id":"pl","Name":"Polski","DisplayName":null},{"Id":"pt","Name":"Português","DisplayName":null},{"Id":"ro","Name":"Romanian","DisplayName":null},{"Id":"rt","Name":"Russian Translit","DisplayName":null},{"Id":"ru","Name":"Russian ","DisplayName":null},{"Id":"sk","Name":"Slovak","DisplayName":null},{"Id":"sl","Name":"Slovene","DisplayName":null},{"Id":"sr","Name":"Serbian ","DisplayName":null},{"Id":"sv","Name":"Swedish","DisplayName":null},{"Id":"sw","Name":"Swahili","DisplayName":null},{"Id":"th","Name":"Thai","DisplayName":null},{"Id":"tr","Name":"Turkish ","DisplayName":null},{"Id":"uk","Name":"Українська","DisplayName":null},{"Id":"us","Name":"US English","DisplayName":null},{"Id":"vi","Name":"Vietnamese","DisplayName":null},{"Id":"zh","Name":"Chinese","DisplayName":null},{"Id":"zs","Name":"Chinese Simplified","DisplayName":null}]}');

            break;

        /**
        * Client/PayWithdrawalRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/PayWithdrawalRequests":

            $Id = $params->Id;

            if ($_SESSION['usuario2'] == 0) {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro.';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            } else {


                $CuentaCobro = new CuentaCobro($Id);

                if ($CuentaCobro->getEstado() == "P") {

                    $CuentaCobro->setEstado('I');
                    $CuentaCobro->setUsupagoId($_SESSION['usuario2']);
                    $CuentaCobro->setFechaPago(date('Y-m-d H:i:s'));

                    if ($CuentaCobro->usucambioId == "" || $CuentaCobro->usucambioId == "null" || $CuentaCobro->usucambioId == null) {
                        $CuentaCobro->usucambioId = 0;
                    }
                    if ($CuentaCobro->usupagoId == "" || $CuentaCobro->usupagoId == "null" || $CuentaCobro->usupagoId == null) {
                        $CuentaCobro->usupagoId = 0;
                    }
                    if ($CuentaCobro->usurechazaId == "" || $CuentaCobro->usurechazaId == "null" || $CuentaCobro->usurechazaId == null) {
                        $CuentaCobro->usurechazaId = 0;
                    }
                    if ($CuentaCobro->fechaCambio == "" || $CuentaCobro->fechaCambio == "0000-00-00 00:00:00" || $CuentaCobro->fechaCambio == null) {
                        $CuentaCobro->fechaCambio = date("Y-m-d H:i:s");
                    }

                    if ($CuentaCobro->fechaAccion == "" || $CuentaCobro->fechaAccion == "0000-00-00 00:00:00" || $CuentaCobro->fechaAccion == null) {
                        $CuentaCobro->fechaAccion = date("Y-m-d H:i:s");
                    }


                    $CuentaCobroMySqlDAO = new CuentaCobroMySqlDAO();
                    $CuentaCobroMySqlDAO->update($CuentaCobro);
                    $CuentaCobroMySqlDAO->getTransaction()->commit();

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = '';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];
                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];

                }
            }


            break;

        /**
        * Client/PayWithdrawalRequestsAPI
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/PayWithdrawalRequestsAPI":

            ini_set("display_errors", "ON");

            error_reporting(E_ALL);
            $Id = $params->Id;

            $CuentaCobro = new CuentaCobro($Id);

            if ($CuentaCobro->getEstado() == "P") {

                $CuentaCobro->setEstado('S');
                $CuentaCobro->setUsupagoId($_SESSION['usuario2']);
                //$CuentaCobro->setFechaPago(date('Y-m-d H:i:s'));

                if ($CuentaCobro->usucambioId == "" || $CuentaCobro->usucambioId == "null" || $CuentaCobro->usucambioId == null) {
                    $CuentaCobro->usucambioId = 0;
                }
                if ($CuentaCobro->usupagoId == "" || $CuentaCobro->usupagoId == "null" || $CuentaCobro->usupagoId == null) {
                    $CuentaCobro->usupagoId = 0;
                }
                if ($CuentaCobro->usurechazaId == "" || $CuentaCobro->usurechazaId == "null" || $CuentaCobro->usurechazaId == null) {
                    $CuentaCobro->usurechazaId = 0;
                }
                if ($CuentaCobro->fechaCambio == "" || $CuentaCobro->fechaCambio == "0000-00-00 00:00:00" || $CuentaCobro->fechaCambio == null) {
                    $CuentaCobro->fechaCambio = date("Y-m-d H:i:s");
                }

                if ($CuentaCobro->fechaAccion == "" || $CuentaCobro->fechaAccion == "0000-00-00 00:00:00" || $CuentaCobro->fechaAccion == null) {
                    $CuentaCobro->fechaAccion = date("Y-m-d H:i:s");
                }

                $LPGSERVICES = new LPGSERVICES();

                $LPGSERVICES->cashOut($CuentaCobro);


                $CuentaCobroMySqlDAO = new CuentaCobroMySqlDAO();
                $CuentaCobroMySqlDAO->update($CuentaCobro);
                $CuentaCobroMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = '';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                $response["ModelErrors"] = [];
                $response["Data"] = [];

            }

            break;

        /**
        * Client/CancelClientRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/CancelClientRequests":

            if (true) {

                $Id = $params->Id;
                $RejectReason = $params->RejectReason;
                $ClientNotes = $params->ClientNotes;
                $IsDeposit = $params->IsDeposit;

                if ($IsDeposit) {

                    $FromCashDesk = $param->FromCashDesk;

                    if ($FromCashDesk) {

                        $UsuarioRecarga = new UsuarioRecarga($Id);


                        if ($UsuarioRecarga->getEstado() == "A") {
                            $UsuarioRecarga->setEstado('I');


                            $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                            $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();

                            $UsuarioRecargaMySqlDAO->update($UsuarioRecarga);

                            $puntoventa_id = $UsuarioRecarga->getPuntoventaId();
                            $valor = $UsuarioRecarga->getValor();

                            $Usuario = new Usuario($UsuarioRecarga->getUsuarioId());

                            $FlujoCaja = new FlujoCaja();
                            $FlujoCaja->setFechaCrea(date('Y-m-d'));
                            $FlujoCaja->setHoraCrea(date('H:i'));
                            $FlujoCaja->setUsucreaId($puntoventa_id);
                            $FlujoCaja->setTipomovId('S');
                            $FlujoCaja->setValor($valor);
                            $FlujoCaja->setRecargaId($UsuarioRecarga->getRecargaId());
                            $FlujoCaja->setMandante($UsuarioRecarga->getMandante());

                            if ($FlujoCaja->getFormapago1Id() == "") {
                                $FlujoCaja->setFormapago1Id(0);
                            }

                            if ($FlujoCaja->getFormapago2Id() == "") {
                                $FlujoCaja->setFormapago2Id(0);
                            }

                            if ($FlujoCaja->getValorForma1() == "") {
                                $FlujoCaja->setValorForma1(0);
                            }

                            if ($FlujoCaja->getValorForma2() == "") {
                                $FlujoCaja->setValorForma2(0);
                            }

                            if ($FlujoCaja->getCuentaId() == "") {
                                $FlujoCaja->setCuentaId(0);
                            }

                            if ($FlujoCaja->getPorcenIva() == "") {
                                $FlujoCaja->setPorcenIva(0);
                            }

                            if ($FlujoCaja->getValorIva() == "") {
                                $FlujoCaja->setValorIva(0);
                            }

                            $FlujoCajaMySqlDAO = new FlujoCajaMySqlDAO($Transaction);
                            $FlujoCajaMySqlDAO->insert($FlujoCaja);

                            $PuntoVenta = new PuntoVenta("", $puntoventa_id);

                            $PuntoVenta->setBalanceCupoRecarga($valor);


                            $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO();

                            $PuntoVentaMySqlDAO->update($PuntoVenta);


                            $SaldoUsuonlineAjuste = new SaldoUsuonlineAjuste();

                            $SaldoUsuonlineAjuste->setTipoId('S');
                            $SaldoUsuonlineAjuste->setUsuarioId($UsuarioRecarga->getUsuarioId());
                            $SaldoUsuonlineAjuste->setValor($valor);
                            $SaldoUsuonlineAjuste->setFechaCrea(date('Y-m-d H:i:s'));
                            $SaldoUsuonlineAjuste->setUsucreaId($_SESSION["usuario"]);
                            $SaldoUsuonlineAjuste->setSaldoAnt($Usuario->getBalance());
                            $SaldoUsuonlineAjuste->setObserv("Reversion recarga " . $UsuarioRecarga->getRecargaId());
                            if ($SaldoUsuonlineAjuste->getMotivoId() == "") {
                                $SaldoUsuonlineAjuste->setMotivoId(0);
                            }
                            $dir_ip = explode(",", $_SERVER["HTTP_X_FORWARDED_FOR"])[0];

                            $SaldoUsuonlineAjuste->setDirIp($dir_ip);
                            $SaldoUsuonlineAjuste->setMandante($UsuarioRecarga->getMandante());


                            $SaldoUsuonlineAjusteMysql = new SaldoUsuonlineAjusteMySqlDAO($Transaction);

                            $SaldoUsuonlineAjusteMysql->insert($SaldoUsuonlineAjuste);


                            $Usuario->debit($UsuarioRecarga->getValor(), $Transaction);

                            $Transaction->commit();

                            $response["HasError"] = false;
                            $response["AlertType"] = "success";
                            $response["AlertMessage"] = '';
                            $response["ModelErrors"] = [];
                            $response["Data"] = [];
                        } else {
                            $response["HasError"] = true;
                            $response["AlertType"] = "danger";
                            $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                            $response["ModelErrors"] = [];
                            $response["Data"] = [];

                        }
                    } else {
                        $CuentaCobro = new UsuarioRecarga($Id);

                        if ($CuentaCobro->getEstado() != "I" && $CuentaCobro->getEstado() != "R") {
                            /*$CuentaCobro->setEstado('R');
                            $CuentaCobro->setUsurechazaId($_SESSION['usuario2']);
                            $CuentaCobro->setMensajeUsuario($ClientNotes);
                            $CuentaCobro->setObservacion($RejectReason);

                            $CuentaCobroMySqlDAO = new CuentaCobroMySqlDAO();
                            $CuentaCobroMySqlDAO->update($CuentaCobro);

                            $Usuario = new Usuario($CuentaCobro->getUsuarioId());

                            $Usuario->creditWin($CuentaCobro->getValor(), $CuentaCobroMySqlDAO->getTransaction());

                            $CuentaCobroMySqlDAO->getTransaction()->commit();

                            $response["HasError"] = false;
                            $response["AlertType"] = "success";
                            $response["AlertMessage"] = '';
                            $response["ModelErrors"] = [];
                            $response["Data"] = [];*/
                        } else {
                            $response["HasError"] = true;
                            $response["AlertType"] = "danger";
                            $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                            $response["ModelErrors"] = [];
                            $response["Data"] = [];

                        }
                    }


                } else {

                    $CuentaCobro = new CuentaCobro($Id);

                    if ($CuentaCobro->getEstado() != "I" && $CuentaCobro->getEstado() != "R") {
                        $CuentaCobro->setEstado('R');
                        $CuentaCobro->setUsurechazaId($_SESSION['usuario2']);
                        $CuentaCobro->setFechaCambio(date("Y-m-d H:i:s"));
                        $CuentaCobro->setDiripCambio(get_client_ip());
                        $CuentaCobro->setMensajeUsuario($ClientNotes);
                        $CuentaCobro->setObservacion($RejectReason);

                        if ($CuentaCobro->getUsupagoId() == "") {
                            $CuentaCobro->setUsupagoId(0);
                        }

                        if ($CuentaCobro->getFechaAccion() == "") {
                            $CuentaCobro->setFechaAccion(date("Y-m-d H:i:s"));
                        }


                        $CuentaCobroMySqlDAO = new CuentaCobroMySqlDAO();
                        $CuentaCobroMySqlDAO->update($CuentaCobro);

                        $Usuario = new Usuario($CuentaCobro->getUsuarioId());
                        $UsuarioPerfil = new UsuarioPerfil($CuentaCobro->getUsuarioId());

                        if ($UsuarioPerfil->getPerfilId() == "USUONLINE") {
                            $Usuario->creditWin($CuentaCobro->getValor(), $CuentaCobroMySqlDAO->getTransaction());

                            $UsuarioHistorial = new UsuarioHistorial();
                            $UsuarioHistorial->setUsuarioId($Usuario->usuarioId);
                            $UsuarioHistorial->setDescripcion('');
                            $UsuarioHistorial->setMovimiento('E');
                            $UsuarioHistorial->setUsucreaId(0);
                            $UsuarioHistorial->setUsumodifId(0);
                            $UsuarioHistorial->setTipo(40);
                            $UsuarioHistorial->setValor($CuentaCobro->getValor());
                            $UsuarioHistorial->setExternoId($CuentaCobro->getCuentaId());

                            $UsuarioHistorialMySqlDAO = new UsuarioHistorialMySqlDAO($CuentaCobroMySqlDAO->getTransaction());
                            $UsuarioHistorialMySqlDAO->insert($UsuarioHistorial);


                        } else {
                            /*$Usuario->creditosAfiliacion = "creditos_afiliacion + " . $CuentaCobro->getValor();

                            $UsuarioMySqlDAO = new UsuarioMySqlDAO($CuentaCobroMySqlDAO->getTransaction());

                            $UsuarioMySqlDAO->update($Usuario);*/

                        }

                        $CuentaCobroMySqlDAO->getTransaction()->commit();

                        $response["HasError"] = false;
                        $response["AlertType"] = "success";
                        $response["AlertMessage"] = '';
                        $response["ModelErrors"] = [];
                        $response["Data"] = [];
                    } else {
                        $response["HasError"] = true;
                        $response["AlertType"] = "danger";
                        $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                        $response["ModelErrors"] = [];
                        $response["Data"] = [];

                    }
                }
            }


            break;

        /**
        * Client/AllowLiquidationRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/AllowLiquidationRequests":

            $Id = $params->Id;

            $UsucomisionResumen = new UsucomisionResumen($Id);

            if ($UsucomisionResumen->getEstado() == "A") {

                $UsucomisionResumen->setEstado('P');
                $UsucomisionResumen->setUsucambioId($_SESSION['usuario2']);
                //$CuentaCobro->setFechaPago(date('Y-m-d H:i:s'));

                $UsucomisionResumenMySqlDAO = new UsucomisionResumenMySqlDAO();
                $UsucomisionResumenMySqlDAO->update($UsucomisionResumen);
                $UsucomisionResumenMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = '';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            }

            break;

        /**
        * Client/PayLiquidationRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/PayLiquidationRequests":

            $Id = $params->Id;

            $UsucomisionResumen = new UsucomisionResumen($Id);

            if ($UsucomisionResumen->getEstado() == "P") {

                $UsucomisionResumen->setEstado('I');
                $UsucomisionResumen->setUsupagoId($_SESSION['usuario2']);
                //$UsucomisionResumen->setFechaPago(date('Y-m-d H:i:s'));

                $CupoLog = new CupoLog();
                $CupoLog->setUsuarioId($UsucomisionResumen->getUsuarioId());
                $CupoLog->setFechaCrea(date('Y-m-d H:i:s'));
                $CupoLog->setTipoId("E");
                $CupoLog->setValor($UsucomisionResumen->getComision());
                $CupoLog->setUsucreaId(0);
                $CupoLog->setMandante(0);
                $CupoLog->setTipocupoId('T');
                $CupoLog->setObservacion('');

                $UsucomisionResumenMySqlDAO = new UsucomisionResumenMySqlDAO();
                $Transaction = $UsucomisionResumenMySqlDAO->getTransaction();

                $PuntoVentaMySqlDAO = new PuntoVentaMySqlDAO($Transaction);

                $PuntoVenta = new PuntoVenta("", $UsucomisionResumen->getUsuarioId());


                $CupoLogMySqlDAO = new CupoLogMySqlDAO($Transaction);

                $cupoid = $CupoLogMySqlDAO->insert($CupoLog);

                $PuntoVenta->setBalanceCreditosBase($UsucomisionResumen->getComision());


                $PuntoVentaMySqlDAO->update($PuntoVenta);


                $UsucomisionResumen->setExternoId($cupoid);

                $UsucomisionResumenMySqlDAO->update($UsucomisionResumen);
                $UsucomisionResumenMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = '';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                $response["ModelErrors"] = [];
                $response["Data"] = [];

            }

            break;

        /**
        * Client/CancelLiquidationRequests
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/CancelLiquidationRequests":


            $Id = $params[0]->Id;
            $RejectReason = $params[0]->RejectReason;
            $ClientNotes = $params[0]->ClientNotes;

            $UsucomisionResumen = new UsucomisionResumen($Id);

            if ($UsucomisionResumen->getEstado() != "I" && $UsucomisionResumen->getEstado() != "R") {
                $UsucomisionResumen->setEstado('R');
                $UsucomisionResumen->setUsurechazaId($_SESSION['usuario2']);
                $UsucomisionResumen->setMensajeUsuario($ClientNotes);
                $UsucomisionResumen->setObservacion($RejectReason);

                $UsucomisionResumenMySqlDAO = new UsucomisionResumenMySqlDAO();
                $UsucomisionResumenMySqlDAO->update($UsucomisionResumen);

                $Usuario = new Usuario($UsucomisionResumen->getUsuarioId());

                //$Usuario->creditWin($UsucomisionResumen->getValor(),$CuentaCobroMySqlDAO->getTransaction());

                $UsucomisionResumenMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = '';
                $response["ModelErrors"] = [];
                $response["Data"] = [];
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                $response["ModelErrors"] = [];
                $response["Data"] = [];

            }


            break;

        /**
        * Client/GetQRGoogle
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetQRGoogle":

            $Id = $_REQUEST["id"];

            if ($Id != "" && is_numeric($Id)) {
                $Google = new GoogleAuthenticator();

                $Usuario = new Usuario($Id);


                if ($Usuario->saltGoogle == "") {
                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = 'No tiene QR Configurado';
                    $response["ModelErrors"] = [];

                } else {
                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = 'No puedes cambiar el estado de un retiro ya procesado.';
                    $response["ModelErrors"] = [];
                    $response["data"] = $Google->getQRCodeGoogleUrl("Doradobet", $Usuario->saltGoogle);

                }


            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'Error en solicitud';
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * Client/GetMyQRGoogle
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetMyQRGoogle":

            $Id = $_SESSION["usuario"];

            if ($Id != "" && is_numeric($Id)) {
                $Google = new GoogleAuthenticator();

                $Usuario = new Usuario($Id);


                if ($Usuario->saltGoogle != "") {
                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = 'Correctamente';
                    $response["ModelErrors"] = [];
                    $response["data"] = $Google->getQRCodeGoogleUrl("Doradobet", $Usuario->saltGoogle);

                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "danger";
                    $response["AlertMessage"] = 'Error en solicitud';
                    $response["ModelErrors"] = [];

                }


            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "danger";
                $response["AlertMessage"] = 'Error en solicitud';
                $response["ModelErrors"] = [];
            }


            break;


        /**
        * Client/CreateClientPaymentDocument
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/CreateClientPaymentDocument":


            $Amount = $params->Amount;
            $ClientId = $params->ClientId;
            $CurrencyId = $params->CurrencyId;
            $DocTypeInt = $params->DocTypeInt;
            $Info = $params->Info;
            $PaymentSystemId = $params->PaymentSystemId;

            $Usuario = new Usuario($ClientId);

            switch ($DocTypeInt) {

                /* Cuando se hara un ajuste positivo*/

                case 3:


                    $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                    $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();

                    $SaldoUsuonlineAjuste = new SaldoUsuonlineAjuste();


                    $SaldoUsuonlineAjuste->setUsuarioId($Usuario->usuarioId);
                    $SaldoUsuonlineAjuste->setValor($Amount);
                    $SaldoUsuonlineAjuste->setFechaCrea(date('Y-m-d H:i:s'));
                    $SaldoUsuonlineAjuste->setUsucreaId($Usuario->usuarioId);
                    $SaldoUsuonlineAjuste->setSaldoAnt($Usuario->getBalance());
                    $SaldoUsuonlineAjuste->setObserv($Info);
                    if ($SaldoUsuonlineAjuste->getMotivoId() == "") {
                        $SaldoUsuonlineAjuste->setMotivoId(0);
                    }
                    $dir_ip = explode(",", $_SERVER["HTTP_X_FORWARDED_FOR"])[0];

                    $SaldoUsuonlineAjuste->setDirIp($dir_ip);
                    $SaldoUsuonlineAjuste->setMandante($Usuario->mandante);

                    $SaldoUsuonlineAjuste->setTipoId('E');
                    $Usuario->credit($Amount, $Transaction);


                    $SaldoUsuonlineAjusteMysql = new SaldoUsuonlineAjusteMySqlDAO($Transaction);

                    $SaldoUsuonlineAjusteMysql->insert($SaldoUsuonlineAjuste);


                    $Transaction->commit();

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = '';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];


                    break;

                /* Cuando se hara un ajuste negativo*/
                case 4:


                    $UsuarioRecargaMySqlDAO = new UsuarioRecargaMySqlDAO();
                    $Transaction = $UsuarioRecargaMySqlDAO->getTransaction();

                    $SaldoUsuonlineAjuste = new SaldoUsuonlineAjuste();


                    $SaldoUsuonlineAjuste->setUsuarioId($Usuario->usuarioId);
                    $SaldoUsuonlineAjuste->setValor($Amount);
                    $SaldoUsuonlineAjuste->setFechaCrea(date('Y-m-d H:i:s'));
                    $SaldoUsuonlineAjuste->setUsucreaId($Usuario->usuarioId);
                    $SaldoUsuonlineAjuste->setSaldoAnt($Usuario->getBalance());
                    $SaldoUsuonlineAjuste->setObserv($Info);
                    if ($SaldoUsuonlineAjuste->getMotivoId() == "") {
                        $SaldoUsuonlineAjuste->setMotivoId(0);
                    }
                    $dir_ip = explode(",", $_SERVER["HTTP_X_FORWARDED_FOR"])[0];

                    $SaldoUsuonlineAjuste->setDirIp($dir_ip);
                    $SaldoUsuonlineAjuste->setMandante($Usuario->mandante);


                    $SaldoUsuonlineAjuste->setTipoId('S');
                    $Usuario->debit($Amount, $Transaction);


                    $SaldoUsuonlineAjusteMysql = new SaldoUsuonlineAjusteMySqlDAO($Transaction);

                    $SaldoUsuonlineAjusteMysql->insert($SaldoUsuonlineAjuste);


                    $Transaction->commit();

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = '';
                    $response["ModelErrors"] = [];
                    $response["Data"] = [];


                    break;


            }


            break;

        /**
        * Client/SetClientDepositLimits
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/SetClientDepositLimits":
            $ClientId = $params->ClientId;
            $LimitInfo = $params->LimitInfo;
            foreach ($LimitInfo as $item) {
                $tipo = "";

                switch ($item->PeriodType) {
                    case 1:
                        $tipo = "LIMITEDEPOSITOSIMPLE";

                        break;

                    case 2:
                        $tipo = "LIMITEDEPOSITODIARIO";

                        break;

                    case 3:
                        $tipo = "LIMITEDEPOSITOSEMANA";

                        break;

                    case 4:
                        $tipo = "LIMITEDEPOSITOMENSUAL";

                        break;

                    case 5:
                        $tipo = "LIMITEDEPOSITOANUAL";

                        break;
                }

                try {
                    $UsuarioConfiguracion = new UsuarioConfiguracion($ClientId, $tipo);

                    $UsuarioConfiguracion->setValor($item->Limit);

                    $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO();
                    $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);
                    $UsuarioConfiguracionMySqlDAO->getTransaction()->commit();

                } catch (Exception $e) {
                    if ($e->getCode() == 30) {

                        $UsuarioConfiguracion2 = new UsuarioConfiguracion();
                        $UsuarioConfiguracion2->setUsuarioId($ClientId);
                        $UsuarioConfiguracion2->setTipo($tipo);
                        $UsuarioConfiguracion2->setValor($item->Limit);
                        $UsuarioConfiguracion2->setUsucreaId("0");
                        $UsuarioConfiguracion2->setUsumodifId("0");

                        $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO();
                        $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion2);
                        $UsuarioConfiguracionMySqlDAO->getTransaction()->commit();

                    } else {
                        throw new Exception($e->getMessage(), $e->getCode());
                    }
                }
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];
            $response["Data"] = [];

            break;

        /**
        * Client/UpdateClientSocialPreferens
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/UpdateClientSocialPreferens":

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];
            $response["Data"] = array(
                array(
                    "NumId" => 2,
                    "Name" => "Autoexclusion Total"
                ),
                array(
                    "NumId" => 6,
                    "Name" => "Autoexclusion Descanso"
                )
            );

            break;


        /**
        * oAuth/getoAuth
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "oAuth/getoAuth":


            print_r('{"statusCode":"OK","statusMessage":""}');
            //print_r('{}');

            $response["statusCode"] = "OK";

            $redirect = "http://localhost:3300/doradobetLogin?code=4/QwHumD1ILtjotCOlNB4usiROIQdNnXSllnP2K6L3HJzhBfpVNrbw8_XQwb_Aut9kO9r3Wg7Y6vNL9ss11U9W3lI&scope=https://www.googleapis.com/auth/gmail.readonly+https://www.googleapis.com/auth/gmail.modify+https://www.googleapis.com/auth/calendar+https://www.googleapis.com/auth/gmail.send+https://mail.google.com/+https://www.googleapis.com/auth/gmail.compose";
            header('Location: ' . $redirect);

            exit();
            break;

        /**
        * geoapi/geoapi
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "geoapi/geoapi":

            $ip = !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
            $ip = explode(",", $ip)[0];
            $url = "http://freegeoip.net/json/$ip";
            $ch = curl_init();

            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
            $data = curl_exec($ch);
            curl_close($ch);

            if ($data) {
                $location = json_decode($data);

                $latitude = $location->latitude;
                $longitude = $location->longitude;

                $sun_info = date_sun_info(time(), $lat, $lon);
            }

            $new_arr[] = unserialize(file_get_contents('http://www.geoplugin.net/php.gp?ip=' . $ip));

            $latitude = $new_arr[0]['geoplugin_latitude'];
            $longitude = $new_arr[0]['geoplugin_longitude'];
            $countryCode = $new_arr[0]['geoplugin_countryCode'];
            $Region = $new_arr[0]['geoplugin_region'];
            $City = $new_arr[0]['geoplugin_city'];


            print_r('{"statusCode":"OK","statusMessage":"","ipAddress":"' . $ip . '","countryCode":"' . $countryCode . '","countryName":"' . $countryCode . '","departmentName":"' . $Region . '","cityName":"' . $City . '","zipCode":"","latitude":"' . $latitude . '","longitude":"' . $longitude . '"}');
            //print_r('{}');

            $response["statusCode"] = "OK";

            exit();
            break;

        /**
        * Reference/GetClientSelfExclusionTypes
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Reference/GetClientSelfExclusionTypes":

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];
            $response["Data"] = array(
                array(
                    "NumId" => 2,
                    "Name" => "Autoexclusion Total"
                ),
                array(
                    "NumId" => 6,
                    "Name" => "Autoexclusion Descanso"
                )
            );

            break;

        /**
        * UpdateClientSelfExclusion
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "UpdateClientSelfExclusion":

            $ExcludeTypeId = $params->ExcludeTypeId;
            $ExcludedLocalDate = $params->ExcludedLocalDate;
            $ClientId = $params->Id;


            $tipo = "";

            switch ($ExcludeTypeId) {
                case 6:
                    $tipo = "EXCTIMEOUT";

                    break;

                case 2:
                    $tipo = "EXCTOTAL";

                    break;

            }

            if ($tipo != "") {
                $valor = $ExcludedLocalDate;


                try {
                    $UsuarioConfiguracion = new UsuarioConfiguracion($ClientId, $tipo);

                    $UsuarioConfiguracion->setValor($valor);

                    $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO();
                    $UsuarioConfiguracionMySqlDAO->update($UsuarioConfiguracion);
                    $UsuarioConfiguracionMySqlDAO->getTransaction()->commit();

                } catch (Exception $e) {
                    if ($e->getCode() == 30) {

                        $UsuarioConfiguracion2 = new UsuarioConfiguracion();
                        $UsuarioConfiguracion2->setUsuarioId($ClientId);
                        $UsuarioConfiguracion2->setTipo($tipo);
                        $UsuarioConfiguracion2->setValor($valor);
                        $UsuarioConfiguracion2->setUsucreaId("0");
                        $UsuarioConfiguracion2->setUsumodifId("0");

                        $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO();
                        $UsuarioConfiguracionMySqlDAO->insert($UsuarioConfiguracion2);
                        $UsuarioConfiguracionMySqlDAO->getTransaction()->commit();

                    } else {
                        throw new Exception($e->getMessage(), $e->getCode());
                    }
                }
            }


            break;

        /**
        * Client/GetClientDepositLimits
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/GetClientDepositLimits":

            $ClientId = $_REQUEST["clientId"];

            $limites = array();

            $UsuarioConfiguracionMySqlDAO = new UsuarioConfiguracionMySqlDAO();

            $limitesArray = $UsuarioConfiguracionMySqlDAO->queryByUsuarioId($ClientId);

            foreach ($limitesArray as $item) {

                $tipo = "";

                switch ($item->getTipo()) {
                    case "LIMITEDEPOSITOSIMPLE":
                        $tipo = "Single";

                        break;

                    case "LIMITEDEPOSITODIARIO":
                        $tipo = "Days";

                        break;

                    case "LIMITEDEPOSITOSEMANA":
                        $tipo = "Weeks";

                        break;

                    case "LIMITEDEPOSITOMENSUAL":
                        $tipo = "Months";

                        break;

                    case "LIMITEDEPOSITOANUAL":
                        $tipo = "Years";

                        break;
                }


                $limites[$tipo] = $item->getValor();


            }


            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];
            $response["Data"] = $limites;

            break;

        /**
        * Client/ActivateDocumentClient
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/ActivateDocumentClient":
            $ClientId = $params->Id;
            $Usuario = new Usuario($ClientId);

            if ($Usuario->documentoValidado != "A") {
                $Usuario->documentoValidado = "A";
                $Usuario->fechaDocvalido = date('Y-m-d H:i:s');
                $Usuario->usuDocvalido = $_SESSION["usuario2"];


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->update($Usuario);

                $UsuarioMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = $msg . " - " . $ClientId;
                $response["ModelErrors"] = [];

                $response["Data"] = [];

            }

            break;

        /**
        * Client/RejectDocumentClient
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/RejectDocumentClient":
            $ClientId = $params->Id;
            $Usuario = new Usuario($ClientId);

            if ($Usuario->documentoValidado != "A") {
                $Usuario->documentoValidado = "R";
                // $Usuario->estadoEsp = "A";


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();

                $UsuarioMySqlDAO->update($Usuario);

                $UsuarioMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = $msg . " - " . $ClientId;
                $response["ModelErrors"] = [];

                $response["Data"] = [];

            }

            break;

        /**
        * Client/ActivateClient
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/ActivateClient":
            $ClientId = $params->Id;
            $Usuario = new Usuario($ClientId);
            $Registro = new Registro("", $ClientId);

            if ($Registro->estadoValida != "A") {
                $Registro->estadoValida = "A";
                $Usuario->estado = "A";
                $Usuario->estadoEsp = "A";
                $Usuario->fechaDocvalido = date('Y-m-d H:i:s');


                if ($Usuario->usuDocvalido == "" || $Usuario->usuDocvalido == "null" || $Usuario->usuDocvalido == null) {
                    $Usuario->usuDocvalido = 0;
                }

                if ($Registro->usuvalidaId == "" || $Registro->usuvalidaId == "null" || $Registro->usuvalidaId == null) {
                    $Registro->usuvalidaId = 0;
                }

                if ($Registro->fechaValida == "" || $Registro->fechaValida == "null" || $Registro->fechaValida == null) {
                    $Registro->fechaValida = date('Y-m-d H:i:s');
                }


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $RegistroMySqlDAO = new RegistroMySqlDAO($UsuarioMySqlDAO->getTransaction());

                $RegistroMySqlDAO->update($Registro);
                $UsuarioMySqlDAO->update($Usuario);

                $UsuarioMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = $msg . " - " . $ClientId;
                $response["ModelErrors"] = [];

                $response["Data"] = [];

            }

            break;

        /**
        * Client/RejectClient
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/RejectClient":
            $ClientId = $params->Id;
            $Usuario = new Usuario($ClientId);
            $Registro = new Registro("", $ClientId);

            if ($Registro->estadoValida != "A") {
                $Registro->estadoValida = "R";
                $Usuario->estadoEsp = "I";


                $UsuarioMySqlDAO = new UsuarioMySqlDAO();
                $UsuarioMySqlDAO->update($Usuario);

                $RegistroMySqlDAO = new RegistroMySqlDAO();

                $RegistroMySqlDAO->update($Registro);

                $UsuarioMySqlDAO->getTransaction()->commit();

                $RegistroMySqlDAO->getTransaction()->commit();
                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = $msg . " - " . $ClientId;
                $response["ModelErrors"] = [];

                $response["Data"] = [];

            }

            break;

        /**
        * Client/UpdateUserSecurity
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/UpdateUserSecurity":

            $ClientId = intval($params->Id);

            if ($ClientId > 0) {
                $IsActivate = ($params->IsActivate == "I") ? "I" : "A";
                $Action = $params->Action;
                $cambios = false;


                if ($Action == "UnlockUserByPassword") {
                    $IsActivate = "A";
                    $Usuario = new Usuario($ClientId);
                    $Registro = new Registro("", $ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    $UsuarioLog = new UsuarioLog();
                    $UsuarioLog->setUsuarioId($ClientId);
                    $UsuarioLog->setUsuarioIp('');

                    $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                    $UsuarioLog->setUsuariosolicitaIp($ip);

                    $UsuarioLog->setTipo("ESTADOUSUARIO");
                    $UsuarioLog->setEstado("A");
                    $UsuarioLog->setValorAntes($Usuario->estado);
                    $UsuarioLog->setValorDespues($IsActivate);
                    $UsuarioLog->setUsucreaId(0);
                    $UsuarioLog->setUsumodifId(0);


                    $UsuarioLogMySqlDAO->insert($UsuarioLog);

                    $Usuario->estado = "A";
                    $Usuario->intentos = 0;

                    $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                    $UsuarioMySqlDAO->update($Usuario);


                    $UsuarioLogMySqlDAO->getTransaction()->commit();


                    //$UsuarioMySqlDAO->getTransaction()->commit();
                    $cambios = true;


                }

                if ($Action == "State") {
                    $Usuario = new Usuario($ClientId);
                    $Registro = new Registro("", $ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->estado) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("ESTADOUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->estado);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->estado = "A";
                        } else {
                            $Usuario->estado = "I";

                        }

                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);


                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                }

                if ($Action == "Contingency") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->contingencia) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("CONTINGENCIAUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->contingencia);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->contingencia = "A";
                        } else {
                            $Usuario->contingencia = "I";

                        }

                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);


                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                }

                if ($Action == "ContingencySports") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();


                    if ($IsActivate != $Usuario->contingenciaDeportes) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("CONTINGENCIADEPORTEUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->contingenciaDeportes);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->contingenciaDeportes = "A";
                        } else {
                            $Usuario->contingenciaDeportes = "I";

                        }

                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);


                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                }

                if ($Action == "ContingencyCasino") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->contingenciaCasino) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("CONTINGENCIACASINOUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->contingenciaCasino);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->contingenciaCasino = "A";
                        } else {
                            $Usuario->contingenciaCasino = "I";

                        }

                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);


                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                }

                if ($Action == "ContingencyCasinoVivo") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->contingenciaCasvivo) {

                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("CONTINGENCIACASINOVIVOUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->contingenciaCasvivo);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->contingenciaCasvivo = "A";
                        } else {
                            $Usuario->contingenciaCasvivo = "I";

                        }

                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);


                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                }

                if ($Action == "ContingencyVirtuales") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->contingenciaVirtuales) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("CONTINGENCIAVIRTUALESUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->contingenciaVirtuales);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->contingenciaVirtuales = "A";
                        } else {
                            $Usuario->contingenciaVirtuales = "I";

                        }

                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);


                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                }

                if ($Action == "ContingencyPoker") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->contingenciaPoker) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("CONTINGENCIAPOKERUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->contingenciaPoker);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->contingenciaPoker = "A";
                        } else {
                            $Usuario->contingenciaPoker = "I";

                        }

                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);


                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                }

                if ($Action == "UpdateIP") {
                    $Usuario = new Usuario($ClientId);
                    $IP = $params->IP;

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IP != $Usuario->usuarioIp) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("USUARIOIP");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->usuarioIp);
                        $UsuarioLog->setValorDespues($IP);
                        $UsuarioLog->setUsucreaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        $Usuario->usuarioIp = $IP;


                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }


                    if ($cambios) {
                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();

                    }


                }

                if ($Action == "ContingencyRestriccionIP") {
                    $Usuario = new Usuario($ClientId);
                    $IP = $params->IP;

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->restriccionIp) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("RESTRICCIONIPUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->contingenciaPoker);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->restriccionIp = "A";
                        } else {
                            $Usuario->restriccionIp = "I";

                        }

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();

                    }


                }

                if ($Action == "ContingencyTokenGoogle") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();


                    if ($IsActivate != $Usuario->tokenGoogle) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("TOKENGOOGLEUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->tokenGoogle);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->tokenGoogle = "A";

                            $Google = new GoogleAuthenticator();


                            if ($Usuario->saltGoogle == "") {
                                $Usuario->saltGoogle = $Google->createSecret();
                            }


                        } else {
                            $Usuario->tokenGoogle = "I";

                        }

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();

                    }


                }


                if ($Action == "ContingencyTokenLocal") {
                    $Usuario = new Usuario($ClientId);

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();


                    if ($IsActivate != $Usuario->tokenLocal) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("TOKENLOCALUSUARIO");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->tokenLocal);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        if ($IsActivate == "A") {
                            $Usuario->tokenLocal = "A";
                        } else {
                            $Usuario->tokenLocal = "I";

                        }

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();

                    }


                }

                if ($Action == "AllowRecarga") {


                    $Usuario = new Usuario($ClientId);
                    $UsuarioConfig = new UsuarioConfig($ClientId);

                    $IsActivate = ($IsActivate == "A") ? "S" : "N";

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();


                    if ($IsActivate != $UsuarioConfig->permiteRecarga) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("USUARIOPERMITERECARGA");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($UsuarioConfig->permiteRecarga);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        $UsuarioConfig->permiteRecarga = $IsActivate;

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioConfigMySqlDAO = new UsuarioConfigMySqlDAO($Transaction);

                        $UsuarioConfigMySqlDAO->update($UsuarioConfig);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();

                    }


                }

                if ($Action == "StateCountry") {


                    $UsuarioPerfil = new UsuarioPerfil($ClientId);

                    $IsActivate = ($IsActivate == "A") ? "S" : "N";

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $UsuarioPerfil->pais) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("USUARIODEPAIS");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($UsuarioPerfil->pais);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        $UsuarioPerfil->pais = $IsActivate;

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($Transaction);

                        $UsuarioPerfilMySqlDAO->update($UsuarioPerfil);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();

                    }


                }


                if ($Action == "StateMandante") {


                    $UsuarioPerfil = new UsuarioPerfil($ClientId);

                    $IsActivate = ($IsActivate == "A") ? "S" : "N";

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $UsuarioPerfil->global) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("USUARIOGLOBAL");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($UsuarioPerfil->global);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        $UsuarioPerfil->global = $IsActivate;

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioPerfilMySqlDAO = new UsuarioPerfilMySqlDAO($Transaction);

                        $UsuarioPerfilMySqlDAO->update($UsuarioPerfil);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                    }


                }

                if ($Action == "DniAnterior") {

                    $Usuario = new Usuario($ClientId);


                    $IsActivate = ($IsActivate == "A") ? "S" : "N";

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->verifcedulaAnt) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("USUDNIANTERIOR");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->verifcedulaAnt);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        $Usuario->verifcedulaAnt = $IsActivate;

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                    }


                }

                if ($Action == "DniPosterior") {

                    $Usuario = new Usuario($ClientId);


                    $IsActivate = ($IsActivate == "A") ? "S" : "N";

                    $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
                    $Transaction = $UsuarioLogMySqlDAO->getTransaction();

                    if ($IsActivate != $Usuario->verifcedulaPost) {
                        $UsuarioLog = new UsuarioLog();
                        $UsuarioLog->setUsuarioId($ClientId);
                        $UsuarioLog->setUsuarioIp('');

                        $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                        $UsuarioLog->setUsuariosolicitaIp($ip);

                        $UsuarioLog->setTipo("USUDNIPOSTERIOR");
                        $UsuarioLog->setEstado("A");
                        $UsuarioLog->setValorAntes($Usuario->verifcedulaPost);
                        $UsuarioLog->setValorDespues($IsActivate);
                        $UsuarioLog->setUsucreaId(0);
                        $UsuarioLog->setUsumodifId(0);


                        $UsuarioLogMySqlDAO->insert($UsuarioLog);

                        $Usuario->verifcedulaPost = $IsActivate;

                        //$UsuarioMySqlDAO->getTransaction()->commit();
                        $cambios = true;


                    }

                    if ($cambios) {
                        $UsuarioMySqlDAO = new UsuarioMySqlDAO($Transaction);

                        $UsuarioMySqlDAO->update($Usuario);

                        $UsuarioLogMySqlDAO->getTransaction()->commit();


                    }


                }


                $response["HasError"] = true;
                $response["AlertType"] = "error";
                $response["AlertMessage"] = "Datos incorrectos";
                $response["ModelErrors"] = [];


                if ($cambios) {
                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];

                    $Usuario = new Usuario($ClientId);


                    $UsuarioMandante = new UsuarioMandante("", $ClientId, $Usuario->mandante);

                    /*  Consultamos de nuevo el usuario Token para obtener el RequestId actual para el WebSocket  */
                    try {


                        $UsuarioToken = new UsuarioToken("", '0', $UsuarioMandante->getUsumandanteId());

                        /*  Enviamos el mensaje Websocket al Usuario para que actualice el saldo  */
                        $data = $UsuarioMandante->getWSProfileSite($UsuarioToken->getRequestId());
                        $WebsocketUsuario = new WebsocketUsuario($UsuarioToken->getRequestId(), $data);
                        $WebsocketUsuario->sendWSMessage();
                    } catch (Exception $e) {

                    }

                }


            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "error";
                $response["AlertMessage"] = "Datos incorrectos";
                $response["ModelErrors"] = [];


            }


            break;


        /**
        * Client/UpdateClientDetails
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Client/UpdateClientDetails":

            $ClientId = $params->Id;
            $Usuario = new Usuario($ClientId);
            $Registro = new Registro("", $ClientId);


            $Address = $params->Address;
            $BirthCity = $params->BirthCity;
            $BirthDate = $params->BirthDate;
            $BirthDateLocal = $params->BirthDateLocal;
            $BirthRegionCode2 = $params->BirthRegionCode2;
            $BirthRegionId = $params->BirthRegionId;
            $City = $params->City;
            $CountryName = $params->CountryName;
            $CreatedLocalDate = $params->CreatedLocalDate;
            $CurrencyId = $params->CurrencyId;
            $DocNumber = $params->DocNumber;
            $Email = $params->Email;
            $Estado = $params->Estado[0];
            $EstadoEspecial = $params->EstadoEspecial;
            $FirstName = $params->FirstName;
            $Gender = $params->Gender;
            $Id = $params->Id;
            $Idioma = $params->Idioma;
            $Intentos = $params->Intentos;
            $Ip = $params->Ip;
            $IsLocked = $params->IsLocked;
            $IsTest = $params->IsTest;
            $IsVerified = $params->IsVerified;
            $Language = $params->Language;
            $LastLoginLocalDate = $params->LastLoginLocalDate;
            $LastName = $params->LastName;
            $Login = $params->Login;
            $MiddleName = $params->MiddleName;
            $MobilePhone = $params->MobilePhone;
            $Moneda = $params->Moneda;
            $Nombre = $params->Nombre;
            $Pais = $params->Pais;
            $Phone = $params->Phone;
            $Province = $params->Province;
            $RegionId = $params->RegionId;
            $TipoUsuario = $params->TipoUsuario;
            $ZipCode = $params->ZipCode;

            $DaysChangeLimitDeposit = $params->DaysChangeLimitDeposit;
            $DaysChangeLimitSelfExclusion = $params->DaysChangeLimitSelfExclusion;
            $ChangesToApproval = $params->ChangesToApproval;

            $EmailC = $params->Email;


            $ip = !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
            $ip = explode(",", $ip)[0];


            $estadoUsuario = ($IsLocked == "false" ? "A" : "I");
            $testUsuario = ($IsTest == "false" ? "N" : "S");
            $verificadoUsuario = ($IsVerified == "false" ? "A" : "I");
            $cambiosAprobacion = (!$ChangesToApproval ? "N" : "S");

            $UsuarioLogMySqlDAO = new UsuarioLogMySqlDAO();
            $Transaction = $UsuarioLogMySqlDAO->getTransaction();

            if ($Address != $Registro->getDireccion()) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("USUDIRECCION");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Registro->getDireccion());
                $UsuarioLog->setValorDespues($Address);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }

            if ($Phone != $Registro->getTelefono()) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("USUTELEFONO");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Registro->getTelefono());
                $UsuarioLog->setValorDespues($Phone);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }

            if ($MobilePhone != $Registro->getCelular()) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("USUCELULAR");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Registro->getCelular());
                $UsuarioLog->setValorDespues($MobilePhone);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }

            if ($Email != $Registro->getEmail()) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("USUEMAIL");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Registro->getEmail());
                $UsuarioLog->setValorDespues($EmailC);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }


            if ($DaysChangeLimitDeposit != $Usuario->tiempoLimitedeposito) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("TIEMPOLIMITEDEPOSITO");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Usuario->tiempoLimitedeposito);
                $UsuarioLog->setValorDespues($DaysChangeLimitDeposit);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }

            if ($DaysChangeLimitSelfExclusion != $Usuario->tiempoAutoexclusion) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("TIEMPOLIMITEAUTOEXCLUSION");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Usuario->tiempoAutoexclusion);
                $UsuarioLog->setValorDespues($DaysChangeLimitSelfExclusion);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }

            /*if ($estadoUsuario != $Usuario->estado) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("ESTADOUSUARIO");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Usuario->estado);
                $UsuarioLog->setValorDespues($estadoUsuario);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }*/

            if ($cambiosAprobacion != $Usuario->cambiosAprobacion) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("CAMBIOSAPROBACION");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Usuario->cambiosAprobacion);
                $UsuarioLog->setValorDespues($cambiosAprobacion);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }


            if ($cambiosAprobacion != $Usuario->cambiosAprobacion) {
                $UsuarioLog = new UsuarioLog();
                $UsuarioLog->setUsuarioId($ClientId);
                $UsuarioLog->setUsuarioIp('');

                $UsuarioLog->setUsuariosolicitaId($_SESSION['usuario2']);
                $UsuarioLog->setUsuariosolicitaIp($ip);

                $UsuarioLog->setTipo("CAMBIOSAPROBACION");
                $UsuarioLog->setEstado("P");
                $UsuarioLog->setValorAntes($Usuario->cambiosAprobacion);
                $UsuarioLog->setValorDespues($cambiosAprobacion);
                $UsuarioLog->setUsucreaId(0);
                $UsuarioLog->setUsumodifId(0);


                $UsuarioLogMySqlDAO->insert($UsuarioLog);

            }


            $UsuarioLogMySqlDAO->getTransaction()->commit();


            //$UsuarioMySqlDAO = new UsuarioMySqlDAO();

            //$UsuarioMySqlDAO->update($Usuario);

            //$UsuarioMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = $msg . " - " . $ClientId;
            $response["ModelErrors"] = [];

            $response["Data"] = [];

            break;


        /**
        * Partner/GetPartnerList
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Partner/GetPartnerList":
            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10;
            }

            $final = [];


            $json2 = '{"rules" : [{"field" : "usuario_mensaje.usuto_id", "data": "0","op":"eq"}] ,"groupOp" : "AND"}';


            $array = [];
            $array["Id"] = 0;
            $array["Name"] = "Doradobet";
            $array["Notes"] = "Dorado";
            $array["Domain"] = "www.doradobet.com";
            $array["SalesManagerId"] = 0;
            $array["LicenseOrigin"] = "TEST";
            $array["StatusId"] = 1;
            $array["IntegrationTypeId"] = 0;
            $array["ReleaseDate"] = "";
            $array["RegionId"] = 1;

            array_push($final, $array);

            $response = $final;


            break;

        /**
        * GetSaleList
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetSaleList":

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $final = [];
            $ProductoMandante = new ProductoMandante();
            $json = '{"rules" : [{"field" : "", "data": "0","op":"eq"}] ,"groupOp" : "AND"}';

            $productos = $ProductoMandante->getProductosMandanteCustom(" producto_mandante.*,mandante.*,producto.* ", "producto_mandante.prodmandante_id", "asc", $SkeepRows, $MaxRows, $json, false);
            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto_mandante.prodmandante_id"};
                $array["ProviderId"] = $value->{"producto.proveedor_id"};
                $array["PartnerName"] = $value->{"mandante.descripcion"};
                $array["ProductName"] = $value->{"producto.descripcion"};
                $array["IsWorking"] = ($value->{"producto.estado"} == "A") ? true : false;
                $array["Notes"] = $value->{"producto.descripcion"};
                $array["RegionId"] = 1;

                array_push($final, $array);

            }

            $response = $final;

            break;

        /**
        * Providers/GetProviders
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Providers/GetProviders":


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }

            $Proveedor = new Proveedor();

            $json = '{"rules" : [{"field" : "", "data": "1","op":"eq"}] ,"groupOp" : "AND"}';

            $proveedores = $Proveedor->getProveedoresCustom(" proveedor.* ", "proveedor.proveedor_id", "asc", $SkeepRows, $MaxRows, $json, false);
            $proveedores = json_decode($proveedores);

            $final = [];

            foreach ($proveedores->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"proveedor.proveedor_id"};
                $array["Name"] = $value->{"proveedor.descripcion"};

                $array["Type"] = $value->{"proveedor.tipo"};
                $array["IsActivate"] = $value->{"proveedor.estado"};
                $array["IsVerified"] = $value->{"proveedor.verifica"};
                $array["Abbreviated"] = $value->{"proveedor.abreviado"};

                switch ($value->{"proveedor.tipo"}) {
                    case "CASINO":
                        $array["Type"] = 0;

                        break;

                    case "LIVECASINO":
                        $array["Type"] = 1;

                        break;

                    case "PAYMENT":
                        $array["Type"] = 2;

                        break;

                    case "VIRTUAL":
                        $array["Type"] = 3;

                        break;

                    case "MENSAJERIA":
                        $array["Type"] = 4;

                        break;

                }

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $proveedores->count[0]->{".count"});

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $proveedores->count[0]->{".count"};
            $response["data"] = $final;


            break;

        /**
        * Provider/UpdateProviderDetails
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Provider/UpdateProviderDetails":

            $Id = $params->Id;

            if ($Id != "") {

                $IsActivate = $params->IsActivate;
                $IsVerified = $params->IsVerified;
                $Name = $params->Name;
                $Abbreviated = $params->Abbreviated;

                $Proveedor = new Proveedor($Id);

                $Proveedor->setEstado($IsActivate);
                $Proveedor->setVerifica($IsVerified);
                $Proveedor->setDescripcion($Name);
                $Proveedor->setUsumodifId($_SESSION['usuario2']);
                $Proveedor->setAbreviado($Abbreviated);

                $ProveedorMySqlDAO = new ProveedorMySqlDAO();
                $ProveedorMySqlDAO->update($Proveedor);
                $ProveedorMySqlDAO->getTransaction()->commit();
            } else {
                $IsActivate = $params->IsActivate;
                $IsVerified = $params->IsVerified;
                $Name = $params->Name;
                $Abbreviated = $params->Abbreviated;

                $Type = $params->Type;

                $TipoProveedor = "";

                switch ($Type) {
                    case 1:
                        $TipoProveedor = "CASINO";

                        break;

                    case 2:
                        $TipoProveedor = "LIVECASINO";

                        break;

                    case 3:
                        $TipoProveedor = "PAYMENT";

                        break;
                }

                $Proveedor = new Proveedor();

                $Proveedor->setEstado($IsActivate);
                $Proveedor->setVerifica($IsVerified);
                $Proveedor->setDescripcion($Name);
                $Proveedor->setUsumodifId($_SESSION['usuario2']);
                $Proveedor->setUsucreaId($_SESSION['usuario2']);
                $Proveedor->setAbreviado($Abbreviated);
                $Proveedor->setTipo($TipoProveedor);

                $ProveedorMySqlDAO = new ProveedorMySqlDAO();
                $ProveedorMySqlDAO->insert($Proveedor);
                $ProveedorMySqlDAO->getTransaction()->commit();

            }

            break;


        /**
        * Products/GetProducts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Products/GetProducts":

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Desktop = $params->Desktop;
            $ExternalId = $params->ExternalId;
            $Id = $params->Id;
            $Image = $params->Image;
            $IsActivate = $params->IsActivate;
            $IsVerified = $params->IsVerified;
            $Mobile = $params->Mobile;
            $Name = $params->Name;
            $Order = $params->Order;
            $ProviderId = $params->ProviderId;
            $Visible = $params->Visible;

            $ProviderId = ($_REQUEST["ProviderId"] > 0 && is_numeric($_REQUEST["ProviderId"]) && $_REQUEST["ProviderId"] != '') ? $_REQUEST["ProviderId"] : '';
            $Product = $_REQUEST["Product"];
            $ProductId = $_REQUEST["ProductId"];

            $ExternalId = $_REQUEST["ExternalId"];
            $Id = $_REQUEST["Id"];
            $Image = $_REQUEST["Image"];
            $IsActivate = $_REQUEST["IsActivate"];
            $IsVerified = $_REQUEST["IsVerified"];

            $Name = $_REQUEST["Name"];
            $Order = $_REQUEST["Order"];
            $Visible = $_REQUEST["Visible"];

            $Desktop = ($_REQUEST["Desktop"] == "A" || $_REQUEST["Desktop"] == "I") ? $_REQUEST["Desktop"] : '';
            $Mobile = ($_REQUEST["Mobile"] == "A" || $_REQUEST["Mobile"] == "I") ? $_REQUEST["Mobile"] : '';
            if ($Desktop == "A") {
                $Desktop = 'S';
            } elseif ($Desktop == "I") {
                $Desktop = 'N';
            }

            if ($Mobile == "A") {
                $Mobile = 'S';
            } elseif ($Mobile == "I") {
                $Mobile = 'N';
            }


            $Producto = new Producto();

            $rules = [];

            if ($Desktop != "") {
                array_push($rules, array("field" => "producto.desktop", "data" => "$Desktop", "op" => "eq"));
            }

            if ($Mobile != "") {
                array_push($rules, array("field" => "producto.mobile", "data" => "$Mobile", "op" => "eq"));
            }
            if ($ExternalId != "") {
                array_push($rules, array("field" => "producto.externo_id", "data" => "$ExternalId", "op" => "eq"));
            }
            if ($Id != "") {
                array_push($rules, array("field" => "producto.producto_id", "data" => "$Id", "op" => "eq"));
            }
            if ($Image != "") {
                array_push($rules, array("field" => "producto.image_url", "data" => "$image", "op" => "eq"));
            }
            if ($IsActivate != "" && $IsActivate != null) {
                $IsActivate = ($IsActivate == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto.estado", "data" => "$IsActivate", "op" => "eq"));
            }
            if ($IsVerified != "" && $IsVerified != null) {
                $IsVerified = ($IsVerified == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto.verifica", "data" => "$IsVerified", "op" => "eq"));
            }
            if ($Name != "") {
                array_push($rules, array("field" => "producto.descripcion", "data" => "$Name", "op" => "cn"));
            }
            if ($Order != "") {
                array_push($rules, array("field" => "producto.orden", "data" => "$Order", "op" => "eq"));
            }
            if ($ProviderId != "") {
                array_push($rules, array("field" => "producto.proveedor_id", "data" => "$ProviderId", "op" => "eq"));
            }
            if ($Product != "") {
                if ($_SESSION["Global"] == "S") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$Product", "op" => "eq"));
                } else {

                }
            }

            if ($ProductId != "") {
                if ($_SESSION["Global"] == "S") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$ProductId", "op" => "eq"));
                } else {

                }
            }
            if ($Visible != "") {
                $Visible = ($Visible == 'A') ? 'S' : 'N';

                array_push($rules, array("field" => "producto.mostrar", "data" => "$Visible", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);


            $productos = $Producto->getProductosCustom(" producto.*,proveedor.* ", "producto.producto_id", "asc", $SkeepRows, $MaxRows, $jsonfiltro, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto.producto_id"};
                $array["Provider"] = array(
                    "Id" => $value->{"producto.proveedor_id"},
                    "Name" => $value->{"proveedor.descripcion"}
                );

                $array["ProviderId"] = $value->{"proveedor.descripcion"};

                $array["Name"] = $value->{"producto.descripcion"};
                $array["ImageURL"] = '';
                $array["Image"] = $value->{"producto.image_url"};
                $array["Order"] = $value->{"producto.orden"};

                $array["IsActivate"] = $value->{"producto.estado"};
                $array["IsVerified"] = $value->{"producto.verifica"};
                $array["ExternalId"] = $value->{"producto.externo_id"};
                $array["Visible"] = ($value->{"producto.mostrar"} == "S") ? "A" : "I";
                $array["Mobile"] = ($value->{"producto.mobile"} == "S") ? "A" : "I";
                $array["Desktop"] = ($value->{"producto.desktop"} == "S") ? "A" : "I";

                if ($array["Mobile"] == "A") {
                    if ($array["Desktop"] == "A") {
                        $array["TypeDevice"] = 3;
                    } else {
                        $array["TypeDevice"] = 1;

                    }
                } elseif ($array["Desktop"] == "A") {
                    $array["TypeDevice"] = 2;

                }

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $productos->count[0]->{".count"});

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $productos->count[0]->{".count"};
            $response["data"] = $final;


            break;

        /**
        * Categories/GetCategories
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Categories/GetCategories":

            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Slug = $params->Slug;
            $Id = $params->Id;
            $IsActivate = $params->IsActivate;
            $Type = $params->Type;
            $Description = $params->Description;


            $Categoria = new Categoria();

            $rules = [];

            if ($Slug != "") {
                array_push($rules, array("field" => "categoria.slug", "data" => "$Desktop", "op" => "eq"));
            }

            if ($Id != "") {
                array_push($rules, array("field" => "categoria.categoria_id", "data" => "$Id", "op" => "eq"));
            }


            if ($Description != "") {
                array_push($rules, array("field" => "categoria.descripcion", "data" => "$Id", "op" => "eq"));
            }

            if ($IsActivate != "" && $IsActivate != null) {
                $IsActivate = ($IsActivate == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "categoria.estado", "data" => "$IsActivate", "op" => "eq"));
            }
            if ($Type != "") {

                array_push($rules, array("field" => "categoria.tipo", "data" => "$Type", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $categorias = $Categoria->getCategoriasCustom(" categoria.* ", "categoria.categoria_id", "asc", $SkeepRows, $MaxRows, $jsonfiltro, true);

            $categorias = json_decode($categorias);

            $final = [];

            foreach ($categorias->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"categoria.categoria_id"};

                $array["Description"] = $value->{"categoria.descripcion"};
                $array["Type"] = $value->{"categoria.tipo"};
                $array["IsActivate"] = $value->{"categoria.estado"};
                $array["Slug"] = $value->{"categoria.slug"};
                $array["Superior"] = $value->{"categoria.superior"};
                $array["Higger"] = $value->{"categoria.superior"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $categorias->count[0]->{".count"});
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $proveedores->count[0]->{".count"};
            $response["data"] = $final;


            break;

        /**
        * Categories/UpdateCategory
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Categories/UpdateCategory":

            $Id = $params->Id;

            if ($Id != "") {

                $IsActivate = ($params->IsActivate != "A" && $params->IsActivate != "I") ? "" : $params->IsActivate;

                $Categoria = new Categoria($Id);


                if ($IsActivate != "") {
                    $Categoria->setEstado($IsActivate);
                }

                $Categoria->setUsumodifId($_SESSION['usuario2']);

                $CategoriaMySqlDAO = new CategoriaMySqlDAO();
                $CategoriaMySqlDAO->update($Categoria);
                $CategoriaMySqlDAO->getTransaction()->commit();
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;

        /**
        * Categories-products/GetCategoriesProducts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Categories-products/GetCategoriesProducts":


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Categorie = $params->Categorie;
            $Id = $params->Id;
            $IsActivate = $params->IsActivate;
            $Products = $params->Products;
            $Description = $params->Description;


            $Product = $_REQUEST["Product"];

            $CategoriaProducto = new CategoriaProducto();

            $rules = [];

            if ($Categorie != "") {
                array_push($rules, array("field" => "categoria.descripcion", "data" => "$Categorie", "op" => "eq"));
            }

            if ($Id != "") {
                array_push($rules, array("field" => "categoria_producto.catprod_id", "data" => "$Id", "op" => "eq"));
            }

            if ($IsActivate != "" && $IsActivate != null) {
                $IsActivate = ($IsActivate == 'A') ? 'A' : 'I';

                // array_push($rules, array("field" => "categoria_producto.estado", "data" => "$IsActivate", "op" => "eq"));
            }

            if ($Product != "") {
                if ($_SESSION["Global"] == "S") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$Product", "op" => "eq"));
                } else {

                }
            }

            if ($Products != "") {

                array_push($rules, array("field" => "producto.descripcion", "data" => "$Products", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $categorias = $CategoriaProducto->getCategoriaProductosCustom(" categoria_producto.*,categoria.*,producto.* ", "categoria_producto.catprod_id", "asc", $SkeepRows, $MaxRows, $jsonfiltro, true);

            $categorias = json_decode($categorias);

            $final = [];

            foreach ($categorias->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"categoria_producto.catprod_id"};

                $array["Categorie"] = array(
                    "Id" => $value->{"categoria.categoria_id"},
                    "Name" => $value->{"categoria.descripcion"}
                );
                $array["Categorie"] = $value->{"categoria.descripcion"};
                $array["Product"] = array(
                    "Id" => $value->{"producto.producto_id"},
                    "Name" => $value->{"producto.descripcion"}
                );
                $array["Product"] = $value->{"producto.descripcion"};
                $array["IsActivate"] = "A";

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $categorias->count[0]->{".count"});
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $categorias->count[0]->{".count"};
            $response["data"] = $final;


            break;

        /**
        * Categories/SaveCategoryProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Categories/SaveCategoryProduct":


            $Category = $params->Category;
            $Product = $params->Product;
            $IsActivate = ($params->IsActivate != "A" && $params->IsActivate != "I") ? "" : $params->IsActivate;

            $CategoriaProducto = new CategoriaProducto();


            $CategoriaProducto->setCategoriaId($Category);
            $CategoriaProducto->setProductoId($Product);

            $CategoriaProducto->setUsucreaId($_SESSION['usuario2']);
            $CategoriaProducto->setUsumodifId($_SESSION['usuario2']);

            $CategoriaProductoMySqlDAO = new CategoriaProductoMySqlDAO();
            $CategoriaProductoMySqlDAO->insert($CategoriaProducto);
            $CategoriaProductoMySqlDAO->getTransaction()->commit();

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;


        /**
        * Categories/UpdateCategoryProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Categories/UpdateCategoryProduct":

            $Id = $params->Id;

            if ($Id != "") {

                $IsActivate = ($params->IsActivate != "A" && $params->IsActivate != "I") ? "" : $params->IsActivate;

                $CategoriaProducto = new CategoriaProducto($Id);


                if ($IsActivate != "") {
                    $CategoriaProducto->setEstado($IsActivate);
                }

                $CategoriaProducto->setUsumodifId($_SESSION['usuario2']);

                $CategoriaProductoMySqlDAO = new CategoriaProductoMySqlDAO();
                $CategoriaProductoMySqlDAO->update($CategoriaProducto);
                $CategoriaProductoMySqlDAO->getTransaction()->commit();
            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];


            break;

        /**
        * PartnersProducts/GetPartnersProducts
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnersProducts/GetPartnersProducts":


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Id = $params->Id;
            $IsActivate = $params->IsActivate;
            $IsVerified = $params->IsVerified;
            $FilterCountry = $params->FilterCountry;
            $Products = $params->Products;
            $Partner = $params->Partner;
            $Minimum = $params->Minimum;
            $Maximum = $params->Maximum;
            $Product = $params->Product;


            $Id = $_REQUEST["Id"];
            $IsActivate = ($_REQUEST["IsActivate"] == "A" || $_REQUEST["IsActivate"] == "I") ? $_REQUEST["IsActivate"] : '';;
            $IsVerified = ($_REQUEST["IsVerified"] == "A" || $_REQUEST["IsVerified"] == "I") ? $_REQUEST["IsVerified"] : '';
            $FilterCountry = ($_REQUEST["FilterCountry"] == "A" || $_REQUEST["FilterCountry"] == "I") ? $_REQUEST["FilterCountry"] : '';
            $Products = $_REQUEST["Products"];
            $Partner = $_REQUEST["Partner"];
            $Minimum = $_REQUEST["Minimum"];
            $Maximum = $_REQUEST["Maximum"];
            $Product = $_REQUEST["Product"];
            $ProviderId = ($_REQUEST["ProviderId"] > 0 && is_numeric($_REQUEST["ProviderId"]) && $_REQUEST["ProviderId"] != '') ? $_REQUEST["ProviderId"] : '';
            $Name = $_REQUEST["Name"];

            $Desktop = ($_REQUEST["Desktop"] == "A" || $_REQUEST["Desktop"] == "I") ? $_REQUEST["Desktop"] : '';
            $Mobile = ($_REQUEST["Mobile"] == "A" || $_REQUEST["Mobile"] == "I") ? $_REQUEST["Mobile"] : '';
            if ($Desktop == "A") {
                $Desktop = 'S';
            } elseif ($Desktop == "I") {
                $Desktop = 'N';
            }

            if ($Mobile == "A") {
                $Mobile = 'S';
            } elseif ($Mobile == "I") {
                $Mobile = 'N';
            }


            $ProductoMandante = new ProductoMandante();

            $rules = [];

            if ($Desktop != "") {
                array_push($rules, array("field" => "producto.desktop", "data" => "$Desktop", "op" => "eq"));
            }

            if ($Mobile != "") {
                array_push($rules, array("field" => "producto.mobile", "data" => "$Mobile", "op" => "eq"));
            }

            if ($Id != "") {
                array_push($rules, array("field" => "producto_mandante.prodmandante_id", "data" => "$Id", "op" => "eq"));
            }

            if ($IsActivate != "" && $IsActivate != null) {
                $IsActivate = ($IsActivate == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto_mandante.estado", "data" => "$IsActivate", "op" => "eq"));
            }

            if ($IsVerified != "" && $IsVerified != null) {
                $IsVerified = ($IsVerified == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto_mandante.verifica", "data" => "$IsVerified", "op" => "eq"));
            }


            if ($FilterCountry != "" && $FilterCountry != null) {
                $FilterCountry = ($FilterCountry == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto_mandante.filtro_pais", "data" => "$FilterCountry", "op" => "eq"));
            }

            if ($Partner != "") {

                array_push($rules, array("field" => "producto_mandante.mandante", "data" => "$Partner", "op" => "eq"));
            }

            if ($Minimum != "") {

                array_push($rules, array("field" => "producto_mandante.min", "data" => "$Minimum", "op" => "eq"));
            }

            if ($Maximum != "") {

                array_push($rules, array("field" => "producto_mandante.max", "data" => "$Maximum", "op" => "eq"));
            }


            if ($Product != "") {
                if ($_SESSION["Global"] == "S") {
                    array_push($rules, array("field" => "producto.producto_id", "data" => "$Product", "op" => "eq"));

                } else {
                    array_push($rules, array("field" => "producto_mandante.prodmandante_id", "data" => "$Product", "op" => "eq"));

                }

            }


            if ($ProviderId != "") {

                array_push($rules, array("field" => "producto.proveedor_id", "data" => "$ProviderId", "op" => "eq"));
            }

            if ($Name != "") {

                array_push($rules, array("field" => "producto.descripcion", "data" => "$Name", "op" => "cn"));
            }


            $orden = "producto_mandante.prodmandante_id";
            $ordenTipo = "asc";

            if ($_REQUEST["sort[Order]"] != "") {
                $orden = "producto_mandante.orden";
                $ordenTipo = ($_REQUEST["sort[Order]"] == "asc") ? "asc" : "desc";

            }
            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $productos = $ProductoMandante->getProductosMandanteCustom(" producto_mandante.*,producto.*,mandante.*,proveedor.* ", $orden, $ordenTipo, $SkeepRows, $MaxRows, $jsonfiltro, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto_mandante.prodmandante_id"};

                $array["Product"] = $value->{"producto.descripcion"};
                $array["ProviderId"] = $value->{"proveedor.descripcion"};
                $array["Partner"] = $value->{"mandante.descripcion"};
                $array["IsActivate"] = $value->{"producto_mandante.estado"};
                $array["IsVerified"] = $value->{"producto_mandante.verifica"};
                $array["FilterCountry"] = $value->{"producto_mandante.filtro_pais"};
                $array["Maximum"] = $value->{"producto_mandante.max"};
                $array["Minimum"] = $value->{"producto_mandante.min"};
                $array["ProcessingTime"] = $value->{"producto_mandante.tiempo_procesamiento"};
                $array["Order"] = $value->{"producto_mandante.orden"};
                $array["Mobile"] = $value->{"producto.mobile"};
                $array["Desktop"] = $value->{"producto.desktop"};
                $array["Order"] = $value->{"producto_mandante.orden"};
                $array["FeaturedOrder"] = $value->{"producto_mandante.orden_destacado"};
                $array["Rows"] = $value->{"producto_mandante.num_fila"};
                $array["Columns"] = $value->{"producto_mandante.num_columna"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $productos->count[0]->{".count"});

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $productos->count[0]->{".count"};
            $response["data"] = $final;


            break;


        /**
        * Image/uploadImage
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Image/uploadImage":

            $filename = $_FILES['upload']['name'];
            $filetype = $_FILES['upload']['type'];

            if ($filename == "") {

            }

            $filename = time() . '.' . '.png';
            $name = "msj";

            $filename = $name . "T" . time() . '.' . 'png';

            $url = '';

            $dirsave = '/home/home2/backend/images/m/' . $filename;
            if ($filetype == 'image/jpeg' or $filetype == 'image/png' or $filetype == 'image/gif') {
                if (move_uploaded_file($_FILES['upload']['tmp_name'], $dirsave)) {
                    $url = 'https://images.doradobet.com/m/' . $filename;
                } else {

                }
            }

            $response["HasError"] = true;
            $response["AlertType"] = "Error";
            $response["AlertMessage"] = "";
            $response["url"] = $url;
            $response["success"] = "success";


            break;


        /**
        * Product/UpdateProductDetails
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Product/UpdateProductDetails":

            $Id = $params->Id;

            if ($_POST["upload_fullpath"] != "") {
                $Id = $_POST["Id"];

                $IsActivate = ($_POST["IsActivate"] != "A" && $_POST["IsActivate"] != "I") ? "" : $_POST["IsActivate"];
                $IsVerified = ($_POST["IsVerified"] != "A" && $_POST["IsVerified"] != "I") ? "" : $_POST["IsVerified"];
                $Name = str_replace("'", " ", $_POST["Name"]);
                $ExternalId = $_POST["ExternalId"];
                $Mobile = ($_POST["Mobile"] == "A") ? "S" : "N";
                $Desktop = ($_POST["Desktop"] == "A") ? "S" : "N";
                $Visible = ($_POST["Visible"] == "A") ? "S" : "N";
                $Provider = $_POST["Provider"];
                $Image = $_POST["Image"];
                $Order = $_POST["Order"];
                $ProviderId = $_POST["ProviderId"];

                $Order = 0;

                $Producto = new Producto($Id);


                if ($IsActivate != "") {
                    $Producto->setEstado($IsActivate);
                }
                if ($IsVerified != "") {
                    $Producto->setVerifica($IsVerified);
                }
                if ($Name != "") {
                    $Producto->setDescripcion($Name);

                }
                if ($ExternalId != "") {
                    $Producto->setExternoId($ExternalId);
                }

                if ($Mobile != "") {
                    $Producto->setMobile($Mobile);
                }
                if ($Desktop != "") {
                    $Producto->setDesktop($Desktop);

                }

                $filename = $_FILES['upload']['name'];
                $filetype = $_FILES['upload']['type'];
                $fileTypeName = "";

                if ($filetype != "image/gif") {
                    $fileTypeName = "png";
                } else {
                    $fileTypeName = "gif";
                }
                $filename = time() . '.' . $fileTypeName;
                $name = str_replace(' ', '-', $Producto->getDescripcion());
                $name = str_replace('(', '-', $name);
                $name = str_replace(')', '-', $name);

                $filename = $name . "T" . time() . '.' . $fileTypeName;

                $dirsave = '/home/home2/backend/images/productos/' . $filename;
                if ($filetype == 'image/jpeg' or $filetype == 'image/png' or $filetype == 'image/gif') {
                    if (move_uploaded_file($_FILES['upload']['tmp_name'], $dirsave)) {
                        $Producto->setImageUrl('https://images.doradobet.com/productos/' . $filename);
                    } else {

                    }
                }

                $Producto->setDescripcion(str_replace("'", " ", $Producto->getDescripcion()));

                if ($Order != "") {
                    $Producto->setOrden($Order);
                }

                if ($Provider->Id != "") {
                    $Producto->setProveedorId($Provider->Id);
                }

                $Producto->setUsumodifId($_SESSION['usuario2']);

                $ProductoMySqlDAO = new ProductoMySqlDAO();
                if ($Id != "") {
                    $ProductoMySqlDAO->update($Producto);
                } else {
                    $ProductoMySqlDAO->insert($Producto);

                }
                $ProductoMySqlDAO->getTransaction()->commit();

            } else {

                if ($Id != "") {

                    $IsActivate = ($params->IsActivate != "A" && $params->IsActivate != "I") ? "" : $params->IsActivate;
                    $IsVerified = ($params->IsVerified != "A" && $params->IsVerified != "I") ? "" : $params->IsVerified;
                    $Name = $params->Name;
                    $ExternalId = $params->ExternalId;
                    $Mobile = ($params->Mobile == "A") ? "S" : "N";
                    $Desktop = ($params->Desktop == "A") ? "S" : "N";
                    $Visible = ($params->Visible == "A") ? "S" : "N";
                    $Provider = $params->Provider;
                    $Image = $params->Image;
                    $Order = $params->Order;


                    $Producto = new Producto($Id);


                    if ($IsActivate != "") {
                        $Producto->setEstado($IsActivate);
                    }
                    if ($IsVerified != "") {
                        $Producto->setVerifica($IsVerified);
                    }
                    if ($Name != "") {
                        $Producto->setDescripcion($Name);

                    }
                    if ($ExternalId != "") {
                        $Producto->setExternoId($ExternalId);
                    }

                    if ($Mobile != "") {
                        $Producto->setMobile($Mobile);
                    }
                    if ($Desktop != "") {
                        $Producto->setDesktop($Desktop);

                    }
                    if ($params->upload != "" && $params->upload_fullpath != "") {
                        $filename = $_FILES['file']['name'];
                        $filetype = $_FILES['file']['type'];

                        $filename = time() . '.' . $_POST["fileType"];

                        $filename = $Producto->getDescripcion() . "T" . time() . '.' . $_POST["fileType"];
                        $dirsave = '/home/home2/backend/images/productos/' . $filename;
                        if ($filetype == 'image/jpeg' or $filetype == 'image/png' or $filetype == 'image/gif') {
                            if (move_uploaded_file($_FILES['file']['tmp_name'], $dirsave)) {
                                $Producto->setImageUrl('https://images.doradobet.com/productos/' . $filename);
                            } else {

                            }
                        }
                    } else {
                        if ($Image != "") {
                            $Producto->setImageUrl($Image);
                        }
                    }
                    $Producto->setDescripcion(str_replace("'", " ", $Producto->getDescripcion()));


                    if ($Order != "") {
                        $Producto->setOrden($Order);
                    }

                    if ($Provider->Id != "") {
                        $Producto->setProveedorId($Provider->Id);
                    }

                    $Producto->setUsumodifId($_SESSION['usuario2']);

                    $ProductoMySqlDAO = new ProductoMySqlDAO();
                    $ProductoMySqlDAO->update($Producto);
                    $ProductoMySqlDAO->getTransaction()->commit();
                } else {
                    $IsActivate = $params->IsActivate;
                    $IsVerified = $params->IsVerified;
                    $Name = $params->Name;
                    $ExternalId = $params->ExternalId;
                    $Mobile = ($params->Mobile == "A") ? "S" : "N";
                    $Desktop = ($params->Desktop == "A") ? "S" : "N";
                    $Visible = ($params->Visible == "A") ? "S" : "N";
                    $Provider = $params->Provider;
                    $ProviderId = $params->ProviderId;
                    $Order = $params->Order;
                    $Order = 0;

                    $Producto = new Producto();

                    $Producto->setEstado($IsActivate);
                    $Producto->setVerifica($IsVerified);
                    $Producto->setDescripcion($Name);
                    $Producto->setUsumodifId($_SESSION['usuario2']);
                    $Producto->setExternoId($ExternalId);
                    $Producto->setMobile($Mobile);
                    $Producto->setDesktop($Desktop);
                    $Producto->setProveedorId($ProviderId);
                    $Producto->setUsumodifId($_SESSION['usuario2']);
                    $Producto->setUsucreaId($_SESSION['usuario2']);
                    $Producto->setMostrar($Visible);
                    $Producto->setOrden($Order);

                    $ProductoMySqlDAO = new ProductoMySqlDAO();
                    $ProductoMySqlDAO->insert($Producto);
                    $ProductoMySqlDAO->getTransaction()->commit();

                }
            }


            break;

        /**
        * PartnerProduct/CreatePartnerProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnerProduct/CreatePartnerProduct":

            $Product = $params->Product;
            $Partner = $params->Partner;
            $IsActivate = $params->IsActivate;
            $FilterCountry = $params->FilterCountry;
            $IsVerified = $params->IsVerified;
            $Maximum = $params->Maximum;
            $Minimum = $params->Minimum;
            $ProcessingTime = $params->ProcessingTime;
            $Order = $params->Order;
            $Order = $params->Order;
            $Rows = $params->Rows;
            $Columns = $params->Columns;

            $IsActivate = ($IsActivate != 'A' && $IsActivate != "I") ? '' : $IsActivate;
            $IsVerified = ($IsVerified == 'A' && $IsVerified != "I") ? '' : $IsVerified;
            $FilterCountry = ($FilterCountry == 'A' && $FilterCountry != "I") ? '' : $FilterCountry;

            $seguir = true;

            if (($Product == "" || !is_numeric($Product)) || ($Partner == "" || !is_numeric($Partner))) {
                $seguir = false;
            }

            if ($seguir) {

                try {
                    $Producto = new Producto($Product);

                } catch (Exception $e) {
                    $seguir = false;
                    $messageError = "No existe el proveedor";
                }
                if ($seguir) {

                    try {
                        $Mandante = new Mandante($Partner);
                    } catch (Exception $e) {
                        $seguir = false;
                        $messageError = "No existe el Partner";
                    }
                }

                if ($seguir) {

                    try {
                        $ProductoMandante = new ProductoMandante($Product, $Partner, "");
                        $seguir = false;
                        $messageError = "Ya existe el proveedor para el Partner";
                    } catch (Exception $e) {
                    }
                }


                if ($seguir) {

                    $ProductoMandante = new ProductoMandante();

                    $ProductoMandante->mandante = $Partner;
                    $ProductoMandante->productoId = $Product;

                    if ($IsActivate != "") {
                        $ProductoMandante->estado = $IsActivate;
                    }

                    if ($IsVerified != "") {
                        $ProductoMandante->verifica = $IsVerified;
                    }

                    if ($FilterCountry != "") {
                        $ProductoMandante->filtroPais = $FilterCountry;
                    }

                    if ($Maximum != "") {
                        $ProductoMandante->max = $Maximum;
                    }

                    if ($Minimum != "") {
                        $ProductoMandante->min = $Minimum;
                    }

                    if ($Detail != "") {
                        $ProductoMandante->detalle = $Detail;
                    }

                    if ($Order != "") {
                        $ProductoMandante->orden = $Order;
                    }

                    if ($Rows != "") {
                        $ProductoMandante->numFila = $Rows;
                    }

                    if ($Columns != "") {
                        $ProductoMandante->numColumna = $Columns;
                    }

                    $ProductoMandante->ordenDestacado = 0;

                    $ProductoMandante->usucreaId = $_SESSION["usuario"];
                    $ProductoMandante->usumodifId = $_SESSION["usuario"];


                    $ProductoMandanteMySqlDAO = new ProductoMandanteMySqlDAO();

                    $ProductoMandanteMySqlDAO->insert($ProductoMandante);
                    $ProductoMandanteMySqlDAO->getTransaction()->commit();

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];
                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "Error";
                    $response["AlertMessage"] = $messageError;
                    $response["ModelErrors"] = [];

                }
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }


            break;


        /**
        * PartnerProduct/UpdatePartnerProductDetails
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnerProduct/UpdatePartnerProductDetails":

            $Id = $params->Id;

            if ($Id != "") {

                $IsActivate = $params->IsActivate;
                $FilterCountry = $params->FilterCountry;
                $IsVerified = $params->IsVerified;
                $Maximum = $params->Maximum;
                $Minimum = $params->Minimum;
                $ProcessingTime = $params->ProcessingTime;
                $Maximum = $params->Maximum;
                $Order = intval($params->Order);
                $FeaturedOrder = intval($params->FeaturedOrder);
                $Rows = intval($params->Rows);
                $Columns = intval($params->Columns);

                $IsActivate = ($IsActivate != 'A' && $IsActivate != "I") ? '' : $IsActivate;
                $IsVerified = ($IsVerified == 'A' && $IsVerified != "I") ? '' : $IsVerified;
                $FilterCountry = ($FilterCountry == 'A' && $FilterCountry != "I") ? '' : $FilterCountry;


                $ProductoMandante = new ProductoMandante("", "", $Id);

                if ($IsActivate != "") {
                    $ProductoMandante->estado = $IsActivate;
                }

                if ($IsVerified != "") {
                    $ProductoMandante->verifica = $IsVerified;
                }

                if ($FilterCountry != "") {
                    $ProductoMandante->filtro_pais = $FilterCountry;
                }

                if ($Maximum != "") {
                    $ProductoMandante->max = $Maximum;
                }

                if ($Minimum != "") {
                    $ProductoMandante->min = $Minimum;
                }

                if ($ProcessingTime != "") {
                    $ProductoMandante->tiempoProcesamiento = $ProcessingTime;
                }

                if ($Order != "") {
                    $ProductoMandante->orden = $Order;
                }

                if ($FeaturedOrder != "") {
                    $ProductoMandante->ordenDestacado = $FeaturedOrder;
                }

                if ($Rows != "") {
                    $ProductoMandante->numFila = $Rows;
                }

                if ($Order != "") {
                    $ProductoMandante->numColumna = $Columns;
                }


                $ProductoMandanteMySqlDAO = new ProductoMandanteMySqlDAO();

                $ProductoMandanteMySqlDAO->update($ProductoMandante);
                $ProductoMandanteMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            }

            break;

        /**
        * PartnersProducts/GetPartnersProviders
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnersProducts/GetPartnersProviders":


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Id = $params->Id;
            $IsActivate = $params->IsActivate;
            $IsVerified = $params->IsVerified;
            $FilterCountry = $params->FilterCountry;
            $Products = $params->Products;
            $Partner = $params->Partner;
            $Minimum = $params->Minimum;
            $Maximum = $params->Maximum;
            $Product = $params->Product;


            $ProveedorMandante = new ProveedorMandante();

            $rules = [];

            if ($Id != "") {
                array_push($rules, array("field" => "proveedor_mandante.prodmandante_id", "data" => "$Id", "op" => "eq"));
            }

            if ($IsActivate != "" && $IsActivate != null) {
                $IsActivate = ($IsActivate == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "proveedor_mandante.estado", "data" => "$IsActivate", "op" => "eq"));
            }

            if ($IsVerified != "" && $IsVerified != null) {
                $IsVerified = ($IsVerified == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "proveedor_mandante.verifica", "data" => "$IsVerified", "op" => "eq"));
            }


            if ($FilterCountry != "" && $FilterCountry != null) {
                $FilterCountry = ($FilterCountry == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "proveedor_mandante.filtro_pais", "data" => "$FilterCountry", "op" => "eq"));
            }

            if ($Partner != "") {

                array_push($rules, array("field" => "proveedor_mandante.mandante", "data" => "$Partner", "op" => "eq"));
            }

            if ($Minimum != "") {

                array_push($rules, array("field" => "proveedor_mandante.min", "data" => "$Minimum", "op" => "eq"));
            }

            if ($Maximum != "") {

                array_push($rules, array("field" => "proveedor_mandante.max", "data" => "$Maximum", "op" => "eq"));
            }


            if ($Product != "") {

                array_push($rules, array("field" => "proveedor_mandante.producto_id", "data" => "$Product", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $productos = $ProveedorMandante->getProveedoresMandanteCustom(" proveedor_mandante.*,proveedor.*,mandante.* ", "proveedor_mandante.provmandante_id", "asc", $SkeepRows, $MaxRows, $jsonfiltro, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"proveedor_mandante.provmandante_id"};

                $array["Provider"] = $value->{"proveedor.descripcion"};
                $array["Partner"] = $value->{"mandante.descripcion"};
                $array["IsActivate"] = $value->{"proveedor_mandante.estado"};
                $array["IsVerified"] = $value->{"proveedor_mandante.verifica"};
                $array["FilterCountry"] = $value->{"proveedor_mandante.filtro_pais"};
                $array["Maximum"] = $value->{"proveedor_mandante.max"};
                $array["Minimum"] = $value->{"proveedor_mandante.min"};
                $array["Detail"] = $value->{"proveedor_mandante.detalle"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $productos->count[0]->{".count"});

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $proveedores->count[0]->{".count"};
            $response["data"] = $final;


            break;

        /**
        * RelationUserAggregator/GetRelationUserAggregator
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "RelationUserAggregator/GetRelationUserAggregator":


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Id = $params->Id;
            $IsActivate = $params->IsActivate;
            $IsVerified = $params->IsVerified;
            $FilterCountry = $params->FilterCountry;
            $Products = $params->Products;
            $Partner = $params->Partner;
            $Minimum = $params->Minimum;
            $Maximum = $params->Maximum;
            $Product = $params->Product;

            $UserPartner = $_REQUEST["UserPartner"];
            $UserAggregator = $_REQUEST["UserAggregator"];


            $UsuarioMandante = new UsuarioMandante();

            $rules = [];

            if ($UserAggregator != "") {
                array_push($rules, array("field" => "usuario_mandante.usumandante_id", "data" => "$UserAggregator", "op" => "eq"));
            }

            if ($UserPartner != "" && $UserPartner != null) {

                array_push($rules, array("field" => "usuario_mandante.usuario_mandante", "data" => "$UserPartner", "op" => "eq"));
            }


            if ($_SESSION['PaisCond'] == "S") {
                array_push($rules, array("field" => "usuario.pais_id", "data" => $_SESSION['pais_id'], "op" => "eq"));
            }
            if ($_SESSION['Global'] == "N") {
                array_push($rules, array("field" => "usuario.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
            }


            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $usuarios = $UsuarioMandante->getUsuariosMandantesCustom(" usuario_mandante.*,usuario.usuario_id ", "usuario_mandante.usumandante_id", "asc", $SkeepRows, $MaxRows, $jsonfiltro, true);

            $usuarios = json_decode($usuarios);

            $final = [];

            foreach ($usuarios->data as $key => $value) {

                $array = [];

                $array["UserPartner"] = $value->{"usuario.usuario_id"};

                $array["UserAggregator"] = $value->{"usuario_mandante.usumandante_id"};
                $array["CreatedLocalDate"] = $value->{"usuario_mandante.fecha_crea"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $productos->count[0]->{".count"});

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $proveedores->count[0]->{".count"};
            $response["data"] = $final;


            break;


        /**
        * PartnerProduct/UpdatePartnerProvider
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnerProduct/UpdatePartnerProvider":

            $Id = $params->Id;

            if ($Id != "") {

                $IsActivate = $params->IsActivate;
                $FilterCountry = $params->FilterCountry;
                $IsVerified = $params->IsVerified;
                $Maximum = $params->Maximum;
                $Minimum = $params->Minimum;
                $Detail = $params->Detail;
                $Maximum = $params->Maximum;

                $IsActivate = ($IsActivate != 'A' && $IsActivate != "I") ? '' : $IsActivate;
                $IsVerified = ($IsVerified != 'A' && $IsVerified != "I") ? '' : $IsVerified;
                $FilterCountry = ($FilterCountry != 'A' && $FilterCountry != "I") ? '' : $FilterCountry;


                $ProveedorMandante = new ProveedorMandante("", "", $Id);

                if ($IsActivate != "") {
                    $ProveedorMandante->estado = $IsActivate;
                }

                if ($IsVerified != "") {
                    $ProveedorMandante->verifica = $IsVerified;
                }

                if ($FilterCountry != "") {
                    $ProveedorMandante->filtro_pais = $FilterCountry;
                }

                if ($Maximum != "") {
                    $ProveedorMandante->max = $Maximum;
                }

                if ($Minimum != "") {
                    $ProveedorMandante->min = $Minimum;
                }

                if ($Detail != "") {
                    $ProveedorMandante->detalle = $Detail;
                }
                $ProveedorMandante->usumodifId = $_SESSION["usuario"];


                $ProveedorMandanteMySqlDAO = new ProveedorMandanteMySqlDAO();

                $ProveedorMandanteMySqlDAO->update($ProveedorMandante);
                $ProveedorMandanteMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            } else {

                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "Error";
                $response["ModelErrors"] = [];

            }

            break;

        /**
        * PartnerProduct/CreatePartnerProvider
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnerProduct/CreatePartnerProvider":

            $Provider = $params->Provider;
            $Partner = $params->Partner;
            $IsActivate = $params->IsActivate;
            $FilterCountry = $params->FilterCountry;
            $IsVerified = $params->IsVerified;
            $Maximum = $params->Maximum;
            $Minimum = $params->Minimum;
            $Detail = $params->Detail;
            $Maximum = $params->Maximum;

            $IsActivate = ($IsActivate != 'A' && $IsActivate != "I") ? '' : $IsActivate;
            $IsVerified = ($IsVerified == 'A' && $IsVerified != "I") ? '' : $IsVerified;
            $FilterCountry = ($FilterCountry == 'A' && $FilterCountry != "I") ? '' : $FilterCountry;

            $seguir = true;

            if (($Provider == "" || !is_numeric($Provider)) || ($Partner == "" || !is_numeric($Partner))) {
                $seguir = false;
            }

            if ($seguir) {

                try {
                    $Proveedor = new Proveedor($Provider);

                } catch (Exception $e) {
                    $seguir = false;
                    $messageError = "No existe el proveedor";
                }
                if ($seguir) {

                    try {
                        $Mandante = new Mandante($Partner);
                    } catch (Exception $e) {
                        $seguir = false;
                        $messageError = "No existe el Partner";
                    }
                }
                if ($seguir) {

                    try {
                        $ProveedorMandante = new ProdMandanteTipo($Proveedor->getTipo(), $Partner, "");

                    } catch (Exception $e) {
                        $seguir = false;
                        $messageError = "El proveedor no tiene el tipo de juego permitido";

                    }
                }

                if ($seguir) {

                    try {
                        $ProveedorMandante = new ProveedorMandante($Provider, $Partner, "");
                        $seguir = false;
                        $messageError = "Ya existe el proveedor para el Partner";
                    } catch (Exception $e) {
                    }
                }


                if ($seguir) {

                    $ProveedorMandante = new ProveedorMandante();

                    $ProveedorMandante->mandante = $Partner;
                    $ProveedorMandante->proveedorId = $Provider;

                    if ($IsActivate != "") {
                        $ProveedorMandante->estado = $IsActivate;
                    }

                    if ($IsVerified != "") {
                        $ProveedorMandante->verifica = $IsVerified;
                    }

                    if ($FilterCountry != "") {
                        $ProveedorMandante->filtroPais = $FilterCountry;
                    }

                    if ($Maximum != "") {
                        $ProveedorMandante->max = $Maximum;
                    }

                    if ($Minimum != "") {
                        $ProveedorMandante->min = $Minimum;
                    }

                    if ($Detail != "") {
                        $ProveedorMandante->detalle = $Detail;
                    }
                    $ProveedorMandante->usucreaId = $_SESSION["usuario"];
                    $ProveedorMandante->usumodifId = $_SESSION["usuario"];


                    $ProveedorMandanteMySqlDAO = new ProveedorMandanteMySqlDAO();

                    $ProveedorMandanteMySqlDAO->insert($ProveedorMandante);
                    $ProveedorMandanteMySqlDAO->getTransaction()->commit();

                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];
                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "Error";
                    $response["AlertMessage"] = $messageError;
                    $response["ModelErrors"] = [];

                }
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }


            break;

        /**
        * PartnersProducts/GetPartnersTypeProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnersProducts/GetPartnersTypeProduct":


            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Id = $params->Id;
            $IsActivate = $params->IsActivate;
            $Partner = $params->Partner;


            $ProdMandanteTipo = new ProdMandanteTipo();

            $rules = [];

            if ($Id != "") {
                array_push($rules, array("field" => "prodmandante_tipo.prodmandante_id", "data" => "$Id", "op" => "eq"));
            }

            if ($IsActivate != "" && $IsActivate != null) {
                $IsActivate = ($IsActivate == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "prodmandante_tipo.estado", "data" => "$IsActivate", "op" => "eq"));
            }

            if ($Partner != "") {

                array_push($rules, array("field" => "prodmandante_tipo.mandante", "data" => "$Partner", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $productos = $ProdMandanteTipo->getProductosMandanteCustom(" prodmandante_tipo.*,mandante.* ", "prodmandante_tipo.prodmandtipo_id", "asc", $SkeepRows, $MaxRows, $jsonfiltro, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"prodmandante_tipo.prodmandtipo_id"};

                $array["Partner"] = $value->{"mandante.descripcion"};
                $array["IsActivate"] = $value->{"prodmandante_tipo.estado"};
                $array["SiteId"] = $value->{"prodmandante_tipo.site_id"};
                $array["Key"] = $value->{"prodmandante_tipo.site_key"};
                $array["Url"] = $value->{"prodmandante_tipo.url_api"};
                $array["TypeIntegration"] = $value->{"prodmandante_tipo.tipo_integracion"};
                $array["Contingency"] = $value->{"prodmandante_tipo.contingencia"};

                switch ($value->{"prodmandante_tipo.tipo"}) {
                    case "CASINO":
                        $array["Type"] = "Casino";

                        break;

                    case "PAYMENT":
                        $array["Type"] = "Pasarela de pagos";

                        break;

                }

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $productos->count[0]->{".count"});

            $response["pos"] = $SkeepRows;
            $response["total_count"] = $proveedores->count[0]->{".count"};
            $response["data"] = $final;


            break;


        /**
        * PartnerProduct/UpdatePartnerTypeProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnerProduct/UpdatePartnerTypeProduct":

            $Id = $params->Id;

            if ($Id != "") {

                $IsActivate = $params->IsActivate;
                $Url = $params->Url;
                $ChangeKey = ($params->ChangeKey == 1) ? 1 : 0;

                $IsActivate = ($IsActivate != 'A' && $IsActivate != "I") ? '' : $IsActivate;


                $ProdMandanteTipo = new ProdMandanteTipo("", "", $Id);

                if ($IsActivate != "") {
                    $ProdMandanteTipo->estado = $IsActivate;
                }

                if ($ChangeKey == 1) {
                    $ProdMandanteTipo->siteKey = encrypt_decrypt('encrypt', ($ProdMandanteTipo->prodmandtipoId . '_' . $ProdMandanteTipo->mandante) . "_" . time());
                }

                $ProdMandanteTipo->urlApi = $Url;

                $ProdMandanteTipo->usumodifId = $_SESSION["usuario"];


                $ProdMandanteTipoMySqlDAO = new ProdMandanteTipoMySqlDAO();

                $ProdMandanteTipoMySqlDAO->update($ProdMandanteTipo);
                $ProdMandanteTipoMySqlDAO->getTransaction()->commit();

                $response["HasError"] = false;
                $response["AlertType"] = "success";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];


            } else {

                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "Error";
                $response["ModelErrors"] = [];

            }

            break;

        /**
        * PartnerProduct/CreatePartnerTypeProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnerProduct/CreatePartnerTypeProduct":

            $Partner = $params->Partner;
            $IsActivate = $params->IsActivate;
            $Type = $params->Type;
            $Url = $params->Url;

            $IsActivate = ($IsActivate != 'A' && $IsActivate != "I") ? 'A' : $IsActivate;

            $seguir = true;

            if (($Type != "CASINO" && $Type != "PAYMENT") || ($Partner == "" || !is_numeric($Partner))) {
                $seguir = false;
            }

            if ($seguir) {

                if ($seguir) {

                    try {
                        $Mandante = new Mandante($Partner);
                    } catch (Exception $e) {
                        $seguir = false;
                        $messageError = "No existe el Partner";
                    }
                }
                if ($seguir) {

                    try {
                        $ProveedorMandante = new ProdMandanteTipo($Type, $Partner, "");
                        $seguir = false;
                        $messageError = "El proveedor ya tiene el tipo de juego";

                    } catch (Exception $e) {

                    }
                }

                if ($seguir) {

                    $ProdMandanteTipo = new ProdMandanteTipo();

                    $ProdMandanteTipo->mandante = $Partner;
                    $ProdMandanteTipo->tipo = $Type;

                    if ($IsActivate != "") {
                        $ProdMandanteTipo->estado = $IsActivate;
                    }
                    $ProdMandanteTipo->siteId = 0;
                    $ProdMandanteTipo->siteKey = '';
                    $ProdMandanteTipo->urlApi = $Url;

                    $ProdMandanteTipo->usucreaId = $_SESSION["usuario"];
                    $ProdMandanteTipo->usumodifId = $_SESSION["usuario"];

                    $ProdMandanteTipoMySqlDAO = new ProdMandanteTipoMySqlDAO();

                    $ProdMandanteTipoMySqlDAO->insert($ProdMandanteTipo);
                    $ProdMandanteTipoMySqlDAO->getTransaction()->commit();

                    $ProdMandanteTipo->siteId = $ProdMandanteTipo->prodmandtipoId + 1000;
                    $ProdMandanteTipo->siteKey = encrypt_decrypt('encrypt', ($ProdMandanteTipo->prodmandtipoId . '_' . $ProdMandanteTipo->mandante) . "_" . time());


                    $ProdMandanteTipoMySqlDAO = new ProdMandanteTipoMySqlDAO();

                    $ProdMandanteTipoMySqlDAO->update($ProdMandanteTipo);
                    $ProdMandanteTipoMySqlDAO->getTransaction()->commit();


                    $response["HasError"] = false;
                    $response["AlertType"] = "success";
                    $response["AlertMessage"] = "";
                    $response["ModelErrors"] = [];
                } else {
                    $response["HasError"] = true;
                    $response["AlertType"] = "Error";
                    $response["AlertMessage"] = $messageError;
                    $response["ModelErrors"] = [];

                }
            } else {
                $response["HasError"] = true;
                $response["AlertType"] = "Error";
                $response["AlertMessage"] = "";
                $response["ModelErrors"] = [];

            }


            break;


        /**
        * PartnersProductsCountry/GetPartnersProductsCountry
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "PartnersProductsCountry/GetPartnersProductsCountry":


            error_reporting(E_ALL);
            ini_set("display_errors", "ON");
            $MaxRows = $_REQUEST["count"];
            $OrderedItem = $params->OrderedItem;
            $SkeepRows = ($_REQUEST["start"] == "") ? $_REQUEST["?start"] : $_REQUEST["start"];

            if ($SkeepRows == "") {
                $SkeepRows = 0;
            }

            if ($OrderedItem == "") {
                $OrderedItem = 1;
            }

            if ($MaxRows == "") {
                $MaxRows = 10000;
            }


            $Id = $params->Id;
            $IsActivate = $params->IsActivate;
            $IsVerified = $params->IsVerified;
            $FilterCountry = $params->FilterCountry;
            $Products = $params->Products;
            $Partner = $params->Partner;
            $Minimum = $params->Minimum;
            $Maximum = $params->Maximum;
            $Product = $params->Product;


            $ProductoMandante = new ProductoMandantePais();

            $rules = [];

            if ($Id != "") {
                array_push($rules, array("field" => "producto_mandante.prodmandante_id", "data" => "$Id", "op" => "eq"));
            }

            if ($IsActivate != "" && $IsActivate != null) {
                $IsActivate = ($IsActivate == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto_mandante.estado", "data" => "$IsActivate", "op" => "eq"));
            }

            if ($IsVerified != "" && $IsVerified != null) {
                $IsVerified = ($IsVerified == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto_mandante.verifica", "data" => "$IsVerified", "op" => "eq"));
            }


            if ($FilterCountry != "" && $FilterCountry != null) {
                $FilterCountry = ($FilterCountry == 'A') ? 'A' : 'I';

                array_push($rules, array("field" => "producto_mandante.filtro_pais", "data" => "$FilterCountry", "op" => "eq"));
            }

            if ($Partner != "") {

                array_push($rules, array("field" => "producto_mandante.mandante", "data" => "$Partner", "op" => "eq"));
            }

            if ($Minimum != "") {

                array_push($rules, array("field" => "producto_mandante.min", "data" => "$Minimum", "op" => "eq"));
            }

            if ($Maximum != "") {

                array_push($rules, array("field" => "producto_mandante.max", "data" => "$Maximum", "op" => "eq"));
            }


            if ($Product != "") {

                array_push($rules, array("field" => "producto_mandante.producto_id", "data" => "$Product", "op" => "eq"));
            }

            $filtro = array("rules" => $rules, "groupOp" => "AND");
            $jsonfiltro = json_encode($filtro);

            $productos = $ProductoMandante->getProductosMandanteCustom(" producto_mandante.*,producto.*,mandante.* ", "producto_mandante.prodmandante_id", "asc", $SkeepRows, $MaxRows, $jsonfiltro, true);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto_mandante.prodmandante_id"};

                $array["Product"] = $value->{"producto.descripcion"};
                $array["Partner"] = $value->{"mandante.descripcion"};
                $array["IsActivate"] = $value->{"producto_mandante.estado"};
                $array["IsVerified"] = $value->{"producto_mandante.verifica"};
                $array["FilterCountry"] = $value->{"producto_mandante.filtro_pais"};
                $array["Maximum"] = $value->{"producto_mandante.max"};
                $array["Minimum"] = $value->{"producto_mandante.min"};
                $array["ProcessingTime"] = $value->{"producto_mandante.tiempo_procesamiento"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            //$response["Data"] = array("Objects" => $final, "Count" => $productos->count[0]->{".count"});
            $response["pos"] = $SkeepRows;
            $response["total_count"] = $productos->count[0]->{".count"};
            $response["data"] = $final;


            break;


        /**
        * Product/GetProductList
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "Product/GetProductList":

            $Producto = new Producto();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "a.", "data": "1","op":"eq"}] ,"groupOp" : "AND"}';

            $productos = $Producto->getProductosCustom(" producto.*,proveedor.* ", "producto.proveedor_id", "asc", $SkeepRows, $MaxRows, $json, false);

            $productos = json_decode($productos);

            $final = [];

            foreach ($productos->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"producto.producto_id"};
                $array["CategoryId"] = 0;
                $array["ProviderId"] = $value->{"producto.proveedor_id"};
                $array["ProviderName"] = $value->{"proveedor.descripcion"};


                $array["Notes"] = $value->{"producto.descripcion"};
                array_push($final, $array);

            }


            $response = $final;


            break;

        /**
        * GetProductProviderList
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetProductProviderList":

            $Proveedor = new Proveedor();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "", "data": "1","op":"eq"}] ,"groupOp" : "AND"}';

            $proveedores = $Proveedor->getProveedoresCustom(" proveedor.* ", "proveedor.proveedor_id", "asc", $SkeepRows, $MaxRows, $json, false);
            $proveedores = json_decode($proveedores);

            $final = [];

            foreach ($proveedores->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"proveedor.proveedor_id"};
                $array["Name"] = $value->{"proveedor.descripcion"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response = $final;

            break;


        /**
        * GetProductCategoryList
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "GetProductCategoryList":

            $Proveedor = new Proveedor();

            $SkeepRows = 0;
            $MaxRows = 1000000;

            $json = '{"rules" : [{"field" : "", "data": "1","op":"eq"}] ,"groupOp" : "AND"}';

            $proveedores = $Proveedor->getProveedoresCustom(" proveedor.* ", "proveedor.proveedor_id", "asc", $SkeepRows, $MaxRows, $json, false);
            $proveedores = json_decode($proveedores);

            $final = [];

            foreach ($proveedores->data as $key => $value) {

                $array = [];

                $array["Id"] = $value->{"proveedor.proveedor_id"};
                $array["Name"] = $value->{"proveedor.descripcion"};

                array_push($final, $array);

            }

            $response["HasError"] = false;
            $response["AlertType"] = "success";
            $response["AlertMessage"] = "";
            $response["ModelErrors"] = [];

            $response = $final;


            break;

        /**
        * CreateProduct
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "CreateProduct":

            $Notes = $params->Notes;
            $ProviderId = $params->ProviderId;
            $State = $params->State;
            $Verification = $params->Verification;
            $ImageUrl = $params->ImageUrl;
            $ExternalId = $params->ExternalId;
            $CategoryId = $params->CategoryId;
            $Verification = $params->Verification;


            $Producto = new Producto();

            $Producto->setDescripcion($Notes);
            $Producto->setProveedorId($ProviderId);
            $Producto->setEstado($State);
            $Producto->setImageUrl($ImageUrl);
            $Producto->setExternoId($ExternalId);
            $Producto->setVerifica($Verification);
            $Producto->setUsucreaId(0);
            $Producto->setUsumodifId(0);

            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $ProductoMySqlDAO = new ProductoMySqlDAO();
                $ProductoMySqlDAO->insert($Producto);
                $ProductoMySqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode();

            }


            $response = $response;


            break;


        /**
        * CreateSale
        *
        *
        * @param no
        *
        * @return no
        * @throws no
        *
        * @access public
        * @see no
        * @since no
        * @deprecated no
        */
        case "CreateSale":

            $ProductId = $params->ProductId;
            $PartnerId = $params->PartnerId;
            $State = ($params->IsWorking) ? "A" : "I";
            $Verification = ($params->IsVerification) ? "A" : "I";


            $ProductoMandante = new ProductoMandante();

            $ProductoMandante->productoId = $ProductId;
            $ProductoMandante->mandante = $PartnerId;
            $ProductoMandante->estado = $State;
            $ProductoMandante->verifica = $Verification;
            $ProductoMandante->usucreaId = 0;
            $ProductoMandante->usumodifId = 0;

            $response["ErrorCode"] = 0;
            $response["ErrorDescription"] = "success";

            try {
                $ProductoMandanteMySqlDAO = new ProductoMandanteMySqlDAO();
                $ProductoMandanteMySqlDAO->insert($ProductoMandante);
                $ProductoMandanteMySqlDAO->getTransaction()->commit();

            } catch (Exception $e) {
                $response["ErrorCode"] = $e->getCode();
                $response["ErrorDescription"] = " Ocurrio un error. Error: " . $e->getCode();

            }


            $response = $response;
            break;


        default:
            # code...
            break;
    }
} catch (Exception $e) {


    $code = $e->getCode();
    /*
     *
     errorCode  Error Description
        0       Completed successfully

    1   General error
    2   Saved for future use
    3   Insufficient funds
    4   Operator limit to the player 1 (insufficient behavior)
    5   Operator limit to the player 2 (insufficient behavior)
    6   Token not found
    7   User not found
    8   User blocked
    9   Transaction not found
    10  Transaction timed out
    11  Real balance is not enough for tipping

     */

    $codeProveedor = "";
    $messageProveedor = "";

    $response = array();

    switch ($code) {
        case 10011:
            $codeProveedor = "400";
            $messageProveedor = "No such session.";

            break;
        case 21:
            $codeProveedor = "400";
            $messageProveedor = "No such session.";

            break;
        case 22:
            $codeProveedor = "400";
            $messageProveedor = "No such session.";

            break;
        case 20001:
            $codeProveedor = "402";
            $messageProveedor = "Insufficient funds.";

            break;

        case 0:
            $codeProveedor = "402";
            $messageProveedor = "General Error. (" . $code . ")";

            break;
        case 27:
            $codeProveedor = "402";
            $messageProveedor = "General Error. (" . $code . ")";
            break;
        case 28:


            $codeProveedor = "402";
            $messageProveedor = "General Error. (" . $code . ")";


            break;
        case 29:


            $codeProveedor = "402";
            $messageProveedor = "Transaction Not Found";

            break;

        case 10001:

            $codeProveedor = 0;
            $messageProveedor = "Already processed";

            break;

        case 10004:

            $codeProveedor = "REQUEST_DECLINED";
            $messageProveedor = "General Error. (" . $code . ")";

            break;
        case 10014:

            $codeProveedor = "REQUEST_DECLINED";
            $messageProveedor = "General Error. (" . $code . ")";

            break;


        case 10010:

            $codeProveedor = "REQUEST_DECLINED";
            $messageProveedor = "General Error. (" . $code . ")";


            break;


        case 20001:

            $codeProveedor = "402";
            $messageProveedor = "Insufficients Funds";


            break;

        case 20002:


            break;

        case 20003:

            $codeProveedor = "ACCOUNT_BLOCKED";
            $messageProveedor = "ACCOUNT_BLOCKED";


            break;

        case 10005:


            break;

        case 50:

            $messageProveedor = "El usuario o la clave son incorrectos. ";

            break;

        default:
            $codeProveedor = 'UNKNOWN_ERROR';
            $messageProveedor = "Unexpected error. Reporte el codigo" . $code . ".";
            $messageProveedor = "Error en la solicitud.";


            break;
    }


    $response["HasError"] = true;
    $response["AlertType"] = "danger";
    $response["AlertMessage"] = 'Error en el login';
    //$response["AlertMessage"] = '-|' . $e->getMessage() . ' |-' . '(' . $e->getCode() . ')';
    $response["AlertMessage"] = $messageProveedor . ' (Report#' . $code . ")";
    // $response["AlertMessage"] = '-|' . "" . ' |-' . '(' . $e->getCode() . ')';
    $response["ModelErrors"] = [];
}


if (json_encode($response) != "[]") {
    print_r(json_encode($response));

}

if ($URI == "/admin/dao/backapi/en/Financial/GetDepositsWithdrawalsWithPaging") {

    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data":{"Documents" : {"Objects":[{"Id" : 1,"ClientId":1,"CreatedLocal":"07/07/2012 07:59:59","TypeName":1,"CurrencyId":1,"ModifiedLocal":"07/07/2012 07:59:59","PaymentSystemName":1,"CashDeskId":1,"State":1,"Note":1,"ExternalId":1,"Amount" : 1000}],"Count":1}, "ReportCurrencies" : [{"Id":"1","IsSelected":"1"}]}}');
}

if ($URI == "/admin/dao/backapi/es/Financial/GetDepositsWithdrawalsWithPaging") {

    //print_r('{"HasError":true,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data":null}');
    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","Objects":[],"Data":{"Documents" : {"Objects":[{"Id" : 1,"ClientId":1,"CreatedLocal":"07/07/2012 07:59:59","TypeName":1,"CurrencyId":1,"ModifiedLocal":"07/07/2012 07:59:59","PaymentSystemName":1,"CashDeskId":1,"State":1,"Note":1,"ExternalId":1,"Amount" : 1000}],"Count":1}, "ReportCurrencies" : [{"Id":"1","IsSelected":"1"}]}}');
}
if ($URI == "/admin/dao/backapi/en/Report/GetPaymentSystems") {

    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data":{"Documents" : {"Objects":[{"Id" : 1,"ClientId":1,"CreatedLocal":"07/07/2012 07:59:59","TypeName":1,"CurrencyId":1,"ModifiedLocal":"07/07/2012 07:59:59","PaymentSystemName":1,"CashDeskId":1,"State":1,"Note":1,"ExternalId":1,"Amount" : 1000}],"Count":1}, "ReportCurrencies" : [{"Id":"1","IsSelected":"1"}]}}');
}

if ($URI == "/admin/dao/backapi/es/Report/GetPaymentSystems") {

    //print_r('{"HasError":true,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data":null}');
    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","Objects":[],"Data":{"Documents" : {"Objects":[{"Id" : 1,"ClientId":1,"CreatedLocal":"07/07/2012 07:59:59","TypeName":1,"CurrencyId":1,"ModifiedLocal":"07/07/2012 07:59:59","PaymentSystemName":1,"CashDeskId":1,"State":1,"Note":1,"ExternalId":1,"Amount" : 1000}],"Count":1}, "ReportCurrencies" : [{"Id":"1","IsSelected":"1"}]}}');
}

if ($URI == "/admin/dao/backapi/en/Financial/GetDocumentStates") {

    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data": [{"NumId":"1","Name":"test"}]}');
}

if ($URI == "/admin/dao/backapi/es/Financial/GetDocumentStates") {

    //print_r('{"HasError":true,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data":null}');
    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data": [{"NumId":"1","Name":"test"}]}');
}
if ($URI == "/admin/dao/backapi/en/Setting/GetReportColumns?reportName=DepositReportSettings") {

    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data": ["Id","ClientId","CreatedLocal","TypeName","CurrencyId","StakeCurrency","Amount","ModifiedLocal","PaymentSystemName","PaymentSystemName","State","Note","ExternalId"]}');
}

if ($URI == "/admin/dao/backapi/es/Setting/GetReportColumns?reportName=DepositReportSettings") {

    //print_r('{"HasError":true,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data":null}');
    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data": ["Id","ClientId","CreatedLocal","TypeName","CurrencyId","StakeCurrency","Amount","ModifiedLocal","PaymentSystemName","PaymentSystemName","State","Note","ExternalId"]}');
}
if ($URI == "/admin/dao/backapi/en/Client/GetClients") {

    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","Objects":[],"Data":{"Objects":[{"Id" : 1,"Login":"Login","FirstName":"Pedro","LastName":"PErez","PersonalId":1,"Email":"test@test.com","AffilateId":1,"BTag":1,"IsSubscribeToEmail":false,"IsSubscribeToSMS ":true,"ExternalId":1,"AccountHolder" : 1000,"Address": "Calle","Address": "Calle","Address": "Calle","BirthCity": "Caldas","BirthDate": "07/07/2017","BirthDepartment": "Caldas","BirthRegionCode2": "2","BirthRegionId": "1","CashDeskId": "1","CreatedLocalDate": "07/07/2016 09:09:00","CurrencyId": "1","DocIssueCode": "1","DocIssueDate": "1","DocIssuedBy": "1","Gender": "M","IBAN": "1","IsLoggedIn ": true,"IsResident ": true,"IsSubscribedToNewsletter ": false,"IsTest ": true,"IsVerified ": true,"Language": "ES","LastLoginLocalDate": "07/07/1994 09:09:00","MiddleName": "1","MobilePhone": "1","Phone": "1","ProfileId": "1","PromoCode": "1","Province": "1","CountryName": "1","RegistrationSource": "1","SportsbookProfileId": "1","SwiftCode": "1","Title": "1","ZipCode": "1","IsLocked": true}],"Count":1}, "ReportCurrencies" : [{"Id":"1","IsSelected":"1"}]}');
}

if ($URI == "/admin/dao/backapi/es/Client/GetClients") {

    $Usuario = new Usuario(1);

    $params = file_get_contents('php://input');
    $params = json_decode($params);

    $MaxRows = $params->MaxRows;

    if ($MaxRows == "") {
        $MaxRows = 10;
    }

    $usuarios = $Usuario->getUsuarios("A", "", "a.usuario_id", "asc", "0", $MaxRows);

    $usuariosFinal = [];

    foreach ($usuarios as $key => $value) {
        $array = [];

        $array["Id"] = $value["a.usuario_id"];
        $array["Login"] = $value["a.login"];
        $array["FirstName"] = $value["a.nombre"];
        $array["LastName"] = $value["a.nombre"];
        $array["PersonalId"] = 1;
        $array["Email"] = $value["a.nombre"];
        $array["AffilateId"] = $value["a.nombre"];
        $array["LastName"] = $value["a.nombre"];

        $array["Id"] = 1;
        $array["Login"] = "Login";
        $array["FirstName"] = "Pedro";
        $array["LastName"] = "PErez";
        $array["PersonalId"] = 1;
        $array["Email"] = "test@test.com";
        $array["AffilateId"] = 1;
        $array["BTag"] = 1;
        $array["IsSubscribeToEmail"] = false;
        $array["IsSubscribeToSMS"] = true;
        $array["ExternalId"] = 1;
        $array["AccountHolder"] = 1000;
        $array["Address"] = "Calle";
        $array["Address"] = "Calle";
        $array["Address"] = "Calle";
        $array["BirthCity"] = "Caldas";
        $array["BirthDate"] = "07/07/2017";
        $array["BirthDepartment"] = "Caldas";
        $array["BirthRegionCode2"] = "2";
        $array["BirthRegionId"] = "1";
        $array["CashDeskId"] = "1";
        $array["CreatedLocalDate"] = "07/07/2016 09:09:00";
        $array["CurrencyId"] = "1";
        $array["DocIssueCode"] = "1";
        $array["DocIssueDate"] = "1";
        $array["DocIssuedBy"] = "1";
        $array["Gender"] = "M";
        $array["IBAN"] = "1";
        $array["IsLoggedIn "] = true;
        $array["IsResident "] = true;
        $array["IsSubscribedToNewsletter"] = false;
        $array["IsTest"] = true;
        $array["IsVerified"] = true;
        $array["Language"] = "ES";
        $array["LastLoginLocalDate"] = "07/07/1994 09:09:00";
        $array["MiddleName"] = "1";
        $array["MobilePhone"] = "1";
        $array["Phone"] = "1";
        $array["ProfileId"] = "1";
        $array["PromoCode"] = "1";
        $array["Province"] = "1";
        $array["CountryName"] = "1";
        $array["RegistrationSource"] = "1";
        $array["SportsbookProfileId"] = "1";
        $array["SwiftCode"] = "1";
        $array["Title"] = "1";
        $array["ZipCode"] = "1";
        $array["IsLocked"] = true;

        array_push($usuariosFinal, $array);
    }

    //print_r('{"HasError":true,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","ModelErrors":[],"Data":null}');
    print_r('{"HasError":false,"AlertType":"danger","AlertMessage":"Invalid Username and/or password","Objects":[],"Data":{"Objects": ' . json_encode($usuariosFinal) . ',"Count": ' . oldCount($usuariosFinal) . '}, "ReportCurrencies" : [{"Id":"1","IsSelected":"1"}]}');
}


/**
 * Convertir divisas
 *
 * @param array $from_Currency from_Currency
 * @param String $to_Currency to_Currency
 * @param String $amount amounts
 *
 * @return String $convertido convertido
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function currencyConverter($from_Currency, $to_Currency, $amount)
{
    return $amount;


    if ($from_Currency == $to_Currency) {
        return $amount;
    }
    global $currencies_valor;
    $convertido = -1;
    $bool = false;

    foreach ($currencies_valor as $key => $valor) {
        if ($key == ($from_Currency . "" . $to_Currency)) {
            $convertido = $amount * $valor;
            $bool = true;
        } elseif ($key == ($from_Currency . "" . $to_Currency)) {
            $convertido = ($amount) / $valor;
            $bool = true;
        }
    }
    if (!$bool) {
        $from_Currency = urlencode($from_Currency);
        $to_Currency = urlencode($to_Currency);
        $encode_amount = 1;

        $rawdata = file_get_contents("http://api.currencies.zone/v1/quotes/$from_Currency/$to_Currency/json?quantity=$encode_amount&key=44|YSqBgkAbvbGfenoxx62OaSnoD~rF8rw~");
        if ($_SESSION["usuario2"] == 5) {

        }
        $rawdata = json_decode($rawdata);
        $currencies_valor += [$from_Currency . "" . $to_Currency => $rawdata->result->amount];

        $convertido = $amount * $rawdata->result->amount;

    }


    return $convertido;
}

/**
 * Obtener los deportes en el intervalo de dos fechas
 *
 * @param String $fecha_inicial fecha_inicial
 * @param String $fecha_final fecha_final
 *
 * @return array $array array
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function getSports($fecha_inicial, $fecha_final)
{

    global $URL_ITAINMENT;

    $rawdata = file_get_contents($URL_ITAINMENT . "/Export/GetEvents?importerId=1&from=" . $fecha_inicial . "&to=" . $fecha_final . "");
    $data = simplexml_load_string($rawdata);
    $datos = json_decode($rawdata);

    $array = array();
    foreach ($datos as $item) {
        $item_data = array(
            "Id" => $item->SportId,
            "Name" => $item->Name
        );
        array_push($array, $item_data);
    }


    return $array;


}

/**
 * Obtener los market types de un deporte
 *
 * @param String $sport sport
 * @param String $fecha_inicial fecha_inicial
 * @param String $fecha_final fecha_final
 *
 * @return array $array array
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function getMarketTypes($sport, $fecha_inicial, $fecha_final)
{
    global $URL_ITAINMENT;

    $rawdata = file_get_contents($URL_ITAINMENT . "/Export/GetEvents?importerId=1&from=" . $fecha_inicial . "&to=" . $fecha_final . "");
    $data = simplexml_load_string($rawdata);
    $datos = json_decode($rawdata);
    $array = array();

    $existeMarcadorCorrecto = false;
    foreach ($datos as $item) {
        if ($sport == $item->SportId) {
            $rawdata2 = file_get_contents($URL_ITAINMENT . "/Export/GetMarkets?importerId=1&eventId=" . $item->Categories[0]->Championships[0]->Events[0]->EventId);
            $datos2 = json_decode($rawdata2);

            foreach ($datos2 as $item2) {
                $item_data = array(
                    "Id" => $item->SportId . "M" . $item2->MarketTypeid,
                    "Name" => $item2->Name
                );
                array_push($array, $item_data);

                if ($item2->MarketTypeid == 3 && $item->SportId == 1) {
                    $existeMarcadorCorrecto = true;
                }
            }


        }

    }

    if (!$existeMarcadorCorrecto && $sport == 1) {
        $item_data = array(
            "Id" => "1M3",
            "Name" => "Marcador Correcto(F)"
        );
        array_push($array, $item_data);
    }


    return $array;


}


/**
 * Obtener las regiones de un deporte
 *
 * @param String $sport sport
 * @param String $fecha_inicial fecha_inicial
 * @param String $fecha_final fecha_final
 *
 * @return array $array array
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function getRegions($sport, $fecha_inicial, $fecha_final)
{

    global $URL_ITAINMENT;

    $rawdata = file_get_contents($URL_ITAINMENT . "/Export/GetEvents?importerId=1&from=" . $fecha_inicial . "&to=" . $fecha_final . "");
    $data = simplexml_load_string($rawdata);
    $datos = json_decode($rawdata);
    $array = array();

    foreach ($datos as $item) {

        if ($sport == $item->SportId) {
            foreach ($item->Categories as $item2) {
                $item_data = array(
                    "Id" => $item2->CategoryId,
                    "Name" => $item2->Name
                );
                array_push($array, $item_data);
            }


        }

    }


    return $array;
}

/**
 * Obtener las competencias de un deporte
 *
 * @param String $sport sport
 * @param String $region region
 * @param String $fecha_inicial fecha_inicial
 * @param String $fecha_final fecha_final
 *
 * @return array $array array
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function getCompetitions($sport, $region, $fecha_inicial, $fecha_final)
{
    global $URL_ITAINMENT;

    $rawdata = file_get_contents($URL_ITAINMENT . "/Export/GetEvents?importerId=1&from=" . $fecha_inicial . "&to=" . $fecha_final . "");
    $data = simplexml_load_string($rawdata);
    $datos = json_decode($rawdata);
    $array = array();
    foreach ($datos as $item) {

        if ($sport == $item->SportId) {
            foreach ($item->Categories as $item2) {
                if ($item2->CategoryId == $region) {
                    foreach ($item2->Championships as $item3) {
                        $item_data = array(
                            "Id" => $item3->ChampionshipId,
                            "Name" => $item3->Name
                        );
                        array_push($array, $item_data);
                    }
                }

            }


        }

    }


    return $array;

}


/**
 * Obtener información sobre un deporte
 *
 * @param String $sport sport
 * @param String $region region
 * @param String $competition competition
 * @param String $fecha_inicial fecha_inicial
 * @param String $fecha_final fecha_final
 *
 * @return array $array array
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function getMatches($sport, $region, $competition, $fecha_inicial, $fecha_final)
{
    global $URL_ITAINMENT;

    $rawdata = file_get_contents($URL_ITAINMENT . "/Export/GetEvents?importerId=1&from=" . $fecha_inicial . "&to=" . $fecha_final . "");
    $data = simplexml_load_string($rawdata);
    $datos = json_decode($rawdata);
    $array = array();
    foreach ($datos as $item) {

        if ($sport == $item->SportId) {
            foreach ($item->Categories as $item2) {
                if ($item2->CategoryId == $region) {
                    foreach ($item2->Championships as $item3) {

                        if ($item3->ChampionshipId == $competition) {
                            foreach ($item3->Events as $item4) {
                                $item_data = array(
                                    "Id" => $item4->EventId,
                                    "Name" => $item4->Name
                                );
                                array_push($array, $item_data);
                            }
                        }

                    }
                }

            }


        }

    }


    return $array;

}


/**
 * Generar una clave alfanumérica del ticket
 *
 * @param int $length length
 *
 * @return String $randomString randomString
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function GenerarClaveTicket($length)
{
    $characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $randomString;
}

/**
 * Generar una clave númera de ticket
 *
 * @param int $length length
 *
 * @return String $randomString randomString
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function GenerarClaveTicket2($length)
{
    $characters = '0123456789';
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $randomString;
}


/**
 * Encriptar o desencriptar según el caso
 *
 * @param String $action action
 * @param String $string string
 *
 * @return String $output output
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function encrypt_decrypt($action, $string)
{
    $output = false;
    $encrypt_method = "AES-256-CBC";
    $secret_key = 'D0RAD0';
    $secret_iv = 'D0RAD0';
    // hash
    $key = hash('sha256', $secret_key);

    // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning
    $iv = substr(hash('sha256', $secret_iv), 0, 16);
    if ($action == 'encrypt') {
        $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);
        $output = base64_encode($output);
    } else if ($action == 'decrypt') {
        $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);
    }
    return $output;
}


/**
 * Obtener la ip del cliente
 *
 *
 * @return String $ipaddress ip del cliente
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function get_client_ip()
{
    $ipaddress = '';
    if (getenv('HTTP_CLIENT_IP'))
        $ipaddress = getenv('HTTP_CLIENT_IP');
    else if (getenv('HTTP_X_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_X_FORWARDED_FOR');
    else if (getenv('HTTP_X_FORWARDED'))
        $ipaddress = getenv('HTTP_X_FORWARDED');
    else if (getenv('HTTP_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_FORWARDED_FOR');
    else if (getenv('HTTP_FORWARDED'))
        $ipaddress = getenv('HTTP_FORWARDED');
    else if (getenv('REMOTE_ADDR'))
        $ipaddress = getenv('REMOTE_ADDR');
    else
        $ipaddress = 'UNKNOWN';
    return $ipaddress;
}

/**
 * Crear arreglo unico a partir de uno multidimensiona
 *
 * @param array $array array
 * @param String $key key
 *
 * @return String $temp_array temp_array
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function unique_multidim_array($array, $key)
{
    $temp_array = array();
    $i = 0;
    $key_array = array();

    foreach ($array as $val) {
        if (!in_array($val[$key], $key_array)) {
            $key_array[$i] = $val[$key];
            $temp_array[$i] = $val;
        }
        $i++;
    }
    return $temp_array;
}

/**
 * Quitar tildes
 *
 * @param String $cadena cadena con tildes
 *
 * @return String $texto cadena sin tildes
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function quitar_tildes($cadena)
{
    $no_permitidas = array("á", "é", "í", "ó", "ú", "Á", "É", "Í", "Ó", "Ú", "ñ", "À", "Ã", "Ì", "Ò", "Ù", "Ã™", "Ã ", "Ã¨", "Ã¬", "Ã²", "Ã¹", "ç", "Ç", "Ã¢", "ê", "Ã®", "Ã´", "Ã»", "Ã‚", "ÃŠ", "ÃŽ", "Ã”", "Ã›", "ü", "Ã¶", "Ã–", "Ã¯", "Ã¤", "«", "Ò", "Ã", "Ã„", "Ã‹");
    $permitidas = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U", "n", "N", "A", "E", "I", "O", "U", "a", "e", "i", "o", "u", "c", "C", "a", "e", "i", "o", "u", "A", "E", "I", "O", "U", "u", "o", "O", "i", "a", "e", "U", "I", "A", "E");
    $texto = str_replace($no_permitidas, $permitidas, $cadena);
    return $texto;
}


/**
 * Desencriptar con el método AES-128-CTR
 *
 * @param array data data
 * @param String encryption_key encryption_key
 *
 * @return boolean|String $decrypted_string decrypted_string
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function decrypt($data, $encryption_key = "")
{

    $iv_strlen = 2 * openssl_cipher_iv_length('AES-128-CTR');
    if (preg_match("/^(.{" . $iv_strlen . "})(.+)$/", $data, $regs)) {
        list(, $iv, $crypted_string) = $regs;
        $decrypted_string = openssl_decrypt($crypted_string, 'AES-128-CTR', gethostname() . "|" . ip2long($_SERVER['SERVER_ADDR']), 0, hex2bin($iv));
        return $decrypted_string;
    } else {
        return FALSE;
    }
}

/**
 * Encriptar con el método AES-128-CTR
 *
 * @param array data data
 * @param String encryption_key encryption_key
 *
 * @return boolean|String $encrypted_string encrypted_string
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function encrypt($data, $encryption_key = "")
{
    $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('AES-128-CTR'));
    $encrypted_string = bin2hex($iv) . openssl_encrypt($data, 'AES-128-CTR', gethostname() . "|" . ip2long($_SERVER['SERVER_ADDR']), 0, $iv);
    return $encrypted_string;
}




/**
 * Obtener un reporte de paises
 *
 * @param no
 *
 * @return array $paisesparamenu paisesparamenu
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function obtenerPaisesReport()
{
    $Pais = new Pais ($_SESSION["pais_id"]);
    $paisesparamenu = array(
        array(
            "id" => "0",
            "value" => "Todos",
            "icon" => ""
        )
    );

    switch ($_SESSION["win_perfil2"]) {
        case "CONCESIONARIO":
            array_push($paisesparamenu,
                array(
                    "id" => $Pais->paisId,
                    "value" => $Pais->paisNom,
                    "icon" => strtolower($Pais->iso)
                )
            );
            break;
        case "CONCESIONARIO2":
            array_push($paisesparamenu,
                array(
                    "id" => $Pais->paisId,
                    "value" => $Pais->paisNom,
                    "icon" => strtolower($Pais->iso)
                )
            );
            break;
        case "PUNTOVENTA":

            array_push($paisesparamenu,
                array(
                    "id" => $Pais->paisId,
                    "value" => $Pais->paisNom,
                    "icon" => strtolower($Pais->iso)
                )
            );
            break;

        case "CAJERO":
            array_push($paisesparamenu,
                array(
                    "id" => $Pais->paisId,
                    "value" => $Pais->paisNom,
                    "icon" => strtolower($Pais->iso)
                )
            );
            break;

        case "USUARIO":
            array_push($paisesparamenu,
                array(
                    "id" => $Pais->paisId,
                    "value" => $Pais->paisNom,
                    "icon" => strtolower($Pais->iso)
                )
            );
            break;
        default:
            if ($_SESSION['PaisCond'] == "S") {

                array_push($paisesparamenu,
                    array(
                        "id" => $Pais->paisId,
                        "value" => $Pais->paisNom,
                        "icon" => strtolower($Pais->iso)
                    )
                );

            } else {



                if ($_SESSION['Global'] == "N") {
                    $PaisMandante = new PaisMandante();


                    $rules = [];

                    array_push($rules, array("field" => "pais_mandante.mandante", "data" => $_SESSION['mandante'], "op" => "eq"));
                    array_push($rules, array("field" => "pais_mandante.estado", "data" => "A", "op" => "eq"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $paises = $PaisMandante->getPaisMandantesCustom(" pais_mandante.*,pais.* ", "pais_mandante.paismandante_id", "asc", 0, 1000, $json, true);

                    $paises = json_decode($paises);

                    $paisesparamenu = [];

                    foreach ($paises->data as $key => $value) {

                        $array = [];

                        $array["id"] = $value->{"pais.pais_id"};
                        $array["value"] = $value->{"pais.pais_nom"};
                        $array["icon"] = strtolower($value->{"pais.iso"});

                        array_push($paisesparamenu, $array);

                    }

                }



                if ($_SESSION['Global'] == "S") {
                    $Pais = new Pais();


                    $rules = [];

                    array_push($rules, array("field" => "pais.estado", "data" => "A", "op" => "eq"));


                    $filtro = array("rules" => $rules, "groupOp" => "AND");
                    $json = json_encode($filtro);


                    $paises = $Pais->getPaisesCustom("pais.pais_id", "asc", 0, 1000, $json, true);

                    $paises = json_decode($paises);

                    $paisesparamenu = [];

                    foreach ($paises->data as $key => $value) {

                        $array = [];

                        $array["id"] = $value->{"pais.pais_id"};
                        $array["value"] = $value->{"pais.pais_nom"};
                        $array["icon"] = strtolower($value->{"pais.iso"});

                        array_push($paisesparamenu, $array);

                    }

                }

            }


            break;

    }

    return $paisesparamenu;
}


/**
 * Obtener menú
 *
 * @param no
 *
 * @return String $menus_string menus_string
 * @throws no
 *
 * @access public
 * @see no
 * @since no
 * @deprecated no
 */
function obtenerMenu()
{

    $menus_string = json_decode(
        '[
                {"id": "dashboard", "icon": "icon-dashboard", "value": "Dashboards"},
                
                {
                    "id": "productsFather", "icon": "icon-cubes", "value": "Products", "data": [
                        {"id": "providers", "value": "Providers"},
                        {"id": "products", "value": "Products"},
                        {"id": "partnersProducts", "value": "Partners Products"},
                        {"id": "partnersProductsCountry", "value": "Partners Products Country"},
                        {"id": "categories", "value": "Categories"},
                        {"id": "categoriesProducts", "value": "CategoriesProducts"}
                        
                    ]
                },
                {"id": "players", "icon": "icon-players", "value": "Players"},
                {
                    "id": "reports", "icon": "icon-pie-chart", "value": "Reports", "data": [
                        {"id": "depositReport", "value": "Deposit Report"},
                        {"id": "autoexclusionUsers", "value": "Autoexclusion Users"},
                        {"id": "casinoGamesReport", "value": "Casino Games Report"},
                        {"id": "bonusReport", "value": "Bonus Report"},
                        {"id": "playersReport", "value": "Players Report"},
                        {"id": "historicalCashFlow", "value": "Historical Cash Flow"},
                        {"id": "summaryCashFlow", "value": "Summary Cash Flow"},
                        {"id": "informeGerencial", "value": "Gerencial Report"},
                        {"id": "betsReport", "value": "Bets Report"}
                    ]
                },
                {
                    "id": "security", "icon": "icon-security", "value": "Security", "data": [
                        {"id": "adminUser", "value": "Admin User"},
                        {"id": "contingency", "value": "Contingency"},
                        {"id": "menus", "value": "Menus"},
                        {"id": "profile", "value": "Profile"},
                        {"id": "profileOptions", "value": "Profile - Options"},
                        {"id": "subMenu", "value": "Sub Menu"},
                        {"id": "userProfile", "value": "User Profile"}
                    ]
                },
                {
                    "id": "teacher", "icon": "icon-storage", "value": "Teacher", "data": [
                        {"id": "qualifying", "value": "Qualifying"},
                        {"id": "franchisee", "value": "Franchisee"},
                        {"id": "registeredDocuments", "value": "Registered Documents"}
                    ]
                },
                {
                    "id": "Management", "icon": "icon-database", "value": "Management", "data": [
                        {"id": "adjustPayment", "value": "Adjust Payment"},
                        {"id": "assignmentQuota", "value": "assignment Quota"},
                        {"id": "bonus", "value": "Bonus"},
                        {"id": "eliminateNoteWithdraw", "value": "Eliminate Note Withdraw"},
                        {"id": "managementNetwork", "value": "Management Network"},
                        {"id": "registerFast", "value": "Register Fast"},
                        {"id": "reprintCheck", "value": "Reprint Check"},
                        {"id": "reversionReload", "value": "Reversion Reload"},
                        {"id": "managementContact", "value": "Management Contact"}
                    ]
                },
                {
                    "id": "Cash", "icon": "icon-banknote", "value": "Cash", "data": [
                        {"id": "flujoCaja", "value": "Flujo de Caja"},
                        {"id": "pagoPremio", "value": "Pago Premio"},
                        {"id": "pagoNotaRetiro", "value": "Pago Nota Retiro"},
                        {"id": "recargarCredito", "value": "Recargar Credito"}
                    ]
                },
                {
                    "id": "queries", "icon": "icon-file-text", "value": "Queries", "data": [
                        {"id": "flujoCajaHistorico", "value": "Flujo Caja Historico"},
                        {"id": "flujoCajaResumido", "value": "Flujo Caja Resumido"},
                        {"id": "informeCasino", "value": "Informe Casino"},
                        {"id": "informeGerencial", "value": "Informe Gerencial"},
                        {"id": "listadoRecargasRetiros", "value": "Listado Recargas Retiros"},
                        {"id": "premiosPendientesPagar", "value": "Premios Pendientes Pagar"},
                        {"id": "consultaOnlineDetalle", "value": "Consulta Online Detalle"},
                        {"id": "consultaOnlineResumen", "value": "Consulta Online Resumen"}
                    ]
                },
                {
                    "id": "betShopManagement", "icon": "icon-shop", "value": "Bet Shop Management", "data": [
                        {"id": "betShop", "value": "Bet Shop"},
                        {"id": "managePointsGraphics", "value": "Manage Points Graphics"}
                    ]
                },
                {
                    "id": "agentSystem", "icon": "icon-user-secret", "value": "Agent System", "data": [
                        {"id": "myAccount", "value": "My Account"},
                        {"id": "agentList", "value": "Agent List"},
                        {"id": "agentsTree", "value": "Agents Tree"},
                        {"id": "subAccounts", "value": "Sub Accounts"},
                        {"id": "playersList", "value": "Players List"},
                        {"id": "transfers", "value": "Transfers"},
                        {"id": "groupManagement", "value": "Group Management"}
                    ]
                },
                {
                    "id": "financial", "icon": "icon-financial", "value": "Financial", "data": [
                        {"id": "pagoPremio", "value": "Pago Premio"},
                        {"id": "pagoNotaRetiro", "value": "Pago Nota Retiro"},
                        {"id": "recargarCredito", "value": "Recargar Credito"},
                        {"id": "depositRequests", "value": "Deposit Requests"},
                        {"id": "withdrawalRequests", "value": "Withdrawal Requests"},
                        {"id": "transactionss", "value": "Transactions"}
                    ]
                },
                {
                    "id": "tools", "icon": "icon-tools", "value": "Tools", "data": [
                        {"id": "partnerSettings", "value": "Partner Settings"},
                        {"id": "translationManager", "value": "Translation Manager"},
                        {"id": "emailTemplate", "value": "Email Template"},
                        {"id": "messagesList", "value": "Messages List"}
                    ]
                },

                {"id": "transactions", "value": "Transactions", "icon": "mdi mdi-cart"},
                {"id": "customers", "value": "Customers", "icon": "mdi mdi-account-box"},
                {"id": "payhistoryview", "value": "Payment History", "icon": "mdi mdi-chart-areaspline"},
                {"id": "widgets", "value": "Widgets", "icon": "mdi mdi-widgets"},
                {"id": "demos", "value": "Demos", "icon": "mdi mdi-monitor-dashboard"},
                {"id": "prices", "value": "Prices", "icon": "mdi mdi-currency-usd"},
                {"id": "tutorials", "value": "Tutorials", "icon": "mdi mdi-school"}
            ]'
    );
    /*
                             {"id": "accounting.position", "value": "Cargo", "add": true},
                            {"id": "accounting.typeCenterPosition", "value": "Tipos", "add": true},
                            {"id": "accounting.employees", "value": "Empleados", "add": true},

                            {"id": "accounting.productsThirdBetShop", "value": "Productos terceros", "add": true},
                            {"id": "accounting.productsThirdByBetShop", "value": "Productos terceros Punto de venta", "add": true},
                            {"id": "accounting.closingDayReport", "value": "Reporte cierre de dia"},
                            {"id": "accounting.squareDayReport", "value": "Reporte de cuadre de dia", "add": true},


     */
    $menu_string = json_decode(
        '[
                {"id": "dashboard", "icon": "icon-dashboard", "value": "Dashboards"},
                {"id": "menuBonus", "icon": "icon-gift", "value": "Torneos y Bonos"},
{
                    "id": "myconfiguration", "icon": "icon-tools", "value": "Mi Configuracion", "data": [
                        {"id": "myConfiguration.myInformation", "value": "Mi Informacion"},
                        {"id": "myConfiguration.changeMyPassword", "value": "Cambiar Contraseña"},
                        {"id": "myConfiguration.qrgoogle", "value": "QR Google"}
                        
                    ]
                },
                
                {
                    "id": "productsFather", "icon": "icon-cubes", "value": "Products", "data": [
                        {"id": "partners", "value": "Partners"},
                        {"id": "providers", "value": "Providers"},
                        {"id": "products", "value": "Products"},
                        {"id": "partnersProviders", "value": "Partners Proveedores"},
                        {"id": "partnersTypeProduct", "value": "Partners Tipo Producto"},
                        {"id": "partnersProducts", "value": "Partners Products"},
                        {"id": "partnersProductsCountry", "value": "Partners Products Country"},
                        {"id": "categories", "value": "Categories"},
                        {"id": "categoriesProducts", "value": "CategoriesProducts"}

                    ]
                },
                {"id": "adminUserManagement", "icon": "icon-players", "show":"false", "value": "adminUserManagement"},
                {"id": "customers", "icon": "icon-players", "show":"false", "value": "Jugadores"},
                {"id": "customersAggregator", "icon": "icon-players", "show":"false", "value": "Jugadores"},
                {"id": "agentListManagement", "icon": "icon-players", "show":"false", "value": "Jugadores"},
                {"id": "addAgentListManagement", "icon": "icon-players", "show":"false", "value": "addAgentListManagement"},
                {"id": "addBetShopManagement", "icon": "icon-players", "show":"false", "value": "addBetShopManagement"},
                {"id": "addAdminUserManagement", "icon": "icon-players", "show":"false", "value": "addAdminUserManagement"},
                 {"id": "machine.addMachineManagement", "icon": "icon-players", "show":"false", "value": "Añadir Maquina"},
                {"id": "machine.machineManagement", "icon": "icon-players", "show":"false", "value": "Detalles maquina "},
                 {"id": "settings", "icon": "icon-players", "show":"false", "value": "settings"},

                {"id": "aggregatorList", "icon": "icon-players", "show":"true", "value": "Jugadores Partner"},

                {"id": "playersList", "icon": "icon-players", "value": "Jugadores"},
                {"id": "playersListAggregator", "icon": "icon-players", "value": "Jugadores Aggregator"},
                {
                    "id": "reports", "icon": "icon-pie-chart", "value": "Reportes", "data": [
                        {"id": "depositReport", "value": "Reporte de depósitos"},
                        {"id": "autoexclusionUsers", "value": "Autoexclusiones de Usuario"},
                        {"id": "casinoGamesReport", "value": "Reporte de casino "},
                        {"id": "balanceUsers", "value": "Reporte de Saldos"},
                        {"id": "bonusReport", "value": "Reporte de bonos"},
                        {"id": "playersReport", "value": "Reporte de Jugadores"},
                        {"id": "historicalCashFlow", "value": "Flujo de Caja Histórico"},
                        {"id": "summaryCashFlow", "value": "Flujo de Caja Resumido"},
                        {"id": "informeGerencial", "value": "Informe Gerencial"},
                        {"id": "betsReport", "value": "Reporte de Apuestas"},
                        {"id": "usuarioOnlineResumido", "value": "Usuario online Resumido"},
                        {"id": "relationUserAggregator", "value": "Usuario - Agregator"},
                        {"id": "paidPendingAwards", "value": "premiosPendientesPagar"},
                        {"id": "sessionsReport", "value": "Reporte de Sesiones"},
                        {"id": "balanceAdjustments", "value": "Reporte de Ajustes de Saldos"},
                        {"id": "sportsTransactions", "value": "Reporte Trans. Sportbook"},
                        {"id": "historyMovement", "value": "Reporte de  Movimientos Saldo"},
                        {"id": "balanceHistory", "value": "Historico de  Saldos"},
                                                {"id": "registeredDocument", "value": "Documentos Registrados"}


                    ]
                },
                
                
                {
                    "id": "accounting", "icon": "icon-security", "value": "Contabilidad", "data": [
                        {"id": "accounting.costCenter", "value": "Centros de costo", "add": true},
                        {"id": "accounting.area", "value": "Estructural", "add": true},
                        {"id": "accounting.expenses", "value": "Egresos", "add": true},
                        {"id": "accounting.incomes", "value": "Ingresos", "add": true},
                        {"id": "accounting.providers", "value": "Productos Terceros ", "add": true},
                        {"id": "accounting.concepts", "value": "Conceptos", "add": true},
                        {"id": "accounting.accounts", "value": "Cuentas", "add": true},
                        {"id": "accounting.squareDayReport2", "value": "Cierres de Caja", "add": true}

                    ]
                },
                {
                    "id": "security", "icon": "icon-security", "value": "Security", "data": [
                        {"id": "approvalLogs", "value": "Aprobar logs", "add": true},

                        {"id": "adminUser", "value": "Admin User"},
                        {"id": "usuariosbloqueados", "value": "Usuarios Bloqueados"},
                        {"id": "contingency", "value": "Contingency"},
                        {"id": "menus", "value": "Menus"},
                        {"id": "profile", "value": "Profile"},
                        {"id": "profileOptions", "value": "Profile - Options"},
                        {"id": "subMenu", "value": "Sub Menu"},
                        {"id": "userProfile", "value": "User Profile"},
                        {"id": "competitors.competitors", "value": "Competidores"}
                    ]
                },
                {
                    "id": "management", "icon": "icon-security", "value": "Gestion", "data": [
                        {"id": "promotionalCodes", "value": "Codigos Promocionales", "add": true},
                        {"id": "activateRegistration", "value": "Activar Registros", "add": true},
                        {"id": "adjustPayment", "value": "Adjust Payment"},
                        {"id": "assignmentQuota", "value": "assignment Quota"},
                        {"id": "bonus", "value": "Bonus"},
                        {"id": "eliminateNoteWithdraw", "value": "Eliminate Note Withdraw"},
                        {"id": "managementNetwork", "value": "Management Network"},
                        {"id": "registerFast", "value": "Register Fast"},
                        {"id": "reprintCheck", "value": "Reprint Check"},
                        {"id": "reversionReload", "value": "Reversion Reload"},
                        {"id": "managementContact", "value": "Trabaja con nosotros"}
                    ]
                },
                {
                    "id": "Cash", "icon": "icon-banknote", "value": "Caja", "data": [
                        {"id": "flujoCaja", "value": "Flujo de Caja"},
                        {"id": "pagoPremio", "value": "Pago Premio"},
                        {"id": "pagoNotaRetiro", "value": "Pago Nota Retiro"},
                        {"id": "recargarCredito", "value": "Recargar Credito"}
                    ]
                },
                
                {
                    "id": "messages", "icon": "icon-pie-chart", "value": "Mensajes", "data": [
                        {"id": "messages.messageList", "value": "Lista"}
                                            ]
                },
                
                {
                    "id": "machine", "icon": "icon-pie-chart", "value": "Maquinas", "data": [
                        {"id": "machine.machineRegister", "value": "Lista"},
                        {"id": "machine.information", "value": "Registrar"},
                        {"id": "machine.pagoPremioMaquina", "value": "Pago Premio"},
                        {"id": "machine.pagoNotaCobro", "value": "Pago Nota de cobro"},
                                                {"id": "machine.managePointsGraphics", "value": "Maquinas Grafica"}

                                            ]
                },
                {
                    "id": "tools", "icon": "icon-pie-chart", "value": "Herramientas", "data": [
                                            {"id": "partner.PartnerSettings", "value": "Partner Settings"},

                        {"id": "tools.translationManager", "value": "Traducción"},
                                                {"id": "tools.uploadImage", "value": "Subir imagen"}

                                            ]
                },
                
                
                {
                    "id": "betShopManagement", "icon": "icon-shop", "value": "Gestión Punto de Venta", "data": [
                        {"id": "betShop", "value": "Punto de Venta"},
                        {"id": "cashiers", "value": "Cajeros"},
                        {"id": "managePointsGraphics", "value": "Gestión Puntos Gráfico"},
                        {"id": "betShopCompetence", "value": "Puntos de venta Competencia"}
                    ]
                },
                {
                    "id": "agentSystem", "icon": "icon-user-secret", "value": "Agentes", "data": [
                        {"id": "agentList", "value": "Lista de Agentes"},
                        {"id": "agentsTree", "value": "Árbol de Agentes"},
                        {"id": "agentsInform", "value": "Informe de Agentes"},
                        {"id": "agentTransfers", "value": "Transferencias"},
                        {"id": "agent.requestsAgent", "value": "Solicitudes"},
                        {"id": "agent.requirementsAgent", "value": "Requisitos"}

                    ]
                },
                {
                    "id": "financial", "icon": "icon-financial", "value": "Financiero", "data": [
                        {"id": "depositRequests", "value": "Solicitudes de Deposito"},
                        {"id": "withdrawalRequests", "value": "Solicitudes de Retiro"}
                    ]
                }   ,
                {"id": "closeBox", "icon": "icon-financial", "value": "Cierre de caja"}
                         ]'
    );

    /*
        switch ($_SESSION["win_perfil2"]) {
            case "PUNTOVENTA":
                $menu_string = json_decode(
                    '[
                    {"id": "dashboard", "icon": "icon-dashboard", "value": "Dashboards"},
                                    {"id": "betting", "icon": "icon-dashboard", "value": "Apuestas"},
                    {"id": "bettingVirtual", "icon": "icon-dashboard", "value": "Apuestas Virtuales"},
                    {
                        "id": "myconfiguration", "icon": "icon-cubes", "value": "Mi Configuracion", "data": [
                            {"id": "myConfiguration.myInformation", "value": "Mi Informacion"},
                            {"id": "myConfiguration.changeMyPassword", "value": "Cambiar Contraseña"},
                            {"id": "myConfiguration.qrgoogle", "value": "QR Google"}

                        ]
                    },

                    {
                        "id": "reports", "icon": "icon-pie-chart", "value": "Reportes", "data": [
                            {"id": "summaryCashFlow", "value": "Flujo de Caja Resumido"},
                                                                            {"id": "betsReportSecond", "value": "Reporte de Apuestas"}

                                                ]
                    },
                    {
                        "id": "Cash", "icon": "icon-banknote", "value": "Caja", "data": [
                            {"id": "flujoCaja", "value": "Flujo de Caja"},
                            {"id": "pagoPremio", "value": "Pago Premio"},
                            {"id": "pagoNotaRetiro", "value": "Pago Nota Retiro"},
                            {"id": "recargarCredito", "value": "Recargar Credito"}
                        ]
                    },
                    {
                        "id": "betShopManagement", "icon": "icon-shop", "value": "Gestión Punto de Venta", "data": [
                            {"id": "cashiers", "value": "Cajeros"}
                                                ]
                    }
                           ]'
                );

                break;

            case "CAJERO":
                $menu_string = json_decode(
                    '[
                    {"id": "dashboard", "icon": "icon-dashboard", "value": "Dashboards"},
                    {"id": "betting", "icon": "icon-dashboard", "value": "Apuestas"},
                    {"id": "bettingVirtual", "icon": "icon-dashboard", "value": "Apuestas Virtuales"},
                    {
                        "id": "myconfiguration", "icon": "icon-cubes", "value": "Mi Configuracion", "data": [
                            {"id": "myConfiguration.myInformation", "value": "Mi Informacion"},
                            {"id": "myConfiguration.changeMyPassword", "value": "Cambiar Contraseña"},
                            {"id": "myConfiguration.qrgoogle", "value": "QR Google"}

                        ]
                    },
                    {
                        "id": "reports", "icon": "icon-pie-chart", "value": "Reportes", "data": [
                            {"id": "summaryCashFlow", "value": "Flujo de Caja Resumido"},
                                                    {"id": "betsReportSecond", "value": "Reporte de Apuestas"}

                                                ]
                    },
                    {
                        "id": "Cash", "icon": "icon-banknote", "value": "Caja", "data": [
                            {"id": "flujoCaja", "value": "Flujo de Caja"},
                            {"id": "pagoPremio", "value": "Pago Premio"},
                            {"id": "pagoNotaRetiro", "value": "Pago Nota Retiro"},
                            {"id": "recargarCredito", "value": "Recargar Credito"}
                        ]
                    }
                           ]'
                );

                break;

            case "CONCESIONARIO":

                $menu_string = json_decode(
                    '[
                    {"id": "dashboard", "icon": "icon-dashboard", "value": "Dashboards"},
    {
                        "id": "myconfiguration", "icon": "icon-cubes", "value": "Mi Configuracion", "data": [
                            {"id": "myConfiguration.myInformation", "value": "Mi Informacion"},
                            {"id": "myConfiguration.changeMyPassword", "value": "Cambiar Contraseña"},
                            {"id": "myConfiguration.qrgoogle", "value": "QR Google"}

                        ]
                    },
                    {"id": "agentListManagement", "icon": "icon-players", "show":"false", "value": "Jugadores"},
                    {"id": "addAgentListManagement", "icon": "icon-players", "show":"false", "value": "addAgentListManagement"},
                    {"id": "addBetShopManagement", "icon": "icon-players", "show":"false", "value": "addBetShopManagement"},
                    {
                        "id": "reports", "icon": "icon-pie-chart", "value": "Reportes", "data": [
                            {"id": "depositReport", "value": "Reporte de depósitos"},
                            {"id": "summaryCashFlow", "value": "Flujo de Caja Resumido"},
                            {"id": "betsReportSecond", "value": "Reporte de Apuestas"}
                        ]
                    },
                    {
                        "id": "Cash", "icon": "icon-banknote", "value": "Caja", "data": [
                            {"id": "flujoCaja", "value": "Flujo de Caja"}
                                                ]
                    },
                    {
                        "id": "betShopManagement", "icon": "icon-shop", "value": "Gestión Punto de Venta", "data": [
                            {"id": "betShop", "value": "Punto de Venta"},
                            {"id": "cashiers", "value": "Cajeros"}
                        ]
                    },
                    {
                        "id": "agentSystem", "icon": "icon-user-secret", "value": "Agentes", "data": [
                            {"id": "agentList", "value": "Lista de Agentes"},
                            {"id": "agentsTree", "value": "Árbol de Agentes"},
                            {"id": "agentsInform", "value": "Informe de Agentes"},
                            {"id": "agentTransfers", "value": "Transferencias"}

                        ]
                    }
                             ]'
                );


                break;

        }

    */
    $PerfilSubmenu = new PerfilSubmenu();

    $Perfil_id = $_SESSION["win_perfil2"];
    $Usuario_id = $_SESSION["usuario"];
    $MaxRows = "";
    $OrderedItem = $params->OrderedItem;
    $SkeepRows = $params->SkeepRows;

    if ($SkeepRows == "") {
        $SkeepRows = 0;
    }

    if ($OrderedItem == "") {
        $OrderedItem = 1;
    }

    if ($MaxRows == "") {
        $MaxRows = 100000;
    }

    $mismenus = "0";

    $rules = [];

    array_push($rules, array("field" => "menu.version", "data" => "2", "op" => "eq"));
    array_push($rules, array("field" => "perfil_submenu.perfil_id", "data" => "$Perfil_id", "op" => "eq"));

    if ($Perfil_id == "CUSTOM") {
        array_push($rules, array("field" => "perfil_submenu.usuario_id", "data" => "$Usuario_id", "op" => "eq"));
    }

    $filtro = array("rules" => $rules, "groupOp" => "AND");
    $json = json_encode($filtro);


    $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

    $menus = json_decode($menus);

    $menus3 = [];
    $arrayf = [];
    $submenus = [];

    $menus_string = array();

    foreach ($menus->data as $key => $value) {

        $m = [];
        $m["Id"] = $value->{"menu.menu_id"};
        $m["Name"] = $value->{"menu.descripcion"};

        $array = [];

        $array["Id"] = $value->{"submenu.submenu_id"};
        $array["Name"] = $value->{"submenu.descripcion"};
        $array["Pagina"] = $value->{"submenu.pagina"};
        $array["IsGiven"] = true;
        $array["Action"] = "view";
        $array["add"] = ($value->{"perfil_submenu.adicionar"} == "true") ? true : false;
        $array["edit"] = ($value->{"perfil_submenu.editar"} == "true") ? true : false;
        $array["delete"] = ($value->{"perfil_submenu.eliminar"} == "true") ? true : false;
        $array["Add"] = ($value->{"perfil_submenu.adicionar"} == "true") ? true : false;
        $array["Edit"] = ($value->{"perfil_submenu.editar"} == "true") ? true : false;
        $array["Delete"] = ($value->{"perfil_submenu.eliminar"} == "true") ? true : false;

        $mismenus = $mismenus . "," . $array["Id"];

        if ($arrayf["Id"] != "" && $m["Id"] != $arrayf["Id"]) {
            array_push($menus_string, $arrayf["Pagina"]);

            $arrayf["Permissions"] = $submenus;
            array_push($menus3, $arrayf);
            // $submenus = [];
        }
        array_push($menus_string, $array["Pagina"]);

        $arrayf["Id"] = $value->{"menu.menu_id"};
        $arrayf["Name"] = $value->{"menu.descripcion"};
        $arrayf["Pagina"] = $value->{"menu.pagina"};

        array_push($submenus, $array);
    }
    array_push($menus_string, $arrayf["Pagina"]);


    if ($Perfil_id != "CUSTOM") {

        $rules = [];

        array_push($rules, array("field" => "menu.version", "data" => "2", "op" => "eq"));
        array_push($rules, array("field" => "perfil_submenu.perfil_id", "data" => "$Perfil_id", "op" => "eq"));

        array_push($rules, array("field" => "perfil_submenu.usuario_id", "data" => "$Usuario_id", "op" => "eq"));

        $filtro = array("rules" => $rules, "groupOp" => "AND");
        $json = json_encode($filtro);


        $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

        $menus = json_decode($menus);

        $menus3 = [];
        $arrayf = [];

        foreach ($menus->data as $key => $value) {

            $m = [];
            $m["Id"] = $value->{"menu.menu_id"};
            $m["Name"] = $value->{"menu.descripcion"};

            $array = [];

            $array["Id"] = $value->{"submenu.submenu_id"};
            $array["Name"] = $value->{"submenu.descripcion"};
            $array["Pagina"] = $value->{"submenu.pagina"};
            $array["IsGiven"] = true;
            $array["Action"] = "view";
            $array["add"] = ($value->{"perfil_submenu.adicionar"} == "true") ? true : false;
            $array["edit"] = ($value->{"perfil_submenu.editar"} == "true") ? true : false;
            $array["delete"] = ($value->{"perfil_submenu.eliminar"} == "true") ? true : false;
            $array["Add"] = ($value->{"perfil_submenu.adicionar"} == "true") ? true : false;
            $array["Edit"] = ($value->{"perfil_submenu.editar"} == "true") ? true : false;
            $array["Delete"] = ($value->{"perfil_submenu.eliminar"} == "true") ? true : false;

            $mismenus = $mismenus . "," . $array["Id"];

            if ($arrayf["Id"] != "" && $m["Id"] != $arrayf["Id"]) {
                array_push($menus_string, $arrayf["Pagina"]);

                $arrayf["Permissions"] = $submenus;
                array_push($menus3, $arrayf);
                // $submenus = [];
            }
            array_push($menus_string, $array["Pagina"]);

            $arrayf["Id"] = $value->{"menu.menu_id"};
            $arrayf["Name"] = $value->{"menu.descripcion"};
            $arrayf["Pagina"] = $value->{"menu.pagina"};

            array_push($submenus, $array);
        }
        array_push($menus_string, $arrayf["Pagina"]);


        $rules = [];

        array_push($rules, array("field" => "menu.version", "data" => "2", "op" => "eq"));
        array_push($rules, array("field" => "perfil_submenu.perfil_id", "data" => "CUSTOM", "op" => "eq"));

        array_push($rules, array("field" => "perfil_submenu.usuario_id", "data" => "$Usuario_id", "op" => "eq"));

        $filtro = array("rules" => $rules, "groupOp" => "AND");
        $json = json_encode($filtro);


        $menus = $PerfilSubmenu->getPerfilSubmenusCustom(" menu.*,submenu.*,perfil_submenu.* ", "menu.menu_id", "asc", $SkeepRows, $MaxRows, $json, true);

        $menus = json_decode($menus);

        $menus3 = [];
        $arrayf = [];

        foreach ($menus->data as $key => $value) {

            $m = [];
            $m["Id"] = $value->{"menu.menu_id"};
            $m["Name"] = $value->{"menu.descripcion"};

            $array = [];

            $array["Id"] = $value->{"submenu.submenu_id"};
            $array["Name"] = $value->{"submenu.descripcion"};
            $array["Pagina"] = $value->{"submenu.pagina"};
            $array["IsGiven"] = true;
            $array["Action"] = "view";
            $array["add"] = ($value->{"perfil_submenu.adicionar"} == "true") ? true : false;
            $array["edit"] = ($value->{"perfil_submenu.editar"} == "true") ? true : false;
            $array["delete"] = ($value->{"perfil_submenu.eliminar"} == "true") ? true : false;
            $array["Add"] = ($value->{"perfil_submenu.adicionar"} == "true") ? true : false;
            $array["Edit"] = ($value->{"perfil_submenu.editar"} == "true") ? true : false;
            $array["Delete"] = ($value->{"perfil_submenu.eliminar"} == "true") ? true : false;

            $mismenus = $mismenus . "," . $array["Id"];

            if ($arrayf["Id"] != "" && $m["Id"] != $arrayf["Id"]) {
                array_push($menus_string, $arrayf["Pagina"]);

                $arrayf["Permissions"] = $submenus;
                array_push($menus3, $arrayf);
                // $submenus = [];
            }
            array_push($menus_string, $array["Pagina"]);

            $arrayf["Id"] = $value->{"menu.menu_id"};
            $arrayf["Name"] = $value->{"menu.descripcion"};
            $arrayf["Pagina"] = $value->{"menu.pagina"};

            array_push($submenus, $array);
        }
        array_push($menus_string, $arrayf["Pagina"]);


    }

    $submenus = json_decode(json_encode($submenus));


    foreach ($menu_string as $key => $item) {
        $continuar = true;

        if (!in_array($item->id, $menus_string)) {

            unset($menu_string[$key]);
            $continuar = false;

        } else {
            $searchedValue = $item->id;
            $item2 = reset(array_filter(
                $submenus,
                function ($e) use (&$searchedValue) {
                    return $e->Pagina == $searchedValue;
                }
            ));

            $item->add = $item2->add;
            $item->edit = $item2->edit;
            $item->delete = $item2->delete;
            $item->add = true;
            $item->edit = true;
            $item->delete = true;

        }

        if ($continuar) {
            if (oldCount($item->data) > 0) {

                foreach ($item->data as $key2 => $datum) {
                    if (!in_array($datum->id, $menus_string)) {
                        unset($menu_string[$key]->data[$key2]);

                    } else {
                        $searchedValue = $datum->id;
                        $item3 = reset(array_filter(
                            $submenus,
                            function ($e) use (&$searchedValue) {
                                return $e->Pagina == $searchedValue;
                            }
                        ));

                        $datum->add = $item3->add;
                        $datum->edit = $item3->edit;
                        $datum->delete = $item3->delete;
                        $datum->add = true;
                        $datum->edit = true;
                        $datum->delete = true;

                    }


                }

            }
        }
    }


    foreach ($submenus as $key => $item) {
        $continuar = true;

        $searchedValue = $item->Pagina;

        $item2 = reset(array_filter(
            $menu_string,
            function ($e) use (&$searchedValue) {
                return $e->Pagina == $searchedValue;
            }
        ));

        if ($item2 == null || $item2->id == null || $item2->id == "") {
            $itemD = array(
                "id" => $item->Pagina,
                "add" => true,
                "edit" => true,
                "delete" => true,
                "show" => "false"

            );
            array_push($menu_string, $itemD);

        }
    }


    $menu_string2 = array();
    foreach ($menu_string as $key => $item) {
        array_push($menu_string2, $item);

        if (oldCount($item->data) > 0) {
            $arr = $item->data;
            $menu_string2[oldCount($menu_string2) - 1]->data = array();

            foreach ($arr as $key2 => $datum) {
                array_push($menu_string2[oldCount($menu_string2) - 1]->data, $datum);
            }

        }
    }


    $menu_string3 = json_decode(
        '[
                {"id": "dashboard", "icon": "icon-dashboard", "value": "Dashboards"},
{
                    "id": "myconfiguration", "icon": "icon-tools", "value": "Mi Configuracion", "data": [
                        {"id": "myConfiguration.myInformation", "value": "Mi Informacion"},
                        {"id": "myConfiguration.changeMyPassword", "value": "Cambiar Contraseña"},
                        {"id": "myConfiguration.qrgoogle", "value": "QR Google"}
                        
                    ]
                },
                
                {
                    "id": "productsFather", "icon": "icon-cubes", "value": "Products", "data": [
                        {"id": "partners", "value": "Partners"},
                        {"id": "providers", "value": "Providers"},
                        {"id": "products", "value": "Products"},
                        {"id": "partnersProviders", "value": "Partners Proveedores"},
                        {"id": "partnersTypeProduct", "value": "Partners Tipo Producto"},
                        {"id": "partnersProducts", "value": "Partners Products"},
                        {"id": "partnersProductsCountry", "value": "Partners Products Country"},
                        {"id": "categories", "value": "Categories"},
                        {"id": "categoriesProducts", "value": "CategoriesProducts"}
                        
                    ]
                },
                {"id": "adminUserManagement", "icon": "icon-players", "show":"false", "value": "adminUserManagement"},
                {"id": "aggregatorList", "icon": "icon-players", "show":"false", "value": "Jugadores Partner"},
                {"id": "customers", "icon": "icon-players", "show":"false", "value": "Jugadores"},
                {"id": "agentListManagement", "icon": "icon-players", "show":"false", "value": "Jugadores"},
                {"id": "addAgentListManagement", "icon": "icon-players", "show":"false", "value": "addAgentListManagement"},
                {"id": "addBetShopManagement", "icon": "icon-players", "show":"false", "value": "addBetShopManagement"},
                {"id": "addAdminUserManagement", "icon": "icon-players", "show":"false", "value": "addAdminUserManagement"},
                {"id": "leagues.addLeagueManagement", "icon": "icon-players", "show":"false", "value": "Añadir ligas"},
                {"id": "machine.addMachineManagement", "icon": "icon-players", "show":"false", "value": "Añadir Maquina"},
                {"id": "machine.machineManagement", "icon": "icon-players", "show":"false", "value": "Detalles maquina "},
                {"id": "settings", "icon": "icon-players", "show":"false", "value": "settings"},
                {"id": "withdrawalRequestsApprove", "icon": "icon-players", "show":"false", "value": "withdrawalRequestsApprove"},

                {"id": "playersList", "icon": "icon-players", "value": "Jugadores"},
                 {
                    "id": "partner", "icon": "icon-partner", "value": "Partner", "data": [
                        {"id": "partner.PartnerSettings", "value": "PartnerSettings"}
                                            ]
                },
                                {"id": "leagues.leaguesManagement", "icon": "icon-players", "show":"false", "value": "Jugadores"},
                {
                        "id": "leagues", "icon": "icon-pie-chart", "value": "Ligas", "data": [
                            {"id": "leagues.leaguesList", "value": "Lista de Ligas"}
                                                ]
                    },
                {
                    "id": "requests", "icon": "icon-pie-chart", "value": "Request", "data": [
                        {"id": "requests.registrationRequests", "value": "registrationRequests"}
                                            ]
                },
                {
                    "id": "machine", "icon": "icon-pie-chart", "value": "Maquinas", "data": [
                        {"id": "machine.machineRegister", "value": "Lista"},
                        {"id": "machine.information", "value": "Registrar"},
                        {"id": "machine.pagoPremioMaquina", "value": "Pago Premio"},
                        {"id": "machine.pagoNotaCobro", "value": "Pago Premio"},
                                                {"id": "machine.managePointsGraphics", "value": "Maquinas Grafica"}

                                            ]
                },
                {
                    "id": "messages", "icon": "icon-pie-chart", "value": "Mensajes", "data": [
                        {"id": "messages.messageList", "value": "Lista"}
                                            ]
                },
                {
                    "id": "tools", "icon": "icon-pie-chart", "value": "Herramientas", "data": [
                        {"id": "tools.translationManager", "value": "Traducción"},
                        {"id": "tools.uploadImage", "value": "Subir imagen"}
                                            ]
                },
                
                
                {
                    "id": "reports", "icon": "icon-pie-chart", "value": "Reportes", "data": [
                        {"id": "depositReport", "value": "Reporte de depósitos"},
                        {"id": "autoexclusionUsers", "value": "Autoexclusiones de Usuario"},
                        {"id": "casinoGamesReport", "value": "Reporte de casino "},
                        {"id": "bonusReport", "value": "Reporte de bonos"},
                        {"id": "playersReport", "value": "Reporte de Jugadores"},
                        {"id": "historicalCashFlow", "value": "Flujo de Caja Histórico"},
                        {"id": "summaryCashFlow", "value": "Flujo de Caja Resumido"},
                        {"id": "informeGerencial", "value": "Informe Gerencial"},
                        {"id": "betsReport", "value": "Reporte de Apuestas"},
                        {"id": "usuarioOnlineResumido", "value": "Usuario online Resumido"},
                        {"id": "promotionalCodes", "value": "Codigos Promocionales"},
                        {"id": "relationUserAggregator", "value": "Usuario - Agregator"},
                        {"id": "paidPendingAwards", "value": "premiosPendientesPagar"}
                        
                    ]
                },
                
                {
                    "id": "accounting", "icon": "icon-security", "value": "Contabilidad", "data": [
                        {"id": "accounting.costCenter", "value": "Centros de costo", "add": true},
                        {"id": "accounting.area", "value": "Area", "add": true},
                        {"id": "accounting.position", "value": "Cargo", "add": true},
                        {"id": "accounting.typeCenterPosition", "value": "Tipos", "add": true},
                        {"id": "accounting.employees", "value": "Empleados", "add": true},
                        {"id": "accounting.expenses", "value": "Egresos", "add": true},
                        {"id": "accounting.incomes", "value": "Ingresos", "add": true},
                        {"id": "accounting.providers", "value": "Proveedores terceros", "add": true},
                        {"id": "accounting.concepts", "value": "Conceptos", "add": true},
                        {"id": "accounting.accounts", "value": "Cuentas", "add": true},
                        {"id": "accounting.productsThirdBetShop", "value": "Productos terceros", "add": true},
                        {"id": "accounting.productsThirdByBetShop", "value": "Productos terceros Punto de venta", "add": true},
                        {"id": "accounting.closingDayReport", "value": "Reporte cierre de dia"},
                        {"id": "accounting.squareDayReport", "value": "Reporte de cuadre de dia", "add": true},
                        {"id": "accounting.squareDayReport2", "value": "Reporte de cuadre de dia 2", "add": true}

                    ]
                },
                {
                    "id": "security", "icon": "icon-security", "value": "Security", "data": [
                        {"id": "approvalLogs", "value": "Aporbar Logs", "add": true},
                        {"id": "adminUser", "value": "Admin User", "add": true},
                        {"id": "usuariosbloqueados", "value": "Usuarios Bloqueados"},
                        {"id": "contingency", "value": "Contingency"},
                        {"id": "menus", "value": "Menus"},
                        {"id": "profile", "value": "Profile"},
                        {"id": "profileOptions", "value": "Profile - Options"},
                        {"id": "subMenu", "value": "Sub Menu"},
                        {"id": "userProfile", "value": "User Profile"},
                        {"id": "competitors.competitors", "value": "Competidores"}
                    ]
                },
                {
                    "id": "Cash", "icon": "icon-banknote", "value": "Caja", "data": [
                        {"id": "flujoCaja", "value": "Flujo de Caja"},
                        {"id": "pagoPremio", "value": "Pago Premio"},
                        {"id": "pagoNotaRetiro", "value": "Pago Nota Retiro"},
                        {"id": "recargarCredito", "value": "Recargar Credito"}
                    ]
                },
                {
                    "id": "betShopManagement", "icon": "icon-shop", "value": "Gestión Punto de Venta", "data": [
                        {"id": "betShop", "value": "Punto de Venta", "add": true},
                        {"id": "cashiers", "value": "Cajeros"},
                        {"id": "managePointsGraphics", "value": "Gestión Puntos Gráfico"},
                        {"id": "betShopCompetence", "value": "Puntos de venta Competencia"}
                    ]
                },
                {
                    "id": "agentSystem", "icon": "icon-user-secret", "value": "Agentes", "data": [
                        {"id": "agentList", "value": "Lista de Agentes"},
                        {"id": "agentsTree", "value": "Árbol de Agentes"},
                        {"id": "agentsInform", "value": "Informe de Agentes"},
                        {"id": "agentTransfers", "value": "Transferencias"},
                        {"id": "agent.requestsAgent", "value": "Solicitudes"},
                        {"id": "agent.requirementsAgent", "value": "Requisitos"}

                    ]
                },
                {
                    "id": "financial", "icon": "icon-financial", "value": "Financiero", "data": [
                        {"id": "depositRequests", "value": "Solicitudes de Deposito"},
                        {"id": "withdrawalRequests", "value": "Solicitudes de Retiro","Edit":"true"}
                    ]
                }            ]'
    );
    /*{
                        "id": "leagues", "icon": "icon-pie-chart", "value": "Ligas", "data": [
                            {"id": "leagues.leaguesList", "value": "Lista de Ligas"}
                                                ]
                    },*/

    return ($menu_string2);

}