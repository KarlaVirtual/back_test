<?php/** * Script para analizar código PHP y generar documentación PHPDoc automáticamente. * * @category Red * @package  API * @author   Desconoci * @version  1.0.0 * @since    2025-04-17 */namespace Backend\integrations\general\bigboost;use Backend\dto\ConfigurationEnvironment;/** * Clase Bigboost * * Esta clase se encarga de la integración con el servicio Bigboost. */class Bigboost{    /**     * URL del servicio Bigboost.     *     * @var string     */    private $URL = "";    /**     * URL del servicio Bigboost en modo desarrollo.     *     * @var string     */    private $URLDEV = 'https://bigboost.bigdatacorp.com.br';    private $URLPROD = '';    /**     * URL del servicio Bigboost en modo producción.     *     * @var string     */    private $login = '';    /**     * URL del servicio Bigboost en modo desarrollo.     *     * @var string     */    private $loginDEV = 'lotosports.bet@gmail.com';    /**     * URL del servicio Bigboost en modo producción.     *     * @var string     */    private $loginPRO = '';    /**     * Contraseña para el entorno actual.     *     * @var string     */    private $password = "";    /**     * Contraseña para el entorno de desarrollo.     *     * @var string     */    private $passwordDEV = "9x8ofp7nw";    /**     * Contraseña para el entorno de producción.     *     * @var string     */    private $passwordPRO = "";    /**     * Tiempo de expiración para el entorno actual.     *     * @var string     */    private $expires = "";    /**     * Tiempo de expiración para el entorno de desarrollo.     *     * @var string     */    private $expiresDEV = "87500";    /**     * Tiempo de expiración para el entorno de producción.     *     * @var string     */    private $expiresPRO = "";    /**     * Constructor de la clase Bigboost.     *     * Inicializa las variables de entorno según el entorno de desarrollo o producción.     *     * @access public     */    public function __construct()    {        $ConfigurationEnvironment = new ConfigurationEnvironment();        if ($ConfigurationEnvironment->isDevelopment()) {            $this->login = $this->loginDEV;            $this->password = $this->passwordDEV;            $this->expires = $this->expiresDEV;            $this->URL = $this->URLDEV;        } else {            $this->login = $this->loginDEV;            $this->password = $this->passwordDEV;            $this->expires = $this->expiresDEV;            $this->URL = $this->URLDEV;        }    }    /**     * Método para consultar información de un usuario por cédula.     *     * @param string $cedula  Información del usuario.     * @param string $rid     Identificador único de la transacción.     * @param string $site_id Identificador del sitio (opcional).     *     * @return array Datos de la transacción, incluyendo nombre, apellido y fecha de nacimiento.     */    public function cedula($cedula, $rid, $site_id = '')    {        $data = array();        $data["success"] = false;        $data["error"] = 1;        $data["code"] = 1;        if ($site_id == 17) {            $this->login = 'arnaldinho81@gmail.com';            $this->password = 'Milbets$1727';        }        $dataT = array();        $dataT['login'] = $this->login;        $dataT['password'] = $this->password;        $dataT['expires'] = $this->expires;        $respuesta = $this->token($dataT, $this->URL, '/tokens/generate');        $tokenT = $respuesta->token;        $dataB = array();        $dataB['Datasets'] = "basic_data";        $dataB['q'] = "doc{" . $cedula . "}";        $dataB['AccessToken'] = $tokenT;        syslog(LOG_WARNING, "BIGBOOST DATA" . json_encode($dataB));        $Result = $this->connection($dataB, $this->URL, '/peoplev2');        syslog(LOG_WARNING, "BIGBOOST RESPONSE" . json_encode($Result));        if ($Result != '' && $Result->Status->basic_data[0]->Code == 0) {            $nombre = explode(' ', $Result->Result[0]->BasicData->Name);            $first_name = $nombre[0];            $last_name = implode(' ', array_slice($nombre, 1));            $birth_date = $Result->Result[0]->BasicData->BirthDate;            $data = array();            $data["code"] = 0;            $data["rid"] = $rid;            $data["data"] = array();            array_push($data["data"], array(                'first_name' => $first_name,                'last_name' => $last_name,                'birth_date' => $birth_date            ));        }        return ($data);    }    /**     * Genera un token de autenticación con el proveedor.     *     * @param array  $data Datos necesarios para la autenticación.     * @param string $url  URL base del proveedor.     * @param string $path Ruta específica para la generación del token.     *     * @return object Respuesta del proveedor con el token generado.     */    public function token($data, $url, $path)    {        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => $url . $path,            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => '',            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 0,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => 'POST',            CURLOPT_POSTFIELDS => json_encode($data),            CURLOPT_HTTPHEADER => array(                'Content-Type: application/json'            ),        ));        syslog(LOG_WARNING, "BIGBOOST DATA TOKEN" . json_encode($data));        $response = curl_exec($curl);        syslog(LOG_WARNING, "BIGBOOST RESPONSE TOKEN" . $response);        curl_close($curl);        return json_decode($response);    }    /**     * Establece una conexión CURL con el proveedor.     *     * @param array  $data Datos necesarios para la consulta o transacción.     * @param string $url  URL base del proveedor.     * @param string $path Ruta específica para el proceso requerido.     *     * @return object Respuesta del proveedor con los datos solicitados.     */    public function connection($data, $url, $path)    {        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => $url . $path,            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => '',            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 0,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => 'POST',            CURLOPT_POSTFIELDS => json_encode($data),            CURLOPT_HTTPHEADER => array(                'Content-Type: application/json'            ),        ));        $response = curl_exec($curl);        curl_close($curl);        return json_decode($response);    }}