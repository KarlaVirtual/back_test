<?php
/**
 * SessionApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SessionApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SessionApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation sessionExternalLogin
     *
     * 
     *
     * @param int $unit_id Id of unit entity, identifes **account**, used to own credit, store wallet transactions and own tickets. (required)
     * @param int $staff_id Id of staff entity, identifies **user**, that perform operations during session, to a given unit/acount. (required)
     * @param string $session_context Extensible json object.  This object stores all information from GoldenRace external systems  for this user session.  Example.  External token session/or ids to be included on screen/ticket. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AuthResult
     */
    public function sessionExternalLogin($unit_id, $staff_id, $session_context = null)
    {
        list($response) = $this->sessionExternalLoginWithHttpInfo($unit_id, $staff_id, $session_context);
        return $response;
    }

    /**
     * Operation sessionExternalLoginWithHttpInfo
     *
     * 
     *
     * @param int $unit_id Id of unit entity, identifes **account**, used to own credit, store wallet transactions and own tickets. (required)
     * @param int $staff_id Id of staff entity, identifies **user**, that perform operations during session, to a given unit/acount. (required)
     * @param string $session_context Extensible json object.  This object stores all information from GoldenRace external systems  for this user session.  Example.  External token session/or ids to be included on screen/ticket. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AuthResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sessionExternalLoginWithHttpInfo($unit_id, $staff_id, $session_context = null)
    {
        // verify the required parameter 'unit_id' is set
        if ($unit_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $unit_id when calling sessionExternalLogin');
        }
        // verify the required parameter 'staff_id' is set
        if ($staff_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $staff_id when calling sessionExternalLogin');
        }
        // parse inputs
        $resourcePath = "/session/login";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($unit_id !== null) {
            $queryParams['unitId'] = $this->apiClient->getSerializer()->toQueryValue($unit_id);
        }
        // query params
        if ($staff_id !== null) {
            $queryParams['staffId'] = $this->apiClient->getSerializer()->toQueryValue($staff_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($session_context)) {
            $_tempBody = $session_context;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AuthResult',
                '/session/login'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AuthResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AuthResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
