<?php
/**
 * StatsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * StatsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StatsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return StatsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation statsEarning
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. Miliseconds. (required)
     * @param string $market_code Market code. Try it out to see enum values. (required)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime. Miliseconds. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Stat1[]
     */
    public function statsEarning($entity_id, $start_time, $market_code, $end_time = null)
    {
        list($response) = $this->statsEarningWithHttpInfo($entity_id, $start_time, $market_code, $end_time);
        return $response;
    }

    /**
     * Operation statsEarningWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. Miliseconds. (required)
     * @param string $market_code Market code. Try it out to see enum values. (required)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime. Miliseconds. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Stat1[], HTTP status code, HTTP response headers (array of strings)
     */
    public function statsEarningWithHttpInfo($entity_id, $start_time, $market_code, $end_time = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling statsEarning');
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_time when calling statsEarning');
        }
        // verify the required parameter 'market_code' is set
        if ($market_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $market_code when calling statsEarning');
        }
        // parse inputs
        $resourcePath = "/stats/getEarning";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($market_code !== null) {
            $queryParams['marketCode'] = $this->apiClient->getSerializer()->toQueryValue($market_code);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Stat1[]',
                '/stats/getEarning'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Stat1[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Stat1[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation statsEarningDetail
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. Miliseconds. (required)
     * @param string $market_code Market code. Try it out to see enum values. (required)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime. Miliseconds. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\StatDetail[]
     */
    public function statsEarningDetail($entity_id, $start_time, $market_code, $end_time = null)
    {
        list($response) = $this->statsEarningDetailWithHttpInfo($entity_id, $start_time, $market_code, $end_time);
        return $response;
    }

    /**
     * Operation statsEarningDetailWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. Miliseconds. (required)
     * @param string $market_code Market code. Try it out to see enum values. (required)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime. Miliseconds. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\StatDetail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function statsEarningDetailWithHttpInfo($entity_id, $start_time, $market_code, $end_time = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling statsEarningDetail');
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_time when calling statsEarningDetail');
        }
        // verify the required parameter 'market_code' is set
        if ($market_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $market_code when calling statsEarningDetail');
        }
        // parse inputs
        $resourcePath = "/stats/getEarningDetail";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($market_code !== null) {
            $queryParams['marketCode'] = $this->apiClient->getSerializer()->toQueryValue($market_code);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StatDetail[]',
                '/stats/getEarningDetail'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StatDetail[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StatDetail[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
