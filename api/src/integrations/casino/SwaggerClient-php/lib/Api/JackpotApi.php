<?php
/**
 * JackpotApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * JackpotApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JackpotApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return JackpotApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation jackpotAddEntity
     *
     * 
     *
     * @param int $jackpot_id Jackpot Id (required)
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function jackpotAddEntity($jackpot_id, $entity_id, $currency_code)
    {
        list($response) = $this->jackpotAddEntityWithHttpInfo($jackpot_id, $entity_id, $currency_code);
        return $response;
    }

    /**
     * Operation jackpotAddEntityWithHttpInfo
     *
     * 
     *
     * @param int $jackpot_id Jackpot Id (required)
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jackpotAddEntityWithHttpInfo($jackpot_id, $entity_id, $currency_code)
    {
        // verify the required parameter 'jackpot_id' is set
        if ($jackpot_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $jackpot_id when calling jackpotAddEntity');
        }
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling jackpotAddEntity');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling jackpotAddEntity');
        }
        // parse inputs
        $resourcePath = "/jackpot/addEntity";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($jackpot_id !== null) {
            $queryParams['jackpotId'] = $this->apiClient->getSerializer()->toQueryValue($jackpot_id);
        }
        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jackpot/addEntity'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation jackpotRemoveEntity
     *
     * 
     *
     * @param int $jackpot_id Jackpot Id (required)
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function jackpotRemoveEntity($jackpot_id, $entity_id, $currency_code)
    {
        list($response) = $this->jackpotRemoveEntityWithHttpInfo($jackpot_id, $entity_id, $currency_code);
        return $response;
    }

    /**
     * Operation jackpotRemoveEntityWithHttpInfo
     *
     * 
     *
     * @param int $jackpot_id Jackpot Id (required)
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jackpotRemoveEntityWithHttpInfo($jackpot_id, $entity_id, $currency_code)
    {
        // verify the required parameter 'jackpot_id' is set
        if ($jackpot_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $jackpot_id when calling jackpotRemoveEntity');
        }
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling jackpotRemoveEntity');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling jackpotRemoveEntity');
        }
        // parse inputs
        $resourcePath = "/jackpot/removeEntity";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($jackpot_id !== null) {
            $queryParams['jackpotId'] = $this->apiClient->getSerializer()->toQueryValue($jackpot_id);
        }
        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/jackpot/removeEntity'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
