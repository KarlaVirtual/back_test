<?php
/**
 * TicketApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * TicketApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TicketApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TicketApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation ticketCancel
     *
     * 
     *
     * @param int[] $ticket_ids Array ids ticket (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ServerTicket[]
     */
    public function ticketCancel($ticket_ids)
    {
        list($response) = $this->ticketCancelWithHttpInfo($ticket_ids);
        return $response;
    }

    /**
     * Operation ticketCancelWithHttpInfo
     *
     * 
     *
     * @param int[] $ticket_ids Array ids ticket (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ServerTicket[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ticketCancelWithHttpInfo($ticket_ids)
    {
        // verify the required parameter 'ticket_ids' is set
        if ($ticket_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_ids when calling ticketCancel');
        }
        // parse inputs
        $resourcePath = "/ticket/cancel";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($ticket_ids)) {
            $_tempBody = $ticket_ids;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ServerTicket[]',
                '/ticket/cancel'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ServerTicket[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ServerTicket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ticketFind
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. (required)
     * @param int $first First element of query to be returned, for paging purposes.  If 0, start from first element. (required)
     * @param int $n Number of elements to return from query.  If 0, get all elements. (required)
     * @param string $order_by Define order ASC or DESC (required)
     * @param string $ext_ticket_id External Ticket id (your own id) to find (optional)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime (optional)
     * @param string[] $status  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ServerTicket[]
     */
    public function ticketFind($entity_id, $start_time, $first, $n, $order_by, $ext_ticket_id = null, $end_time = null, $status = null)
    {
        list($response) = $this->ticketFindWithHttpInfo($entity_id, $start_time, $first, $n, $order_by, $ext_ticket_id, $end_time, $status);
        return $response;
    }

    /**
     * Operation ticketFindWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. (required)
     * @param int $first First element of query to be returned, for paging purposes.  If 0, start from first element. (required)
     * @param int $n Number of elements to return from query.  If 0, get all elements. (required)
     * @param string $order_by Define order ASC or DESC (required)
     * @param string $ext_ticket_id External Ticket id (your own id) to find (optional)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime (optional)
     * @param string[] $status  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ServerTicket[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ticketFindWithHttpInfo($entity_id, $start_time, $first, $n, $order_by, $ext_ticket_id = null, $end_time = null, $status = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling ticketFind');
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_time when calling ticketFind');
        }
        // verify the required parameter 'first' is set
        if ($first === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first when calling ticketFind');
        }
        // verify the required parameter 'n' is set
        if ($n === null) {
            throw new \InvalidArgumentException('Missing the required parameter $n when calling ticketFind');
        }
        // verify the required parameter 'order_by' is set
        if ($order_by === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_by when calling ticketFind');
        }
        // parse inputs
        $resourcePath = "/ticket/find";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($ext_ticket_id !== null) {
            $queryParams['extTicketId'] = $this->apiClient->getSerializer()->toQueryValue($ext_ticket_id);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($first !== null) {
            $queryParams['first'] = $this->apiClient->getSerializer()->toQueryValue($first);
        }
        // query params
        if ($n !== null) {
            $queryParams['n'] = $this->apiClient->getSerializer()->toQueryValue($n);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if (is_array($status)) {
            $status = $this->apiClient->getSerializer()->serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ServerTicket[]',
                '/ticket/find'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ServerTicket[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ServerTicket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ticketFindById
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param int $ticket_id Ticket id to find (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ServerTicket
     */
    public function ticketFindById($entity_id, $ticket_id)
    {
        list($response) = $this->ticketFindByIdWithHttpInfo($entity_id, $ticket_id);
        return $response;
    }

    /**
     * Operation ticketFindByIdWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param int $ticket_id Ticket id to find (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ServerTicket, HTTP status code, HTTP response headers (array of strings)
     */
    public function ticketFindByIdWithHttpInfo($entity_id, $ticket_id)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling ticketFindById');
        }
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling ticketFindById');
        }
        // parse inputs
        $resourcePath = "/ticket/findById";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($ticket_id !== null) {
            $queryParams['ticketId'] = $this->apiClient->getSerializer()->toQueryValue($ticket_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ServerTicket',
                '/ticket/findById'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ServerTicket', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ServerTicket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 511:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ticketPayout
     *
     * 
     *
     * @param int[] $ticket_ids Array ids ticket (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ServerTicket[]
     */
    public function ticketPayout($ticket_ids)
    {
        list($response) = $this->ticketPayoutWithHttpInfo($ticket_ids);
        return $response;
    }

    /**
     * Operation ticketPayoutWithHttpInfo
     *
     * 
     *
     * @param int[] $ticket_ids Array ids ticket (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ServerTicket[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ticketPayoutWithHttpInfo($ticket_ids)
    {
        // verify the required parameter 'ticket_ids' is set
        if ($ticket_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_ids when calling ticketPayout');
        }
        // parse inputs
        $resourcePath = "/ticket/payout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($ticket_ids)) {
            $_tempBody = $ticket_ids;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ServerTicket[]',
                '/ticket/payout'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ServerTicket[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ServerTicket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
