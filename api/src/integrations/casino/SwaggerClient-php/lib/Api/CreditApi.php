<?php
/**
 * CreditApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CreditApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation creditAdd
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function creditAdd($entity_id, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        list($response) = $this->creditAddWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $amount, $transaction_desc, $transaction_data);
        return $response;
    }

    /**
     * Operation creditAddWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditAddWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling creditAdd');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling creditAdd');
        }
        // verify the required parameter 'ext_transaction_id' is set
        if ($ext_transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ext_transaction_id when calling creditAdd');
        }
        // parse inputs
        $resourcePath = "/credit/add";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // query params
        if ($transaction_desc !== null) {
            $queryParams['transactionDesc'] = $this->apiClient->getSerializer()->toQueryValue($transaction_desc);
        }
        // query params
        if ($transaction_data !== null) {
            $queryParams['transactionData'] = $this->apiClient->getSerializer()->toQueryValue($transaction_data);
        }
        // query params
        if ($ext_transaction_id !== null) {
            $queryParams['extTransactionId'] = $this->apiClient->getSerializer()->toQueryValue($ext_transaction_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/credit/add'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 601:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 602:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 603:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation creditClear
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function creditClear($entity_id, $currency_code, $ext_transaction_id, $transaction_desc = null, $transaction_data = null)
    {
        list($response) = $this->creditClearWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $transaction_desc, $transaction_data);
        return $response;
    }

    /**
     * Operation creditClearWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditClearWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $transaction_desc = null, $transaction_data = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling creditClear');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling creditClear');
        }
        // verify the required parameter 'ext_transaction_id' is set
        if ($ext_transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ext_transaction_id when calling creditClear');
        }
        // parse inputs
        $resourcePath = "/credit/clear";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // query params
        if ($transaction_desc !== null) {
            $queryParams['transactionDesc'] = $this->apiClient->getSerializer()->toQueryValue($transaction_desc);
        }
        // query params
        if ($transaction_data !== null) {
            $queryParams['transactionData'] = $this->apiClient->getSerializer()->toQueryValue($transaction_data);
        }
        // query params
        if ($ext_transaction_id !== null) {
            $queryParams['extTransactionId'] = $this->apiClient->getSerializer()->toQueryValue($ext_transaction_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/credit/clear'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation creditHistory
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. (required)
     * @param int $n Number of elements to return from query.  If 0, get all elements. (required)
     * @param int $first First element of query to be returned, for paging purposes.  If 0, start from first element. (required)
     * @param string $order_by Define order ASC or DESC (required)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200[]
     */
    public function creditHistory($entity_id, $start_time, $n, $first, $order_by, $end_time = null)
    {
        list($response) = $this->creditHistoryWithHttpInfo($entity_id, $start_time, $n, $first, $order_by, $end_time);
        return $response;
    }

    /**
     * Operation creditHistoryWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param \DateTime $start_time Interval start time from which the search will be performed. (required)
     * @param int $n Number of elements to return from query.  If 0, get all elements. (required)
     * @param int $first First element of query to be returned, for paging purposes.  If 0, start from first element. (required)
     * @param string $order_by Define order ASC or DESC (required)
     * @param \DateTime $end_time Interval end time to which the search will be performed. Use n or endTime (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creditHistoryWithHttpInfo($entity_id, $start_time, $n, $first, $order_by, $end_time = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling creditHistory');
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_time when calling creditHistory');
        }
        // verify the required parameter 'n' is set
        if ($n === null) {
            throw new \InvalidArgumentException('Missing the required parameter $n when calling creditHistory');
        }
        // verify the required parameter 'first' is set
        if ($first === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first when calling creditHistory');
        }
        // verify the required parameter 'order_by' is set
        if ($order_by === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_by when calling creditHistory');
        }
        // parse inputs
        $resourcePath = "/credit/history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($n !== null) {
            $queryParams['n'] = $this->apiClient->getSerializer()->toQueryValue($n);
        }
        // query params
        if ($first !== null) {
            $queryParams['first'] = $this->apiClient->getSerializer()->toQueryValue($first);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200[]',
                '/credit/history'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation creditRemove
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function creditRemove($entity_id, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        list($response) = $this->creditRemoveWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $amount, $transaction_desc, $transaction_data);
        return $response;
    }

    /**
     * Operation creditRemoveWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditRemoveWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling creditRemove');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling creditRemove');
        }
        // verify the required parameter 'ext_transaction_id' is set
        if ($ext_transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ext_transaction_id when calling creditRemove');
        }
        // parse inputs
        $resourcePath = "/credit/remove";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // query params
        if ($transaction_desc !== null) {
            $queryParams['transactionDesc'] = $this->apiClient->getSerializer()->toQueryValue($transaction_desc);
        }
        // query params
        if ($transaction_data !== null) {
            $queryParams['transactionData'] = $this->apiClient->getSerializer()->toQueryValue($transaction_data);
        }
        // query params
        if ($ext_transaction_id !== null) {
            $queryParams['extTransactionId'] = $this->apiClient->getSerializer()->toQueryValue($ext_transaction_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/credit/remove'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 601:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 602:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 603:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation creditSet
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function creditSet($entity_id, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        list($response) = $this->creditSetWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $amount, $transaction_desc, $transaction_data);
        return $response;
    }

    /**
     * Operation creditSetWithHttpInfo
     *
     * 
     *
     * @param int $entity_id The id of the entity. (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditSetWithHttpInfo($entity_id, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling creditSet');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling creditSet');
        }
        // verify the required parameter 'ext_transaction_id' is set
        if ($ext_transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ext_transaction_id when calling creditSet');
        }
        // parse inputs
        $resourcePath = "/credit/set";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id !== null) {
            $queryParams['entityId'] = $this->apiClient->getSerializer()->toQueryValue($entity_id);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // query params
        if ($transaction_desc !== null) {
            $queryParams['transactionDesc'] = $this->apiClient->getSerializer()->toQueryValue($transaction_desc);
        }
        // query params
        if ($transaction_data !== null) {
            $queryParams['transactionData'] = $this->apiClient->getSerializer()->toQueryValue($transaction_data);
        }
        // query params
        if ($ext_transaction_id !== null) {
            $queryParams['extTransactionId'] = $this->apiClient->getSerializer()->toQueryValue($ext_transaction_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/credit/set'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation creditTransfer
     *
     * 
     *
     * @param int $entity_id_from Entity that it doing the transfer from (required)
     * @param int $entity_id_to Entity that it doing the transfer to (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200[]
     */
    public function creditTransfer($entity_id_from, $entity_id_to, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        list($response) = $this->creditTransferWithHttpInfo($entity_id_from, $entity_id_to, $currency_code, $ext_transaction_id, $amount, $transaction_desc, $transaction_data);
        return $response;
    }

    /**
     * Operation creditTransferWithHttpInfo
     *
     * 
     *
     * @param int $entity_id_from Entity that it doing the transfer from (required)
     * @param int $entity_id_to Entity that it doing the transfer to (required)
     * @param string $currency_code The currency code to be selected between - EUR  - GBP  - USD  - AUD  - BRL  - NZD  - CAD  - CHF  - CNY  - DKK  - HKD  - INR  - JPY  - KRW  - LKR  - MXN  - MYR  - NOK  - SEK  - SGD  - THB  - TWD  - VEF  - ZAR  - BGN  - CZK  - EEK  - HUF  - LTL  - LVL  - PLN  - RON  - SKK  - ISK  - HRK  - RUB  - TRY  - PHP  - COP  - ARS  - RWF  - BIF  - CRC  - KES  - PEN  - DOP  - BYR  - UAH  - NAD  - GEL  - PRB  - MDL  - KZT  - MUR  - KGS  - IEP  - MKD  - RSD  - AZN  - MGA  - BAM  - TJS  - ALL  - SRD  - NIO  - GHS  - XAF  - GMD  - IQD  - IRR  - NGN  - AMD  - HTG  - GTQ  - ZMW  - GOLD (required)
     * @param string $ext_transaction_id External transaction Id (required)
     * @param double $amount Positive amount to decrease current credit (optional)
     * @param string $transaction_desc User readable description of current transaction. (optional)
     * @param string $transaction_data JSON encoded object with custom data to be associated with transaction (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creditTransferWithHttpInfo($entity_id_from, $entity_id_to, $currency_code, $ext_transaction_id, $amount = null, $transaction_desc = null, $transaction_data = null)
    {
        // verify the required parameter 'entity_id_from' is set
        if ($entity_id_from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id_from when calling creditTransfer');
        }
        // verify the required parameter 'entity_id_to' is set
        if ($entity_id_to === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id_to when calling creditTransfer');
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency_code when calling creditTransfer');
        }
        // verify the required parameter 'ext_transaction_id' is set
        if ($ext_transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ext_transaction_id when calling creditTransfer');
        }
        // parse inputs
        $resourcePath = "/credit/transfer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($entity_id_from !== null) {
            $queryParams['entityIdFrom'] = $this->apiClient->getSerializer()->toQueryValue($entity_id_from);
        }
        // query params
        if ($entity_id_to !== null) {
            $queryParams['entityIdTo'] = $this->apiClient->getSerializer()->toQueryValue($entity_id_to);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = $this->apiClient->getSerializer()->toQueryValue($amount);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // query params
        if ($transaction_desc !== null) {
            $queryParams['transactionDesc'] = $this->apiClient->getSerializer()->toQueryValue($transaction_desc);
        }
        // query params
        if ($transaction_data !== null) {
            $queryParams['transactionData'] = $this->apiClient->getSerializer()->toQueryValue($transaction_data);
        }
        // query params
        if ($ext_transaction_id !== null) {
            $queryParams['extTransactionId'] = $this->apiClient->getSerializer()->toQueryValue($ext_transaction_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (oldCount($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiHash');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiHash'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apiId');
        if (strlen($apiKey) !== 0) {
            $headerParams['apiId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200[]',
                '/credit/transfer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 510:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
