<?php
/**
 * ServerTicketWinningData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ServerTicketWinningData Class Doc Comment
 *
 * @category    Class
 * @description This information is only availabe when ticket is OPEN. Is necesary in many situation, for example, to print recover not-printed tickets. Return null when not available. Total amount that system will pay to ticket owner for this system bet. Rule to pay:  - maxWinning + bonus &lt; maxPayout ? maxWinning + bonus : maxPayout
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServerTicketWinningData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Server Ticket Winning Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'limit_max_payout' => 'double',
        'min_winning' => 'double',
        'max_winning' => 'double',
        'min_bonus' => 'double',
        'max_bonus' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'limit_max_payout' => 'limitMaxPayout',
        'min_winning' => 'minWinning',
        'max_winning' => 'maxWinning',
        'min_bonus' => 'minBonus',
        'max_bonus' => 'maxBonus'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'limit_max_payout' => 'setLimitMaxPayout',
        'min_winning' => 'setMinWinning',
        'max_winning' => 'setMaxWinning',
        'min_bonus' => 'setMinBonus',
        'max_bonus' => 'setMaxBonus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'limit_max_payout' => 'getLimitMaxPayout',
        'min_winning' => 'getMinWinning',
        'max_winning' => 'getMaxWinning',
        'min_bonus' => 'getMinBonus',
        'max_bonus' => 'getMaxBonus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['limit_max_payout'] = isset($data['limit_max_payout']) ? $data['limit_max_payout'] : null;
        $this->container['min_winning'] = isset($data['min_winning']) ? $data['min_winning'] : null;
        $this->container['max_winning'] = isset($data['max_winning']) ? $data['max_winning'] : null;
        $this->container['min_bonus'] = isset($data['min_bonus']) ? $data['min_bonus'] : null;
        $this->container['max_bonus'] = isset($data['max_bonus']) ? $data['max_bonus'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets limit_max_payout
     * @return double
     */
    public function getLimitMaxPayout()
    {
        return $this->container['limit_max_payout'];
    }

    /**
     * Sets limit_max_payout
     * @param double $limit_max_payout Potencial total max amount (without bonus) that ticket owner could win for this systembet if he win all your bets.
     * @return $this
     */
    public function setLimitMaxPayout($limit_max_payout)
    {
        $this->container['limit_max_payout'] = $limit_max_payout;

        return $this;
    }

    /**
     * Gets min_winning
     * @return double
     */
    public function getMinWinning()
    {
        return $this->container['min_winning'];
    }

    /**
     * Sets min_winning
     * @param double $min_winning Potencial total min amount (without bonus) that ticket owner could win for this ticket if he win n-combination bets.
     * @return $this
     */
    public function setMinWinning($min_winning)
    {
        $this->container['min_winning'] = $min_winning;

        return $this;
    }

    /**
     * Gets max_winning
     * @return double
     */
    public function getMaxWinning()
    {
        return $this->container['max_winning'];
    }

    /**
     * Sets max_winning
     * @param double $max_winning Potencial total max amount (without bonus) that ticket owner could win for this ticket if he win all your bets.
     * @return $this
     */
    public function setMaxWinning($max_winning)
    {
        $this->container['max_winning'] = $max_winning;

        return $this;
    }

    /**
     * Gets min_bonus
     * @return double
     */
    public function getMinBonus()
    {
        return $this->container['min_bonus'];
    }

    /**
     * Sets min_bonus
     * @param double $min_bonus Min Bonus is a percentage of minWinning to add to minWinning for this ticket.  This bonus is calculated using bonus field LimitsSetting Entity.  The total ticket amount to win is calculated minWinning + bonus.
     * @return $this
     */
    public function setMinBonus($min_bonus)
    {
        $this->container['min_bonus'] = $min_bonus;

        return $this;
    }

    /**
     * Gets max_bonus
     * @return double
     */
    public function getMaxBonus()
    {
        return $this->container['max_bonus'];
    }

    /**
     * Sets max_bonus
     * @param double $max_bonus Max Bonus is a percentage of maxWinning to add to maxWinning for this ticket.  This bonus is calculated using bonus field LimitsSetting Entity.  The total ticket amount to win is calculated maxWinning + bonus.
     * @return $this
     */
    public function setMaxBonus($max_bonus)
    {
        $this->container['max_bonus'] = $max_bonus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


