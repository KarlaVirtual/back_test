<?php
/**
 * JackpotStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * JackpotStatus Class Doc Comment
 *
 * @category    Class
 * @description Object to define the Jackpot information. The information is the JackpotId, type, name of jackpot, amount, currency and date of last operation.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JackpotStatus implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JackpotStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jackpot_id' => 'int',
        'jackpot_type' => 'string',
        'jackpot_name' => 'string',
        'amount' => 'string',
        'currency' => '\Swagger\Client\Model\CurrencyConfiguration',
        'last_jackpot' => '\Swagger\Client\Model\JackpotStatusLastJackpot'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'jackpot_id' => 'jackpotId',
        'jackpot_type' => 'jackpotType',
        'jackpot_name' => 'jackpotName',
        'amount' => 'amount',
        'currency' => 'currency',
        'last_jackpot' => 'lastJackpot'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'jackpot_id' => 'setJackpotId',
        'jackpot_type' => 'setJackpotType',
        'jackpot_name' => 'setJackpotName',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'last_jackpot' => 'setLastJackpot'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'jackpot_id' => 'getJackpotId',
        'jackpot_type' => 'getJackpotType',
        'jackpot_name' => 'getJackpotName',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'last_jackpot' => 'getLastJackpot'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const JACKPOT_TYPE_JACKPOTGROUP = 'JACKPOTGROUP';
    const JACKPOT_TYPE_UNIT = 'UNIT';
    const JACKPOT_TYPE_SHOP = 'SHOP';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getJackpotTypeAllowableValues()
    {
        return [
            self::JACKPOT_TYPE_JACKPOTGROUP,
            self::JACKPOT_TYPE_UNIT,
            self::JACKPOT_TYPE_SHOP,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jackpot_id'] = isset($data['jackpot_id']) ? $data['jackpot_id'] : null;
        $this->container['jackpot_type'] = isset($data['jackpot_type']) ? $data['jackpot_type'] : null;
        $this->container['jackpot_name'] = isset($data['jackpot_name']) ? $data['jackpot_name'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['last_jackpot'] = isset($data['last_jackpot']) ? $data['last_jackpot'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["JACKPOTGROUP", "UNIT", "SHOP"];
        if (!in_array($this->container['jackpot_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'jackpot_type', must be one of 'JACKPOTGROUP', 'UNIT', 'SHOP'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["JACKPOTGROUP", "UNIT", "SHOP"];
        if (!in_array($this->container['jackpot_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets jackpot_id
     * @return int
     */
    public function getJackpotId()
    {
        return $this->container['jackpot_id'];
    }

    /**
     * Sets jackpot_id
     * @param int $jackpot_id Server id of shared jackpot group or unit attached to jackpot. If null, it is a local jackpot group'
     * @return $this
     */
    public function setJackpotId($jackpot_id)
    {
        $this->container['jackpot_id'] = $jackpot_id;

        return $this;
    }

    /**
     * Gets jackpot_type
     * @return string
     */
    public function getJackpotType()
    {
        return $this->container['jackpot_type'];
    }

    /**
     * Sets jackpot_type
     * @param string $jackpot_type Jackpot types of all system - JACKPOTGROUP - UNIT - SHOP
     * @return $this
     */
    public function setJackpotType($jackpot_type)
    {
        $allowed_values = array('JACKPOTGROUP', 'UNIT', 'SHOP');
        if (!is_null($jackpot_type) && (!in_array($jackpot_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'jackpot_type', must be one of 'JACKPOTGROUP', 'UNIT', 'SHOP'");
        }
        $this->container['jackpot_type'] = $jackpot_type;

        return $this;
    }

    /**
     * Gets jackpot_name
     * @return string
     */
    public function getJackpotName()
    {
        return $this->container['jackpot_name'];
    }

    /**
     * Sets jackpot_name
     * @param string $jackpot_name Name of jackpot group / shop related to this jackpot.
     * @return $this
     */
    public function setJackpotName($jackpot_name)
    {
        $this->container['jackpot_name'] = $jackpot_name;

        return $this;
    }

    /**
     * Gets amount
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param string $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     * @return \Swagger\Client\Model\CurrencyConfiguration
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Swagger\Client\Model\CurrencyConfiguration $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets last_jackpot
     * @return \Swagger\Client\Model\JackpotStatusLastJackpot
     */
    public function getLastJackpot()
    {
        return $this->container['last_jackpot'];
    }

    /**
     * Sets last_jackpot
     * @param \Swagger\Client\Model\JackpotStatusLastJackpot $last_jackpot
     * @return $this
     */
    public function setLastJackpot($last_jackpot)
    {
        $this->container['last_jackpot'] = $last_jackpot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


