<?php
/**
 * Ticket_
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Ticket_ Class Doc Comment
 *
 * @category    Class
 * @description Detail about tickets.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ticket_ implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Ticket.';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ticket_type' => 'string',
        'events' => '\Swagger\Client\Model\TicketEvents[]',
        'system_bets' => '\Swagger\Client\Model\SystemBet[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ticket_type' => 'ticketType',
        'events' => 'events',
        'system_bets' => 'systemBets'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ticket_type' => 'setTicketType',
        'events' => 'setEvents',
        'system_bets' => 'setSystemBets'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ticket_type' => 'getTicketType',
        'events' => 'getEvents',
        'system_bets' => 'getSystemBets'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TICKET_TYPE_NONE = 'NONE';
    const TICKET_TYPE_SINGLE = 'SINGLE';
    const TICKET_TYPE_SYSTEM = 'SYSTEM';
    const TICKET_TYPE_MULTIPLE = 'MULTIPLE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTicketTypeAllowableValues()
    {
        return [
            self::TICKET_TYPE_NONE,
            self::TICKET_TYPE_SINGLE,
            self::TICKET_TYPE_SYSTEM,
            self::TICKET_TYPE_MULTIPLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ticket_type'] = isset($data['ticket_type']) ? $data['ticket_type'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['system_bets'] = isset($data['system_bets']) ? $data['system_bets'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["NONE", "SINGLE", "SYSTEM", "MULTIPLE"];
        if (!in_array($this->container['ticket_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'ticket_type', must be one of 'NONE', 'SINGLE', 'SYSTEM', 'MULTIPLE'.";
        }

        if ($this->container['events'] === null) {
            $invalid_properties[] = "'events' can't be null";
        }
        if ($this->container['system_bets'] === null) {
            $invalid_properties[] = "'system_bets' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["NONE", "SINGLE", "SYSTEM", "MULTIPLE"];
        if (!in_array($this->container['ticket_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['events'] === null) {
            return false;
        }
        if ($this->container['system_bets'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ticket_type
     * @return string
     */
    public function getTicketType()
    {
        return $this->container['ticket_type'];
    }

    /**
     * Sets ticket_type
     * @param string $ticket_type Ticket type. status types :    - NONE   - SINGLE   - SYSTEM   - MULTIPLE
     * @return $this
     */
    public function setTicketType($ticket_type)
    {
        $allowed_values = array('NONE', 'SINGLE', 'SYSTEM', 'MULTIPLE');
        if (!is_null($ticket_type) && (!in_array($ticket_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'ticket_type', must be one of 'NONE', 'SINGLE', 'SYSTEM', 'MULTIPLE'");
        }
        $this->container['ticket_type'] = $ticket_type;

        return $this;
    }

    /**
     * Gets events
     * @return \Swagger\Client\Model\TicketEvents[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     * @param \Swagger\Client\Model\TicketEvents[] $events
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets system_bets
     * @return \Swagger\Client\Model\SystemBet[]
     */
    public function getSystemBets()
    {
        return $this->container['system_bets'];
    }

    /**
     * Sets system_bets
     * @param \Swagger\Client\Model\SystemBet[] $system_bets
     * @return $this
     */
    public function setSystemBets($system_bets)
    {
        $this->container['system_bets'] = $system_bets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


