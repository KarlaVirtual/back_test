<?php
/**
 * TicketEvents
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TicketEvents Class Doc Comment
 *
 * @category    Class
 * @description Information about ticket events.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TicketEvents implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Ticket._events';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_id' => 'int',
        'ext_id' => 'int',
        'ext_data' => 'object',
        'playlist_id' => 'int',
        'playlist_description' => 'string',
        'game_type' => '\Swagger\Client\Model\ServerTicketGameType',
        'event_time' => '\DateTime',
        'final_outcome' => 'string[]',
        'data' => '\Swagger\Client\Model\TicketEventData',
        'is_banker' => 'bool',
        'bets' => '\Swagger\Client\Model\TicketBet[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'eventId',
        'ext_id' => 'extId',
        'ext_data' => 'extData',
        'playlist_id' => 'playlistId',
        'playlist_description' => 'playlistDescription',
        'game_type' => 'gameType',
        'event_time' => 'eventTime',
        'final_outcome' => 'finalOutcome',
        'data' => 'data',
        'is_banker' => 'isBanker',
        'bets' => 'bets'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
        'ext_id' => 'setExtId',
        'ext_data' => 'setExtData',
        'playlist_id' => 'setPlaylistId',
        'playlist_description' => 'setPlaylistDescription',
        'game_type' => 'setGameType',
        'event_time' => 'setEventTime',
        'final_outcome' => 'setFinalOutcome',
        'data' => 'setData',
        'is_banker' => 'setIsBanker',
        'bets' => 'setBets'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
        'ext_id' => 'getExtId',
        'ext_data' => 'getExtData',
        'playlist_id' => 'getPlaylistId',
        'playlist_description' => 'getPlaylistDescription',
        'game_type' => 'getGameType',
        'event_time' => 'getEventTime',
        'final_outcome' => 'getFinalOutcome',
        'data' => 'getData',
        'is_banker' => 'getIsBanker',
        'bets' => 'getBets'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['ext_id'] = isset($data['ext_id']) ? $data['ext_id'] : null;
        $this->container['ext_data'] = isset($data['ext_data']) ? $data['ext_data'] : null;
        $this->container['playlist_id'] = isset($data['playlist_id']) ? $data['playlist_id'] : null;
        $this->container['playlist_description'] = isset($data['playlist_description']) ? $data['playlist_description'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['event_time'] = isset($data['event_time']) ? $data['event_time'] : null;
        $this->container['final_outcome'] = isset($data['final_outcome']) ? $data['final_outcome'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['is_banker'] = isset($data['is_banker']) ? $data['is_banker'] : null;
        $this->container['bets'] = isset($data['bets']) ? $data['bets'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets event_id
     * @return int
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     * @param int $event_id
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets ext_id
     * @return int
     */
    public function getExtId()
    {
        return $this->container['ext_id'];
    }

    /**
     * Sets ext_id
     * @param int $ext_id
     * @return $this
     */
    public function setExtId($ext_id)
    {
        $this->container['ext_id'] = $ext_id;

        return $this;
    }

    /**
     * Gets ext_data
     * @return object
     */
    public function getExtData()
    {
        return $this->container['ext_data'];
    }

    /**
     * Sets ext_data
     * @param object $ext_data
     * @return $this
     */
    public function setExtData($ext_data)
    {
        $this->container['ext_data'] = $ext_data;

        return $this;
    }

    /**
     * Gets playlist_id
     * @return int
     */
    public function getPlaylistId()
    {
        return $this->container['playlist_id'];
    }

    /**
     * Sets playlist_id
     * @param int $playlist_id
     * @return $this
     */
    public function setPlaylistId($playlist_id)
    {
        $this->container['playlist_id'] = $playlist_id;

        return $this;
    }

    /**
     * Gets playlist_description
     * @return string
     */
    public function getPlaylistDescription()
    {
        return $this->container['playlist_description'];
    }

    /**
     * Sets playlist_description
     * @param string $playlist_description
     * @return $this
     */
    public function setPlaylistDescription($playlist_description)
    {
        $this->container['playlist_description'] = $playlist_description;

        return $this;
    }

    /**
     * Gets game_type
     * @return \Swagger\Client\Model\ServerTicketGameType
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     * @param \Swagger\Client\Model\ServerTicketGameType $game_type
     * @return $this
     */
    public function setGameType($game_type)
    {
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets event_time
     * @return \DateTime
     */
    public function getEventTime()
    {
        return $this->container['event_time'];
    }

    /**
     * Sets event_time
     * @param \DateTime $event_time
     * @return $this
     */
    public function setEventTime($event_time)
    {
        $this->container['event_time'] = $event_time;

        return $this;
    }

    /**
     * Gets final_outcome
     * @return string[]
     */
    public function getFinalOutcome()
    {
        return $this->container['final_outcome'];
    }

    /**
     * Sets final_outcome
     * @param string[] $final_outcome Final outcome. Indicates the order of arrival of the participants of the race.
     * @return $this
     */
    public function setFinalOutcome($final_outcome)
    {
        $this->container['final_outcome'] = $final_outcome;

        return $this;
    }

    /**
     * Gets data
     * @return \Swagger\Client\Model\TicketEventData
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param \Swagger\Client\Model\TicketEventData $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets is_banker
     * @return bool
     */
    public function getIsBanker()
    {
        return $this->container['is_banker'];
    }

    /**
     * Sets is_banker
     * @param bool $is_banker Is banker.
     * @return $this
     */
    public function setIsBanker($is_banker)
    {
        $this->container['is_banker'] = $is_banker;

        return $this;
    }

    /**
     * Gets bets
     * @return \Swagger\Client\Model\TicketBet[]
     */
    public function getBets()
    {
        return $this->container['bets'];
    }

    /**
     * Sets bets
     * @param \Swagger\Client\Model\TicketBet[] $bets
     * @return $this
     */
    public function setBets($bets)
    {
        $this->container['bets'] = $bets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


