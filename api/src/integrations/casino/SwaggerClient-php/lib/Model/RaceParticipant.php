<?php
/**
 * RaceParticipant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RaceParticipant Class Doc Comment
 *
 * @category    Class
 * @description See FootballParticipant and RaceParticipant
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RaceParticipant implements ArrayAccess
{
    const DISCRIMINATOR = 'classType';

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RaceParticipant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_type' => 'string',
        'id' => 'string',
        'name' => 'string',
        'prob' => 'float',
        'forecast' => 'string[]',
        'sex' => 'string',
        'color' => 'string',
        'owner' => 'string',
        'speed' => 'float',
        'stamina' => 'float',
        'place' => 'float',
        'wins' => 'float',
        'time_off' => 'int',
        'handicap' => 'float',
        'handicap_prev' => 'float',
        'jockey' => 'string',
        'jockey_forecast' => 'string[]',
        'pace' => 'string',
        'art' => 'float',
        'form' => 'float',
        'median' => 'float',
        'standard_deviation' => 'float',
        'group' => 'string',
        'risk' => 'int',
        'ability' => 'float',
        'star' => 'int',
        'track_condition' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'class_type' => 'classType',
        'id' => 'id',
        'name' => 'name',
        'prob' => 'prob',
        'forecast' => 'forecast',
        'sex' => 'sex',
        'color' => 'color',
        'owner' => 'owner',
        'speed' => 'speed',
        'stamina' => 'stamina',
        'place' => 'place',
        'wins' => 'wins',
        'time_off' => 'timeOff',
        'handicap' => 'handicap',
        'handicap_prev' => 'handicapPrev',
        'jockey' => 'jockey',
        'jockey_forecast' => 'jockeyForecast',
        'pace' => 'pace',
        'art' => 'art',
        'form' => 'form',
        'median' => 'median',
        'standard_deviation' => 'standardDeviation',
        'group' => 'group',
        'risk' => 'risk',
        'ability' => 'ability',
        'star' => 'star',
        'track_condition' => 'trackCondition'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'class_type' => 'setClassType',
        'id' => 'setId',
        'name' => 'setName',
        'prob' => 'setProb',
        'forecast' => 'setForecast',
        'sex' => 'setSex',
        'color' => 'setColor',
        'owner' => 'setOwner',
        'speed' => 'setSpeed',
        'stamina' => 'setStamina',
        'place' => 'setPlace',
        'wins' => 'setWins',
        'time_off' => 'setTimeOff',
        'handicap' => 'setHandicap',
        'handicap_prev' => 'setHandicapPrev',
        'jockey' => 'setJockey',
        'jockey_forecast' => 'setJockeyForecast',
        'pace' => 'setPace',
        'art' => 'setArt',
        'form' => 'setForm',
        'median' => 'setMedian',
        'standard_deviation' => 'setStandardDeviation',
        'group' => 'setGroup',
        'risk' => 'setRisk',
        'ability' => 'setAbility',
        'star' => 'setStar',
        'track_condition' => 'setTrackCondition'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'class_type' => 'getClassType',
        'id' => 'getId',
        'name' => 'getName',
        'prob' => 'getProb',
        'forecast' => 'getForecast',
        'sex' => 'getSex',
        'color' => 'getColor',
        'owner' => 'getOwner',
        'speed' => 'getSpeed',
        'stamina' => 'getStamina',
        'place' => 'getPlace',
        'wins' => 'getWins',
        'time_off' => 'getTimeOff',
        'handicap' => 'getHandicap',
        'handicap_prev' => 'getHandicapPrev',
        'jockey' => 'getJockey',
        'jockey_forecast' => 'getJockeyForecast',
        'pace' => 'getPace',
        'art' => 'getArt',
        'form' => 'getForm',
        'median' => 'getMedian',
        'standard_deviation' => 'getStandardDeviation',
        'group' => 'getGroup',
        'risk' => 'getRisk',
        'ability' => 'getAbility',
        'star' => 'getStar',
        'track_condition' => 'getTrackCondition'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CLASS_TYPE_FOOTBALL_PARTICIPANT = 'FootballParticipant';
    const CLASS_TYPE_RACE_PARTICIPANT = 'RaceParticipant';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getClassTypeAllowableValues()
    {
        return [
            self::CLASS_TYPE_FOOTBALL_PARTICIPANT,
            self::CLASS_TYPE_RACE_PARTICIPANT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_type'] = isset($data['class_type']) ? $data['class_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['prob'] = isset($data['prob']) ? $data['prob'] : null;
        $this->container['forecast'] = isset($data['forecast']) ? $data['forecast'] : null;
        $this->container['sex'] = isset($data['sex']) ? $data['sex'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['speed'] = isset($data['speed']) ? $data['speed'] : null;
        $this->container['stamina'] = isset($data['stamina']) ? $data['stamina'] : null;
        $this->container['place'] = isset($data['place']) ? $data['place'] : null;
        $this->container['wins'] = isset($data['wins']) ? $data['wins'] : null;
        $this->container['time_off'] = isset($data['time_off']) ? $data['time_off'] : null;
        $this->container['handicap'] = isset($data['handicap']) ? $data['handicap'] : null;
        $this->container['handicap_prev'] = isset($data['handicap_prev']) ? $data['handicap_prev'] : null;
        $this->container['jockey'] = isset($data['jockey']) ? $data['jockey'] : null;
        $this->container['jockey_forecast'] = isset($data['jockey_forecast']) ? $data['jockey_forecast'] : null;
        $this->container['pace'] = isset($data['pace']) ? $data['pace'] : null;
        $this->container['art'] = isset($data['art']) ? $data['art'] : null;
        $this->container['form'] = isset($data['form']) ? $data['form'] : null;
        $this->container['median'] = isset($data['median']) ? $data['median'] : null;
        $this->container['standard_deviation'] = isset($data['standard_deviation']) ? $data['standard_deviation'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['risk'] = isset($data['risk']) ? $data['risk'] : null;
        $this->container['ability'] = isset($data['ability']) ? $data['ability'] : null;
        $this->container['star'] = isset($data['star']) ? $data['star'] : null;
        $this->container['track_condition'] = isset($data['track_condition']) ? $data['track_condition'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('classType', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['class_type'] === null) {
            $invalid_properties[] = "'class_type' can't be null";
        }
        $allowed_values = ["FootballParticipant", "RaceParticipant"];
        if (!in_array($this->container['class_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'class_type', must be one of 'FootballParticipant', 'RaceParticipant'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['class_type'] === null) {
            return false;
        }
        $allowed_values = ["FootballParticipant", "RaceParticipant"];
        if (!in_array($this->container['class_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets class_type
     * @return string
     */
    public function getClassType()
    {
        return $this->container['class_type'];
    }

    /**
     * Sets class_type
     * @param string $class_type
     * @return $this
     */
    public function setClassType($class_type)
    {
        $allowed_values = array('FootballParticipant', 'RaceParticipant');
        if ((!in_array($class_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'class_type', must be one of 'FootballParticipant', 'RaceParticipant'");
        }
        $this->container['class_type'] = $class_type;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prob
     * @return float
     */
    public function getProb()
    {
        return $this->container['prob'];
    }

    /**
     * Sets prob
     * @param float $prob
     * @return $this
     */
    public function setProb($prob)
    {
        $this->container['prob'] = $prob;

        return $this;
    }

    /**
     * Gets forecast
     * @return string[]
     */
    public function getForecast()
    {
        return $this->container['forecast'];
    }

    /**
     * Sets forecast
     * @param string[] $forecast Array forecast.
     * @return $this
     */
    public function setForecast($forecast)
    {
        $this->container['forecast'] = $forecast;

        return $this;
    }

    /**
     * Gets sex
     * @return string
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     * @param string $sex
     * @return $this
     */
    public function setSex($sex)
    {
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets owner
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param string $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets speed
     * @return float
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     * @param float $speed
     * @return $this
     */
    public function setSpeed($speed)
    {
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets stamina
     * @return float
     */
    public function getStamina()
    {
        return $this->container['stamina'];
    }

    /**
     * Sets stamina
     * @param float $stamina
     * @return $this
     */
    public function setStamina($stamina)
    {
        $this->container['stamina'] = $stamina;

        return $this;
    }

    /**
     * Gets place
     * @return float
     */
    public function getPlace()
    {
        return $this->container['place'];
    }

    /**
     * Sets place
     * @param float $place
     * @return $this
     */
    public function setPlace($place)
    {
        $this->container['place'] = $place;

        return $this;
    }

    /**
     * Gets wins
     * @return float
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     * @param float $wins
     * @return $this
     */
    public function setWins($wins)
    {
        $this->container['wins'] = $wins;

        return $this;
    }

    /**
     * Gets time_off
     * @return int
     */
    public function getTimeOff()
    {
        return $this->container['time_off'];
    }

    /**
     * Sets time_off
     * @param int $time_off
     * @return $this
     */
    public function setTimeOff($time_off)
    {
        $this->container['time_off'] = $time_off;

        return $this;
    }

    /**
     * Gets handicap
     * @return float
     */
    public function getHandicap()
    {
        return $this->container['handicap'];
    }

    /**
     * Sets handicap
     * @param float $handicap
     * @return $this
     */
    public function setHandicap($handicap)
    {
        $this->container['handicap'] = $handicap;

        return $this;
    }

    /**
     * Gets handicap_prev
     * @return float
     */
    public function getHandicapPrev()
    {
        return $this->container['handicap_prev'];
    }

    /**
     * Sets handicap_prev
     * @param float $handicap_prev
     * @return $this
     */
    public function setHandicapPrev($handicap_prev)
    {
        $this->container['handicap_prev'] = $handicap_prev;

        return $this;
    }

    /**
     * Gets jockey
     * @return string
     */
    public function getJockey()
    {
        return $this->container['jockey'];
    }

    /**
     * Sets jockey
     * @param string $jockey
     * @return $this
     */
    public function setJockey($jockey)
    {
        $this->container['jockey'] = $jockey;

        return $this;
    }

    /**
     * Gets jockey_forecast
     * @return string[]
     */
    public function getJockeyForecast()
    {
        return $this->container['jockey_forecast'];
    }

    /**
     * Sets jockey_forecast
     * @param string[] $jockey_forecast
     * @return $this
     */
    public function setJockeyForecast($jockey_forecast)
    {
        $this->container['jockey_forecast'] = $jockey_forecast;

        return $this;
    }

    /**
     * Gets pace
     * @return string
     */
    public function getPace()
    {
        return $this->container['pace'];
    }

    /**
     * Sets pace
     * @param string $pace
     * @return $this
     */
    public function setPace($pace)
    {
        $this->container['pace'] = $pace;

        return $this;
    }

    /**
     * Gets art
     * @return float
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     * @param float $art
     * @return $this
     */
    public function setArt($art)
    {
        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets form
     * @return float
     */
    public function getForm()
    {
        return $this->container['form'];
    }

    /**
     * Sets form
     * @param float $form
     * @return $this
     */
    public function setForm($form)
    {
        $this->container['form'] = $form;

        return $this;
    }

    /**
     * Gets median
     * @return float
     */
    public function getMedian()
    {
        return $this->container['median'];
    }

    /**
     * Sets median
     * @param float $median
     * @return $this
     */
    public function setMedian($median)
    {
        $this->container['median'] = $median;

        return $this;
    }

    /**
     * Gets standard_deviation
     * @return float
     */
    public function getStandardDeviation()
    {
        return $this->container['standard_deviation'];
    }

    /**
     * Sets standard_deviation
     * @param float $standard_deviation
     * @return $this
     */
    public function setStandardDeviation($standard_deviation)
    {
        $this->container['standard_deviation'] = $standard_deviation;

        return $this;
    }

    /**
     * Gets group
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     * @param string $group
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets risk
     * @return int
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     * @param int $risk
     * @return $this
     */
    public function setRisk($risk)
    {
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets ability
     * @return float
     */
    public function getAbility()
    {
        return $this->container['ability'];
    }

    /**
     * Sets ability
     * @param float $ability
     * @return $this
     */
    public function setAbility($ability)
    {
        $this->container['ability'] = $ability;

        return $this;
    }

    /**
     * Gets star
     * @return int
     */
    public function getStar()
    {
        return $this->container['star'];
    }

    /**
     * Sets star
     * @param int $star
     * @return $this
     */
    public function setStar($star)
    {
        $this->container['star'] = $star;

        return $this;
    }

    /**
     * Gets track_condition
     * @return float
     */
    public function getTrackCondition()
    {
        return $this->container['track_condition'];
    }

    /**
     * Sets track_condition
     * @param float $track_condition
     * @return $this
     */
    public function setTrackCondition($track_condition)
    {
        $this->container['track_condition'] = $track_condition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


