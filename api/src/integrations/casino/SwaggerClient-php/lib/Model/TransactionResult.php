<?php
/**
 * TransactionResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TransactionResult Class Doc Comment
 *
 * @category    Class
 * @description Object with the result of transaction operations (CREATE, PAIDOUT or CANCEL) and describe the old credit, the new credit, the date of operation and the currency of the transaction.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TransactionResult implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Transaction result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trans_type' => 'string',
        'old_credit' => 'double',
        'new_credit' => 'double',
        'currency_code' => 'string',
        'ext_transaction_id' => 'string',
        'date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'trans_type' => 'transType',
        'old_credit' => 'oldCredit',
        'new_credit' => 'newCredit',
        'currency_code' => 'currencyCode',
        'ext_transaction_id' => 'extTransactionId',
        'date' => 'date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'trans_type' => 'setTransType',
        'old_credit' => 'setOldCredit',
        'new_credit' => 'setNewCredit',
        'currency_code' => 'setCurrencyCode',
        'ext_transaction_id' => 'setExtTransactionId',
        'date' => 'setDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'trans_type' => 'getTransType',
        'old_credit' => 'getOldCredit',
        'new_credit' => 'getNewCredit',
        'currency_code' => 'getCurrencyCode',
        'ext_transaction_id' => 'getExtTransactionId',
        'date' => 'getDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TRANS_TYPE_CREATE = 'CREATE';
    const TRANS_TYPE_PAIDOUT = 'PAIDOUT';
    const TRANS_TYPE_CANCEL = 'CANCEL';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTransTypeAllowableValues()
    {
        return [
            self::TRANS_TYPE_CREATE,
            self::TRANS_TYPE_PAIDOUT,
            self::TRANS_TYPE_CANCEL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trans_type'] = isset($data['trans_type']) ? $data['trans_type'] : null;
        $this->container['old_credit'] = isset($data['old_credit']) ? $data['old_credit'] : null;
        $this->container['new_credit'] = isset($data['new_credit']) ? $data['new_credit'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['ext_transaction_id'] = isset($data['ext_transaction_id']) ? $data['ext_transaction_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["CREATE", "PAIDOUT", "CANCEL"];
        if (!in_array($this->container['trans_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'trans_type', must be one of 'CREATE', 'PAIDOUT', 'CANCEL'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["CREATE", "PAIDOUT", "CANCEL"];
        if (!in_array($this->container['trans_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets trans_type
     * @return string
     */
    public function getTransType()
    {
        return $this->container['trans_type'];
    }

    /**
     * Sets trans_type
     * @param string $trans_type transaction types can be     - CREATE   - PAIDOUT   - CANCEL
     * @return $this
     */
    public function setTransType($trans_type)
    {
        $allowed_values = array('CREATE', 'PAIDOUT', 'CANCEL');
        if (!is_null($trans_type) && (!in_array($trans_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'trans_type', must be one of 'CREATE', 'PAIDOUT', 'CANCEL'");
        }
        $this->container['trans_type'] = $trans_type;

        return $this;
    }

    /**
     * Gets old_credit
     * @return double
     */
    public function getOldCredit()
    {
        return $this->container['old_credit'];
    }

    /**
     * Sets old_credit
     * @param double $old_credit
     * @return $this
     */
    public function setOldCredit($old_credit)
    {
        $this->container['old_credit'] = $old_credit;

        return $this;
    }

    /**
     * Gets new_credit
     * @return double
     */
    public function getNewCredit()
    {
        return $this->container['new_credit'];
    }

    /**
     * Sets new_credit
     * @param double $new_credit
     * @return $this
     */
    public function setNewCredit($new_credit)
    {
        $this->container['new_credit'] = $new_credit;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code ISO Currency code.
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets ext_transaction_id
     * @return string
     */
    public function getExtTransactionId()
    {
        return $this->container['ext_transaction_id'];
    }

    /**
     * Sets ext_transaction_id
     * @param string $ext_transaction_id External Transaction Id
     * @return $this
     */
    public function setExtTransactionId($ext_transaction_id)
    {
        $this->container['ext_transaction_id'] = $ext_transaction_id;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date Date of transaction
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


