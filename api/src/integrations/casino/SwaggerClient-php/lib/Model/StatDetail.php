<?php
/**
 * StatDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * StatDetail Class Doc Comment
 *
 * @category    Class
 * @description Earning consolidate information, split by detail.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StatDetail implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Stat detail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'parent_client_id' => 'int',
        'entity_id' => 'int',
        'user_played' => 'int',
        'currency_iso' => 'string',
        'gametype' => 'string',
        'market' => 'string',
        'stake' => 'double',
        'won' => 'double',
        'paid' => 'double',
        'playlist' => 'string',
        'counter_tip' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'parent_client_id' => 'parentClientId',
        'entity_id' => 'entityId',
        'user_played' => 'userPlayed',
        'currency_iso' => 'currencyISO',
        'gametype' => 'gametype',
        'market' => 'market',
        'stake' => 'stake',
        'won' => 'won',
        'paid' => 'paid',
        'playlist' => 'playlist',
        'counter_tip' => 'counterTip'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'parent_client_id' => 'setParentClientId',
        'entity_id' => 'setEntityId',
        'user_played' => 'setUserPlayed',
        'currency_iso' => 'setCurrencyIso',
        'gametype' => 'setGametype',
        'market' => 'setMarket',
        'stake' => 'setStake',
        'won' => 'setWon',
        'paid' => 'setPaid',
        'playlist' => 'setPlaylist',
        'counter_tip' => 'setCounterTip'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'parent_client_id' => 'getParentClientId',
        'entity_id' => 'getEntityId',
        'user_played' => 'getUserPlayed',
        'currency_iso' => 'getCurrencyIso',
        'gametype' => 'getGametype',
        'market' => 'getMarket',
        'stake' => 'getStake',
        'won' => 'getWon',
        'paid' => 'getPaid',
        'playlist' => 'getPlaylist',
        'counter_tip' => 'getCounterTip'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['parent_client_id'] = isset($data['parent_client_id']) ? $data['parent_client_id'] : null;
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['user_played'] = isset($data['user_played']) ? $data['user_played'] : null;
        $this->container['currency_iso'] = isset($data['currency_iso']) ? $data['currency_iso'] : null;
        $this->container['gametype'] = isset($data['gametype']) ? $data['gametype'] : null;
        $this->container['market'] = isset($data['market']) ? $data['market'] : null;
        $this->container['stake'] = isset($data['stake']) ? $data['stake'] : null;
        $this->container['won'] = isset($data['won']) ? $data['won'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['playlist'] = isset($data['playlist']) ? $data['playlist'] : null;
        $this->container['counter_tip'] = isset($data['counter_tip']) ? $data['counter_tip'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date Rounded start date/time of result. Time can be rounded according to precission available in system.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date Rounded end date/time of result. Time can be rounded according to precission available in system.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets parent_client_id
     * @return int
     */
    public function getParentClientId()
    {
        return $this->container['parent_client_id'];
    }

    /**
     * Sets parent_client_id
     * @param int $parent_client_id First parent that itÂ´s Client flag activated.
     * @return $this
     */
    public function setParentClientId($parent_client_id)
    {
        $this->container['parent_client_id'] = $parent_client_id;

        return $this;
    }

    /**
     * Gets entity_id
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     * @param int $entity_id The entity id information.
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets user_played
     * @return int
     */
    public function getUserPlayed()
    {
        return $this->container['user_played'];
    }

    /**
     * Sets user_played
     * @param int $user_played The entity id of the player.
     * @return $this
     */
    public function setUserPlayed($user_played)
    {
        $this->container['user_played'] = $user_played;

        return $this;
    }

    /**
     * Gets currency_iso
     * @return string
     */
    public function getCurrencyIso()
    {
        return $this->container['currency_iso'];
    }

    /**
     * Sets currency_iso
     * @param string $currency_iso The ISO currency code.
     * @return $this
     */
    public function setCurrencyIso($currency_iso)
    {
        $this->container['currency_iso'] = $currency_iso;

        return $this;
    }

    /**
     * Gets gametype
     * @return string
     */
    public function getGametype()
    {
        return $this->container['gametype'];
    }

    /**
     * Sets gametype
     * @param string $gametype The game type of tip.
     * @return $this
     */
    public function setGametype($gametype)
    {
        $this->container['gametype'] = $gametype;

        return $this;
    }

    /**
     * Gets market
     * @return string
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     * @param string $market The market of ticket.
     * @return $this
     */
    public function setMarket($market)
    {
        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets stake
     * @return double
     */
    public function getStake()
    {
        return $this->container['stake'];
    }

    /**
     * Sets stake
     * @param double $stake The stake value of ticket.
     * @return $this
     */
    public function setStake($stake)
    {
        $this->container['stake'] = $stake;

        return $this;
    }

    /**
     * Gets won
     * @return double
     */
    public function getWon()
    {
        return $this->container['won'];
    }

    /**
     * Sets won
     * @param double $won The won value of ticket.
     * @return $this
     */
    public function setWon($won)
    {
        $this->container['won'] = $won;

        return $this;
    }

    /**
     * Gets paid
     * @return double
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     * @param double $paid The paid amount of ticket.
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets playlist
     * @return string
     */
    public function getPlaylist()
    {
        return $this->container['playlist'];
    }

    /**
     * Sets playlist
     * @param string $playlist The playlist of ticket.
     * @return $this
     */
    public function setPlaylist($playlist)
    {
        $this->container['playlist'] = $playlist;

        return $this;
    }

    /**
     * Gets counter_tip
     * @return int
     */
    public function getCounterTip()
    {
        return $this->container['counter_tip'];
    }

    /**
     * Sets counter_tip
     * @param int $counter_tip The number of tips.
     * @return $this
     */
    public function setCounterTip($counter_tip)
    {
        $this->container['counter_tip'] = $counter_tip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


