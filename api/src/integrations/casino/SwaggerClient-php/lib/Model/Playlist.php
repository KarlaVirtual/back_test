<?php
/**
 * Playlist
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Playlist Class Doc Comment
 *
 * @category    Class
 * @description Information about a game type playlist events.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Playlist implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Playlist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'game_type' => '\Swagger\Client\Model\ServerTicketGameType',
        'mode' => 'string',
        'filter' => '\Swagger\Client\Model\PlaylistFilter',
        'capabilities' => '\Swagger\Client\Model\PlaylistCapabilities[]',
        'market_option_size' => 'int',
        'market_templates' => '\Swagger\Client\Model\Market_[]',
        'participant_templates' => '\Swagger\Client\Model\PlaylistParticipantTemplates[]',
        'description' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'game_type' => 'gameType',
        'mode' => 'mode',
        'filter' => 'filter',
        'capabilities' => 'capabilities',
        'market_option_size' => 'marketOptionSize',
        'market_templates' => 'marketTemplates',
        'participant_templates' => 'participantTemplates',
        'description' => 'description'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'game_type' => 'setGameType',
        'mode' => 'setMode',
        'filter' => 'setFilter',
        'capabilities' => 'setCapabilities',
        'market_option_size' => 'setMarketOptionSize',
        'market_templates' => 'setMarketTemplates',
        'participant_templates' => 'setParticipantTemplates',
        'description' => 'setDescription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'game_type' => 'getGameType',
        'mode' => 'getMode',
        'filter' => 'getFilter',
        'capabilities' => 'getCapabilities',
        'market_option_size' => 'getMarketOptionSize',
        'market_templates' => 'getMarketTemplates',
        'participant_templates' => 'getParticipantTemplates',
        'description' => 'getDescription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MODE_DEFAULT = 'DEFAULT';
    const MODE_ONDEMAND = 'ONDEMAND';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_DEFAULT,
            self::MODE_ONDEMAND,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
        $this->container['market_option_size'] = isset($data['market_option_size']) ? $data['market_option_size'] : null;
        $this->container['market_templates'] = isset($data['market_templates']) ? $data['market_templates'] : null;
        $this->container['participant_templates'] = isset($data['participant_templates']) ? $data['participant_templates'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["DEFAULT", "ONDEMAND"];
        if (!in_array($this->container['mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'mode', must be one of 'DEFAULT', 'ONDEMAND'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["DEFAULT", "ONDEMAND"];
        if (!in_array($this->container['mode'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Playlist Id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets game_type
     * @return \Swagger\Client\Model\ServerTicketGameType
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     * @param \Swagger\Client\Model\ServerTicketGameType $game_type
     * @return $this
     */
    public function setGameType($game_type)
    {
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets mode
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     * @param string $mode The mode define if the playlist is normal or a on-demand playlist.
     * @return $this
     */
    public function setMode($mode)
    {
        $allowed_values = array('DEFAULT', 'ONDEMAND');
        if (!is_null($mode) && (!in_array($mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'mode', must be one of 'DEFAULT', 'ONDEMAND'");
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets filter
     * @return \Swagger\Client\Model\PlaylistFilter
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     * @param \Swagger\Client\Model\PlaylistFilter $filter
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets capabilities
     * @return \Swagger\Client\Model\PlaylistCapabilities[]
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     * @param \Swagger\Client\Model\PlaylistCapabilities[] $capabilities
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets market_option_size
     * @return int
     */
    public function getMarketOptionSize()
    {
        return $this->container['market_option_size'];
    }

    /**
     * Sets market_option_size
     * @param int $market_option_size Gets the size of the market options to be able to compare when we get the size of the array of odds values in the eventData.
     * @return $this
     */
    public function setMarketOptionSize($market_option_size)
    {
        $this->container['market_option_size'] = $market_option_size;

        return $this;
    }

    /**
     * Gets market_templates
     * @return \Swagger\Client\Model\Market_[]
     */
    public function getMarketTemplates()
    {
        return $this->container['market_templates'];
    }

    /**
     * Sets market_templates
     * @param \Swagger\Client\Model\Market_[] $market_templates get info markets for playlist.
     * @return $this
     */
    public function setMarketTemplates($market_templates)
    {
        $this->container['market_templates'] = $market_templates;

        return $this;
    }

    /**
     * Gets participant_templates
     * @return \Swagger\Client\Model\PlaylistParticipantTemplates[]
     */
    public function getParticipantTemplates()
    {
        return $this->container['participant_templates'];
    }

    /**
     * Sets participant_templates
     * @param \Swagger\Client\Model\PlaylistParticipantTemplates[] $participant_templates
     * @return $this
     */
    public function setParticipantTemplates($participant_templates)
    {
        $this->container['participant_templates'] = $participant_templates;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Playlist text description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


