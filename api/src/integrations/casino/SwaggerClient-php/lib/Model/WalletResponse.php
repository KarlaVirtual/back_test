<?php
/**
 * WalletResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * WalletResponse Class Doc Comment
 *
 * @category    Class
 * @description Base wallet response to bulk operation.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WalletResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Wallet response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ticket_id' => 'int',
        'result' => 'string',
        'error_id' => 'int',
        'error_message' => 'string',
        'type' => 'string',
        'old_credit' => 'double',
        'new_credit' => 'double',
        'ext_transaction_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ticket_id' => 'ticketId',
        'result' => 'result',
        'error_id' => 'errorId',
        'error_message' => 'errorMessage',
        'type' => 'type',
        'old_credit' => 'oldCredit',
        'new_credit' => 'newCredit',
        'ext_transaction_id' => 'extTransactionID'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ticket_id' => 'setTicketId',
        'result' => 'setResult',
        'error_id' => 'setErrorId',
        'error_message' => 'setErrorMessage',
        'type' => 'setType',
        'old_credit' => 'setOldCredit',
        'new_credit' => 'setNewCredit',
        'ext_transaction_id' => 'setExtTransactionId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ticket_id' => 'getTicketId',
        'result' => 'getResult',
        'error_id' => 'getErrorId',
        'error_message' => 'getErrorMessage',
        'type' => 'getType',
        'old_credit' => 'getOldCredit',
        'new_credit' => 'getNewCredit',
        'ext_transaction_id' => 'getExtTransactionId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const RESULT_SUCCESS = 'success';
    const RESULT_RETRY = 'retry';
    const RESULT_ERROR = 'error';
    const TYPE_WALLET_CREDIT_RESPONSE = 'WalletCreditResponse';
    const TYPE_SELL_RESPONSE = 'SellResponse';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCESS,
            self::RESULT_RETRY,
            self::RESULT_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_WALLET_CREDIT_RESPONSE,
            self::TYPE_SELL_RESPONSE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['error_id'] = isset($data['error_id']) ? $data['error_id'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['old_credit'] = isset($data['old_credit']) ? $data['old_credit'] : null;
        $this->container['new_credit'] = isset($data['new_credit']) ? $data['new_credit'] : null;
        $this->container['ext_transaction_id'] = isset($data['ext_transaction_id']) ? $data['ext_transaction_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ticket_id'] === null) {
            $invalid_properties[] = "'ticket_id' can't be null";
        }
        if ($this->container['result'] === null) {
            $invalid_properties[] = "'result' can't be null";
        }
        $allowed_values = ["success", "retry", "error"];
        if (!in_array($this->container['result'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'result', must be one of 'success', 'retry', 'error'.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["WalletCreditResponse", "SellResponse"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'WalletCreditResponse', 'SellResponse'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ticket_id'] === null) {
            return false;
        }
        if ($this->container['result'] === null) {
            return false;
        }
        $allowed_values = ["success", "retry", "error"];
        if (!in_array($this->container['result'], $allowed_values)) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["WalletCreditResponse", "SellResponse"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets ticket_id
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     * @param int $ticket_id
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     * @param string $result Confirm success of operation for specific request. A duplicated, should be considered as a success operation, with no effect. If error, error_id, and error_message should provide additional details about error.
     * @return $this
     */
    public function setResult($result)
    {
        $allowed_values = array('success', 'retry', 'error');
        if ((!in_array($result, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'result', must be one of 'success', 'retry', 'error'");
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets error_id
     * @return int
     */
    public function getErrorId()
    {
        return $this->container['error_id'];
    }

    /**
     * Sets error_id
     * @param int $error_id Internal id of confirm error meesage.
     * @return $this
     */
    public function setErrorId($error_id)
    {
        $this->container['error_id'] = $error_id;

        return $this;
    }

    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     * @param string $error_message Readable description of confirm error.
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('WalletCreditResponse', 'SellResponse');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'WalletCreditResponse', 'SellResponse'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets old_credit
     * @return double
     */
    public function getOldCredit()
    {
        return $this->container['old_credit'];
    }

    /**
     * Sets old_credit
     * @param double $old_credit Amount of credit before transaction is applied. If empty, old_credit is estimated, on last credit cached on client system.
     * @return $this
     */
    public function setOldCredit($old_credit)
    {
        $this->container['old_credit'] = $old_credit;

        return $this;
    }

    /**
     * Gets new_credit
     * @return double
     */
    public function getNewCredit()
    {
        return $this->container['new_credit'];
    }

    /**
     * Sets new_credit
     * @param double $new_credit Amount of credit after transaction is applied. If empty, new_credit is estimated based on transaction request.
     * @return $this
     */
    public function setNewCredit($new_credit)
    {
        $this->container['new_credit'] = $new_credit;

        return $this;
    }

    /**
     * Gets ext_transaction_id
     * @return string
     */
    public function getExtTransactionId()
    {
        return $this->container['ext_transaction_id'];
    }

    /**
     * Sets ext_transaction_id
     * @param string $ext_transaction_id
     * @return $this
     */
    public function setExtTransactionId($ext_transaction_id)
    {
        $this->container['ext_transaction_id'] = $ext_transaction_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


