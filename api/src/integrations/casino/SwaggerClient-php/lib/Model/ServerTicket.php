<?php
/**
 * ServerTicket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ServerTicket Class Doc Comment
 *
 * @category    Class
 * @description Entity for recive ticket data from server
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServerTicket implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Server Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ticket_id' => 'int',
        'ext_id' => 'string',
        'ext_data' => 'object',
        'server_hash' => 'string',
        'ip' => 'string',
        'unit' => '\Swagger\Client\Model\AuthResultClient',
        'pay_staff' => '\Swagger\Client\Model\AuthResultClient',
        'sell_staff' => '\Swagger\Client\Model\AuthResultClient',
        'time_send' => '\DateTime',
        'time_register' => '\DateTime',
        'time_resolved' => '\DateTime',
        'time_cancelled' => '\DateTime',
        'time_paid' => '\DateTime',
        'time_closed_market' => '\DateTime',
        'status' => 'string',
        'currency' => '\Swagger\Client\Model\CurrencyConfiguration',
        'stake' => 'double',
        'stake_taxes' => 'double',
        'won_data' => '\Swagger\Client\Model\ServerTicketWonData',
        'winning_data' => '\Swagger\Client\Model\ServerTicketWinningData',
        'odd_settings_id' => 'int',
        'game_type' => '\Swagger\Client\Model\ServerTicketGameType',
        'details' => '\Swagger\Client\Model\Ticket_'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ticket_id' => 'ticketId',
        'ext_id' => 'extId',
        'ext_data' => 'extData',
        'server_hash' => 'serverHash',
        'ip' => 'ip',
        'unit' => 'unit',
        'pay_staff' => 'payStaff',
        'sell_staff' => 'sellStaff',
        'time_send' => 'timeSend',
        'time_register' => 'timeRegister',
        'time_resolved' => 'timeResolved',
        'time_cancelled' => 'timeCancelled',
        'time_paid' => 'timePaid',
        'time_closed_market' => 'timeClosedMarket',
        'status' => 'status',
        'currency' => 'currency',
        'stake' => 'stake',
        'stake_taxes' => 'stakeTaxes',
        'won_data' => 'wonData',
        'winning_data' => 'winningData',
        'odd_settings_id' => 'oddSettingsId',
        'game_type' => 'gameType',
        'details' => 'details'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ticket_id' => 'setTicketId',
        'ext_id' => 'setExtId',
        'ext_data' => 'setExtData',
        'server_hash' => 'setServerHash',
        'ip' => 'setIp',
        'unit' => 'setUnit',
        'pay_staff' => 'setPayStaff',
        'sell_staff' => 'setSellStaff',
        'time_send' => 'setTimeSend',
        'time_register' => 'setTimeRegister',
        'time_resolved' => 'setTimeResolved',
        'time_cancelled' => 'setTimeCancelled',
        'time_paid' => 'setTimePaid',
        'time_closed_market' => 'setTimeClosedMarket',
        'status' => 'setStatus',
        'currency' => 'setCurrency',
        'stake' => 'setStake',
        'stake_taxes' => 'setStakeTaxes',
        'won_data' => 'setWonData',
        'winning_data' => 'setWinningData',
        'odd_settings_id' => 'setOddSettingsId',
        'game_type' => 'setGameType',
        'details' => 'setDetails'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ticket_id' => 'getTicketId',
        'ext_id' => 'getExtId',
        'ext_data' => 'getExtData',
        'server_hash' => 'getServerHash',
        'ip' => 'getIp',
        'unit' => 'getUnit',
        'pay_staff' => 'getPayStaff',
        'sell_staff' => 'getSellStaff',
        'time_send' => 'getTimeSend',
        'time_register' => 'getTimeRegister',
        'time_resolved' => 'getTimeResolved',
        'time_cancelled' => 'getTimeCancelled',
        'time_paid' => 'getTimePaid',
        'time_closed_market' => 'getTimeClosedMarket',
        'status' => 'getStatus',
        'currency' => 'getCurrency',
        'stake' => 'getStake',
        'stake_taxes' => 'getStakeTaxes',
        'won_data' => 'getWonData',
        'winning_data' => 'getWinningData',
        'odd_settings_id' => 'getOddSettingsId',
        'game_type' => 'getGameType',
        'details' => 'getDetails'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_LOCKED = 'LOCKED';
    const STATUS_REJECTED = 'REJECTED';
    const STATUS_OPEN = 'OPEN';
    const STATUS_PENDING = 'PENDING';
    const STATUS_CANCELLING = 'CANCELLING';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_WON = 'WON';
    const STATUS_LOST = 'LOST';
    const STATUS_PAIDOUT = 'PAIDOUT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_LOCKED,
            self::STATUS_REJECTED,
            self::STATUS_OPEN,
            self::STATUS_PENDING,
            self::STATUS_CANCELLING,
            self::STATUS_CANCELLED,
            self::STATUS_WON,
            self::STATUS_LOST,
            self::STATUS_PAIDOUT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['ext_id'] = isset($data['ext_id']) ? $data['ext_id'] : null;
        $this->container['ext_data'] = isset($data['ext_data']) ? $data['ext_data'] : null;
        $this->container['server_hash'] = isset($data['server_hash']) ? $data['server_hash'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['pay_staff'] = isset($data['pay_staff']) ? $data['pay_staff'] : null;
        $this->container['sell_staff'] = isset($data['sell_staff']) ? $data['sell_staff'] : null;
        $this->container['time_send'] = isset($data['time_send']) ? $data['time_send'] : null;
        $this->container['time_register'] = isset($data['time_register']) ? $data['time_register'] : null;
        $this->container['time_resolved'] = isset($data['time_resolved']) ? $data['time_resolved'] : null;
        $this->container['time_cancelled'] = isset($data['time_cancelled']) ? $data['time_cancelled'] : null;
        $this->container['time_paid'] = isset($data['time_paid']) ? $data['time_paid'] : null;
        $this->container['time_closed_market'] = isset($data['time_closed_market']) ? $data['time_closed_market'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['stake'] = isset($data['stake']) ? $data['stake'] : null;
        $this->container['stake_taxes'] = isset($data['stake_taxes']) ? $data['stake_taxes'] : null;
        $this->container['won_data'] = isset($data['won_data']) ? $data['won_data'] : null;
        $this->container['winning_data'] = isset($data['winning_data']) ? $data['winning_data'] : null;
        $this->container['odd_settings_id'] = isset($data['odd_settings_id']) ? $data['odd_settings_id'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["LOCKED", "REJECTED", "OPEN", "PENDING", "CANCELLING", "CANCELLED", "WON", "LOST", "PAIDOUT"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'LOCKED', 'REJECTED', 'OPEN', 'PENDING', 'CANCELLING', 'CANCELLED', 'WON', 'LOST', 'PAIDOUT'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["LOCKED", "REJECTED", "OPEN", "PENDING", "CANCELLING", "CANCELLED", "WON", "LOST", "PAIDOUT"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets ticket_id
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     * @param int $ticket_id
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets ext_id
     * @return string
     */
    public function getExtId()
    {
        return $this->container['ext_id'];
    }

    /**
     * Sets ext_id
     * @param string $ext_id
     * @return $this
     */
    public function setExtId($ext_id)
    {
        $this->container['ext_id'] = $ext_id;

        return $this;
    }

    /**
     * Gets ext_data
     * @return object
     */
    public function getExtData()
    {
        return $this->container['ext_data'];
    }

    /**
     * Sets ext_data
     * @param object $ext_data
     * @return $this
     */
    public function setExtData($ext_data)
    {
        $this->container['ext_data'] = $ext_data;

        return $this;
    }

    /**
     * Gets server_hash
     * @return string
     */
    public function getServerHash()
    {
        return $this->container['server_hash'];
    }

    /**
     * Sets server_hash
     * @param string $server_hash
     * @return $this
     */
    public function setServerHash($server_hash)
    {
        $this->container['server_hash'] = $server_hash;

        return $this;
    }

    /**
     * Gets ip
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     * @param string $ip
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets unit
     * @return \Swagger\Client\Model\AuthResultClient
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     * @param \Swagger\Client\Model\AuthResultClient $unit
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets pay_staff
     * @return \Swagger\Client\Model\AuthResultClient
     */
    public function getPayStaff()
    {
        return $this->container['pay_staff'];
    }

    /**
     * Sets pay_staff
     * @param \Swagger\Client\Model\AuthResultClient $pay_staff
     * @return $this
     */
    public function setPayStaff($pay_staff)
    {
        $this->container['pay_staff'] = $pay_staff;

        return $this;
    }

    /**
     * Gets sell_staff
     * @return \Swagger\Client\Model\AuthResultClient
     */
    public function getSellStaff()
    {
        return $this->container['sell_staff'];
    }

    /**
     * Sets sell_staff
     * @param \Swagger\Client\Model\AuthResultClient $sell_staff
     * @return $this
     */
    public function setSellStaff($sell_staff)
    {
        $this->container['sell_staff'] = $sell_staff;

        return $this;
    }

    /**
     * Gets time_send
     * @return \DateTime
     */
    public function getTimeSend()
    {
        return $this->container['time_send'];
    }

    /**
     * Sets time_send
     * @param \DateTime $time_send Timestamp (on client side) timestamp in RFC3339 / ISO_8601 format. Precission in milliseconds. for current ticket, used as transaction id, as no more than 2 tickets are allowed to be created on same timestamp.
     * @return $this
     */
    public function setTimeSend($time_send)
    {
        $this->container['time_send'] = $time_send;

        return $this;
    }

    /**
     * Gets time_register
     * @return \DateTime
     */
    public function getTimeRegister()
    {
        return $this->container['time_register'];
    }

    /**
     * Sets time_register
     * @param \DateTime $time_register
     * @return $this
     */
    public function setTimeRegister($time_register)
    {
        $this->container['time_register'] = $time_register;

        return $this;
    }

    /**
     * Gets time_resolved
     * @return \DateTime
     */
    public function getTimeResolved()
    {
        return $this->container['time_resolved'];
    }

    /**
     * Sets time_resolved
     * @param \DateTime $time_resolved
     * @return $this
     */
    public function setTimeResolved($time_resolved)
    {
        $this->container['time_resolved'] = $time_resolved;

        return $this;
    }

    /**
     * Gets time_cancelled
     * @return \DateTime
     */
    public function getTimeCancelled()
    {
        return $this->container['time_cancelled'];
    }

    /**
     * Sets time_cancelled
     * @param \DateTime $time_cancelled
     * @return $this
     */
    public function setTimeCancelled($time_cancelled)
    {
        $this->container['time_cancelled'] = $time_cancelled;

        return $this;
    }

    /**
     * Gets time_paid
     * @return \DateTime
     */
    public function getTimePaid()
    {
        return $this->container['time_paid'];
    }

    /**
     * Sets time_paid
     * @param \DateTime $time_paid
     * @return $this
     */
    public function setTimePaid($time_paid)
    {
        $this->container['time_paid'] = $time_paid;

        return $this;
    }

    /**
     * Gets time_closed_market
     * @return \DateTime
     */
    public function getTimeClosedMarket()
    {
        return $this->container['time_closed_market'];
    }

    /**
     * Sets time_closed_market
     * @param \DateTime $time_closed_market
     * @return $this
     */
    public function setTimeClosedMarket($time_closed_market)
    {
        $this->container['time_closed_market'] = $time_closed_market;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('LOCKED', 'REJECTED', 'OPEN', 'PENDING', 'CANCELLING', 'CANCELLED', 'WON', 'LOST', 'PAIDOUT');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'LOCKED', 'REJECTED', 'OPEN', 'PENDING', 'CANCELLING', 'CANCELLED', 'WON', 'LOST', 'PAIDOUT'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency
     * @return \Swagger\Client\Model\CurrencyConfiguration
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Swagger\Client\Model\CurrencyConfiguration $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets stake
     * @return double
     */
    public function getStake()
    {
        return $this->container['stake'];
    }

    /**
     * Sets stake
     * @param double $stake Amount without taxes.
     * @return $this
     */
    public function setStake($stake)
    {
        $this->container['stake'] = $stake;

        return $this;
    }

    /**
     * Gets stake_taxes
     * @return double
     */
    public function getStakeTaxes()
    {
        return $this->container['stake_taxes'];
    }

    /**
     * Sets stake_taxes
     * @param double $stake_taxes Total amount already paid by player on stake, in addition to total stake amount.
     * @return $this
     */
    public function setStakeTaxes($stake_taxes)
    {
        $this->container['stake_taxes'] = $stake_taxes;

        return $this;
    }

    /**
     * Gets won_data
     * @return \Swagger\Client\Model\ServerTicketWonData
     */
    public function getWonData()
    {
        return $this->container['won_data'];
    }

    /**
     * Sets won_data
     * @param \Swagger\Client\Model\ServerTicketWonData $won_data
     * @return $this
     */
    public function setWonData($won_data)
    {
        $this->container['won_data'] = $won_data;

        return $this;
    }

    /**
     * Gets winning_data
     * @return \Swagger\Client\Model\ServerTicketWinningData
     */
    public function getWinningData()
    {
        return $this->container['winning_data'];
    }

    /**
     * Sets winning_data
     * @param \Swagger\Client\Model\ServerTicketWinningData $winning_data
     * @return $this
     */
    public function setWinningData($winning_data)
    {
        $this->container['winning_data'] = $winning_data;

        return $this;
    }

    /**
     * Gets odd_settings_id
     * @return int
     */
    public function getOddSettingsId()
    {
        return $this->container['odd_settings_id'];
    }

    /**
     * Sets odd_settings_id
     * @param int $odd_settings_id
     * @return $this
     */
    public function setOddSettingsId($odd_settings_id)
    {
        $this->container['odd_settings_id'] = $odd_settings_id;

        return $this;
    }

    /**
     * Gets game_type
     * @return \Swagger\Client\Model\ServerTicketGameType
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     * @param \Swagger\Client\Model\ServerTicketGameType $game_type
     * @return $this
     */
    public function setGameType($game_type)
    {
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets details
     * @return \Swagger\Client\Model\Ticket_
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     * @param \Swagger\Client\Model\Ticket_ $details
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


