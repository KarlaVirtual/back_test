<?php
/**
 * Stat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Stat Class Doc Comment
 *
 * @category    Class
 * @description Earning consolidate information per ticket.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Stat implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Stat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'parent_client_id' => 'int',
        'entity_id' => 'int',
        'timezone' => 'int',
        'user_played' => 'int',
        'currency_iso' => 'string',
        'stake' => 'double',
        'won' => 'double',
        'taxes' => 'double',
        'taxes_paid_out' => 'double',
        'jackpot_contribution' => 'double',
        'jackpot' => 'double',
        'megajackpot' => 'double',
        'stake_cancelled' => 'double',
        'paid' => 'double',
        'lapsed' => 'double',
        'played_tickets' => 'int',
        'cancelledtickets' => 'int',
        'won_tickets' => 'int',
        'playlist' => 'string',
        'gametype' => 'string',
        'jackpot_paid' => 'double',
        'megajackpot_paid' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'parent_client_id' => 'parentClientId',
        'entity_id' => 'entityId',
        'timezone' => 'timezone',
        'user_played' => 'userPlayed',
        'currency_iso' => 'currencyISO',
        'stake' => 'stake',
        'won' => 'won',
        'taxes' => 'taxes',
        'taxes_paid_out' => 'taxesPaidOut',
        'jackpot_contribution' => 'jackpotContribution',
        'jackpot' => 'jackpot',
        'megajackpot' => 'megajackpot',
        'stake_cancelled' => 'stakeCancelled',
        'paid' => 'paid',
        'lapsed' => 'lapsed',
        'played_tickets' => 'playedTickets',
        'cancelledtickets' => 'cancelledtickets',
        'won_tickets' => 'wonTickets',
        'playlist' => 'playlist',
        'gametype' => 'gametype',
        'jackpot_paid' => 'jackpotPaid',
        'megajackpot_paid' => 'megajackpotPaid'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'parent_client_id' => 'setParentClientId',
        'entity_id' => 'setEntityId',
        'timezone' => 'setTimezone',
        'user_played' => 'setUserPlayed',
        'currency_iso' => 'setCurrencyIso',
        'stake' => 'setStake',
        'won' => 'setWon',
        'taxes' => 'setTaxes',
        'taxes_paid_out' => 'setTaxesPaidOut',
        'jackpot_contribution' => 'setJackpotContribution',
        'jackpot' => 'setJackpot',
        'megajackpot' => 'setMegajackpot',
        'stake_cancelled' => 'setStakeCancelled',
        'paid' => 'setPaid',
        'lapsed' => 'setLapsed',
        'played_tickets' => 'setPlayedTickets',
        'cancelledtickets' => 'setCancelledtickets',
        'won_tickets' => 'setWonTickets',
        'playlist' => 'setPlaylist',
        'gametype' => 'setGametype',
        'jackpot_paid' => 'setJackpotPaid',
        'megajackpot_paid' => 'setMegajackpotPaid'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'parent_client_id' => 'getParentClientId',
        'entity_id' => 'getEntityId',
        'timezone' => 'getTimezone',
        'user_played' => 'getUserPlayed',
        'currency_iso' => 'getCurrencyIso',
        'stake' => 'getStake',
        'won' => 'getWon',
        'taxes' => 'getTaxes',
        'taxes_paid_out' => 'getTaxesPaidOut',
        'jackpot_contribution' => 'getJackpotContribution',
        'jackpot' => 'getJackpot',
        'megajackpot' => 'getMegajackpot',
        'stake_cancelled' => 'getStakeCancelled',
        'paid' => 'getPaid',
        'lapsed' => 'getLapsed',
        'played_tickets' => 'getPlayedTickets',
        'cancelledtickets' => 'getCancelledtickets',
        'won_tickets' => 'getWonTickets',
        'playlist' => 'getPlaylist',
        'gametype' => 'getGametype',
        'jackpot_paid' => 'getJackpotPaid',
        'megajackpot_paid' => 'getMegajackpotPaid'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['parent_client_id'] = isset($data['parent_client_id']) ? $data['parent_client_id'] : null;
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['user_played'] = isset($data['user_played']) ? $data['user_played'] : null;
        $this->container['currency_iso'] = isset($data['currency_iso']) ? $data['currency_iso'] : null;
        $this->container['stake'] = isset($data['stake']) ? $data['stake'] : null;
        $this->container['won'] = isset($data['won']) ? $data['won'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
        $this->container['taxes_paid_out'] = isset($data['taxes_paid_out']) ? $data['taxes_paid_out'] : null;
        $this->container['jackpot_contribution'] = isset($data['jackpot_contribution']) ? $data['jackpot_contribution'] : null;
        $this->container['jackpot'] = isset($data['jackpot']) ? $data['jackpot'] : null;
        $this->container['megajackpot'] = isset($data['megajackpot']) ? $data['megajackpot'] : null;
        $this->container['stake_cancelled'] = isset($data['stake_cancelled']) ? $data['stake_cancelled'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['lapsed'] = isset($data['lapsed']) ? $data['lapsed'] : null;
        $this->container['played_tickets'] = isset($data['played_tickets']) ? $data['played_tickets'] : null;
        $this->container['cancelledtickets'] = isset($data['cancelledtickets']) ? $data['cancelledtickets'] : null;
        $this->container['won_tickets'] = isset($data['won_tickets']) ? $data['won_tickets'] : null;
        $this->container['playlist'] = isset($data['playlist']) ? $data['playlist'] : null;
        $this->container['gametype'] = isset($data['gametype']) ? $data['gametype'] : null;
        $this->container['jackpot_paid'] = isset($data['jackpot_paid']) ? $data['jackpot_paid'] : null;
        $this->container['megajackpot_paid'] = isset($data['megajackpot_paid']) ? $data['megajackpot_paid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date Define the start
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date Set the start date like ISO format example > 2017-04-07T11:06:00.000Z'
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets parent_client_id
     * @return int
     */
    public function getParentClientId()
    {
        return $this->container['parent_client_id'];
    }

    /**
     * Sets parent_client_id
     * @param int $parent_client_id First parent that it´s Client flag activated.
     * @return $this
     */
    public function setParentClientId($parent_client_id)
    {
        $this->container['parent_client_id'] = $parent_client_id;

        return $this;
    }

    /**
     * Gets entity_id
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     * @param int $entity_id Set the entity Id value.
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets timezone
     * @return int
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param int $timezone Set the timezone diff numeric value.
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets user_played
     * @return int
     */
    public function getUserPlayed()
    {
        return $this->container['user_played'];
    }

    /**
     * Sets user_played
     * @param int $user_played id of entity user played.
     * @return $this
     */
    public function setUserPlayed($user_played)
    {
        $this->container['user_played'] = $user_played;

        return $this;
    }

    /**
     * Gets currency_iso
     * @return string
     */
    public function getCurrencyIso()
    {
        return $this->container['currency_iso'];
    }

    /**
     * Sets currency_iso
     * @param string $currency_iso Set the ISO currency code.
     * @return $this
     */
    public function setCurrencyIso($currency_iso)
    {
        $this->container['currency_iso'] = $currency_iso;

        return $this;
    }

    /**
     * Gets stake
     * @return double
     */
    public function getStake()
    {
        return $this->container['stake'];
    }

    /**
     * Sets stake
     * @param double $stake Set the value of stake.
     * @return $this
     */
    public function setStake($stake)
    {
        $this->container['stake'] = $stake;

        return $this;
    }

    /**
     * Gets won
     * @return double
     */
    public function getWon()
    {
        return $this->container['won'];
    }

    /**
     * Sets won
     * @param double $won Set the won prizes values.
     * @return $this
     */
    public function setWon($won)
    {
        $this->container['won'] = $won;

        return $this;
    }

    /**
     * Gets taxes
     * @return double
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     * @param double $taxes Set the taxes values.
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets taxes_paid_out
     * @return double
     */
    public function getTaxesPaidOut()
    {
        return $this->container['taxes_paid_out'];
    }

    /**
     * Sets taxes_paid_out
     * @param double $taxes_paid_out Set the paidout taxes.
     * @return $this
     */
    public function setTaxesPaidOut($taxes_paid_out)
    {
        $this->container['taxes_paid_out'] = $taxes_paid_out;

        return $this;
    }

    /**
     * Gets jackpot_contribution
     * @return double
     */
    public function getJackpotContribution()
    {
        return $this->container['jackpot_contribution'];
    }

    /**
     * Sets jackpot_contribution
     * @param double $jackpot_contribution Set the jackpot contribution.
     * @return $this
     */
    public function setJackpotContribution($jackpot_contribution)
    {
        $this->container['jackpot_contribution'] = $jackpot_contribution;

        return $this;
    }

    /**
     * Gets jackpot
     * @return double
     */
    public function getJackpot()
    {
        return $this->container['jackpot'];
    }

    /**
     * Sets jackpot
     * @param double $jackpot Set the jackpot value.
     * @return $this
     */
    public function setJackpot($jackpot)
    {
        $this->container['jackpot'] = $jackpot;

        return $this;
    }

    /**
     * Gets megajackpot
     * @return double
     */
    public function getMegajackpot()
    {
        return $this->container['megajackpot'];
    }

    /**
     * Sets megajackpot
     * @param double $megajackpot Set the megajackpot value.
     * @return $this
     */
    public function setMegajackpot($megajackpot)
    {
        $this->container['megajackpot'] = $megajackpot;

        return $this;
    }

    /**
     * Gets stake_cancelled
     * @return double
     */
    public function getStakeCancelled()
    {
        return $this->container['stake_cancelled'];
    }

    /**
     * Sets stake_cancelled
     * @param double $stake_cancelled Information about amount stake cancelled.
     * @return $this
     */
    public function setStakeCancelled($stake_cancelled)
    {
        $this->container['stake_cancelled'] = $stake_cancelled;

        return $this;
    }

    /**
     * Gets paid
     * @return double
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     * @param double $paid Information about amount paid.
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets lapsed
     * @return double
     */
    public function getLapsed()
    {
        return $this->container['lapsed'];
    }

    /**
     * Sets lapsed
     * @param double $lapsed Number of tickets that was won but not paid after X days.
     * @return $this
     */
    public function setLapsed($lapsed)
    {
        $this->container['lapsed'] = $lapsed;

        return $this;
    }

    /**
     * Gets played_tickets
     * @return int
     */
    public function getPlayedTickets()
    {
        return $this->container['played_tickets'];
    }

    /**
     * Sets played_tickets
     * @param int $played_tickets Information about number of played tickets.
     * @return $this
     */
    public function setPlayedTickets($played_tickets)
    {
        $this->container['played_tickets'] = $played_tickets;

        return $this;
    }

    /**
     * Gets cancelledtickets
     * @return int
     */
    public function getCancelledtickets()
    {
        return $this->container['cancelledtickets'];
    }

    /**
     * Sets cancelledtickets
     * @param int $cancelledtickets Information about number of cancelled tickets.
     * @return $this
     */
    public function setCancelledtickets($cancelledtickets)
    {
        $this->container['cancelledtickets'] = $cancelledtickets;

        return $this;
    }

    /**
     * Gets won_tickets
     * @return int
     */
    public function getWonTickets()
    {
        return $this->container['won_tickets'];
    }

    /**
     * Sets won_tickets
     * @param int $won_tickets Information about number of won tickets.
     * @return $this
     */
    public function setWonTickets($won_tickets)
    {
        $this->container['won_tickets'] = $won_tickets;

        return $this;
    }

    /**
     * Gets playlist
     * @return string
     */
    public function getPlaylist()
    {
        return $this->container['playlist'];
    }

    /**
     * Sets playlist
     * @param string $playlist Information about the playlist with events into the ticket.
     * @return $this
     */
    public function setPlaylist($playlist)
    {
        $this->container['playlist'] = $playlist;

        return $this;
    }

    /**
     * Gets gametype
     * @return string
     */
    public function getGametype()
    {
        return $this->container['gametype'];
    }

    /**
     * Sets gametype
     * @param string $gametype The game type of ticket tip.
     * @return $this
     */
    public function setGametype($gametype)
    {
        $this->container['gametype'] = $gametype;

        return $this;
    }

    /**
     * Gets jackpot_paid
     * @return double
     */
    public function getJackpotPaid()
    {
        return $this->container['jackpot_paid'];
    }

    /**
     * Sets jackpot_paid
     * @param double $jackpot_paid Information about the paid jackpot.
     * @return $this
     */
    public function setJackpotPaid($jackpot_paid)
    {
        $this->container['jackpot_paid'] = $jackpot_paid;

        return $this;
    }

    /**
     * Gets megajackpot_paid
     * @return double
     */
    public function getMegajackpotPaid()
    {
        return $this->container['megajackpot_paid'];
    }

    /**
     * Sets megajackpot_paid
     * @param double $megajackpot_paid Information about the paid megajackpot.
     * @return $this
     */
    public function setMegajackpotPaid($megajackpot_paid)
    {
        $this->container['megajackpot_paid'] = $megajackpot_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


