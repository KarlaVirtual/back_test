<?php
/**
 * TicketBet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TicketBet Class Doc Comment
 *
 * @category    Class
 * @description Information about Ticket bet.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TicketBet implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Ticket Bet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'market_id' => 'string',
        'odd_id' => 'string',
        'odd_value' => 'string',
        'stake' => 'double',
        'status' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'market_id' => 'marketId',
        'odd_id' => 'oddId',
        'odd_value' => 'oddValue',
        'stake' => 'stake',
        'status' => 'status'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'market_id' => 'setMarketId',
        'odd_id' => 'setOddId',
        'odd_value' => 'setOddValue',
        'stake' => 'setStake',
        'status' => 'setStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'market_id' => 'getMarketId',
        'odd_id' => 'getOddId',
        'odd_value' => 'getOddValue',
        'stake' => 'getStake',
        'status' => 'getStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_OPEN = 'OPEN';
    const STATUS_WON = 'WON';
    const STATUS_LOST = 'LOST';
    const STATUS_CANCEL = 'CANCEL';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_WON,
            self::STATUS_LOST,
            self::STATUS_CANCEL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['market_id'] = isset($data['market_id']) ? $data['market_id'] : null;
        $this->container['odd_id'] = isset($data['odd_id']) ? $data['odd_id'] : null;
        $this->container['odd_value'] = isset($data['odd_value']) ? $data['odd_value'] : null;
        $this->container['stake'] = isset($data['stake']) ? $data['stake'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["OPEN", "WON", "LOST", "CANCEL"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of 'OPEN', 'WON', 'LOST', 'CANCEL'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["OPEN", "WON", "LOST", "CANCEL"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets market_id
     * @return string
     */
    public function getMarketId()
    {
        return $this->container['market_id'];
    }

    /**
     * Sets market_id
     * @param string $market_id
     * @return $this
     */
    public function setMarketId($market_id)
    {
        $this->container['market_id'] = $market_id;

        return $this;
    }

    /**
     * Gets odd_id
     * @return string
     */
    public function getOddId()
    {
        return $this->container['odd_id'];
    }

    /**
     * Sets odd_id
     * @param string $odd_id
     * @return $this
     */
    public function setOddId($odd_id)
    {
        $this->container['odd_id'] = $odd_id;

        return $this;
    }

    /**
     * Gets odd_value
     * @return string
     */
    public function getOddValue()
    {
        return $this->container['odd_value'];
    }

    /**
     * Sets odd_value
     * @param string $odd_value
     * @return $this
     */
    public function setOddValue($odd_value)
    {
        $this->container['odd_value'] = $odd_value;

        return $this;
    }

    /**
     * Gets stake
     * @return double
     */
    public function getStake()
    {
        return $this->container['stake'];
    }

    /**
     * Sets stake
     * @param double $stake
     * @return $this
     */
    public function setStake($stake)
    {
        $this->container['stake'] = $stake;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status EventBlock types of all system   - OPEN   - WON   - LOST   - CANCEL
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('OPEN', 'WON', 'LOST', 'CANCEL');
        if (!is_null($status) && (!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'OPEN', 'WON', 'LOST', 'CANCEL'");
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


