<?php
/**
 * SellTicket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SellTicket Class Doc Comment
 *
 * @category    Class
 * @description Entity for send ticket data to server
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SellTicket implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SellTicket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_send' => '\DateTime',
        'sell_staff' => '\Swagger\Client\Model\AuthResultClient',
        'currency' => '\Swagger\Client\Model\CurrencyConfiguration',
        'odd_settings_id' => 'int',
        'game_type' => '\Swagger\Client\Model\ServerTicketGameType',
        'details' => '\Swagger\Client\Model\Ticket_'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'time_send' => 'timeSend',
        'sell_staff' => 'sellStaff',
        'currency' => 'currency',
        'odd_settings_id' => 'oddSettingsId',
        'game_type' => 'gameType',
        'details' => 'details'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'time_send' => 'setTimeSend',
        'sell_staff' => 'setSellStaff',
        'currency' => 'setCurrency',
        'odd_settings_id' => 'setOddSettingsId',
        'game_type' => 'setGameType',
        'details' => 'setDetails'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'time_send' => 'getTimeSend',
        'sell_staff' => 'getSellStaff',
        'currency' => 'getCurrency',
        'odd_settings_id' => 'getOddSettingsId',
        'game_type' => 'getGameType',
        'details' => 'getDetails'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_send'] = isset($data['time_send']) ? $data['time_send'] : null;
        $this->container['sell_staff'] = isset($data['sell_staff']) ? $data['sell_staff'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['odd_settings_id'] = isset($data['odd_settings_id']) ? $data['odd_settings_id'] : null;
        $this->container['game_type'] = isset($data['game_type']) ? $data['game_type'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets time_send
     * @return \DateTime
     */
    public function getTimeSend()
    {
        return $this->container['time_send'];
    }

    /**
     * Sets time_send
     * @param \DateTime $time_send Timestamp (on client side) timestamp in RFC3339 / ISO_8601 format. Precission in milliseconds. for current ticket, used as transaction id, as no more than 2 tickets are allowed to be created on same timestamp.
     * @return $this
     */
    public function setTimeSend($time_send)
    {
        $this->container['time_send'] = $time_send;

        return $this;
    }

    /**
     * Gets sell_staff
     * @return \Swagger\Client\Model\AuthResultClient
     */
    public function getSellStaff()
    {
        return $this->container['sell_staff'];
    }

    /**
     * Sets sell_staff
     * @param \Swagger\Client\Model\AuthResultClient $sell_staff
     * @return $this
     */
    public function setSellStaff($sell_staff)
    {
        $this->container['sell_staff'] = $sell_staff;

        return $this;
    }

    /**
     * Gets currency
     * @return \Swagger\Client\Model\CurrencyConfiguration
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Swagger\Client\Model\CurrencyConfiguration $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets odd_settings_id
     * @return int
     */
    public function getOddSettingsId()
    {
        return $this->container['odd_settings_id'];
    }

    /**
     * Sets odd_settings_id
     * @param int $odd_settings_id
     * @return $this
     */
    public function setOddSettingsId($odd_settings_id)
    {
        $this->container['odd_settings_id'] = $odd_settings_id;

        return $this;
    }

    /**
     * Gets game_type
     * @return \Swagger\Client\Model\ServerTicketGameType
     */
    public function getGameType()
    {
        return $this->container['game_type'];
    }

    /**
     * Sets game_type
     * @param \Swagger\Client\Model\ServerTicketGameType $game_type
     * @return $this
     */
    public function setGameType($game_type)
    {
        $this->container['game_type'] = $game_type;

        return $this;
    }

    /**
     * Gets details
     * @return \Swagger\Client\Model\Ticket_
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     * @param \Swagger\Client\Model\Ticket_ $details
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


