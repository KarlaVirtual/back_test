<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GoldenRace External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.3-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category    Class
 * @description Information about credit transaction operations.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_id' => 'int',
        'ext_transaction_id' => 'string',
        'entity_id' => 'int',
        'ext_id' => 'string',
        'ticket_id' => 'int',
        'date' => '\DateTime',
        'previous_credit' => 'double',
        'new_credit' => 'double',
        'change_credit' => 'double',
        'currency' => 'string',
        'description' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionId',
        'ext_transaction_id' => 'extTransactionId',
        'entity_id' => 'entityId',
        'ext_id' => 'extId',
        'ticket_id' => 'ticketId',
        'date' => 'date',
        'previous_credit' => 'previousCredit',
        'new_credit' => 'newCredit',
        'change_credit' => 'changeCredit',
        'currency' => 'currency',
        'description' => 'description'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'ext_transaction_id' => 'setExtTransactionId',
        'entity_id' => 'setEntityId',
        'ext_id' => 'setExtId',
        'ticket_id' => 'setTicketId',
        'date' => 'setDate',
        'previous_credit' => 'setPreviousCredit',
        'new_credit' => 'setNewCredit',
        'change_credit' => 'setChangeCredit',
        'currency' => 'setCurrency',
        'description' => 'setDescription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'ext_transaction_id' => 'getExtTransactionId',
        'entity_id' => 'getEntityId',
        'ext_id' => 'getExtId',
        'ticket_id' => 'getTicketId',
        'date' => 'getDate',
        'previous_credit' => 'getPreviousCredit',
        'new_credit' => 'getNewCredit',
        'change_credit' => 'getChangeCredit',
        'currency' => 'getCurrency',
        'description' => 'getDescription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CURRENCY_EUR = 'EUR';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_USD = 'USD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_INR = 'INR';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_THB = 'THB';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_EEK = 'EEK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_LTL = 'LTL';
    const CURRENCY_LVL = 'LVL';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_RON = 'RON';
    const CURRENCY_SKK = 'SKK';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_TRY = 'TRY';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_COP = 'COP';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_BIF = 'BIF';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_KES = 'KES';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_BYR = 'BYR';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_NAD = 'NAD';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_PRB = 'PRB';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_MUR = 'MUR';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_IEP = 'IEP';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_MGA = 'MGA';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_SRD = 'SRD';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_GHS = 'GHS';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_GMD = 'GMD';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_ZMW = 'ZMW';
    const CURRENCY_GOLD = 'GOLD';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_EUR,
            self::CURRENCY_GBP,
            self::CURRENCY_USD,
            self::CURRENCY_AUD,
            self::CURRENCY_BRL,
            self::CURRENCY_NZD,
            self::CURRENCY_CAD,
            self::CURRENCY_CHF,
            self::CURRENCY_CNY,
            self::CURRENCY_DKK,
            self::CURRENCY_HKD,
            self::CURRENCY_INR,
            self::CURRENCY_JPY,
            self::CURRENCY_KRW,
            self::CURRENCY_LKR,
            self::CURRENCY_MXN,
            self::CURRENCY_MYR,
            self::CURRENCY_NOK,
            self::CURRENCY_SEK,
            self::CURRENCY_SGD,
            self::CURRENCY_THB,
            self::CURRENCY_TWD,
            self::CURRENCY_VEF,
            self::CURRENCY_ZAR,
            self::CURRENCY_BGN,
            self::CURRENCY_CZK,
            self::CURRENCY_EEK,
            self::CURRENCY_HUF,
            self::CURRENCY_LTL,
            self::CURRENCY_LVL,
            self::CURRENCY_PLN,
            self::CURRENCY_RON,
            self::CURRENCY_SKK,
            self::CURRENCY_ISK,
            self::CURRENCY_HRK,
            self::CURRENCY_RUB,
            self::CURRENCY_TRY,
            self::CURRENCY_PHP,
            self::CURRENCY_COP,
            self::CURRENCY_ARS,
            self::CURRENCY_RWF,
            self::CURRENCY_BIF,
            self::CURRENCY_CRC,
            self::CURRENCY_KES,
            self::CURRENCY_PEN,
            self::CURRENCY_DOP,
            self::CURRENCY_BYR,
            self::CURRENCY_UAH,
            self::CURRENCY_NAD,
            self::CURRENCY_GEL,
            self::CURRENCY_PRB,
            self::CURRENCY_MDL,
            self::CURRENCY_KZT,
            self::CURRENCY_MUR,
            self::CURRENCY_KGS,
            self::CURRENCY_IEP,
            self::CURRENCY_MKD,
            self::CURRENCY_RSD,
            self::CURRENCY_AZN,
            self::CURRENCY_MGA,
            self::CURRENCY_BAM,
            self::CURRENCY_TJS,
            self::CURRENCY_ALL,
            self::CURRENCY_SRD,
            self::CURRENCY_NIO,
            self::CURRENCY_GHS,
            self::CURRENCY_XAF,
            self::CURRENCY_GMD,
            self::CURRENCY_IQD,
            self::CURRENCY_IRR,
            self::CURRENCY_NGN,
            self::CURRENCY_AMD,
            self::CURRENCY_HTG,
            self::CURRENCY_GTQ,
            self::CURRENCY_ZMW,
            self::CURRENCY_GOLD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['ext_transaction_id'] = isset($data['ext_transaction_id']) ? $data['ext_transaction_id'] : null;
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['ext_id'] = isset($data['ext_id']) ? $data['ext_id'] : null;
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['previous_credit'] = isset($data['previous_credit']) ? $data['previous_credit'] : null;
        $this->container['new_credit'] = isset($data['new_credit']) ? $data['new_credit'] : null;
        $this->container['change_credit'] = isset($data['change_credit']) ? $data['change_credit'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["EUR", "GBP", "USD", "AUD", "BRL", "NZD", "CAD", "CHF", "CNY", "DKK", "HKD", "INR", "JPY", "KRW", "LKR", "MXN", "MYR", "NOK", "SEK", "SGD", "THB", "TWD", "VEF", "ZAR", "BGN", "CZK", "EEK", "HUF", "LTL", "LVL", "PLN", "RON", "SKK", "ISK", "HRK", "RUB", "TRY", "PHP", "COP", "ARS", "RWF", "BIF", "CRC", "KES", "PEN", "DOP", "BYR", "UAH", "NAD", "GEL", "PRB", "MDL", "KZT", "MUR", "KGS", "IEP", "MKD", "RSD", "AZN", "MGA", "BAM", "TJS", "ALL", "SRD", "NIO", "GHS", "XAF", "GMD", "IQD", "IRR", "NGN", "AMD", "HTG", "GTQ", "ZMW", "GOLD"];
        if (!in_array($this->container['currency'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'currency', must be one of 'EUR', 'GBP', 'USD', 'AUD', 'BRL', 'NZD', 'CAD', 'CHF', 'CNY', 'DKK', 'HKD', 'INR', 'JPY', 'KRW', 'LKR', 'MXN', 'MYR', 'NOK', 'SEK', 'SGD', 'THB', 'TWD', 'VEF', 'ZAR', 'BGN', 'CZK', 'EEK', 'HUF', 'LTL', 'LVL', 'PLN', 'RON', 'SKK', 'ISK', 'HRK', 'RUB', 'TRY', 'PHP', 'COP', 'ARS', 'RWF', 'BIF', 'CRC', 'KES', 'PEN', 'DOP', 'BYR', 'UAH', 'NAD', 'GEL', 'PRB', 'MDL', 'KZT', 'MUR', 'KGS', 'IEP', 'MKD', 'RSD', 'AZN', 'MGA', 'BAM', 'TJS', 'ALL', 'SRD', 'NIO', 'GHS', 'XAF', 'GMD', 'IQD', 'IRR', 'NGN', 'AMD', 'HTG', 'GTQ', 'ZMW', 'GOLD'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["EUR", "GBP", "USD", "AUD", "BRL", "NZD", "CAD", "CHF", "CNY", "DKK", "HKD", "INR", "JPY", "KRW", "LKR", "MXN", "MYR", "NOK", "SEK", "SGD", "THB", "TWD", "VEF", "ZAR", "BGN", "CZK", "EEK", "HUF", "LTL", "LVL", "PLN", "RON", "SKK", "ISK", "HRK", "RUB", "TRY", "PHP", "COP", "ARS", "RWF", "BIF", "CRC", "KES", "PEN", "DOP", "BYR", "UAH", "NAD", "GEL", "PRB", "MDL", "KZT", "MUR", "KGS", "IEP", "MKD", "RSD", "AZN", "MGA", "BAM", "TJS", "ALL", "SRD", "NIO", "GHS", "XAF", "GMD", "IQD", "IRR", "NGN", "AMD", "HTG", "GTQ", "ZMW", "GOLD"];
        if (!in_array($this->container['currency'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets transaction_id
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     * @param int $transaction_id Transaction Id
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets ext_transaction_id
     * @return string
     */
    public function getExtTransactionId()
    {
        return $this->container['ext_transaction_id'];
    }

    /**
     * Sets ext_transaction_id
     * @param string $ext_transaction_id External transaction Id
     * @return $this
     */
    public function setExtTransactionId($ext_transaction_id)
    {
        $this->container['ext_transaction_id'] = $ext_transaction_id;

        return $this;
    }

    /**
     * Gets entity_id
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     * @param int $entity_id Entity Id , wich credit is modified
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets ext_id
     * @return string
     */
    public function getExtId()
    {
        return $this->container['ext_id'];
    }

    /**
     * Sets ext_id
     * @param string $ext_id External EntityId, wich credit is modified
     * @return $this
     */
    public function setExtId($ext_id)
    {
        $this->container['ext_id'] = $ext_id;

        return $this;
    }

    /**
     * Gets ticket_id
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     * @param int $ticket_id Entity Id , wich credit is modified
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date Date of transaction
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets previous_credit
     * @return double
     */
    public function getPreviousCredit()
    {
        return $this->container['previous_credit'];
    }

    /**
     * Sets previous_credit
     * @param double $previous_credit Previous Credit (Before Transaction)
     * @return $this
     */
    public function setPreviousCredit($previous_credit)
    {
        $this->container['previous_credit'] = $previous_credit;

        return $this;
    }

    /**
     * Gets new_credit
     * @return double
     */
    public function getNewCredit()
    {
        return $this->container['new_credit'];
    }

    /**
     * Sets new_credit
     * @param double $new_credit Resulting Credit (After Transaction)
     * @return $this
     */
    public function setNewCredit($new_credit)
    {
        $this->container['new_credit'] = $new_credit;

        return $this;
    }

    /**
     * Gets change_credit
     * @return double
     */
    public function getChangeCredit()
    {
        return $this->container['change_credit'];
    }

    /**
     * Sets change_credit
     * @param double $change_credit Amount of credit change requested on transaction.  In case that a wallet system is linked with a seamless wallet without transactional check,  the amounts on newCredit and previousCredit, are based on an incremental estimation,  and could not match 100% to changeCredit amount on the scenario of concurrent credit modifications.
     * @return $this
     */
    public function setChangeCredit($change_credit)
    {
        $this->container['change_credit'] = $change_credit;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency ISO Code
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowed_values = array('EUR', 'GBP', 'USD', 'AUD', 'BRL', 'NZD', 'CAD', 'CHF', 'CNY', 'DKK', 'HKD', 'INR', 'JPY', 'KRW', 'LKR', 'MXN', 'MYR', 'NOK', 'SEK', 'SGD', 'THB', 'TWD', 'VEF', 'ZAR', 'BGN', 'CZK', 'EEK', 'HUF', 'LTL', 'LVL', 'PLN', 'RON', 'SKK', 'ISK', 'HRK', 'RUB', 'TRY', 'PHP', 'COP', 'ARS', 'RWF', 'BIF', 'CRC', 'KES', 'PEN', 'DOP', 'BYR', 'UAH', 'NAD', 'GEL', 'PRB', 'MDL', 'KZT', 'MUR', 'KGS', 'IEP', 'MKD', 'RSD', 'AZN', 'MGA', 'BAM', 'TJS', 'ALL', 'SRD', 'NIO', 'GHS', 'XAF', 'GMD', 'IQD', 'IRR', 'NGN', 'AMD', 'HTG', 'GTQ', 'ZMW', 'GOLD');
        if (!is_null($currency) && (!in_array($currency, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'currency', must be one of 'EUR', 'GBP', 'USD', 'AUD', 'BRL', 'NZD', 'CAD', 'CHF', 'CNY', 'DKK', 'HKD', 'INR', 'JPY', 'KRW', 'LKR', 'MXN', 'MYR', 'NOK', 'SEK', 'SGD', 'THB', 'TWD', 'VEF', 'ZAR', 'BGN', 'CZK', 'EEK', 'HUF', 'LTL', 'LVL', 'PLN', 'RON', 'SKK', 'ISK', 'HRK', 'RUB', 'TRY', 'PHP', 'COP', 'ARS', 'RWF', 'BIF', 'CRC', 'KES', 'PEN', 'DOP', 'BYR', 'UAH', 'NAD', 'GEL', 'PRB', 'MDL', 'KZT', 'MUR', 'KGS', 'IEP', 'MKD', 'RSD', 'AZN', 'MGA', 'BAM', 'TJS', 'ALL', 'SRD', 'NIO', 'GHS', 'XAF', 'GMD', 'IQD', 'IRR', 'NGN', 'AMD', 'HTG', 'GTQ', 'ZMW', 'GOLD'");
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of Transaction.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


